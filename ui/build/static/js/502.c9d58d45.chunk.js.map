{"version":3,"file":"static/js/502.c9d58d45.chunk.js","mappings":"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","sources":["../node_modules/vscode-jsonrpc/lib/common/cancellation.js","../node_modules/vscode-jsonrpc/lib/common/events.js","../node_modules/vscode-jsonrpc/lib/common/is.js","../node_modules/vscode-jsonrpc/lib/common/ral.js","../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-HTBTGXD4.mjs","../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-NM56GJBF.mjs","../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-O2VHLUZY.mjs","../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-QE2ZKFLT.mjs","../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-U3TRWOCV.mjs","../node_modules/@mermaid-js/parser/dist/mermaid-parser.core.mjs","../node_modules/langium/src/syntax-tree.ts","../node_modules/langium/src/utils/stream.ts","../node_modules/langium/src/utils/cst-utils.ts","../node_modules/langium/src/utils/errors.ts","../node_modules/langium/src/languages/generated/ast.ts","../node_modules/langium/src/utils/ast-utils.ts","../node_modules/@chevrotain/regexp-to-ast/src/utils.ts","../node_modules/@chevrotain/regexp-to-ast/src/character-classes.ts","../node_modules/@chevrotain/regexp-to-ast/src/regexp-parser.ts","../node_modules/@chevrotain/regexp-to-ast/src/base-regexp-visitor.ts","../node_modules/langium/src/utils/regexp-utils.ts","../node_modules/langium/src/utils/grammar-utils.ts","../node_modules/@chevrotain/utils/src/to-fast-properties.ts","../node_modules/lodash-es/_baseSlice.js","../node_modules/lodash-es/drop.js","../node_modules/lodash-es/assign.js","../node_modules/lodash-es/pickBy.js","../node_modules/lodash-es/_baseIsRegExp.js","../node_modules/lodash-es/isRegExp.js","../node_modules/@chevrotain/gast/src/model.ts","../node_modules/@chevrotain/gast/src/visitor.ts","../node_modules/lodash-es/_baseSome.js","../node_modules/lodash-es/some.js","../node_modules/lodash-es/includes.js","../node_modules/lodash-es/_arrayEvery.js","../node_modules/lodash-es/_baseEvery.js","../node_modules/lodash-es/every.js","../node_modules/@chevrotain/gast/src/helpers.ts","../node_modules/chevrotain/src/parse/grammar/rest.ts","../node_modules/lodash-es/uniq.js","../node_modules/chevrotain/src/parse/grammar/first.ts","../node_modules/chevrotain/src/parse/constants.ts","../node_modules/chevrotain/src/parse/grammar/follow.ts","../node_modules/lodash-es/negate.js","../node_modules/lodash-es/reject.js","../node_modules/lodash-es/indexOf.js","../node_modules/lodash-es/_baseDifference.js","../node_modules/lodash-es/difference.js","../node_modules/lodash-es/compact.js","../node_modules/lodash-es/head.js","../node_modules/@chevrotain/utils/src/print.ts","../node_modules/chevrotain/src/scan/reg_exp_parser.ts","../node_modules/chevrotain/src/scan/reg_exp.ts","../node_modules/chevrotain/src/scan/lexer.ts","../node_modules/@chevrotain/utils/src/timer.ts","../node_modules/chevrotain/src/scan/tokens.ts","../node_modules/chevrotain/src/scan/lexer_errors_public.ts","../node_modules/chevrotain/src/scan/lexer_public.ts","../node_modules/chevrotain/src/scan/tokens_public.ts","../node_modules/chevrotain/src/parse/errors_public.ts","../node_modules/chevrotain/src/parse/grammar/resolver.ts","../node_modules/lodash-es/flatMap.js","../node_modules/lodash-es/_arrayAggregator.js","../node_modules/lodash-es/_baseAggregator.js","../node_modules/lodash-es/_createAggregator.js","../node_modules/lodash-es/groupBy.js","../node_modules/lodash-es/dropRight.js","../node_modules/chevrotain/src/parse/grammar/interpreter.ts","../node_modules/chevrotain/src/parse/grammar/lookahead.ts","../node_modules/chevrotain/src/parse/grammar/checks.ts","../node_modules/chevrotain/src/parse/grammar/gast/gast_resolver_public.ts","../node_modules/chevrotain/src/parse/exceptions_public.ts","../node_modules/chevrotain/src/parse/parser/traits/recoverable.ts","../node_modules/chevrotain/src/parse/grammar/keys.ts","../node_modules/chevrotain/src/parse/grammar/llk_lookahead.ts","../node_modules/chevrotain/src/parse/parser/traits/looksahead.ts","../node_modules/chevrotain/src/parse/cst/cst.ts","../node_modules/chevrotain/src/lang/lang_extensions.ts","../node_modules/chevrotain/src/parse/cst/cst_visitor.ts","../node_modules/chevrotain/src/parse/parser/traits/gast_recorder.ts","../node_modules/chevrotain/src/parse/parser/parser.ts","../node_modules/chevrotain/src/parse/parser/utils/apply_mixins.ts","../node_modules/chevrotain/src/parse/parser/traits/tree_builder.ts","../node_modules/chevrotain/src/parse/parser/traits/lexer_adapter.ts","../node_modules/chevrotain/src/parse/parser/traits/recognizer_engine.ts","../node_modules/chevrotain/src/parse/parser/traits/recognizer_api.ts","../node_modules/chevrotain/src/parse/parser/traits/error_handler.ts","../node_modules/chevrotain/src/parse/parser/traits/context_assist.ts","../node_modules/chevrotain/src/parse/parser/traits/perf_tracer.ts","../node_modules/chevrotain-allstar/src/atn.ts","../node_modules/chevrotain-allstar/src/dfa.ts","../node_modules/lodash-es/uniqBy.js","../node_modules/chevrotain-allstar/src/all-star-lookahead.ts","../node_modules/vscode-languageserver-types/lib/esm/main.js","../node_modules/langium/src/parser/cst-node-builder.ts","../node_modules/langium/src/parser/langium-parser.ts","../node_modules/langium/src/parser/parser-builder-base.ts","../node_modules/langium/src/parser/langium-parser-builder.ts","../node_modules/langium/src/parser/token-builder.ts","../node_modules/langium/src/parser/value-converter.ts","../node_modules/langium/src/utils/promise-utils.ts","../node_modules/vscode-languageserver-textdocument/lib/esm/main.js","../LIB/node_modules/path-browserify/index.js","../LIB/webpack/bootstrap","../LIB/webpack/runtime/define property getters","../LIB/webpack/runtime/hasOwnProperty shorthand","../LIB/webpack/runtime/make namespace object","../LIB/src/platform.ts","../LIB/src/uri.ts","../LIB/src/utils.ts","../node_modules/langium/src/utils/uri-utils.ts","../node_modules/langium/src/workspace/documents.ts","../node_modules/langium/src/references/linker.ts","../node_modules/langium/src/references/name-provider.ts","../node_modules/langium/src/references/references.ts","../node_modules/langium/src/utils/collections.ts","../node_modules/langium/src/references/scope-computation.ts","../node_modules/langium/src/references/scope.ts","../node_modules/langium/src/utils/caching.ts","../node_modules/langium/src/references/scope-provider.ts","../node_modules/langium/src/serializer/json-serializer.ts","../node_modules/langium/src/service-registry.ts","../node_modules/langium/src/validation/validation-registry.ts","../node_modules/langium/src/validation/document-validator.ts","../node_modules/langium/src/utils/disposable.ts","../node_modules/langium/src/workspace/ast-descriptions.ts","../node_modules/langium/src/workspace/ast-node-locator.ts","../node_modules/langium/src/workspace/configuration.ts","../node_modules/langium/src/workspace/document-builder.ts","../node_modules/langium/src/workspace/index-manager.ts","../node_modules/langium/src/workspace/workspace-manager.ts","../node_modules/langium/src/parser/lexer.ts","../node_modules/langium/src/documentation/jsdoc.ts","../node_modules/langium/src/documentation/documentation-provider.ts","../node_modules/langium/src/documentation/comment-provider.ts","../node_modules/langium/src/dependency-injection.ts","../node_modules/langium/src/parser/async-parser.ts","../node_modules/langium/src/workspace/workspace-lock.ts","../node_modules/langium/src/serializer/hydrator.ts","../node_modules/langium/src/default-module.ts","../node_modules/langium/src/languages/grammar-config.ts","../node_modules/langium/src/parser/completion-parser-builder.ts","../node_modules/langium/src/workspace/file-system-provider.ts","../node_modules/langium/src/utils/grammar-loader.ts","../node_modules/lodash-es/_baseExtremum.js","../node_modules/lodash-es/_baseLt.js","../node_modules/lodash-es/_baseMap.js","../node_modules/lodash-es/_baseSet.js","../node_modules/lodash-es/_basePickBy.js","../node_modules/lodash-es/clone.js","../node_modules/lodash-es/defaults.js","../node_modules/lodash-es/_createFind.js","../node_modules/lodash-es/findIndex.js","../node_modules/lodash-es/find.js","../node_modules/lodash-es/flatten.js","../node_modules/lodash-es/isString.js","../node_modules/lodash-es/last.js","../node_modules/lodash-es/map.js","../node_modules/lodash-es/min.js","../node_modules/lodash-es/_trimmedEndIndex.js","../node_modules/lodash-es/_baseTrim.js","../node_modules/lodash-es/toNumber.js","../node_modules/lodash-es/toFinite.js","../node_modules/lodash-es/toInteger.js"],"sourcesContent":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CancellationTokenSource = exports.CancellationToken = void 0;\nconst ral_1 = require(\"./ral\");\nconst Is = require(\"./is\");\nconst events_1 = require(\"./events\");\nvar CancellationToken;\n(function (CancellationToken) {\n    CancellationToken.None = Object.freeze({\n        isCancellationRequested: false,\n        onCancellationRequested: events_1.Event.None\n    });\n    CancellationToken.Cancelled = Object.freeze({\n        isCancellationRequested: true,\n        onCancellationRequested: events_1.Event.None\n    });\n    function is(value) {\n        const candidate = value;\n        return candidate && (candidate === CancellationToken.None\n            || candidate === CancellationToken.Cancelled\n            || (Is.boolean(candidate.isCancellationRequested) && !!candidate.onCancellationRequested));\n    }\n    CancellationToken.is = is;\n})(CancellationToken || (exports.CancellationToken = CancellationToken = {}));\nconst shortcutEvent = Object.freeze(function (callback, context) {\n    const handle = (0, ral_1.default)().timer.setTimeout(callback.bind(context), 0);\n    return { dispose() { handle.dispose(); } };\n});\nclass MutableToken {\n    constructor() {\n        this._isCancelled = false;\n    }\n    cancel() {\n        if (!this._isCancelled) {\n            this._isCancelled = true;\n            if (this._emitter) {\n                this._emitter.fire(undefined);\n                this.dispose();\n            }\n        }\n    }\n    get isCancellationRequested() {\n        return this._isCancelled;\n    }\n    get onCancellationRequested() {\n        if (this._isCancelled) {\n            return shortcutEvent;\n        }\n        if (!this._emitter) {\n            this._emitter = new events_1.Emitter();\n        }\n        return this._emitter.event;\n    }\n    dispose() {\n        if (this._emitter) {\n            this._emitter.dispose();\n            this._emitter = undefined;\n        }\n    }\n}\nclass CancellationTokenSource {\n    get token() {\n        if (!this._token) {\n            // be lazy and create the token only when\n            // actually needed\n            this._token = new MutableToken();\n        }\n        return this._token;\n    }\n    cancel() {\n        if (!this._token) {\n            // save an object by returning the default\n            // cancelled token when cancellation happens\n            // before someone asks for the token\n            this._token = CancellationToken.Cancelled;\n        }\n        else {\n            this._token.cancel();\n        }\n    }\n    dispose() {\n        if (!this._token) {\n            // ensure to initialize with an empty token if we had none\n            this._token = CancellationToken.None;\n        }\n        else if (this._token instanceof MutableToken) {\n            // actually dispose\n            this._token.dispose();\n        }\n    }\n}\nexports.CancellationTokenSource = CancellationTokenSource;\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Emitter = exports.Event = void 0;\nconst ral_1 = require(\"./ral\");\nvar Event;\n(function (Event) {\n    const _disposable = { dispose() { } };\n    Event.None = function () { return _disposable; };\n})(Event || (exports.Event = Event = {}));\nclass CallbackList {\n    add(callback, context = null, bucket) {\n        if (!this._callbacks) {\n            this._callbacks = [];\n            this._contexts = [];\n        }\n        this._callbacks.push(callback);\n        this._contexts.push(context);\n        if (Array.isArray(bucket)) {\n            bucket.push({ dispose: () => this.remove(callback, context) });\n        }\n    }\n    remove(callback, context = null) {\n        if (!this._callbacks) {\n            return;\n        }\n        let foundCallbackWithDifferentContext = false;\n        for (let i = 0, len = this._callbacks.length; i < len; i++) {\n            if (this._callbacks[i] === callback) {\n                if (this._contexts[i] === context) {\n                    // callback & context match => remove it\n                    this._callbacks.splice(i, 1);\n                    this._contexts.splice(i, 1);\n                    return;\n                }\n                else {\n                    foundCallbackWithDifferentContext = true;\n                }\n            }\n        }\n        if (foundCallbackWithDifferentContext) {\n            throw new Error('When adding a listener with a context, you should remove it with the same context');\n        }\n    }\n    invoke(...args) {\n        if (!this._callbacks) {\n            return [];\n        }\n        const ret = [], callbacks = this._callbacks.slice(0), contexts = this._contexts.slice(0);\n        for (let i = 0, len = callbacks.length; i < len; i++) {\n            try {\n                ret.push(callbacks[i].apply(contexts[i], args));\n            }\n            catch (e) {\n                // eslint-disable-next-line no-console\n                (0, ral_1.default)().console.error(e);\n            }\n        }\n        return ret;\n    }\n    isEmpty() {\n        return !this._callbacks || this._callbacks.length === 0;\n    }\n    dispose() {\n        this._callbacks = undefined;\n        this._contexts = undefined;\n    }\n}\nclass Emitter {\n    constructor(_options) {\n        this._options = _options;\n    }\n    /**\n     * For the public to allow to subscribe\n     * to events from this Emitter\n     */\n    get event() {\n        if (!this._event) {\n            this._event = (listener, thisArgs, disposables) => {\n                if (!this._callbacks) {\n                    this._callbacks = new CallbackList();\n                }\n                if (this._options && this._options.onFirstListenerAdd && this._callbacks.isEmpty()) {\n                    this._options.onFirstListenerAdd(this);\n                }\n                this._callbacks.add(listener, thisArgs);\n                const result = {\n                    dispose: () => {\n                        if (!this._callbacks) {\n                            // disposable is disposed after emitter is disposed.\n                            return;\n                        }\n                        this._callbacks.remove(listener, thisArgs);\n                        result.dispose = Emitter._noop;\n                        if (this._options && this._options.onLastListenerRemove && this._callbacks.isEmpty()) {\n                            this._options.onLastListenerRemove(this);\n                        }\n                    }\n                };\n                if (Array.isArray(disposables)) {\n                    disposables.push(result);\n                }\n                return result;\n            };\n        }\n        return this._event;\n    }\n    /**\n     * To be kept private to fire an event to\n     * subscribers\n     */\n    fire(event) {\n        if (this._callbacks) {\n            this._callbacks.invoke.call(this._callbacks, event);\n        }\n    }\n    dispose() {\n        if (this._callbacks) {\n            this._callbacks.dispose();\n            this._callbacks = undefined;\n        }\n    }\n}\nexports.Emitter = Emitter;\nEmitter._noop = function () { };\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.stringArray = exports.array = exports.func = exports.error = exports.number = exports.string = exports.boolean = void 0;\nfunction boolean(value) {\n    return value === true || value === false;\n}\nexports.boolean = boolean;\nfunction string(value) {\n    return typeof value === 'string' || value instanceof String;\n}\nexports.string = string;\nfunction number(value) {\n    return typeof value === 'number' || value instanceof Number;\n}\nexports.number = number;\nfunction error(value) {\n    return value instanceof Error;\n}\nexports.error = error;\nfunction func(value) {\n    return typeof value === 'function';\n}\nexports.func = func;\nfunction array(value) {\n    return Array.isArray(value);\n}\nexports.array = array;\nfunction stringArray(value) {\n    return array(value) && value.every(elem => string(elem));\n}\nexports.stringArray = stringArray;\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet _ral;\nfunction RAL() {\n    if (_ral === undefined) {\n        throw new Error(`No runtime abstraction layer installed`);\n    }\n    return _ral;\n}\n(function (RAL) {\n    function install(ral) {\n        if (ral === undefined) {\n            throw new Error(`No runtime abstraction layer provided`);\n        }\n        _ral = ral;\n    }\n    RAL.install = install;\n})(RAL || (RAL = {}));\nexports.default = RAL;\n","import {\n  AbstractMermaidTokenBuilder,\n  CommonValueConverter,\n  MermaidGeneratedSharedModule,\n  PacketGeneratedModule,\n  __name\n} from \"./chunk-U3TRWOCV.mjs\";\n\n// src/language/packet/module.ts\nimport {\n  EmptyFileSystem,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  inject\n} from \"langium\";\n\n// src/language/packet/tokenBuilder.ts\nvar PacketTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"PacketTokenBuilder\");\n  }\n  constructor() {\n    super([\"packet-beta\"]);\n  }\n};\n\n// src/language/packet/module.ts\nvar PacketModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new PacketTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new CommonValueConverter(), \"ValueConverter\")\n  }\n};\nfunction createPacketServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const Packet = inject(\n    createDefaultCoreModule({ shared }),\n    PacketGeneratedModule,\n    PacketModule\n  );\n  shared.ServiceRegistry.register(Packet);\n  return { shared, Packet };\n}\n__name(createPacketServices, \"createPacketServices\");\n\nexport {\n  PacketModule,\n  createPacketServices\n};\n","import {\n  AbstractMermaidTokenBuilder,\n  AbstractMermaidValueConverter,\n  MermaidGeneratedSharedModule,\n  PieGeneratedModule,\n  __name\n} from \"./chunk-U3TRWOCV.mjs\";\n\n// src/language/pie/module.ts\nimport {\n  EmptyFileSystem,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  inject\n} from \"langium\";\n\n// src/language/pie/tokenBuilder.ts\nvar PieTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"PieTokenBuilder\");\n  }\n  constructor() {\n    super([\"pie\", \"showData\"]);\n  }\n};\n\n// src/language/pie/valueConverter.ts\nvar PieValueConverter = class extends AbstractMermaidValueConverter {\n  static {\n    __name(this, \"PieValueConverter\");\n  }\n  runCustomConverter(rule, input, _cstNode) {\n    if (rule.name !== \"PIE_SECTION_LABEL\") {\n      return void 0;\n    }\n    return input.replace(/\"/g, \"\").trim();\n  }\n};\n\n// src/language/pie/module.ts\nvar PieModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new PieTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new PieValueConverter(), \"ValueConverter\")\n  }\n};\nfunction createPieServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const Pie = inject(\n    createDefaultCoreModule({ shared }),\n    PieGeneratedModule,\n    PieModule\n  );\n  shared.ServiceRegistry.register(Pie);\n  return { shared, Pie };\n}\n__name(createPieServices, \"createPieServices\");\n\nexport {\n  PieModule,\n  createPieServices\n};\n","import {\n  AbstractMermaidTokenBuilder,\n  CommonValueConverter,\n  InfoGeneratedModule,\n  MermaidGeneratedSharedModule,\n  __name\n} from \"./chunk-U3TRWOCV.mjs\";\n\n// src/language/info/module.ts\nimport {\n  EmptyFileSystem,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  inject\n} from \"langium\";\n\n// src/language/info/tokenBuilder.ts\nvar InfoTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"InfoTokenBuilder\");\n  }\n  constructor() {\n    super([\"info\", \"showInfo\"]);\n  }\n};\n\n// src/language/info/module.ts\nvar InfoModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new InfoTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new CommonValueConverter(), \"ValueConverter\")\n  }\n};\nfunction createInfoServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const Info = inject(\n    createDefaultCoreModule({ shared }),\n    InfoGeneratedModule,\n    InfoModule\n  );\n  shared.ServiceRegistry.register(Info);\n  return { shared, Info };\n}\n__name(createInfoServices, \"createInfoServices\");\n\nexport {\n  InfoModule,\n  createInfoServices\n};\n","import {\n  AbstractMermaidTokenBuilder,\n  CommonValueConverter,\n  GitGraphGeneratedModule,\n  MermaidGeneratedSharedModule,\n  __name\n} from \"./chunk-U3TRWOCV.mjs\";\n\n// src/language/gitGraph/module.ts\nimport {\n  inject,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  EmptyFileSystem\n} from \"langium\";\n\n// src/language/gitGraph/tokenBuilder.ts\nvar GitGraphTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"GitGraphTokenBuilder\");\n  }\n  constructor() {\n    super([\"gitGraph\"]);\n  }\n};\n\n// src/language/gitGraph/module.ts\nvar GitGraphModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new GitGraphTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new CommonValueConverter(), \"ValueConverter\")\n  }\n};\nfunction createGitGraphServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const GitGraph = inject(\n    createDefaultCoreModule({ shared }),\n    GitGraphGeneratedModule,\n    GitGraphModule\n  );\n  shared.ServiceRegistry.register(GitGraph);\n  return { shared, GitGraph };\n}\n__name(createGitGraphServices, \"createGitGraphServices\");\n\nexport {\n  GitGraphModule,\n  createGitGraphServices\n};\n","var __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\n\n// src/language/generated/ast.ts\nimport { AbstractAstReflection } from \"langium\";\nvar Statement = \"Statement\";\nvar Branch = \"Branch\";\nfunction isBranch(item) {\n  return reflection.isInstance(item, Branch);\n}\n__name(isBranch, \"isBranch\");\nvar Checkout = \"Checkout\";\nvar CherryPicking = \"CherryPicking\";\nvar Commit = \"Commit\";\nfunction isCommit(item) {\n  return reflection.isInstance(item, Commit);\n}\n__name(isCommit, \"isCommit\");\nvar Common = \"Common\";\nfunction isCommon(item) {\n  return reflection.isInstance(item, Common);\n}\n__name(isCommon, \"isCommon\");\nvar GitGraph = \"GitGraph\";\nfunction isGitGraph(item) {\n  return reflection.isInstance(item, GitGraph);\n}\n__name(isGitGraph, \"isGitGraph\");\nvar Info = \"Info\";\nfunction isInfo(item) {\n  return reflection.isInstance(item, Info);\n}\n__name(isInfo, \"isInfo\");\nvar Merge = \"Merge\";\nfunction isMerge(item) {\n  return reflection.isInstance(item, Merge);\n}\n__name(isMerge, \"isMerge\");\nvar Packet = \"Packet\";\nfunction isPacket(item) {\n  return reflection.isInstance(item, Packet);\n}\n__name(isPacket, \"isPacket\");\nvar PacketBlock = \"PacketBlock\";\nfunction isPacketBlock(item) {\n  return reflection.isInstance(item, PacketBlock);\n}\n__name(isPacketBlock, \"isPacketBlock\");\nvar Pie = \"Pie\";\nfunction isPie(item) {\n  return reflection.isInstance(item, Pie);\n}\n__name(isPie, \"isPie\");\nvar PieSection = \"PieSection\";\nfunction isPieSection(item) {\n  return reflection.isInstance(item, PieSection);\n}\n__name(isPieSection, \"isPieSection\");\nvar Direction = \"Direction\";\nvar MermaidAstReflection = class extends AbstractAstReflection {\n  static {\n    __name(this, \"MermaidAstReflection\");\n  }\n  getAllTypes() {\n    return [\"Branch\", \"Checkout\", \"CherryPicking\", \"Commit\", \"Common\", \"Direction\", \"GitGraph\", \"Info\", \"Merge\", \"Packet\", \"PacketBlock\", \"Pie\", \"PieSection\", \"Statement\"];\n  }\n  computeIsSubtype(subtype, supertype) {\n    switch (subtype) {\n      case Branch:\n      case Checkout:\n      case CherryPicking:\n      case Commit:\n      case Merge: {\n        return this.isSubtype(Statement, supertype);\n      }\n      case Direction: {\n        return this.isSubtype(GitGraph, supertype);\n      }\n      default: {\n        return false;\n      }\n    }\n  }\n  getReferenceType(refInfo) {\n    const referenceId = `${refInfo.container.$type}:${refInfo.property}`;\n    switch (referenceId) {\n      default: {\n        throw new Error(`${referenceId} is not a valid reference id.`);\n      }\n    }\n  }\n  getTypeMetaData(type) {\n    switch (type) {\n      case \"Branch\": {\n        return {\n          name: \"Branch\",\n          properties: [\n            { name: \"name\" },\n            { name: \"order\" }\n          ]\n        };\n      }\n      case \"Checkout\": {\n        return {\n          name: \"Checkout\",\n          properties: [\n            { name: \"branch\" }\n          ]\n        };\n      }\n      case \"CherryPicking\": {\n        return {\n          name: \"CherryPicking\",\n          properties: [\n            { name: \"id\" },\n            { name: \"parent\" },\n            { name: \"tags\", defaultValue: [] }\n          ]\n        };\n      }\n      case \"Commit\": {\n        return {\n          name: \"Commit\",\n          properties: [\n            { name: \"id\" },\n            { name: \"message\" },\n            { name: \"tags\", defaultValue: [] },\n            { name: \"type\" }\n          ]\n        };\n      }\n      case \"Common\": {\n        return {\n          name: \"Common\",\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case \"GitGraph\": {\n        return {\n          name: \"GitGraph\",\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"statements\", defaultValue: [] },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case \"Info\": {\n        return {\n          name: \"Info\",\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case \"Merge\": {\n        return {\n          name: \"Merge\",\n          properties: [\n            { name: \"branch\" },\n            { name: \"id\" },\n            { name: \"tags\", defaultValue: [] },\n            { name: \"type\" }\n          ]\n        };\n      }\n      case \"Packet\": {\n        return {\n          name: \"Packet\",\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"blocks\", defaultValue: [] },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case \"PacketBlock\": {\n        return {\n          name: \"PacketBlock\",\n          properties: [\n            { name: \"end\" },\n            { name: \"label\" },\n            { name: \"start\" }\n          ]\n        };\n      }\n      case \"Pie\": {\n        return {\n          name: \"Pie\",\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"sections\", defaultValue: [] },\n            { name: \"showData\", defaultValue: false },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case \"PieSection\": {\n        return {\n          name: \"PieSection\",\n          properties: [\n            { name: \"label\" },\n            { name: \"value\" }\n          ]\n        };\n      }\n      case \"Direction\": {\n        return {\n          name: \"Direction\",\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"dir\" },\n            { name: \"statements\", defaultValue: [] },\n            { name: \"title\" }\n          ]\n        };\n      }\n      default: {\n        return {\n          name: type,\n          properties: []\n        };\n      }\n    }\n  }\n};\nvar reflection = new MermaidAstReflection();\n\n// src/language/generated/grammar.ts\nimport { loadGrammarFromJson } from \"langium\";\nvar loadedInfoGrammar;\nvar InfoGrammar = /* @__PURE__ */ __name(() => loadedInfoGrammar ?? (loadedInfoGrammar = loadGrammarFromJson('{\"$type\":\"Grammar\",\"isDeclared\":true,\"name\":\"Info\",\"imports\":[],\"rules\":[{\"$type\":\"ParserRule\",\"name\":\"Info\",\"entry\":true,\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Keyword\",\"value\":\"info\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"showInfo\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[],\"cardinality\":\"*\"}],\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[],\"cardinality\":\"?\"}]},\"definesHiddenTokens\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"TitleAndAccessibilities\",\"fragment\":true,\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"accDescr\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@4\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"accTitle\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[]}}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]}],\"cardinality\":\"+\"},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"EOL\",\"fragment\":true,\"dataType\":\"string\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"EndOfFile\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"NEWLINE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\r?\\\\\\\\n/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_DESCR\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accDescr(?:[\\\\\\\\t ]*:([^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)|\\\\\\\\s*{([^}]*)})/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accTitle[\\\\\\\\t ]*:(?:[^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*title(?:[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*|)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"WHITESPACE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]+/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"YAML\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/---[\\\\\\\\t ]*\\\\\\\\r?\\\\\\\\n(?:[\\\\\\\\S\\\\\\\\s]*?\\\\\\\\r?\\\\\\\\n)?---(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"DIRECTIVE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%{[\\\\\\\\S\\\\\\\\s]*?}%%(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"SINGLE_LINE_COMMENT\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%[^\\\\\\\\n\\\\\\\\r]*/\"},\"fragment\":false}],\"definesHiddenTokens\":false,\"hiddenTokens\":[],\"interfaces\":[{\"$type\":\"Interface\",\"name\":\"Common\",\"attributes\":[{\"$type\":\"TypeAttribute\",\"name\":\"accDescr\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}},{\"$type\":\"TypeAttribute\",\"name\":\"accTitle\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}},{\"$type\":\"TypeAttribute\",\"name\":\"title\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}}],\"superTypes\":[]}],\"types\":[],\"usedGrammars\":[]}')), \"InfoGrammar\");\nvar loadedPacketGrammar;\nvar PacketGrammar = /* @__PURE__ */ __name(() => loadedPacketGrammar ?? (loadedPacketGrammar = loadGrammarFromJson(`{\"$type\":\"Grammar\",\"isDeclared\":true,\"name\":\"Packet\",\"imports\":[],\"rules\":[{\"$type\":\"ParserRule\",\"name\":\"Packet\",\"entry\":true,\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Keyword\",\"value\":\"packet-beta\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@4\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"blocks\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]},\"cardinality\":\"*\"}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"Assignment\",\"feature\":\"blocks\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]},\"cardinality\":\"+\"}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[],\"cardinality\":\"*\"}]}]},\"definesHiddenTokens\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"PacketBlock\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"start\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"-\"},{\"$type\":\"Assignment\",\"feature\":\"end\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]}}],\"cardinality\":\"?\"},{\"$type\":\"Keyword\",\"value\":\":\"},{\"$type\":\"Assignment\",\"feature\":\"label\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"INT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/0|[1-9][0-9]*/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"STRING\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\"[^\\\\\"]*\\\\\"|'[^']*'/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"ParserRule\",\"name\":\"TitleAndAccessibilities\",\"fragment\":true,\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"accDescr\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@7\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"accTitle\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"},\"arguments\":[]}}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}],\"cardinality\":\"+\"},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"EOL\",\"fragment\":true,\"dataType\":\"string\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"EndOfFile\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"NEWLINE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\r?\\\\\\\\n/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_DESCR\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accDescr(?:[\\\\\\\\t ]*:([^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)|\\\\\\\\s*{([^}]*)})/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accTitle[\\\\\\\\t ]*:(?:[^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*title(?:[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*|)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"WHITESPACE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]+/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"YAML\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/---[\\\\\\\\t ]*\\\\\\\\r?\\\\\\\\n(?:[\\\\\\\\S\\\\\\\\s]*?\\\\\\\\r?\\\\\\\\n)?---(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"DIRECTIVE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%{[\\\\\\\\S\\\\\\\\s]*?}%%(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"SINGLE_LINE_COMMENT\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%[^\\\\\\\\n\\\\\\\\r]*/\"},\"fragment\":false}],\"definesHiddenTokens\":false,\"hiddenTokens\":[],\"interfaces\":[{\"$type\":\"Interface\",\"name\":\"Common\",\"attributes\":[{\"$type\":\"TypeAttribute\",\"name\":\"accDescr\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}},{\"$type\":\"TypeAttribute\",\"name\":\"accTitle\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}},{\"$type\":\"TypeAttribute\",\"name\":\"title\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}}],\"superTypes\":[]}],\"types\":[],\"usedGrammars\":[]}`)), \"PacketGrammar\");\nvar loadedPieGrammar;\nvar PieGrammar = /* @__PURE__ */ __name(() => loadedPieGrammar ?? (loadedPieGrammar = loadGrammarFromJson('{\"$type\":\"Grammar\",\"isDeclared\":true,\"name\":\"Pie\",\"imports\":[],\"rules\":[{\"$type\":\"ParserRule\",\"name\":\"Pie\",\"entry\":true,\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Keyword\",\"value\":\"pie\"},{\"$type\":\"Assignment\",\"feature\":\"showData\",\"operator\":\"?=\",\"terminal\":{\"$type\":\"Keyword\",\"value\":\"showData\"},\"cardinality\":\"?\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@4\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"sections\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]},\"cardinality\":\"*\"}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"Assignment\",\"feature\":\"sections\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]},\"cardinality\":\"+\"}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[],\"cardinality\":\"*\"}]}]},\"definesHiddenTokens\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"PieSection\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"label\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]}},{\"$type\":\"Keyword\",\"value\":\":\"},{\"$type\":\"Assignment\",\"feature\":\"value\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"PIE_SECTION_LABEL\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\"[^\\\\\"]+\\\\\"/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"PIE_SECTION_VALUE\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/(0|[1-9][0-9]*)(\\\\\\\\.[0-9]+)?/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"ParserRule\",\"name\":\"TitleAndAccessibilities\",\"fragment\":true,\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"accDescr\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@7\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"accTitle\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"},\"arguments\":[]}}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}],\"cardinality\":\"+\"},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"EOL\",\"fragment\":true,\"dataType\":\"string\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"EndOfFile\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"NEWLINE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\r?\\\\\\\\n/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_DESCR\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accDescr(?:[\\\\\\\\t ]*:([^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)|\\\\\\\\s*{([^}]*)})/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accTitle[\\\\\\\\t ]*:(?:[^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*title(?:[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*|)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"WHITESPACE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]+/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"YAML\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/---[\\\\\\\\t ]*\\\\\\\\r?\\\\\\\\n(?:[\\\\\\\\S\\\\\\\\s]*?\\\\\\\\r?\\\\\\\\n)?---(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"DIRECTIVE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%{[\\\\\\\\S\\\\\\\\s]*?}%%(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"SINGLE_LINE_COMMENT\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%[^\\\\\\\\n\\\\\\\\r]*/\"},\"fragment\":false}],\"definesHiddenTokens\":false,\"hiddenTokens\":[],\"interfaces\":[{\"$type\":\"Interface\",\"name\":\"Common\",\"attributes\":[{\"$type\":\"TypeAttribute\",\"name\":\"accDescr\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}},{\"$type\":\"TypeAttribute\",\"name\":\"accTitle\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}},{\"$type\":\"TypeAttribute\",\"name\":\"title\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}}],\"superTypes\":[]}],\"types\":[],\"usedGrammars\":[]}')), \"PieGrammar\");\nvar loadedGitGraphGrammar;\nvar GitGraphGrammar = /* @__PURE__ */ __name(() => loadedGitGraphGrammar ?? (loadedGitGraphGrammar = loadGrammarFromJson(`{\"$type\":\"Grammar\",\"isDeclared\":true,\"name\":\"GitGraph\",\"interfaces\":[{\"$type\":\"Interface\",\"name\":\"Common\",\"attributes\":[{\"$type\":\"TypeAttribute\",\"name\":\"accDescr\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}},{\"$type\":\"TypeAttribute\",\"name\":\"accTitle\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}},{\"$type\":\"TypeAttribute\",\"name\":\"title\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}}],\"superTypes\":[]}],\"rules\":[{\"$type\":\"ParserRule\",\"name\":\"TitleAndAccessibilities\",\"fragment\":true,\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"accDescr\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"accTitle\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@4\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]}],\"cardinality\":\"+\"},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"EOL\",\"fragment\":true,\"dataType\":\"string\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"EndOfFile\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"NEWLINE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\r?\\\\\\\\n/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_DESCR\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accDescr(?:[\\\\\\\\t ]*:([^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)|\\\\\\\\s*{([^}]*)})/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accTitle[\\\\\\\\t ]*:(?:[^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*title(?:[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*|)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"WHITESPACE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]+/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"YAML\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/---[\\\\\\\\t ]*\\\\\\\\r?\\\\\\\\n(?:[\\\\\\\\S\\\\\\\\s]*?\\\\\\\\r?\\\\\\\\n)?---(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"DIRECTIVE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%{[\\\\\\\\S\\\\\\\\s]*?}%%(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"SINGLE_LINE_COMMENT\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%[^\\\\\\\\n\\\\\\\\r]*/\"},\"fragment\":false},{\"$type\":\"ParserRule\",\"name\":\"GitGraph\",\"entry\":true,\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"gitGraph\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"gitGraph\"},{\"$type\":\"Keyword\",\"value\":\":\"}]},{\"$type\":\"Keyword\",\"value\":\"gitGraph:\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"gitGraph\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[]},{\"$type\":\"Keyword\",\"value\":\":\"}]}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@0\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"statements\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@11\"},\"arguments\":[]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]}],\"cardinality\":\"*\"}]}]},\"definesHiddenTokens\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Statement\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@13\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@14\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@15\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@16\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Direction\",\"definition\":{\"$type\":\"Assignment\",\"feature\":\"dir\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"LR\"},{\"$type\":\"Keyword\",\"value\":\"TB\"},{\"$type\":\"Keyword\",\"value\":\"BT\"}]}},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Commit\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"commit\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"id:\"},{\"$type\":\"Assignment\",\"feature\":\"id\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"msg:\",\"cardinality\":\"?\"},{\"$type\":\"Assignment\",\"feature\":\"message\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"tag:\"},{\"$type\":\"Assignment\",\"feature\":\"tags\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"type:\"},{\"$type\":\"Assignment\",\"feature\":\"type\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"NORMAL\"},{\"$type\":\"Keyword\",\"value\":\"REVERSE\"},{\"$type\":\"Keyword\",\"value\":\"HIGHLIGHT\"}]}}]}],\"cardinality\":\"*\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Branch\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"branch\"},{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"order:\"},{\"$type\":\"Assignment\",\"feature\":\"order\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@18\"},\"arguments\":[]}}],\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Merge\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"merge\"},{\"$type\":\"Assignment\",\"feature\":\"branch\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}]}},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"id:\"},{\"$type\":\"Assignment\",\"feature\":\"id\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"tag:\"},{\"$type\":\"Assignment\",\"feature\":\"tags\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"type:\"},{\"$type\":\"Assignment\",\"feature\":\"type\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"NORMAL\"},{\"$type\":\"Keyword\",\"value\":\"REVERSE\"},{\"$type\":\"Keyword\",\"value\":\"HIGHLIGHT\"}]}}]}],\"cardinality\":\"*\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Checkout\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"checkout\"},{\"$type\":\"Keyword\",\"value\":\"switch\"}]},{\"$type\":\"Assignment\",\"feature\":\"branch\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"CherryPicking\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"cherry-pick\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"id:\"},{\"$type\":\"Assignment\",\"feature\":\"id\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"tag:\"},{\"$type\":\"Assignment\",\"feature\":\"tags\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"parent:\"},{\"$type\":\"Assignment\",\"feature\":\"parent\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}}]}],\"cardinality\":\"*\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"INT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[0-9]+(?=\\\\\\\\s)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ID\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\w([-\\\\\\\\./\\\\\\\\w]*[-\\\\\\\\w])?/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"STRING\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\"[^\\\\\"]*\\\\\"|'[^']*'/\"},\"fragment\":false,\"hidden\":false}],\"definesHiddenTokens\":false,\"hiddenTokens\":[],\"imports\":[],\"types\":[],\"usedGrammars\":[]}`)), \"GitGraphGrammar\");\n\n// src/language/generated/module.ts\nvar InfoLanguageMetaData = {\n  languageId: \"info\",\n  fileExtensions: [\".mmd\", \".mermaid\"],\n  caseInsensitive: false\n};\nvar PacketLanguageMetaData = {\n  languageId: \"packet\",\n  fileExtensions: [\".mmd\", \".mermaid\"],\n  caseInsensitive: false\n};\nvar PieLanguageMetaData = {\n  languageId: \"pie\",\n  fileExtensions: [\".mmd\", \".mermaid\"],\n  caseInsensitive: false\n};\nvar GitGraphLanguageMetaData = {\n  languageId: \"gitGraph\",\n  fileExtensions: [\".mmd\", \".mermaid\"],\n  caseInsensitive: false\n};\nvar MermaidGeneratedSharedModule = {\n  AstReflection: /* @__PURE__ */ __name(() => new MermaidAstReflection(), \"AstReflection\")\n};\nvar InfoGeneratedModule = {\n  Grammar: /* @__PURE__ */ __name(() => InfoGrammar(), \"Grammar\"),\n  LanguageMetaData: /* @__PURE__ */ __name(() => InfoLanguageMetaData, \"LanguageMetaData\"),\n  parser: {}\n};\nvar PacketGeneratedModule = {\n  Grammar: /* @__PURE__ */ __name(() => PacketGrammar(), \"Grammar\"),\n  LanguageMetaData: /* @__PURE__ */ __name(() => PacketLanguageMetaData, \"LanguageMetaData\"),\n  parser: {}\n};\nvar PieGeneratedModule = {\n  Grammar: /* @__PURE__ */ __name(() => PieGrammar(), \"Grammar\"),\n  LanguageMetaData: /* @__PURE__ */ __name(() => PieLanguageMetaData, \"LanguageMetaData\"),\n  parser: {}\n};\nvar GitGraphGeneratedModule = {\n  Grammar: /* @__PURE__ */ __name(() => GitGraphGrammar(), \"Grammar\"),\n  LanguageMetaData: /* @__PURE__ */ __name(() => GitGraphLanguageMetaData, \"LanguageMetaData\"),\n  parser: {}\n};\n\n// src/language/common/valueConverter.ts\nimport { DefaultValueConverter } from \"langium\";\n\n// src/language/common/matcher.ts\nvar accessibilityDescrRegex = /accDescr(?:[\\t ]*:([^\\n\\r]*)|\\s*{([^}]*)})/;\nvar accessibilityTitleRegex = /accTitle[\\t ]*:([^\\n\\r]*)/;\nvar titleRegex = /title([\\t ][^\\n\\r]*|)/;\n\n// src/language/common/valueConverter.ts\nvar rulesRegexes = {\n  ACC_DESCR: accessibilityDescrRegex,\n  ACC_TITLE: accessibilityTitleRegex,\n  TITLE: titleRegex\n};\nvar AbstractMermaidValueConverter = class extends DefaultValueConverter {\n  static {\n    __name(this, \"AbstractMermaidValueConverter\");\n  }\n  runConverter(rule, input, cstNode) {\n    let value = this.runCommonConverter(rule, input, cstNode);\n    if (value === void 0) {\n      value = this.runCustomConverter(rule, input, cstNode);\n    }\n    if (value === void 0) {\n      return super.runConverter(rule, input, cstNode);\n    }\n    return value;\n  }\n  runCommonConverter(rule, input, _cstNode) {\n    const regex = rulesRegexes[rule.name];\n    if (regex === void 0) {\n      return void 0;\n    }\n    const match = regex.exec(input);\n    if (match === null) {\n      return void 0;\n    }\n    if (match[1] !== void 0) {\n      return match[1].trim().replace(/[\\t ]{2,}/gm, \" \");\n    }\n    if (match[2] !== void 0) {\n      return match[2].replace(/^\\s*/gm, \"\").replace(/\\s+$/gm, \"\").replace(/[\\t ]{2,}/gm, \" \").replace(/[\\n\\r]{2,}/gm, \"\\n\");\n    }\n    return void 0;\n  }\n};\nvar CommonValueConverter = class extends AbstractMermaidValueConverter {\n  static {\n    __name(this, \"CommonValueConverter\");\n  }\n  runCustomConverter(_rule, _input, _cstNode) {\n    return void 0;\n  }\n};\n\n// src/language/common/tokenBuilder.ts\nimport { DefaultTokenBuilder } from \"langium\";\nvar AbstractMermaidTokenBuilder = class extends DefaultTokenBuilder {\n  static {\n    __name(this, \"AbstractMermaidTokenBuilder\");\n  }\n  constructor(keywords) {\n    super();\n    this.keywords = new Set(keywords);\n  }\n  buildKeywordTokens(rules, terminalTokens, options) {\n    const tokenTypes = super.buildKeywordTokens(rules, terminalTokens, options);\n    tokenTypes.forEach((tokenType) => {\n      if (this.keywords.has(tokenType.name) && tokenType.PATTERN !== void 0) {\n        tokenType.PATTERN = new RegExp(tokenType.PATTERN.toString() + \"(?:(?=%%)|(?!\\\\S))\");\n      }\n    });\n    return tokenTypes;\n  }\n};\nvar CommonTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"CommonTokenBuilder\");\n  }\n};\n\nexport {\n  __name,\n  Statement,\n  Branch,\n  isBranch,\n  Commit,\n  isCommit,\n  isCommon,\n  GitGraph,\n  isGitGraph,\n  Info,\n  isInfo,\n  Merge,\n  isMerge,\n  Packet,\n  isPacket,\n  PacketBlock,\n  isPacketBlock,\n  Pie,\n  isPie,\n  PieSection,\n  isPieSection,\n  MermaidGeneratedSharedModule,\n  InfoGeneratedModule,\n  PacketGeneratedModule,\n  PieGeneratedModule,\n  GitGraphGeneratedModule,\n  AbstractMermaidValueConverter,\n  CommonValueConverter,\n  AbstractMermaidTokenBuilder,\n  CommonTokenBuilder\n};\n","import {\n  GitGraphModule,\n  createGitGraphServices\n} from \"./chunks/mermaid-parser.core/chunk-QE2ZKFLT.mjs\";\nimport {\n  InfoModule,\n  createInfoServices\n} from \"./chunks/mermaid-parser.core/chunk-O2VHLUZY.mjs\";\nimport {\n  PacketModule,\n  createPacketServices\n} from \"./chunks/mermaid-parser.core/chunk-HTBTGXD4.mjs\";\nimport {\n  PieModule,\n  createPieServices\n} from \"./chunks/mermaid-parser.core/chunk-NM56GJBF.mjs\";\nimport {\n  AbstractMermaidTokenBuilder,\n  AbstractMermaidValueConverter,\n  Branch,\n  Commit,\n  CommonTokenBuilder,\n  CommonValueConverter,\n  GitGraph,\n  GitGraphGeneratedModule,\n  Info,\n  InfoGeneratedModule,\n  Merge,\n  MermaidGeneratedSharedModule,\n  Packet,\n  PacketBlock,\n  PacketGeneratedModule,\n  Pie,\n  PieGeneratedModule,\n  PieSection,\n  Statement,\n  __name,\n  isBranch,\n  isCommit,\n  isCommon,\n  isGitGraph,\n  isInfo,\n  isMerge,\n  isPacket,\n  isPacketBlock,\n  isPie,\n  isPieSection\n} from \"./chunks/mermaid-parser.core/chunk-U3TRWOCV.mjs\";\n\n// src/parse.ts\nvar parsers = {};\nvar initializers = {\n  info: /* @__PURE__ */ __name(async () => {\n    const { createInfoServices: createInfoServices2 } = await import(\"./chunks/mermaid-parser.core/info-PWGDJKR5.mjs\");\n    const parser = createInfoServices2().Info.parser.LangiumParser;\n    parsers.info = parser;\n  }, \"info\"),\n  packet: /* @__PURE__ */ __name(async () => {\n    const { createPacketServices: createPacketServices2 } = await import(\"./chunks/mermaid-parser.core/packet-7PPW3X5M.mjs\");\n    const parser = createPacketServices2().Packet.parser.LangiumParser;\n    parsers.packet = parser;\n  }, \"packet\"),\n  pie: /* @__PURE__ */ __name(async () => {\n    const { createPieServices: createPieServices2 } = await import(\"./chunks/mermaid-parser.core/pie-RF5LNP4B.mjs\");\n    const parser = createPieServices2().Pie.parser.LangiumParser;\n    parsers.pie = parser;\n  }, \"pie\"),\n  gitGraph: /* @__PURE__ */ __name(async () => {\n    const { createGitGraphServices: createGitGraphServices2 } = await import(\"./chunks/mermaid-parser.core/gitGraph-F2EDSAW4.mjs\");\n    const parser = createGitGraphServices2().GitGraph.parser.LangiumParser;\n    parsers.gitGraph = parser;\n  }, \"gitGraph\")\n};\nasync function parse(diagramType, text) {\n  const initializer = initializers[diagramType];\n  if (!initializer) {\n    throw new Error(`Unknown diagram type: ${diagramType}`);\n  }\n  if (!parsers[diagramType]) {\n    await initializer();\n  }\n  const parser = parsers[diagramType];\n  const result = parser.parse(text);\n  if (result.lexerErrors.length > 0 || result.parserErrors.length > 0) {\n    throw new MermaidParseError(result);\n  }\n  return result.value;\n}\n__name(parse, \"parse\");\nvar MermaidParseError = class extends Error {\n  constructor(result) {\n    const lexerErrors = result.lexerErrors.map((err) => err.message).join(\"\\n\");\n    const parserErrors = result.parserErrors.map((err) => err.message).join(\"\\n\");\n    super(`Parsing failed: ${lexerErrors} ${parserErrors}`);\n    this.result = result;\n  }\n  static {\n    __name(this, \"MermaidParseError\");\n  }\n};\nexport {\n  AbstractMermaidTokenBuilder,\n  AbstractMermaidValueConverter,\n  Branch,\n  Commit,\n  CommonTokenBuilder,\n  CommonValueConverter,\n  GitGraph,\n  GitGraphGeneratedModule,\n  GitGraphModule,\n  Info,\n  InfoGeneratedModule,\n  InfoModule,\n  Merge,\n  MermaidGeneratedSharedModule,\n  MermaidParseError,\n  Packet,\n  PacketBlock,\n  PacketGeneratedModule,\n  PacketModule,\n  Pie,\n  PieGeneratedModule,\n  PieModule,\n  PieSection,\n  Statement,\n  createGitGraphServices,\n  createInfoServices,\n  createPacketServices,\n  createPieServices,\n  isBranch,\n  isCommit,\n  isCommon,\n  isGitGraph,\n  isInfo,\n  isMerge,\n  isPacket,\n  isPacketBlock,\n  isPie,\n  isPieSection,\n  parse\n};\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { TokenType } from 'chevrotain';\nimport type { URI } from './utils/uri-utils.js';\nimport type { AbstractElement } from './languages/generated/ast.js';\nimport type { DocumentSegment, LangiumDocument } from './workspace/documents.js';\n\n/**\n * A node in the Abstract Syntax Tree (AST).\n */\nexport interface AstNode {\n    /** Every AST node has a type corresponding to what was specified in the grammar declaration. */\n    readonly $type: string;\n    /** The container node in the AST; every node except the root node has a container. */\n    readonly $container?: AstNode;\n    /** The property of the `$container` node that contains this node. This is either a direct reference or an array. */\n    readonly $containerProperty?: string;\n    /** In case `$containerProperty` is an array, the array index is stored here. */\n    readonly $containerIndex?: number;\n    /** The Concrete Syntax Tree (CST) node of the text range from which this node was parsed. */\n    readonly $cstNode?: CstNode;\n    /** The document containing the AST; only the root node has a direct reference to the document. */\n    readonly $document?: LangiumDocument;\n}\n\nexport function isAstNode(obj: unknown): obj is AstNode {\n    return typeof obj === 'object' && obj !== null && typeof (obj as AstNode).$type === 'string';\n}\n\nexport interface GenericAstNode extends AstNode {\n    [key: string]: unknown\n}\n\ntype SpecificNodeProperties<N extends AstNode> = keyof Omit<N, keyof AstNode | number | symbol>;\n\n/**\n * The property names of a given AST node type.\n */\nexport type Properties<N extends AstNode> = SpecificNodeProperties<N> extends never ? string : SpecificNodeProperties<N>\n\n/**\n * A cross-reference in the AST. Cross-references may or may not be successfully resolved.\n */\nexport interface Reference<T extends AstNode = AstNode> {\n    /**\n     * The target AST node of this reference. Accessing this property may trigger cross-reference\n     * resolution by the `Linker` in case it has not been done yet. If the reference cannot be resolved,\n     * the value is `undefined`.\n     */\n    readonly ref?: T;\n\n    /** If any problem occurred while resolving the reference, it is described by this property. */\n    readonly error?: LinkingError;\n    /** The CST node from which the reference was parsed */\n    readonly $refNode?: CstNode;\n    /** The actual text used to look up in the surrounding scope */\n    readonly $refText: string;\n    /** The node description for the AstNode returned by `ref`  */\n    readonly $nodeDescription?: AstNodeDescription;\n}\n\nexport function isReference(obj: unknown): obj is Reference {\n    return typeof obj === 'object' && obj !== null && typeof (obj as Reference).$refText === 'string';\n}\n\nexport type ResolvedReference<T extends AstNode = AstNode> = Reference<T> & {\n    readonly ref: T;\n}\n\n/**\n * A description of an AST node is used when constructing scopes and looking up cross-reference targets.\n */\nexport interface AstNodeDescription {\n    /** The target node; should be present only for local references (linking to the same document). */\n    node?: AstNode;\n    /**\n     * The document segment that represents the range of the name of the AST node.\n     */\n    nameSegment?: DocumentSegment;\n    /**\n     * The document segment that represents the full range of the AST node.\n     */\n    selectionSegment?: DocumentSegment;\n    /** `$type` property value of the AST node */\n    type: string;\n    /** Name of the AST node; this is usually determined by the `NameProvider` service. */\n    name: string;\n    /** URI to the document containing the AST node */\n    documentUri: URI;\n    /** Navigation path inside the document */\n    path: string;\n}\n\nexport function isAstNodeDescription(obj: unknown): obj is AstNodeDescription {\n    return typeof obj === 'object' && obj !== null\n        && typeof (obj as AstNodeDescription).name === 'string'\n        && typeof (obj as AstNodeDescription).type === 'string'\n        && typeof (obj as AstNodeDescription).path === 'string';\n}\n\n/**\n * Information about a cross-reference. This is used when traversing references in an AST or to describe\n * unresolved references.\n */\nexport interface ReferenceInfo {\n    reference: Reference\n    container: AstNode\n    property: string\n    index?: number\n}\n\n/**\n * Used to collect information when the `Linker` service fails to resolve a cross-reference.\n */\nexport interface LinkingError extends ReferenceInfo {\n    message: string;\n    targetDescription?: AstNodeDescription;\n}\n\nexport function isLinkingError(obj: unknown): obj is LinkingError {\n    return typeof obj === 'object' && obj !== null\n        && isAstNode((obj as LinkingError).container)\n        && isReference((obj as LinkingError).reference)\n        && typeof (obj as LinkingError).message === 'string';\n}\n\n/**\n * Service used for generic access to the structure of the AST. This service is shared between\n * all involved languages, so it operates on the superset of types of these languages.\n */\nexport interface AstReflection {\n    getAllTypes(): string[]\n    getAllSubTypes(type: string): string[]\n    getReferenceType(refInfo: ReferenceInfo): string\n    getTypeMetaData(type: string): TypeMetaData\n    isInstance(node: unknown, type: string): boolean\n    isSubtype(subtype: string, supertype: string): boolean\n}\n\n/**\n * An abstract implementation of the {@link AstReflection} interface.\n * Serves to cache subtype computation results to improve performance throughout different parts of Langium.\n */\nexport abstract class AbstractAstReflection implements AstReflection {\n\n    protected subtypes: Record<string, Record<string, boolean | undefined>> = {};\n    protected allSubtypes: Record<string, string[] | undefined> = {};\n\n    abstract getAllTypes(): string[];\n    abstract getReferenceType(refInfo: ReferenceInfo): string;\n    abstract getTypeMetaData(type: string): TypeMetaData;\n    protected abstract computeIsSubtype(subtype: string, supertype: string): boolean;\n\n    isInstance(node: unknown, type: string): boolean {\n        return isAstNode(node) && this.isSubtype(node.$type, type);\n    }\n\n    isSubtype(subtype: string, supertype: string): boolean {\n        if (subtype === supertype) {\n            return true;\n        }\n        let nested = this.subtypes[subtype];\n        if (!nested) {\n            nested = this.subtypes[subtype] = {};\n        }\n        const existing = nested[supertype];\n        if (existing !== undefined) {\n            return existing;\n        } else {\n            const result = this.computeIsSubtype(subtype, supertype);\n            nested[supertype] = result;\n            return result;\n        }\n    }\n\n    getAllSubTypes(type: string): string[] {\n        const existing = this.allSubtypes[type];\n        if (existing) {\n            return existing;\n        } else {\n            const allTypes = this.getAllTypes();\n            const types: string[] = [];\n            for (const possibleSubType of allTypes) {\n                if (this.isSubtype(possibleSubType, type)) {\n                    types.push(possibleSubType);\n                }\n            }\n            this.allSubtypes[type] = types;\n            return types;\n        }\n    }\n}\n\n/**\n * Represents runtime meta data about a meta model type.\n */\nexport interface TypeMetaData {\n    /** The name of this meta model type. Corresponds to the `AstNode.$type` value. */\n    name: string\n    /** A list of properties. They can contain default values for their respective property in the AST. */\n    properties: TypeProperty[]\n}\n\n/**\n * Describes the meta data of a property of an AST node.\n *\n * The optional `defaultValue` indicates that the property is mandatory in the AST node.\n * For example, if an AST node contains an array, but no elements of this array have been parsed, we still expect an empty array instead of `undefined`.\n */\nexport interface TypeProperty {\n    name: string\n    defaultValue?: PropertyType\n}\n\n/**\n * Represents a default value for an AST property.\n */\nexport type PropertyType = number | string | boolean | PropertyType[];\n\n/**\n * A node in the Concrete Syntax Tree (CST).\n */\nexport interface CstNode extends DocumentSegment {\n    /** The container node in the CST */\n    readonly container?: CompositeCstNode;\n    /** @deprecated use `container` instead. */\n    readonly parent?: CompositeCstNode;\n    /** The actual text */\n    readonly text: string;\n    /** The root CST node */\n    readonly root: RootCstNode;\n    /** The grammar element from which this node was parsed */\n    readonly grammarSource: AbstractElement;\n    /** @deprecated use `grammarSource` instead. */\n    readonly feature: AbstractElement;\n    /** The AST node created from this CST node */\n    readonly astNode: AstNode;\n    /** @deprecated use `astNode` instead. */\n    readonly element: AstNode;\n    /** Whether the token is hidden, i.e. not explicitly part of the containing grammar rule */\n    readonly hidden: boolean;\n}\n\n/**\n * A composite CST node contains other nodes, but no directly associated token.\n */\nexport interface CompositeCstNode extends CstNode {\n    readonly content: CstNode[];\n    /** @deprecated use `content` instead. */\n    readonly children: CstNode[];\n}\n\nexport function isCompositeCstNode(node: unknown): node is CompositeCstNode {\n    return typeof node === 'object' && node !== null && Array.isArray((node as CompositeCstNode).content);\n}\n\n/**\n * A leaf CST node corresponds to a token in the input token stream.\n */\nexport interface LeafCstNode extends CstNode {\n    readonly tokenType: TokenType;\n}\n\nexport function isLeafCstNode(node: unknown): node is LeafCstNode {\n    return typeof node === 'object' && node !== null && typeof (node as LeafCstNode).tokenType === 'object';\n}\n\nexport interface RootCstNode extends CompositeCstNode {\n    readonly fullText: string\n}\n\nexport function isRootCstNode(node: unknown): node is RootCstNode {\n    return isCompositeCstNode(node) && typeof (node as RootCstNode).fullText === 'string';\n}\n\n/**\n * Returns a type to have only properties names (!) of a type T whose property value is of a certain type K.\n */\ntype ExtractKeysOfValueType<T, K> = { [I in keyof T]: T[I] extends K ? I : never }[keyof T];\n\n/**\n * Returns the property names (!) of an AstNode that are cross-references.\n * Meant to be used during cross-reference resolution in combination with `assertUnreachable(context.property)`.\n */\nexport type CrossReferencesOfAstNodeType<N extends AstNode> = (\n    ExtractKeysOfValueType<N, Reference|undefined>\n    | ExtractKeysOfValueType<N, Array<Reference|undefined>|undefined>\n// eslint-disable-next-line @typescript-eslint/ban-types\n) & {};\n\n/**\n * Represents the enumeration-like type, that lists all AstNode types of your grammar.\n */\nexport type AstTypeList<T> = Record<keyof T, AstNode>;\n\n/**\n * Returns all types that contain cross-references, A is meant to be the interface `XXXAstType` fromm your generated `ast.ts` file.\n * Meant to be used during cross-reference resolution in combination with `assertUnreachable(context.container)`.\n */\nexport type AstNodeTypesWithCrossReferences<A extends AstTypeList<A>> = {\n    [T in keyof A]: CrossReferencesOfAstNodeType<A[T]> extends never ? never : A[T]\n}[keyof A];\n\nexport type Mutable<T> = {\n    -readonly [P in keyof T]: T[P]\n};\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n/**\n * A stream is a read-only sequence of values. While the contents of an array can be accessed\n * both sequentially and randomly (via index), a stream allows only sequential access.\n *\n * The advantage of this is that a stream can be evaluated lazily, so it does not require\n * to store intermediate values. This can boost performance when a large sequence is\n * processed via filtering, mapping etc. and accessed at most once. However, lazy\n * evaluation means that all processing is repeated when you access the sequence multiple\n * times; in such a case, it may be better to store the resulting sequence into an array.\n */\nexport interface Stream<T> extends Iterable<T> {\n\n    /**\n     * Returns an iterator for this stream. This is the same as calling the `Symbol.iterator` function property.\n     */\n    iterator(): IterableIterator<T>;\n\n    /**\n     * Determines whether this stream contains no elements.\n     */\n    isEmpty(): boolean;\n\n    /**\n     * Determines the number of elements in this stream.\n     */\n    count(): number;\n\n    /**\n     * Collects all elements of this stream into an array.\n     */\n    toArray(): T[];\n\n    /**\n     * Collects all elements of this stream into a Set.\n     */\n    toSet(): Set<T>;\n\n    /**\n     * Collects all elements of this stream into a Map, applying the provided functions to determine keys and values.\n     *\n     * @param keyFn The function to derive map keys. If omitted, the stream elements are used as keys.\n     * @param valueFn The function to derive map values. If omitted, the stream elements are used as values.\n     */\n    toMap<K = T, V = T>(keyFn?: (e: T) => K, valueFn?: (e: T) => V): Map<K, V>;\n\n    /**\n     * Returns a string representation of a stream.\n     */\n    toString(): string;\n\n    /**\n     * Combines two streams by returning a new stream that yields all elements of this stream and the other stream.\n     *\n     * @param other Stream to be concatenated with this one.\n     */\n    concat<T2>(other: Iterable<T2>): Stream<T | T2>;\n\n    /**\n     * Adds all elements of the stream into a string, separated by the specified separator string.\n     *\n     * @param separator A string used to separate one element of the stream from the next in the resulting string.\n     *        If omitted, the steam elements are separated with a comma.\n     */\n    join(separator?: string): string\n\n    /**\n     * Returns the index of the first occurrence of a value in the stream, or -1 if it is not present.\n     *\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The stream index at which to begin the search. If fromIndex is omitted, the search\n     *        starts at index 0.\n     */\n    indexOf(searchElement: T, fromIndex?: number): number;\n\n    /**\n     * Determines whether all members of the stream satisfy the specified test.\n     *\n     * @param predicate This method calls the predicate function for each element in the stream until the\n     *        predicate returns a value which is coercible to the Boolean value `false`, or until the end\n     *        of the stream.\n     */\n    every<S extends T>(predicate: (value: T) => value is S): this is Stream<S>;\n    every(predicate: (value: T) => unknown): boolean;\n\n    /**\n     * Determines whether any member of the stream satisfies the specified test.\n     *\n     * @param predicate This method calls the predicate function for each element in the stream until the\n     *        predicate returns a value which is coercible to the Boolean value `true`, or until the end\n     *        of the stream.\n     */\n    some(predicate: (value: T) => unknown): boolean;\n\n    /**\n     * Performs the specified action for each element in the stream.\n     *\n     * @param callbackfn Function called once for each element in the stream.\n     */\n    forEach(callbackfn: (value: T, index: number) => void): void;\n\n    /**\n     * Returns a stream that yields the results of calling the specified callback function on each element\n     * of the stream. The function is called when the resulting stream elements are actually accessed, so\n     * accessing the resulting stream multiple times means the function is also called multiple times for\n     * each element of the stream.\n     *\n     * @param callbackfn Lazily evaluated function mapping stream elements.\n     */\n    map<U>(callbackfn: (value: T) => U): Stream<U>;\n\n    /**\n     * Returns the elements of the stream that meet the condition specified in a callback function.\n     * The function is called when the resulting stream elements are actually accessed, so accessing the\n     * resulting stream multiple times means the function is also called multiple times for each element\n     * of the stream.\n     *\n     * @param predicate Lazily evaluated function checking a condition on stream elements.\n     */\n    filter<S extends T>(predicate: (value: T) => value is S): Stream<S>;\n    filter(predicate: (value: T) => unknown): Stream<T>;\n\n    /**\n     * Returns the elements of the stream that are _non-nullable_, which means they are neither `undefined`\n     * nor `null`.\n     */\n    nonNullable(): Stream<NonNullable<T>>;\n\n    /**\n     * Calls the specified callback function for all elements in the stream. The return value of the\n     * callback function is the accumulated result, and is provided as an argument in the next call to\n     * the callback function.\n     *\n     * @param callbackfn This method calls the function once for each element in the stream, providing\n     *        the previous and current values of the reduction.\n     * @param initialValue If specified, `initialValue` is used as the initial value to start the\n     *        accumulation. The first call to the function provides this value as an argument instead\n     *        of a stream value.\n     */\n    reduce(callbackfn: (previousValue: T, currentValue: T) => T): T | undefined;\n    reduce<U = T>(callbackfn: (previousValue: U, currentValue: T) => U, initialValue: U): U;\n\n    /**\n     * Calls the specified callback function for all elements in the stream, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     *\n     * @param callbackfn This method calls the function once for each element in the stream, providing\n     *        the previous and current values of the reduction.\n     * @param initialValue If specified, `initialValue` is used as the initial value to start the\n     *        accumulation. The first call to the function provides this value as an argument instead\n     *        of an array value.\n     */\n    reduceRight(callbackfn: (previousValue: T, currentValue: T) => T): T | undefined;\n    reduceRight<U = T>(callbackfn: (previousValue: U, currentValue: T) => U, initialValue: U): U;\n\n    /**\n     * Returns the value of the first element in the stream that meets the condition, or `undefined`\n     * if there is no such element.\n     *\n     * @param predicate This method calls `predicate` once for each element of the stream, in ascending\n     *        order, until it finds one where `predicate` returns a value which is coercible to the\n     *        Boolean value `true`.\n     */\n    find<S extends T>(predicate: (value: T) => value is S): S | undefined;\n    find(predicate: (value: T) => unknown): T | undefined;\n\n    /**\n     * Returns the index of the first element in the stream that meets the condition, or `-1`\n     * if there is no such element.\n     *\n     * @param predicate This method calls `predicate` once for each element of the stream, in ascending\n     *        order, until it finds one where `predicate` returns a value which is coercible to the\n     *        Boolean value `true`.\n     */\n    findIndex(predicate: (value: T) => unknown): number;\n\n    /**\n     * Determines whether the stream includes a certain element, returning `true` or `false` as appropriate.\n     *\n     * @param searchElement The element to search for.\n     */\n    includes(searchElement: T): boolean;\n\n    /**\n     * Calls a defined callback function on each element of the stream and then flattens the result into\n     * a new stream. This is identical to a `map` followed by `flat` with depth 1.\n     *\n     * @param callbackfn Lazily evaluated function mapping stream elements.\n     */\n    flatMap<U>(callbackfn: (value: T) => U | Iterable<U>): Stream<U>;\n\n    /**\n     * Returns a new stream with all sub-stream or sub-array elements concatenated into it recursively up\n     * to the specified depth.\n     *\n     * @param depth The maximum recursion depth. Defaults to 1.\n     */\n    flat<D extends number = 1>(depth?: D): FlatStream<T, D>;\n\n    /**\n     * Returns the first element in the stream, or `undefined` if the stream is empty.\n     */\n    head(): T | undefined;\n\n    /**\n     * Returns a stream that skips the first `skipCount` elements from this stream.\n     *\n     * @param skipCount The number of elements to skip. If this is larger than the number of elements in\n     *        the stream, an empty stream is returned. Defaults to 1.\n     */\n    tail(skipCount?: number): Stream<T>;\n\n    /**\n     * Returns a stream consisting of the elements of this stream, truncated to be no longer than `maxSize`\n     * in length.\n     *\n     * @param maxSize The number of elements the stream should be limited to\n     */\n    limit(maxSize: number): Stream<T>;\n\n    /**\n     * Returns a stream containing only the distinct elements from this stream.\n     * Equality is determined with the same rules as a standard `Set`.\n     *\n     * @param by A function returning the key used to check equality with a previous stream element.\n     *        If omitted, the stream elements themselves are used for comparison.\n     */\n    distinct<Key = T>(by?: (element: T) => Key): Stream<T>;\n\n    /**\n     * Returns a stream that contains all elements that don't exist in the {@link other} iterable.\n     * Equality is determined with the same rules as a standard `Set`.\n     * @param other The elements that should be exluded from this stream.\n     * @param key A function returning the key used to check quality.\n     *        If omitted, the stream elements themselves are used for comparison.\n     */\n    exclude<Key = T>(other: Iterable<T>, key?: (element: T) => Key): Stream<T>;\n\n}\n\nexport type FlatStream<T, Depth extends number> = {\n    'done': Stream<T>,\n    'recur': T extends Iterable<infer Content>\n        ? FlatStream<Content, MinusOne<Depth>>\n        : Stream<T>\n}[Depth extends 0 ? 'done' : 'recur'];\n\nexport type MinusOne<N extends number> = [-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20][N];\n\n/**\n * The default implementation of `Stream` works with two input functions:\n *  - The first function creates the initial state of an iteration.\n *  - The second function gets the current state as argument and returns an `IteratorResult`.\n */\nexport class StreamImpl<S, T> implements Stream<T> {\n    protected readonly startFn: () => S;\n    protected readonly nextFn: (state: S) => IteratorResult<T>;\n\n    constructor(startFn: () => S, nextFn: (state: S) => IteratorResult<T, undefined>) {\n        this.startFn = startFn;\n        this.nextFn = nextFn;\n    }\n\n    iterator(): IterableIterator<T> {\n        const iterator = {\n            state: this.startFn(),\n            next: () => this.nextFn(iterator.state),\n            [Symbol.iterator]: () => iterator\n        };\n        return iterator;\n    }\n\n    [Symbol.iterator](): Iterator<T> {\n        return this.iterator();\n    }\n\n    isEmpty(): boolean {\n        const iterator = this.iterator();\n        return Boolean(iterator.next().done);\n    }\n\n    count(): number {\n        const iterator = this.iterator();\n        let count = 0;\n        let next = iterator.next();\n        while (!next.done) {\n            count++;\n            next = iterator.next();\n        }\n        return count;\n    }\n\n    toArray(): T[] {\n        const result: T[] = [];\n        const iterator = this.iterator();\n        let next: IteratorResult<T>;\n        do {\n            next = iterator.next();\n            if (next.value !== undefined) {\n                result.push(next.value);\n            }\n        } while (!next.done);\n        return result;\n    }\n\n    toSet(): Set<T> {\n        return new Set(this);\n    }\n\n    toMap<K = T, V = T>(keyFn?: (e: T) => K, valueFn?: (e: T) => V): Map<K, V> {\n        const entryStream = this.map(element => <[K, V]>[\n            keyFn ? keyFn(element) : element,\n            valueFn ? valueFn(element) : element\n        ]);\n        return new Map(entryStream);\n    }\n\n    toString(): string {\n        return this.join();\n    }\n\n    concat<T2>(other: Iterable<T2>): Stream<T | T2> {\n        const iterator = other[Symbol.iterator]();\n        return new StreamImpl<{ first: S, firstDone: boolean }, T | T2>(\n            () => ({ first: this.startFn(), firstDone: false }),\n            state => {\n                let result: IteratorResult<T | T2>;\n                if (!state.firstDone) {\n                    do {\n                        result = this.nextFn(state.first);\n                        if (!result.done) {\n                            return result;\n                        }\n                    } while (!result.done);\n                    state.firstDone = true;\n                }\n                do {\n                    result = iterator.next();\n                    if (!result.done) {\n                        return result;\n                    }\n                } while (!result.done);\n                return DONE_RESULT;\n            }\n        );\n    }\n\n    join(separator = ','): string {\n        const iterator = this.iterator();\n        let value = '';\n        let result: IteratorResult<T>;\n        let addSeparator = false;\n        do {\n            result = iterator.next();\n            if (!result.done) {\n                if (addSeparator) {\n                    value += separator;\n                }\n                value += toString(result.value);\n            }\n            addSeparator = true;\n        } while (!result.done);\n        return value;\n    }\n\n    indexOf(searchElement: T, fromIndex = 0): number {\n        const iterator = this.iterator();\n        let index = 0;\n        let next = iterator.next();\n        while (!next.done) {\n            if (index >= fromIndex && next.value === searchElement) {\n                return index;\n            }\n            next = iterator.next();\n            index++;\n        }\n        return -1;\n    }\n\n    // In the following definition the '& this' part in the return type is important\n    // _and_ the order within 'Stream<U> & this' is crucial!\n    // Otherwise Typescript would infer the type of 'this' as 'StreamImpl<S, T> & Stream<U>'\n    // (or '<subClass of StreamImpl<S, T> & Stream<U>') and usages like\n    // ```\n    //  const stream = new StreamImpl(...);\n    //  ... stream.every(<typeGuard>) & stream....\n    // ```\n    // cannot benefit from '<typeGuard>', as Typescript would priorize the signatures\n    // of 'StreamImpl<S, T>' (i.e. those of 'Stream<T>') over those of 'Stream<U>'.\n    // With the order of 'Stream<U> & this' the signatures of 'Stream<U>' get precedence.\n    every<U extends T>(predicate: (value: T) => value is U): this is Stream<U> & this;\n    every(predicate: (value: T) => unknown): boolean;\n    every(predicate: (value: T) => unknown): boolean {\n        const iterator = this.iterator();\n        let next = iterator.next();\n        while (!next.done) {\n            if (!predicate(next.value)) {\n                return false;\n            }\n            next = iterator.next();\n        }\n        return true;\n    }\n\n    some(predicate: (value: T) => unknown): boolean {\n        const iterator = this.iterator();\n        let next = iterator.next();\n        while (!next.done) {\n            if (predicate(next.value)) {\n                return true;\n            }\n            next = iterator.next();\n        }\n        return false;\n    }\n\n    forEach(callbackfn: (value: T, index: number) => void): void {\n        const iterator = this.iterator();\n        let index = 0;\n        let next = iterator.next();\n        while (!next.done) {\n            callbackfn(next.value, index);\n            next = iterator.next();\n            index++;\n        }\n    }\n\n    map<U>(callbackfn: (value: T) => U): Stream<U> {\n        return new StreamImpl<S, U>(\n            this.startFn,\n            (state) => {\n                const { done, value } = this.nextFn(state);\n                if (done) {\n                    return DONE_RESULT;\n                } else {\n                    return { done: false, value: callbackfn(value) };\n                }\n            }\n        );\n    }\n\n    // for remarks on the return type definition refer to 'every<U extends T>(...)'\n    filter<U extends T>(predicate: (value: T) => value is U): Stream<U> & this;\n    filter(predicate: (value: T) => unknown): Stream<T> & this;\n    filter(predicate: (value: T) => unknown): Stream<T> {\n        return new StreamImpl<S, T>(\n            this.startFn,\n            state => {\n                let result: IteratorResult<T>;\n                do {\n                    result = this.nextFn(state);\n                    if (!result.done && predicate(result.value)) {\n                        return result;\n                    }\n                } while (!result.done);\n                return DONE_RESULT;\n            }\n        );\n    }\n\n    nonNullable(): Stream<NonNullable<T>> {\n        return this.filter(e => e !== undefined && e !== null) as Stream<NonNullable<T>>;\n    }\n\n    reduce(callbackfn: (previousValue: T, currentValue: T) => T): T | undefined;\n    reduce<U = T>(callbackfn: (previousValue: U, currentValue: T) => U, initialValue: U): U;\n    reduce<U>(callbackfn: (previousValue: U | T, currentValue: T) => U, initialValue?: U): U | T | undefined {\n        const iterator = this.iterator();\n        let previousValue: U | T | undefined = initialValue;\n        let next = iterator.next();\n        while (!next.done) {\n            if (previousValue === undefined) {\n                previousValue = next.value;\n            } else {\n                previousValue = callbackfn(previousValue, next.value);\n            }\n            next = iterator.next();\n        }\n        return previousValue;\n    }\n\n    reduceRight(callbackfn: (previousValue: T, currentValue: T) => T): T | undefined;\n    reduceRight<U = T>(callbackfn: (previousValue: U, currentValue: T) => U, initialValue: U): U;\n    reduceRight<U>(callbackfn: (previousValue: U | T, currentValue: T) => U, initialValue?: U): U | T | undefined {\n        return this.recursiveReduce(this.iterator(), callbackfn, initialValue);\n    }\n\n    protected recursiveReduce<U>(iterator: Iterator<T>, callbackfn: (previousValue: U | T, currentValue: T) => U, initialValue?: U): U | T | undefined {\n        const next = iterator.next();\n        if (next.done) {\n            return initialValue;\n        }\n        const previousValue = this.recursiveReduce(iterator, callbackfn, initialValue);\n        if (previousValue === undefined) {\n            return next.value;\n        }\n        return callbackfn(previousValue, next.value);\n    }\n\n    find<S extends T>(predicate: (value: T) => value is S): S | undefined;\n    find(predicate: (value: T) => unknown): T | undefined;\n    find(predicate: (value: T) => unknown): T | undefined {\n        const iterator = this.iterator();\n        let next = iterator.next();\n        while (!next.done) {\n            if (predicate(next.value)) {\n                return next.value;\n            }\n            next = iterator.next();\n        }\n        return undefined;\n    }\n\n    findIndex(predicate: (value: T) => unknown): number {\n        const iterator = this.iterator();\n        let index = 0;\n        let next = iterator.next();\n        while (!next.done) {\n            if (predicate(next.value)) {\n                return index;\n            }\n            next = iterator.next();\n            index++;\n        }\n        return -1;\n    }\n\n    includes(searchElement: T): boolean {\n        const iterator = this.iterator();\n        let next = iterator.next();\n        while (!next.done) {\n            if (next.value === searchElement) {\n                return true;\n            }\n            next = iterator.next();\n        }\n        return false;\n    }\n\n    flatMap<U>(callbackfn: (value: T) => U | Iterable<U>): Stream<U> {\n        type FlatMapState = { this: S, iterator?: Iterator<U, undefined> }\n        return new StreamImpl<FlatMapState, U>(\n            () => ({ this: this.startFn() }),\n            (state) => {\n                do {\n                    if (state.iterator) {\n                        const next = state.iterator.next();\n                        if (next.done) {\n                            state.iterator = undefined;\n                        } else {\n                            return next;\n                        }\n                    }\n                    const { done, value } = this.nextFn(state.this);\n                    if (!done) {\n                        const mapped = callbackfn(value);\n                        if (isIterable(mapped)) {\n                            state.iterator = mapped[Symbol.iterator]();\n                        } else {\n                            return { done: false, value: mapped };\n                        }\n                    }\n                } while (state.iterator);\n                return DONE_RESULT;\n            }\n        );\n    }\n\n    flat<D extends number = 1>(depth?: D): FlatStream<T, D> {\n        if (depth === undefined) {\n            depth = 1 as D;\n        }\n        if (depth <= 0) {\n            return this as unknown as FlatStream<T, D>;\n        }\n        const stream = depth > 1 ? this.flat(depth - 1) as unknown as StreamImpl<S, T> : this;\n        type FlatMapState = { this: S, iterator?: Iterator<T, undefined> }\n        return new StreamImpl<FlatMapState, T>(\n            () => ({ this: stream.startFn() }),\n            (state) => {\n                do {\n                    if (state.iterator) {\n                        const next = state.iterator.next();\n                        if (next.done) {\n                            state.iterator = undefined;\n                        } else {\n                            return next;\n                        }\n                    }\n                    const { done, value } = stream.nextFn(state.this);\n                    if (!done) {\n                        if (isIterable(value)) {\n                            state.iterator = value[Symbol.iterator]() as Iterator<T>;\n                        } else {\n                            return { done: false, value: value };\n                        }\n                    }\n                } while (state.iterator);\n                return DONE_RESULT;\n            }\n        ) as unknown as FlatStream<T, D>;\n    }\n\n    head(): T | undefined {\n        const iterator = this.iterator();\n        const result = iterator.next();\n        if (result.done) {\n            return undefined;\n        }\n        return result.value;\n    }\n\n    tail(skipCount = 1): Stream<T> {\n        return new StreamImpl<S, T>(\n            () => {\n                const state = this.startFn();\n                for (let i = 0; i < skipCount; i++) {\n                    const next = this.nextFn(state);\n                    if (next.done) {\n                        return state;\n                    }\n                }\n                return state;\n            },\n            this.nextFn\n        );\n    }\n\n    limit(maxSize: number): Stream<T> {\n        return new StreamImpl<{ size: number, state: S }, T>(\n            () => ({ size: 0, state: this.startFn() }),\n            state => {\n                state.size++;\n                if (state.size > maxSize) {\n                    return DONE_RESULT;\n                }\n                return this.nextFn(state.state);\n            }\n        );\n    }\n\n    distinct<Key = T>(by?: (element: T) => Key): Stream<T> {\n        const set = new Set<T | Key>();\n        return this.filter(e => {\n            const value = by ? by(e) : e;\n            if (set.has(value)) {\n                return false;\n            } else {\n                set.add(value);\n                return true;\n            }\n        });\n    }\n\n    exclude<Key = T>(other: Iterable<T>, key?: (element: T) => Key): Stream<T> {\n        const otherKeySet = new Set<Key | T>();\n        for (const item of other) {\n            const value = key ? key(item) : item;\n            otherKeySet.add(value);\n        }\n        return this.filter(e => {\n            const ownKey = key ? key(e) : e;\n            return !otherKeySet.has(ownKey);\n        });\n    }\n}\n\nfunction toString(item: unknown): string {\n    if (typeof item === 'string') {\n        return item as string;\n    }\n    if (typeof item === 'undefined') {\n        return 'undefined';\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if (typeof (item as any).toString === 'function') {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return (item as any).toString();\n    }\n    return Object.prototype.toString.call(item);\n}\n\nfunction isIterable<T>(obj: unknown): obj is Iterable<T> {\n    return !!obj && typeof (obj as Iterable<T>)[Symbol.iterator] === 'function';\n}\n\n/**\n * An empty stream of any type.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const EMPTY_STREAM: Stream<any> = new StreamImpl<undefined, any>(() => undefined, () => DONE_RESULT);\n\n/**\n * Use this `IteratorResult` when implementing a `StreamImpl` to indicate that there are no more elements in the stream.\n */\nexport const DONE_RESULT: IteratorReturnResult<undefined> = Object.freeze({ done: true, value: undefined });\n\n/**\n * Create a stream from one or more iterables or array-likes.\n */\nexport function stream<T>(...collections: Array<Iterable<T> | ArrayLike<T>>): Stream<T> {\n    if (collections.length === 1) {\n        const collection = collections[0];\n        if (collection instanceof StreamImpl) {\n            return collection as Stream<T>;\n        }\n        if (isIterable(collection)) {\n            return new StreamImpl<Iterator<T, undefined>, T>(\n                () => collection[Symbol.iterator](),\n                (iterator) => iterator.next()\n            );\n        }\n        if (typeof collection.length === 'number') {\n            return new StreamImpl<{ index: number }, T>(\n                () => ({ index: 0 }),\n                (state) => {\n                    if (state.index < collection.length) {\n                        return { done: false, value: collection[state.index++] };\n                    } else {\n                        return DONE_RESULT;\n                    }\n                }\n            );\n        }\n    }\n    if (collections.length > 1) {\n        type State = { collIndex: number, iterator?: Iterator<T, undefined>, array?: ArrayLike<T>, arrIndex: number };\n        return new StreamImpl<State, T>(\n            () => ({ collIndex: 0, arrIndex: 0 }),\n            (state) => {\n                do {\n                    if (state.iterator) {\n                        const next = state.iterator.next();\n                        if (!next.done) {\n                            return next;\n                        }\n                        state.iterator = undefined;\n                    }\n                    if (state.array) {\n                        if (state.arrIndex < state.array.length) {\n                            return { done: false, value: state.array[state.arrIndex++] };\n                        }\n                        state.array = undefined;\n                        state.arrIndex = 0;\n                    }\n                    if (state.collIndex < collections.length) {\n                        const collection = collections[state.collIndex++];\n                        if (isIterable(collection)) {\n                            state.iterator = collection[Symbol.iterator]();\n                        } else if (collection && typeof collection.length === 'number') {\n                            state.array = collection;\n                        }\n                    }\n                } while (state.iterator || state.array || state.collIndex < collections.length);\n                return DONE_RESULT;\n            }\n        );\n    }\n    return EMPTY_STREAM;\n}\n\n/**\n * A tree iterator adds the ability to prune the current iteration.\n */\nexport interface TreeIterator<T> extends IterableIterator<T> {\n    /**\n     * Skip the whole subtree below the last returned element. The iteration continues as if that\n     * element had no children.\n     */\n    prune(): void\n}\n\n/**\n * A tree stream is used to stream the elements of a tree, for example an AST or CST.\n */\nexport interface TreeStream<T> extends Stream<T> {\n    iterator(): TreeIterator<T>\n}\n\n/**\n * The default implementation of `TreeStream` takes a root element and a function that computes the\n * children of its argument. Whether the root node included in the stream is controlled with the\n * `includeRoot` option, which defaults to `false`.\n */\nexport class TreeStreamImpl<T>\n    extends StreamImpl<{ iterators: Array<Iterator<T>>, pruned: boolean }, T>\n    implements TreeStream<T> {\n\n    constructor(root: T, children: (node: T) => Iterable<T>, options?: { includeRoot?: boolean }) {\n        super(\n            () => ({\n                iterators: options?.includeRoot ? [[root][Symbol.iterator]()] : [children(root)[Symbol.iterator]()],\n                pruned: false\n            }),\n            state => {\n                if (state.pruned) {\n                    state.iterators.pop();\n                    state.pruned = false;\n                }\n                while (state.iterators.length > 0) {\n                    const iterator = state.iterators[state.iterators.length - 1];\n                    const next = iterator.next();\n                    if (next.done) {\n                        state.iterators.pop();\n                    } else {\n                        state.iterators.push(children(next.value)[Symbol.iterator]());\n                        return next;\n                    }\n                }\n                return DONE_RESULT;\n            }\n        );\n    }\n\n    override iterator(): TreeIterator<T> {\n        const iterator = {\n            state: this.startFn(),\n            next: () => this.nextFn(iterator.state),\n            prune: () => {\n                iterator.state.pruned = true;\n            },\n            [Symbol.iterator]: () => iterator\n        };\n        return iterator;\n    }\n}\n\n/**\n * A set of utility functions that reduce a stream to a single value.\n */\nexport namespace Reduction {\n\n    /**\n     * Compute the sum of a number stream.\n     */\n    export function sum(stream: Stream<number>): number {\n        return stream.reduce((a, b) => a + b, 0);\n    }\n\n    /**\n     * Compute the product of a number stream.\n     */\n    export function product(stream: Stream<number>): number {\n        return stream.reduce((a, b) => a * b, 0);\n    }\n\n    /**\n     * Compute the minimum of a number stream. Returns `undefined` if the stream is empty.\n     */\n    export function min(stream: Stream<number>): number | undefined {\n        return stream.reduce((a, b) => Math.min(a, b));\n    }\n\n    /**\n     * Compute the maximum of a number stream. Returns `undefined` if the stream is empty.\n     */\n    export function max(stream: Stream<number>): number | undefined {\n        return stream.reduce((a, b) => Math.max(a, b));\n    }\n\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { IToken } from '@chevrotain/types';\nimport type { Range } from 'vscode-languageserver-types';\nimport type { CstNode, CompositeCstNode, LeafCstNode } from '../syntax-tree.js';\nimport type { DocumentSegment } from '../workspace/documents.js';\nimport type { Stream, TreeStream } from './stream.js';\nimport { isCompositeCstNode, isLeafCstNode, isRootCstNode } from '../syntax-tree.js';\nimport { TreeStreamImpl } from './stream.js';\n\n/**\n * Create a stream of all CST nodes that are directly and indirectly contained in the given root node,\n * including the root node itself.\n */\nexport function streamCst(node: CstNode): TreeStream<CstNode> {\n    return new TreeStreamImpl(node, element => {\n        if (isCompositeCstNode(element)) {\n            return element.content;\n        } else {\n            return [];\n        }\n    }, { includeRoot: true });\n}\n\n/**\n * Create a stream of all leaf nodes that are directly and indirectly contained in the given root node.\n */\nexport function flattenCst(node: CstNode): Stream<LeafCstNode> {\n    return streamCst(node).filter(isLeafCstNode);\n}\n\n/**\n * Determines whether the specified cst node is a child of the specified parent node.\n */\nexport function isChildNode(child: CstNode, parent: CstNode): boolean {\n    while (child.container) {\n        child = child.container;\n        if (child === parent) {\n            return true;\n        }\n    }\n    return false;\n}\n\nexport function tokenToRange(token: IToken): Range {\n    // Chevrotain uses 1-based indices everywhere\n    // So we subtract 1 from every value to align with the LSP\n    return {\n        start: {\n            character: token.startColumn! - 1,\n            line: token.startLine! - 1\n        },\n        end: {\n            character: token.endColumn!, // endColumn uses the correct index\n            line: token.endLine! - 1\n        }\n    };\n}\n\nexport function toDocumentSegment(node: CstNode): DocumentSegment;\nexport function toDocumentSegment(node?: CstNode): DocumentSegment | undefined;\nexport function toDocumentSegment(node?: CstNode): DocumentSegment | undefined {\n    if (!node) {\n        return undefined;\n    }\n    const { offset, end, range } = node;\n    return {\n        range,\n        offset,\n        end,\n        length: end - offset\n    };\n}\n\nexport enum RangeComparison {\n    Before = 0,\n    After = 1,\n    OverlapFront = 2,\n    OverlapBack = 3,\n    Inside = 4\n}\n\nexport function compareRange(range: Range, to: Range): RangeComparison {\n    if (range.end.line < to.start.line || (range.end.line === to.start.line && range.end.character < range.start.character)) {\n        return RangeComparison.Before;\n    } else if (range.start.line > to.end.line || (range.start.line === to.end.line && range.start.character > to.end.character)) {\n        return RangeComparison.After;\n    }\n    const startInside = range.start.line > to.start.line || (range.start.line === to.start.line && range.start.character >= to.start.character);\n    const endInside = range.end.line < to.end.line || (range.end.line === to.end.line && range.end.character <= to.end.character);\n    if (startInside && endInside) {\n        return RangeComparison.Inside;\n    } else if (startInside) {\n        return RangeComparison.OverlapBack;\n    } else {\n        return RangeComparison.OverlapFront;\n    }\n}\n\nexport function inRange(range: Range, to: Range): boolean {\n    const comparison = compareRange(range, to);\n    return comparison > RangeComparison.After;\n}\n\n// The \\p{L} regex matches any unicode letter character, i.e. characters from non-english alphabets\n// Together with \\w it matches any kind of character which can commonly appear in IDs\nexport const DefaultNameRegexp = /^[\\w\\p{L}]$/u;\n\n/**\n * Performs `findLeafNodeAtOffset` with a minor difference: When encountering a character that matches the `nameRegexp` argument,\n * it will instead return the leaf node at the `offset - 1` position.\n *\n * For LSP services, users expect that the declaration of an element is available if the cursor is directly after the element.\n */\nexport function findDeclarationNodeAtOffset(cstNode: CstNode | undefined, offset: number, nameRegexp = DefaultNameRegexp): LeafCstNode | undefined {\n    if (cstNode) {\n        if (offset > 0) {\n            const localOffset = offset - cstNode.offset;\n            const textAtOffset = cstNode.text.charAt(localOffset);\n            if (!nameRegexp.test(textAtOffset)) {\n                offset--;\n            }\n        }\n        return findLeafNodeAtOffset(cstNode, offset);\n    }\n    return undefined;\n}\n\nexport function findCommentNode(cstNode: CstNode | undefined, commentNames: string[]): CstNode | undefined {\n    if (cstNode) {\n        const previous = getPreviousNode(cstNode, true);\n        if (previous && isCommentNode(previous, commentNames)) {\n            return previous;\n        }\n        if (isRootCstNode(cstNode)) {\n            // Go from the first non-hidden node through all nodes in reverse order\n            // We do this to find the comment node which directly precedes the root node\n            const endIndex = cstNode.content.findIndex(e => !e.hidden);\n            for (let i = endIndex - 1; i >= 0; i--) {\n                const child = cstNode.content[i];\n                if (isCommentNode(child, commentNames)) {\n                    return child;\n                }\n            }\n        }\n    }\n    return undefined;\n}\n\nexport function isCommentNode(cstNode: CstNode, commentNames: string[]): boolean {\n    return isLeafCstNode(cstNode) && commentNames.includes(cstNode.tokenType.name);\n}\n\n/**\n * Finds the leaf CST node at the specified 0-based string offset.\n * Note that the given offset will be within the range of the returned leaf node.\n *\n * If the offset does not point to a CST node (but just white space), this method will return `undefined`.\n *\n * @param node The CST node to search through.\n * @param offset The specified offset.\n * @returns The CST node at the specified offset.\n */\nexport function findLeafNodeAtOffset(node: CstNode, offset: number): LeafCstNode | undefined {\n    if (isLeafCstNode(node)) {\n        return node;\n    } else if (isCompositeCstNode(node)) {\n        const searchResult = binarySearch(node, offset, false);\n        if (searchResult) {\n            return findLeafNodeAtOffset(searchResult, offset);\n        }\n    }\n    return undefined;\n}\n\n/**\n * Finds the leaf CST node at the specified 0-based string offset.\n * If no CST node exists at the specified position, it will return the leaf node before it.\n *\n * If there is no leaf node before the specified offset, this method will return `undefined`.\n *\n * @param node The CST node to search through.\n * @param offset The specified offset.\n * @returns The CST node closest to the specified offset.\n */\nexport function findLeafNodeBeforeOffset(node: CstNode, offset: number): LeafCstNode | undefined {\n    if (isLeafCstNode(node)) {\n        return node;\n    } else if (isCompositeCstNode(node)) {\n        const searchResult = binarySearch(node, offset, true);\n        if (searchResult) {\n            return findLeafNodeBeforeOffset(searchResult, offset);\n        }\n    }\n    return undefined;\n}\n\nfunction binarySearch(node: CompositeCstNode, offset: number, closest: boolean): CstNode | undefined {\n    let left = 0;\n    let right = node.content.length - 1;\n    let closestNode: CstNode | undefined = undefined;\n\n    while (left <= right) {\n        const middle = Math.floor((left + right) / 2);\n        const middleNode = node.content[middle];\n\n        if (middleNode.offset <= offset && middleNode.end > offset) {\n            // Found an exact match\n            return middleNode;\n        }\n\n        if (middleNode.end <= offset) {\n            // Update the closest node (less than offset) and move to the right half\n            closestNode = closest ? middleNode : undefined;\n            left = middle + 1;\n        } else {\n            // Move to the left half\n            right = middle - 1;\n        }\n    }\n\n    return closestNode;\n}\n\nexport function getPreviousNode(node: CstNode, hidden = true): CstNode | undefined {\n    while (node.container) {\n        const parent = node.container;\n        let index = parent.content.indexOf(node);\n        while (index > 0) {\n            index--;\n            const previous = parent.content[index];\n            if (hidden || !previous.hidden) {\n                return previous;\n            }\n        }\n        node = parent;\n    }\n    return undefined;\n}\n\nexport function getNextNode(node: CstNode, hidden = true): CstNode | undefined {\n    while (node.container) {\n        const parent = node.container;\n        let index = parent.content.indexOf(node);\n        const last = parent.content.length - 1;\n        while (index < last) {\n            index++;\n            const next = parent.content[index];\n            if (hidden || !next.hidden) {\n                return next;\n            }\n        }\n        node = parent;\n    }\n    return undefined;\n}\n\nexport function getStartlineNode(node: CstNode): CstNode {\n    if (node.range.start.character === 0) {\n        return node;\n    }\n    const line = node.range.start.line;\n    let last = node;\n    let index: number | undefined;\n    while (node.container) {\n        const parent = node.container;\n        const selfIndex = index ?? parent.content.indexOf(node);\n        if (selfIndex === 0) {\n            node = parent;\n            index = undefined;\n        } else {\n            index = selfIndex - 1;\n            node = parent.content[index];\n        }\n        if (node.range.start.line !== line) {\n            break;\n        }\n        last = node;\n    }\n    return last;\n}\n\nexport function getInteriorNodes(start: CstNode, end: CstNode): CstNode[] {\n    const commonParent = getCommonParent(start, end);\n    if (!commonParent) {\n        return [];\n    }\n    return commonParent.parent.content.slice(commonParent.a + 1, commonParent.b);\n}\n\nfunction getCommonParent(a: CstNode, b: CstNode): CommonParent | undefined {\n    const aParents = getParentChain(a);\n    const bParents = getParentChain(b);\n    let current: CommonParent | undefined;\n    for (let i = 0; i < aParents.length && i < bParents.length; i++) {\n        const aParent = aParents[i];\n        const bParent = bParents[i];\n        if (aParent.parent === bParent.parent) {\n            current = {\n                parent: aParent.parent,\n                a: aParent.index,\n                b: bParent.index\n            };\n        } else {\n            break;\n        }\n    }\n    return current;\n}\n\ninterface CommonParent {\n    parent: CompositeCstNode\n    a: number\n    b: number\n}\n\nfunction getParentChain(node: CstNode): ParentLink[] {\n    const chain: ParentLink[] = [];\n    while (node.container) {\n        const parent = node.container;\n        const index = parent.content.indexOf(node);\n        chain.push({\n            parent,\n            index\n        });\n        node = parent;\n    }\n    return chain.reverse();\n}\n\ninterface ParentLink {\n    parent: CompositeCstNode\n    index: number\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { CstNode } from '../syntax-tree.js';\n\nexport class ErrorWithLocation extends Error {\n    constructor(node: CstNode | undefined, message: string) {\n        super(node ? `${message} at ${node.range.start.line}:${node.range.start.character}` : message);\n    }\n}\n\nexport function assertUnreachable(_: never): never {\n    throw new Error('Error! The input value was not handled.');\n}\n","/******************************************************************************\n * This file was generated by langium-cli 3.0.0.\n * DO NOT EDIT MANUALLY!\n ******************************************************************************/\n\n/* eslint-disable */\nimport type { AstNode, Reference, ReferenceInfo, TypeMetaData } from '../../syntax-tree.js';\nimport { AbstractAstReflection } from '../../syntax-tree.js';\n\nexport const LangiumGrammarTerminals = {\n    ID: /\\^?[_a-zA-Z][\\w_]*/,\n    STRING: /\"(\\\\.|[^\"\\\\])*\"|'(\\\\.|[^'\\\\])*'/,\n    NUMBER: /NaN|-?((\\d*\\.\\d+|\\d+)([Ee][+-]?\\d+)?|Infinity)/,\n    RegexLiteral: /\\/(?![*+?])(?:[^\\r\\n\\[/\\\\]|\\\\.|\\[(?:[^\\r\\n\\]\\\\]|\\\\.)*\\])+\\/[a-z]*/,\n    WS: /\\s+/,\n    ML_COMMENT: /\\/\\*[\\s\\S]*?\\*\\//,\n    SL_COMMENT: /\\/\\/[^\\n\\r]*/,\n};\n\nexport type AbstractRule = ParserRule | TerminalRule;\n\nexport const AbstractRule = 'AbstractRule';\n\nexport function isAbstractRule(item: unknown): item is AbstractRule {\n    return reflection.isInstance(item, AbstractRule);\n}\n\nexport type AbstractType = InferredType | Interface | ParserRule | Type;\n\nexport const AbstractType = 'AbstractType';\n\nexport function isAbstractType(item: unknown): item is AbstractType {\n    return reflection.isInstance(item, AbstractType);\n}\n\nexport type Condition = BooleanLiteral | Conjunction | Disjunction | Negation | ParameterReference;\n\nexport const Condition = 'Condition';\n\nexport function isCondition(item: unknown): item is Condition {\n    return reflection.isInstance(item, Condition);\n}\n\nexport type FeatureName = 'current' | 'entry' | 'extends' | 'false' | 'fragment' | 'grammar' | 'hidden' | 'import' | 'infer' | 'infers' | 'interface' | 'returns' | 'terminal' | 'true' | 'type' | 'with' | PrimitiveType | string;\n\nexport function isFeatureName(item: unknown): item is FeatureName {\n    return isPrimitiveType(item) || item === 'current' || item === 'entry' || item === 'extends' || item === 'false' || item === 'fragment' || item === 'grammar' || item === 'hidden' || item === 'import' || item === 'interface' || item === 'returns' || item === 'terminal' || item === 'true' || item === 'type' || item === 'infer' || item === 'infers' || item === 'with' || (typeof item === 'string' && (/\\^?[_a-zA-Z][\\w_]*/.test(item)));\n}\n\nexport type PrimitiveType = 'Date' | 'bigint' | 'boolean' | 'number' | 'string';\n\nexport function isPrimitiveType(item: unknown): item is PrimitiveType {\n    return item === 'string' || item === 'number' || item === 'boolean' || item === 'Date' || item === 'bigint';\n}\n\nexport type TypeDefinition = ArrayType | ReferenceType | SimpleType | UnionType;\n\nexport const TypeDefinition = 'TypeDefinition';\n\nexport function isTypeDefinition(item: unknown): item is TypeDefinition {\n    return reflection.isInstance(item, TypeDefinition);\n}\n\nexport type ValueLiteral = ArrayLiteral | BooleanLiteral | NumberLiteral | StringLiteral;\n\nexport const ValueLiteral = 'ValueLiteral';\n\nexport function isValueLiteral(item: unknown): item is ValueLiteral {\n    return reflection.isInstance(item, ValueLiteral);\n}\n\nexport interface AbstractElement extends AstNode {\n    readonly $type: 'AbstractElement' | 'Action' | 'Alternatives' | 'Assignment' | 'CharacterRange' | 'CrossReference' | 'EndOfFile' | 'Group' | 'Keyword' | 'NegatedToken' | 'RegexToken' | 'RuleCall' | 'TerminalAlternatives' | 'TerminalGroup' | 'TerminalRuleCall' | 'UnorderedGroup' | 'UntilToken' | 'Wildcard';\n    cardinality?: '*' | '+' | '?';\n    lookahead?: '?!' | '?<!' | '?<=' | '?=';\n}\n\nexport const AbstractElement = 'AbstractElement';\n\nexport function isAbstractElement(item: unknown): item is AbstractElement {\n    return reflection.isInstance(item, AbstractElement);\n}\n\nexport interface ArrayLiteral extends AstNode {\n    readonly $container: ArrayLiteral | TypeAttribute;\n    readonly $type: 'ArrayLiteral';\n    elements: Array<ValueLiteral>;\n}\n\nexport const ArrayLiteral = 'ArrayLiteral';\n\nexport function isArrayLiteral(item: unknown): item is ArrayLiteral {\n    return reflection.isInstance(item, ArrayLiteral);\n}\n\nexport interface ArrayType extends AstNode {\n    readonly $container: ArrayType | ReferenceType | Type | TypeAttribute | UnionType;\n    readonly $type: 'ArrayType';\n    elementType: TypeDefinition;\n}\n\nexport const ArrayType = 'ArrayType';\n\nexport function isArrayType(item: unknown): item is ArrayType {\n    return reflection.isInstance(item, ArrayType);\n}\n\nexport interface BooleanLiteral extends AstNode {\n    readonly $container: ArrayLiteral | Conjunction | Disjunction | Group | NamedArgument | Negation | TypeAttribute;\n    readonly $type: 'BooleanLiteral';\n    true: boolean;\n}\n\nexport const BooleanLiteral = 'BooleanLiteral';\n\nexport function isBooleanLiteral(item: unknown): item is BooleanLiteral {\n    return reflection.isInstance(item, BooleanLiteral);\n}\n\nexport interface Conjunction extends AstNode {\n    readonly $container: Conjunction | Disjunction | Group | NamedArgument | Negation;\n    readonly $type: 'Conjunction';\n    left: Condition;\n    right: Condition;\n}\n\nexport const Conjunction = 'Conjunction';\n\nexport function isConjunction(item: unknown): item is Conjunction {\n    return reflection.isInstance(item, Conjunction);\n}\n\nexport interface Disjunction extends AstNode {\n    readonly $container: Conjunction | Disjunction | Group | NamedArgument | Negation;\n    readonly $type: 'Disjunction';\n    left: Condition;\n    right: Condition;\n}\n\nexport const Disjunction = 'Disjunction';\n\nexport function isDisjunction(item: unknown): item is Disjunction {\n    return reflection.isInstance(item, Disjunction);\n}\n\nexport interface Grammar extends AstNode {\n    readonly $type: 'Grammar';\n    definesHiddenTokens: boolean;\n    hiddenTokens: Array<Reference<AbstractRule>>;\n    imports: Array<GrammarImport>;\n    interfaces: Array<Interface>;\n    isDeclared: boolean;\n    name?: string;\n    rules: Array<AbstractRule>;\n    types: Array<Type>;\n    usedGrammars: Array<Reference<Grammar>>;\n}\n\nexport const Grammar = 'Grammar';\n\nexport function isGrammar(item: unknown): item is Grammar {\n    return reflection.isInstance(item, Grammar);\n}\n\nexport interface GrammarImport extends AstNode {\n    readonly $container: Grammar;\n    readonly $type: 'GrammarImport';\n    path: string;\n}\n\nexport const GrammarImport = 'GrammarImport';\n\nexport function isGrammarImport(item: unknown): item is GrammarImport {\n    return reflection.isInstance(item, GrammarImport);\n}\n\nexport interface InferredType extends AstNode {\n    readonly $container: Action | ParserRule;\n    readonly $type: 'InferredType';\n    name: string;\n}\n\nexport const InferredType = 'InferredType';\n\nexport function isInferredType(item: unknown): item is InferredType {\n    return reflection.isInstance(item, InferredType);\n}\n\nexport interface Interface extends AstNode {\n    readonly $container: Grammar;\n    readonly $type: 'Interface';\n    attributes: Array<TypeAttribute>;\n    name: string;\n    superTypes: Array<Reference<AbstractType>>;\n}\n\nexport const Interface = 'Interface';\n\nexport function isInterface(item: unknown): item is Interface {\n    return reflection.isInstance(item, Interface);\n}\n\nexport interface NamedArgument extends AstNode {\n    readonly $container: RuleCall;\n    readonly $type: 'NamedArgument';\n    calledByName: boolean;\n    parameter?: Reference<Parameter>;\n    value: Condition;\n}\n\nexport const NamedArgument = 'NamedArgument';\n\nexport function isNamedArgument(item: unknown): item is NamedArgument {\n    return reflection.isInstance(item, NamedArgument);\n}\n\nexport interface Negation extends AstNode {\n    readonly $container: Conjunction | Disjunction | Group | NamedArgument | Negation;\n    readonly $type: 'Negation';\n    value: Condition;\n}\n\nexport const Negation = 'Negation';\n\nexport function isNegation(item: unknown): item is Negation {\n    return reflection.isInstance(item, Negation);\n}\n\nexport interface NumberLiteral extends AstNode {\n    readonly $container: ArrayLiteral | TypeAttribute;\n    readonly $type: 'NumberLiteral';\n    value: number;\n}\n\nexport const NumberLiteral = 'NumberLiteral';\n\nexport function isNumberLiteral(item: unknown): item is NumberLiteral {\n    return reflection.isInstance(item, NumberLiteral);\n}\n\nexport interface Parameter extends AstNode {\n    readonly $container: ParserRule;\n    readonly $type: 'Parameter';\n    name: string;\n}\n\nexport const Parameter = 'Parameter';\n\nexport function isParameter(item: unknown): item is Parameter {\n    return reflection.isInstance(item, Parameter);\n}\n\nexport interface ParameterReference extends AstNode {\n    readonly $container: Conjunction | Disjunction | Group | NamedArgument | Negation;\n    readonly $type: 'ParameterReference';\n    parameter: Reference<Parameter>;\n}\n\nexport const ParameterReference = 'ParameterReference';\n\nexport function isParameterReference(item: unknown): item is ParameterReference {\n    return reflection.isInstance(item, ParameterReference);\n}\n\nexport interface ParserRule extends AstNode {\n    readonly $container: Grammar;\n    readonly $type: 'ParserRule';\n    dataType?: PrimitiveType;\n    definesHiddenTokens: boolean;\n    definition: AbstractElement;\n    entry: boolean;\n    fragment: boolean;\n    hiddenTokens: Array<Reference<AbstractRule>>;\n    inferredType?: InferredType;\n    name: string;\n    parameters: Array<Parameter>;\n    returnType?: Reference<AbstractType>;\n    wildcard: boolean;\n}\n\nexport const ParserRule = 'ParserRule';\n\nexport function isParserRule(item: unknown): item is ParserRule {\n    return reflection.isInstance(item, ParserRule);\n}\n\nexport interface ReferenceType extends AstNode {\n    readonly $container: ArrayType | ReferenceType | Type | TypeAttribute | UnionType;\n    readonly $type: 'ReferenceType';\n    referenceType: TypeDefinition;\n}\n\nexport const ReferenceType = 'ReferenceType';\n\nexport function isReferenceType(item: unknown): item is ReferenceType {\n    return reflection.isInstance(item, ReferenceType);\n}\n\nexport interface ReturnType extends AstNode {\n    readonly $container: TerminalRule;\n    readonly $type: 'ReturnType';\n    name: PrimitiveType | string;\n}\n\nexport const ReturnType = 'ReturnType';\n\nexport function isReturnType(item: unknown): item is ReturnType {\n    return reflection.isInstance(item, ReturnType);\n}\n\nexport interface SimpleType extends AstNode {\n    readonly $container: ArrayType | ReferenceType | Type | TypeAttribute | UnionType;\n    readonly $type: 'SimpleType';\n    primitiveType?: PrimitiveType;\n    stringType?: string;\n    typeRef?: Reference<AbstractType>;\n}\n\nexport const SimpleType = 'SimpleType';\n\nexport function isSimpleType(item: unknown): item is SimpleType {\n    return reflection.isInstance(item, SimpleType);\n}\n\nexport interface StringLiteral extends AstNode {\n    readonly $container: ArrayLiteral | TypeAttribute;\n    readonly $type: 'StringLiteral';\n    value: string;\n}\n\nexport const StringLiteral = 'StringLiteral';\n\nexport function isStringLiteral(item: unknown): item is StringLiteral {\n    return reflection.isInstance(item, StringLiteral);\n}\n\nexport interface TerminalRule extends AstNode {\n    readonly $container: Grammar;\n    readonly $type: 'TerminalRule';\n    definition: AbstractElement;\n    fragment: boolean;\n    hidden: boolean;\n    name: string;\n    type?: ReturnType;\n}\n\nexport const TerminalRule = 'TerminalRule';\n\nexport function isTerminalRule(item: unknown): item is TerminalRule {\n    return reflection.isInstance(item, TerminalRule);\n}\n\nexport interface Type extends AstNode {\n    readonly $container: Grammar;\n    readonly $type: 'Type';\n    name: string;\n    type: TypeDefinition;\n}\n\nexport const Type = 'Type';\n\nexport function isType(item: unknown): item is Type {\n    return reflection.isInstance(item, Type);\n}\n\nexport interface TypeAttribute extends AstNode {\n    readonly $container: Interface;\n    readonly $type: 'TypeAttribute';\n    defaultValue?: ValueLiteral;\n    isOptional: boolean;\n    name: FeatureName;\n    type: TypeDefinition;\n}\n\nexport const TypeAttribute = 'TypeAttribute';\n\nexport function isTypeAttribute(item: unknown): item is TypeAttribute {\n    return reflection.isInstance(item, TypeAttribute);\n}\n\nexport interface UnionType extends AstNode {\n    readonly $container: ArrayType | ReferenceType | Type | TypeAttribute | UnionType;\n    readonly $type: 'UnionType';\n    types: Array<TypeDefinition>;\n}\n\nexport const UnionType = 'UnionType';\n\nexport function isUnionType(item: unknown): item is UnionType {\n    return reflection.isInstance(item, UnionType);\n}\n\nexport interface Action extends AbstractElement {\n    readonly $type: 'Action';\n    feature?: FeatureName;\n    inferredType?: InferredType;\n    operator?: '+=' | '=';\n    type?: Reference<AbstractType>;\n}\n\nexport const Action = 'Action';\n\nexport function isAction(item: unknown): item is Action {\n    return reflection.isInstance(item, Action);\n}\n\nexport interface Alternatives extends AbstractElement {\n    readonly $type: 'Alternatives';\n    elements: Array<AbstractElement>;\n}\n\nexport const Alternatives = 'Alternatives';\n\nexport function isAlternatives(item: unknown): item is Alternatives {\n    return reflection.isInstance(item, Alternatives);\n}\n\nexport interface Assignment extends AbstractElement {\n    readonly $type: 'Assignment';\n    feature: FeatureName;\n    operator: '+=' | '=' | '?=';\n    terminal: AbstractElement;\n}\n\nexport const Assignment = 'Assignment';\n\nexport function isAssignment(item: unknown): item is Assignment {\n    return reflection.isInstance(item, Assignment);\n}\n\nexport interface CharacterRange extends AbstractElement {\n    readonly $type: 'CharacterRange';\n    left: Keyword;\n    right?: Keyword;\n}\n\nexport const CharacterRange = 'CharacterRange';\n\nexport function isCharacterRange(item: unknown): item is CharacterRange {\n    return reflection.isInstance(item, CharacterRange);\n}\n\nexport interface CrossReference extends AbstractElement {\n    readonly $type: 'CrossReference';\n    deprecatedSyntax: boolean;\n    terminal?: AbstractElement;\n    type: Reference<AbstractType>;\n}\n\nexport const CrossReference = 'CrossReference';\n\nexport function isCrossReference(item: unknown): item is CrossReference {\n    return reflection.isInstance(item, CrossReference);\n}\n\nexport interface EndOfFile extends AbstractElement {\n    readonly $type: 'EndOfFile';\n}\n\nexport const EndOfFile = 'EndOfFile';\n\nexport function isEndOfFile(item: unknown): item is EndOfFile {\n    return reflection.isInstance(item, EndOfFile);\n}\n\nexport interface Group extends AbstractElement {\n    readonly $type: 'Group';\n    elements: Array<AbstractElement>;\n    guardCondition?: Condition;\n}\n\nexport const Group = 'Group';\n\nexport function isGroup(item: unknown): item is Group {\n    return reflection.isInstance(item, Group);\n}\n\nexport interface Keyword extends AbstractElement {\n    readonly $container: CharacterRange;\n    readonly $type: 'Keyword';\n    value: string;\n}\n\nexport const Keyword = 'Keyword';\n\nexport function isKeyword(item: unknown): item is Keyword {\n    return reflection.isInstance(item, Keyword);\n}\n\nexport interface NegatedToken extends AbstractElement {\n    readonly $type: 'NegatedToken';\n    terminal: AbstractElement;\n}\n\nexport const NegatedToken = 'NegatedToken';\n\nexport function isNegatedToken(item: unknown): item is NegatedToken {\n    return reflection.isInstance(item, NegatedToken);\n}\n\nexport interface RegexToken extends AbstractElement {\n    readonly $type: 'RegexToken';\n    regex: string;\n}\n\nexport const RegexToken = 'RegexToken';\n\nexport function isRegexToken(item: unknown): item is RegexToken {\n    return reflection.isInstance(item, RegexToken);\n}\n\nexport interface RuleCall extends AbstractElement {\n    readonly $type: 'RuleCall';\n    arguments: Array<NamedArgument>;\n    rule: Reference<AbstractRule>;\n}\n\nexport const RuleCall = 'RuleCall';\n\nexport function isRuleCall(item: unknown): item is RuleCall {\n    return reflection.isInstance(item, RuleCall);\n}\n\nexport interface TerminalAlternatives extends AbstractElement {\n    readonly $type: 'TerminalAlternatives';\n    elements: Array<AbstractElement>;\n}\n\nexport const TerminalAlternatives = 'TerminalAlternatives';\n\nexport function isTerminalAlternatives(item: unknown): item is TerminalAlternatives {\n    return reflection.isInstance(item, TerminalAlternatives);\n}\n\nexport interface TerminalGroup extends AbstractElement {\n    readonly $type: 'TerminalGroup';\n    elements: Array<AbstractElement>;\n}\n\nexport const TerminalGroup = 'TerminalGroup';\n\nexport function isTerminalGroup(item: unknown): item is TerminalGroup {\n    return reflection.isInstance(item, TerminalGroup);\n}\n\nexport interface TerminalRuleCall extends AbstractElement {\n    readonly $type: 'TerminalRuleCall';\n    rule: Reference<TerminalRule>;\n}\n\nexport const TerminalRuleCall = 'TerminalRuleCall';\n\nexport function isTerminalRuleCall(item: unknown): item is TerminalRuleCall {\n    return reflection.isInstance(item, TerminalRuleCall);\n}\n\nexport interface UnorderedGroup extends AbstractElement {\n    readonly $type: 'UnorderedGroup';\n    elements: Array<AbstractElement>;\n}\n\nexport const UnorderedGroup = 'UnorderedGroup';\n\nexport function isUnorderedGroup(item: unknown): item is UnorderedGroup {\n    return reflection.isInstance(item, UnorderedGroup);\n}\n\nexport interface UntilToken extends AbstractElement {\n    readonly $type: 'UntilToken';\n    terminal: AbstractElement;\n}\n\nexport const UntilToken = 'UntilToken';\n\nexport function isUntilToken(item: unknown): item is UntilToken {\n    return reflection.isInstance(item, UntilToken);\n}\n\nexport interface Wildcard extends AbstractElement {\n    readonly $type: 'Wildcard';\n}\n\nexport const Wildcard = 'Wildcard';\n\nexport function isWildcard(item: unknown): item is Wildcard {\n    return reflection.isInstance(item, Wildcard);\n}\n\nexport type LangiumGrammarAstType = {\n    AbstractElement: AbstractElement\n    AbstractRule: AbstractRule\n    AbstractType: AbstractType\n    Action: Action\n    Alternatives: Alternatives\n    ArrayLiteral: ArrayLiteral\n    ArrayType: ArrayType\n    Assignment: Assignment\n    BooleanLiteral: BooleanLiteral\n    CharacterRange: CharacterRange\n    Condition: Condition\n    Conjunction: Conjunction\n    CrossReference: CrossReference\n    Disjunction: Disjunction\n    EndOfFile: EndOfFile\n    Grammar: Grammar\n    GrammarImport: GrammarImport\n    Group: Group\n    InferredType: InferredType\n    Interface: Interface\n    Keyword: Keyword\n    NamedArgument: NamedArgument\n    NegatedToken: NegatedToken\n    Negation: Negation\n    NumberLiteral: NumberLiteral\n    Parameter: Parameter\n    ParameterReference: ParameterReference\n    ParserRule: ParserRule\n    ReferenceType: ReferenceType\n    RegexToken: RegexToken\n    ReturnType: ReturnType\n    RuleCall: RuleCall\n    SimpleType: SimpleType\n    StringLiteral: StringLiteral\n    TerminalAlternatives: TerminalAlternatives\n    TerminalGroup: TerminalGroup\n    TerminalRule: TerminalRule\n    TerminalRuleCall: TerminalRuleCall\n    Type: Type\n    TypeAttribute: TypeAttribute\n    TypeDefinition: TypeDefinition\n    UnionType: UnionType\n    UnorderedGroup: UnorderedGroup\n    UntilToken: UntilToken\n    ValueLiteral: ValueLiteral\n    Wildcard: Wildcard\n}\n\nexport class LangiumGrammarAstReflection extends AbstractAstReflection {\n\n    getAllTypes(): string[] {\n        return ['AbstractElement', 'AbstractRule', 'AbstractType', 'Action', 'Alternatives', 'ArrayLiteral', 'ArrayType', 'Assignment', 'BooleanLiteral', 'CharacterRange', 'Condition', 'Conjunction', 'CrossReference', 'Disjunction', 'EndOfFile', 'Grammar', 'GrammarImport', 'Group', 'InferredType', 'Interface', 'Keyword', 'NamedArgument', 'NegatedToken', 'Negation', 'NumberLiteral', 'Parameter', 'ParameterReference', 'ParserRule', 'ReferenceType', 'RegexToken', 'ReturnType', 'RuleCall', 'SimpleType', 'StringLiteral', 'TerminalAlternatives', 'TerminalGroup', 'TerminalRule', 'TerminalRuleCall', 'Type', 'TypeAttribute', 'TypeDefinition', 'UnionType', 'UnorderedGroup', 'UntilToken', 'ValueLiteral', 'Wildcard'];\n    }\n\n    protected override computeIsSubtype(subtype: string, supertype: string): boolean {\n        switch (subtype) {\n            case Action:\n            case Alternatives:\n            case Assignment:\n            case CharacterRange:\n            case CrossReference:\n            case EndOfFile:\n            case Group:\n            case Keyword:\n            case NegatedToken:\n            case RegexToken:\n            case RuleCall:\n            case TerminalAlternatives:\n            case TerminalGroup:\n            case TerminalRuleCall:\n            case UnorderedGroup:\n            case UntilToken:\n            case Wildcard: {\n                return this.isSubtype(AbstractElement, supertype);\n            }\n            case ArrayLiteral:\n            case NumberLiteral:\n            case StringLiteral: {\n                return this.isSubtype(ValueLiteral, supertype);\n            }\n            case ArrayType:\n            case ReferenceType:\n            case SimpleType:\n            case UnionType: {\n                return this.isSubtype(TypeDefinition, supertype);\n            }\n            case BooleanLiteral: {\n                return this.isSubtype(Condition, supertype) || this.isSubtype(ValueLiteral, supertype);\n            }\n            case Conjunction:\n            case Disjunction:\n            case Negation:\n            case ParameterReference: {\n                return this.isSubtype(Condition, supertype);\n            }\n            case InferredType:\n            case Interface:\n            case Type: {\n                return this.isSubtype(AbstractType, supertype);\n            }\n            case ParserRule: {\n                return this.isSubtype(AbstractRule, supertype) || this.isSubtype(AbstractType, supertype);\n            }\n            case TerminalRule: {\n                return this.isSubtype(AbstractRule, supertype);\n            }\n            default: {\n                return false;\n            }\n        }\n    }\n\n    getReferenceType(refInfo: ReferenceInfo): string {\n        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;\n        switch (referenceId) {\n            case 'Action:type':\n            case 'CrossReference:type':\n            case 'Interface:superTypes':\n            case 'ParserRule:returnType':\n            case 'SimpleType:typeRef': {\n                return AbstractType;\n            }\n            case 'Grammar:hiddenTokens':\n            case 'ParserRule:hiddenTokens':\n            case 'RuleCall:rule': {\n                return AbstractRule;\n            }\n            case 'Grammar:usedGrammars': {\n                return Grammar;\n            }\n            case 'NamedArgument:parameter':\n            case 'ParameterReference:parameter': {\n                return Parameter;\n            }\n            case 'TerminalRuleCall:rule': {\n                return TerminalRule;\n            }\n            default: {\n                throw new Error(`${referenceId} is not a valid reference id.`);\n            }\n        }\n    }\n\n    getTypeMetaData(type: string): TypeMetaData {\n        switch (type) {\n            case 'AbstractElement': {\n                return {\n                    name: 'AbstractElement',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'lookahead' }\n                    ]\n                };\n            }\n            case 'ArrayLiteral': {\n                return {\n                    name: 'ArrayLiteral',\n                    properties: [\n                        { name: 'elements', defaultValue: [] }\n                    ]\n                };\n            }\n            case 'ArrayType': {\n                return {\n                    name: 'ArrayType',\n                    properties: [\n                        { name: 'elementType' }\n                    ]\n                };\n            }\n            case 'BooleanLiteral': {\n                return {\n                    name: 'BooleanLiteral',\n                    properties: [\n                        { name: 'true', defaultValue: false }\n                    ]\n                };\n            }\n            case 'Conjunction': {\n                return {\n                    name: 'Conjunction',\n                    properties: [\n                        { name: 'left' },\n                        { name: 'right' }\n                    ]\n                };\n            }\n            case 'Disjunction': {\n                return {\n                    name: 'Disjunction',\n                    properties: [\n                        { name: 'left' },\n                        { name: 'right' }\n                    ]\n                };\n            }\n            case 'Grammar': {\n                return {\n                    name: 'Grammar',\n                    properties: [\n                        { name: 'definesHiddenTokens', defaultValue: false },\n                        { name: 'hiddenTokens', defaultValue: [] },\n                        { name: 'imports', defaultValue: [] },\n                        { name: 'interfaces', defaultValue: [] },\n                        { name: 'isDeclared', defaultValue: false },\n                        { name: 'name' },\n                        { name: 'rules', defaultValue: [] },\n                        { name: 'types', defaultValue: [] },\n                        { name: 'usedGrammars', defaultValue: [] }\n                    ]\n                };\n            }\n            case 'GrammarImport': {\n                return {\n                    name: 'GrammarImport',\n                    properties: [\n                        { name: 'path' }\n                    ]\n                };\n            }\n            case 'InferredType': {\n                return {\n                    name: 'InferredType',\n                    properties: [\n                        { name: 'name' }\n                    ]\n                };\n            }\n            case 'Interface': {\n                return {\n                    name: 'Interface',\n                    properties: [\n                        { name: 'attributes', defaultValue: [] },\n                        { name: 'name' },\n                        { name: 'superTypes', defaultValue: [] }\n                    ]\n                };\n            }\n            case 'NamedArgument': {\n                return {\n                    name: 'NamedArgument',\n                    properties: [\n                        { name: 'calledByName', defaultValue: false },\n                        { name: 'parameter' },\n                        { name: 'value' }\n                    ]\n                };\n            }\n            case 'Negation': {\n                return {\n                    name: 'Negation',\n                    properties: [\n                        { name: 'value' }\n                    ]\n                };\n            }\n            case 'NumberLiteral': {\n                return {\n                    name: 'NumberLiteral',\n                    properties: [\n                        { name: 'value' }\n                    ]\n                };\n            }\n            case 'Parameter': {\n                return {\n                    name: 'Parameter',\n                    properties: [\n                        { name: 'name' }\n                    ]\n                };\n            }\n            case 'ParameterReference': {\n                return {\n                    name: 'ParameterReference',\n                    properties: [\n                        { name: 'parameter' }\n                    ]\n                };\n            }\n            case 'ParserRule': {\n                return {\n                    name: 'ParserRule',\n                    properties: [\n                        { name: 'dataType' },\n                        { name: 'definesHiddenTokens', defaultValue: false },\n                        { name: 'definition' },\n                        { name: 'entry', defaultValue: false },\n                        { name: 'fragment', defaultValue: false },\n                        { name: 'hiddenTokens', defaultValue: [] },\n                        { name: 'inferredType' },\n                        { name: 'name' },\n                        { name: 'parameters', defaultValue: [] },\n                        { name: 'returnType' },\n                        { name: 'wildcard', defaultValue: false }\n                    ]\n                };\n            }\n            case 'ReferenceType': {\n                return {\n                    name: 'ReferenceType',\n                    properties: [\n                        { name: 'referenceType' }\n                    ]\n                };\n            }\n            case 'ReturnType': {\n                return {\n                    name: 'ReturnType',\n                    properties: [\n                        { name: 'name' }\n                    ]\n                };\n            }\n            case 'SimpleType': {\n                return {\n                    name: 'SimpleType',\n                    properties: [\n                        { name: 'primitiveType' },\n                        { name: 'stringType' },\n                        { name: 'typeRef' }\n                    ]\n                };\n            }\n            case 'StringLiteral': {\n                return {\n                    name: 'StringLiteral',\n                    properties: [\n                        { name: 'value' }\n                    ]\n                };\n            }\n            case 'TerminalRule': {\n                return {\n                    name: 'TerminalRule',\n                    properties: [\n                        { name: 'definition' },\n                        { name: 'fragment', defaultValue: false },\n                        { name: 'hidden', defaultValue: false },\n                        { name: 'name' },\n                        { name: 'type' }\n                    ]\n                };\n            }\n            case 'Type': {\n                return {\n                    name: 'Type',\n                    properties: [\n                        { name: 'name' },\n                        { name: 'type' }\n                    ]\n                };\n            }\n            case 'TypeAttribute': {\n                return {\n                    name: 'TypeAttribute',\n                    properties: [\n                        { name: 'defaultValue' },\n                        { name: 'isOptional', defaultValue: false },\n                        { name: 'name' },\n                        { name: 'type' }\n                    ]\n                };\n            }\n            case 'UnionType': {\n                return {\n                    name: 'UnionType',\n                    properties: [\n                        { name: 'types', defaultValue: [] }\n                    ]\n                };\n            }\n            case 'Action': {\n                return {\n                    name: 'Action',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'feature' },\n                        { name: 'inferredType' },\n                        { name: 'lookahead' },\n                        { name: 'operator' },\n                        { name: 'type' }\n                    ]\n                };\n            }\n            case 'Alternatives': {\n                return {\n                    name: 'Alternatives',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'elements', defaultValue: [] },\n                        { name: 'lookahead' }\n                    ]\n                };\n            }\n            case 'Assignment': {\n                return {\n                    name: 'Assignment',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'feature' },\n                        { name: 'lookahead' },\n                        { name: 'operator' },\n                        { name: 'terminal' }\n                    ]\n                };\n            }\n            case 'CharacterRange': {\n                return {\n                    name: 'CharacterRange',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'left' },\n                        { name: 'lookahead' },\n                        { name: 'right' }\n                    ]\n                };\n            }\n            case 'CrossReference': {\n                return {\n                    name: 'CrossReference',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'deprecatedSyntax', defaultValue: false },\n                        { name: 'lookahead' },\n                        { name: 'terminal' },\n                        { name: 'type' }\n                    ]\n                };\n            }\n            case 'EndOfFile': {\n                return {\n                    name: 'EndOfFile',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'lookahead' }\n                    ]\n                };\n            }\n            case 'Group': {\n                return {\n                    name: 'Group',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'elements', defaultValue: [] },\n                        { name: 'guardCondition' },\n                        { name: 'lookahead' }\n                    ]\n                };\n            }\n            case 'Keyword': {\n                return {\n                    name: 'Keyword',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'lookahead' },\n                        { name: 'value' }\n                    ]\n                };\n            }\n            case 'NegatedToken': {\n                return {\n                    name: 'NegatedToken',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'lookahead' },\n                        { name: 'terminal' }\n                    ]\n                };\n            }\n            case 'RegexToken': {\n                return {\n                    name: 'RegexToken',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'lookahead' },\n                        { name: 'regex' }\n                    ]\n                };\n            }\n            case 'RuleCall': {\n                return {\n                    name: 'RuleCall',\n                    properties: [\n                        { name: 'arguments', defaultValue: [] },\n                        { name: 'cardinality' },\n                        { name: 'lookahead' },\n                        { name: 'rule' }\n                    ]\n                };\n            }\n            case 'TerminalAlternatives': {\n                return {\n                    name: 'TerminalAlternatives',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'elements', defaultValue: [] },\n                        { name: 'lookahead' }\n                    ]\n                };\n            }\n            case 'TerminalGroup': {\n                return {\n                    name: 'TerminalGroup',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'elements', defaultValue: [] },\n                        { name: 'lookahead' }\n                    ]\n                };\n            }\n            case 'TerminalRuleCall': {\n                return {\n                    name: 'TerminalRuleCall',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'lookahead' },\n                        { name: 'rule' }\n                    ]\n                };\n            }\n            case 'UnorderedGroup': {\n                return {\n                    name: 'UnorderedGroup',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'elements', defaultValue: [] },\n                        { name: 'lookahead' }\n                    ]\n                };\n            }\n            case 'UntilToken': {\n                return {\n                    name: 'UntilToken',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'lookahead' },\n                        { name: 'terminal' }\n                    ]\n                };\n            }\n            case 'Wildcard': {\n                return {\n                    name: 'Wildcard',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'lookahead' }\n                    ]\n                };\n            }\n            default: {\n                return {\n                    name: type,\n                    properties: []\n                };\n            }\n        }\n    }\n}\n\nexport const reflection = new LangiumGrammarAstReflection();\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { Range } from 'vscode-languageserver-types';\nimport type { AstNode, AstReflection, CstNode, GenericAstNode, Mutable, PropertyType, Reference, ReferenceInfo } from '../syntax-tree.js';\nimport type { Stream, TreeStream } from './stream.js';\nimport type { LangiumDocument } from '../workspace/documents.js';\nimport { isAstNode, isReference } from '../syntax-tree.js';\nimport { DONE_RESULT, stream, StreamImpl, TreeStreamImpl } from './stream.js';\nimport { inRange } from './cst-utils.js';\n\n/**\n * Link the `$container` and other related properties of every AST node that is directly contained\n * in the given `node`.\n */\nexport function linkContentToContainer(node: AstNode): void {\n    for (const [name, value] of Object.entries(node)) {\n        if (!name.startsWith('$')) {\n            if (Array.isArray(value)) {\n                value.forEach((item, index) => {\n                    if (isAstNode(item)) {\n                        (item as Mutable<AstNode>).$container = node;\n                        (item as Mutable<AstNode>).$containerProperty = name;\n                        (item as Mutable<AstNode>).$containerIndex = index;\n                    }\n                });\n            } else if (isAstNode(value)) {\n                (value as Mutable<AstNode>).$container = node;\n                (value as Mutable<AstNode>).$containerProperty = name;\n            }\n        }\n    }\n}\n\n/**\n * Walk along the hierarchy of containers from the given AST node to the root and return the first\n * node that matches the type predicate. If the start node itself matches, it is returned.\n * If no container matches, `undefined` is returned.\n */\nexport function getContainerOfType<T extends AstNode>(node: AstNode | undefined, typePredicate: (n: AstNode) => n is T): T | undefined {\n    let item = node;\n    while (item) {\n        if (typePredicate(item)) {\n            return item;\n        }\n        item = item.$container;\n    }\n    return undefined;\n}\n\n/**\n * Walk along the hierarchy of containers from the given AST node to the root and check for existence\n * of a container that matches the given predicate. The start node is included in the checks.\n */\nexport function hasContainerOfType(node: AstNode | undefined, predicate: (n: AstNode) => boolean): boolean {\n    let item = node;\n    while (item) {\n        if (predicate(item)) {\n            return true;\n        }\n        item = item.$container;\n    }\n    return false;\n}\n\n/**\n * Retrieve the document in which the given AST node is contained. A reference to the document is\n * usually held by the root node of the AST.\n *\n * @throws an error if the node is not contained in a document.\n */\nexport function getDocument<T extends AstNode = AstNode>(node: AstNode): LangiumDocument<T> {\n    const rootNode = findRootNode(node);\n    const result = rootNode.$document;\n    if (!result) {\n        throw new Error('AST node has no document.');\n    }\n    return result as LangiumDocument<T>;\n}\n\n/**\n * Returns the root node of the given AST node by following the `$container` references.\n */\nexport function findRootNode(node: AstNode): AstNode {\n    while (node.$container) {\n        node = node.$container;\n    }\n    return node;\n}\n\nexport interface AstStreamOptions {\n    /**\n     * Optional target range that the nodes in the stream need to intersect\n     */\n    range?: Range\n}\n\n/**\n * Create a stream of all AST nodes that are directly contained in the given node. This includes\n * single-valued as well as multi-valued (array) properties.\n */\nexport function streamContents(node: AstNode, options?: AstStreamOptions): Stream<AstNode> {\n    if (!node) {\n        throw new Error('Node must be an AstNode.');\n    }\n    const range = options?.range;\n    type State = { keys: string[], keyIndex: number, arrayIndex: number };\n    return new StreamImpl<State, AstNode>(() => ({\n        keys: Object.keys(node),\n        keyIndex: 0,\n        arrayIndex: 0\n    }), state => {\n        while (state.keyIndex < state.keys.length) {\n            const property = state.keys[state.keyIndex];\n            if (!property.startsWith('$')) {\n                const value = (node as GenericAstNode)[property];\n                if (isAstNode(value)) {\n                    state.keyIndex++;\n                    if (isAstNodeInRange(value, range)) {\n                        return { done: false, value };\n                    }\n                } else if (Array.isArray(value)) {\n                    while (state.arrayIndex < value.length) {\n                        const index = state.arrayIndex++;\n                        const element = value[index];\n                        if (isAstNode(element) && isAstNodeInRange(element, range)) {\n                            return { done: false, value: element };\n                        }\n                    }\n                    state.arrayIndex = 0;\n                }\n            }\n            state.keyIndex++;\n        }\n        return DONE_RESULT;\n    });\n}\n\n/**\n * Create a stream of all AST nodes that are directly and indirectly contained in the given root node.\n * This does not include the root node itself.\n */\nexport function streamAllContents(root: AstNode, options?: AstStreamOptions): TreeStream<AstNode> {\n    if (!root) {\n        throw new Error('Root node must be an AstNode.');\n    }\n    return new TreeStreamImpl(root, node => streamContents(node, options));\n}\n\n/**\n * Create a stream of all AST nodes that are directly and indirectly contained in the given root node,\n * including the root node itself.\n */\nexport function streamAst(root: AstNode, options?: AstStreamOptions): TreeStream<AstNode> {\n    if (!root) {\n        throw new Error('Root node must be an AstNode.');\n    } else if (options?.range && !isAstNodeInRange(root, options.range)) {\n        // Return an empty stream if the root node isn't in range\n        return new TreeStreamImpl(root, () => []);\n    }\n    return new TreeStreamImpl(root, node => streamContents(node, options), { includeRoot: true });\n}\n\nfunction isAstNodeInRange(astNode: AstNode, range?: Range): boolean {\n    if (!range) {\n        return true;\n    }\n    const nodeRange = astNode.$cstNode?.range;\n    if (!nodeRange) {\n        return false;\n    }\n    return inRange(nodeRange, range);\n}\n\n/**\n * Create a stream of all cross-references that are held by the given AST node. This includes\n * single-valued as well as multi-valued (array) properties.\n */\nexport function streamReferences(node: AstNode): Stream<ReferenceInfo> {\n    type State = { keys: string[], keyIndex: number, arrayIndex: number };\n    return new StreamImpl<State, ReferenceInfo>(() => ({\n        keys: Object.keys(node),\n        keyIndex: 0,\n        arrayIndex: 0\n    }), state => {\n        while (state.keyIndex < state.keys.length) {\n            const property = state.keys[state.keyIndex];\n            if (!property.startsWith('$')) {\n                const value = (node as GenericAstNode)[property];\n                if (isReference(value)) {\n                    state.keyIndex++;\n                    return { done: false, value: { reference: value, container: node, property } };\n                } else if (Array.isArray(value)) {\n                    while (state.arrayIndex < value.length) {\n                        const index = state.arrayIndex++;\n                        const element = value[index];\n                        if (isReference(element)) {\n                            return { done: false, value: { reference: element, container: node, property, index } };\n                        }\n                    }\n                    state.arrayIndex = 0;\n                }\n            }\n            state.keyIndex++;\n        }\n        return DONE_RESULT;\n    });\n}\n\n/**\n * Returns a Stream of references to the target node from the AstNode tree\n *\n * @param targetNode AstNode we are looking for\n * @param lookup AstNode where we search for references. If not provided, the root node of the document is used as the default value\n */\nexport function findLocalReferences(targetNode: AstNode, lookup = getDocument(targetNode).parseResult.value): Stream<Reference> {\n    const refs: Reference[] = [];\n    streamAst(lookup).forEach(node => {\n        streamReferences(node).forEach(refInfo => {\n            if (refInfo.reference.ref === targetNode) {\n                refs.push(refInfo.reference);\n            }\n        });\n    });\n    return stream(refs);\n}\n\n/**\n * Assigns all mandatory AST properties to the specified node.\n *\n * @param reflection Reflection object used to gather mandatory properties for the node.\n * @param node Specified node is modified in place and properties are directly assigned.\n */\nexport function assignMandatoryProperties(reflection: AstReflection, node: AstNode): void {\n    const typeMetaData = reflection.getTypeMetaData(node.$type);\n    const genericNode = node as GenericAstNode;\n    for (const property of typeMetaData.properties) {\n        // Only set the value if the property is not already set and if it has a default value\n        if (property.defaultValue !== undefined && genericNode[property.name] === undefined) {\n            genericNode[property.name] = copyDefaultValue(property.defaultValue);\n        }\n    }\n}\n\nfunction copyDefaultValue(propertyType: PropertyType): PropertyType {\n    if (Array.isArray(propertyType)) {\n        return [...propertyType.map(copyDefaultValue)];\n    } else {\n        return propertyType;\n    }\n}\n\n/**\n * Creates a deep copy of the specified AST node.\n * The resulting copy will only contain semantically relevant information, such as the `$type` property and AST properties.\n *\n * References are copied without resolved cross reference. The specified function is used to rebuild them.\n */\nexport function copyAstNode<T extends AstNode = AstNode>(node: T, buildReference: (node: AstNode, property: string, refNode: CstNode | undefined, refText: string) => Reference<AstNode>): T {\n    const copy: GenericAstNode = { $type: node.$type };\n\n    for (const [name, value] of Object.entries(node)) {\n        if (!name.startsWith('$')) {\n            if (isAstNode(value)) {\n                copy[name] = copyAstNode(value, buildReference);\n            } else if (isReference(value)) {\n                copy[name] = buildReference(\n                    copy,\n                    name,\n                    value.$refNode,\n                    value.$refText\n                );\n            } else if (Array.isArray(value)) {\n                const copiedArray: unknown[] = [];\n                for (const element of value) {\n                    if (isAstNode(element)) {\n                        copiedArray.push(copyAstNode(element, buildReference));\n                    } else if (isReference(element)) {\n                        copiedArray.push(\n                            buildReference(\n                                copy,\n                                name,\n                                element.$refNode,\n                                element.$refText\n                            )\n                        );\n                    } else {\n                        copiedArray.push(element);\n                    }\n                }\n                copy[name] = copiedArray;\n            } else {\n                copy[name] = value;\n            }\n        }\n    }\n\n    linkContentToContainer(copy);\n    return copy as unknown as T;\n}\n","import type { Character, IRegExpAST, RegExpFlags } from \"../types\";\n\nexport function cc(char: string): number {\n  return char.charCodeAt(0);\n}\n\nexport function insertToSet<T>(item: T | T[], set: T[]) {\n  if (Array.isArray(item)) {\n    item.forEach(function (subItem) {\n      set.push(subItem);\n    });\n  } else {\n    set.push(item);\n  }\n}\n\nexport function addFlag(\n  flagObj: RegExpFlags,\n  flagKey: keyof Omit<RegExpFlags, keyof IRegExpAST>,\n) {\n  if (flagObj[flagKey] === true) {\n    throw \"duplicate flag \" + flagKey;\n  }\n\n  const x: boolean = flagObj[flagKey];\n  flagObj[flagKey] = true;\n}\n\nexport function ASSERT_EXISTS<T = Object>(obj: any): obj is T {\n  // istanbul ignore next\n  if (obj === undefined) {\n    throw Error(\"Internal Error - Should never get here!\");\n  }\n  return true;\n}\n\n// istanbul ignore next\nexport function ASSERT_NEVER_REACH_HERE(): any {\n  throw Error(\"Internal Error - Should never get here!\");\n}\n\nexport function isCharacter(obj: { type: string }): obj is Character {\n  return obj[\"type\"] === \"Character\";\n}\n","import { cc } from \"./utils.js\";\n\nexport const digitsCharCodes: number[] = [];\nfor (let i = cc(\"0\"); i <= cc(\"9\"); i++) {\n  digitsCharCodes.push(i);\n}\n\nexport const wordCharCodes: number[] = [cc(\"_\")].concat(digitsCharCodes);\nfor (let i = cc(\"a\"); i <= cc(\"z\"); i++) {\n  wordCharCodes.push(i);\n}\n\nfor (let i = cc(\"A\"); i <= cc(\"Z\"); i++) {\n  wordCharCodes.push(i);\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#character-classes\nexport const whitespaceCodes: number[] = [\n  cc(\" \"),\n  cc(\"\\f\"),\n  cc(\"\\n\"),\n  cc(\"\\r\"),\n  cc(\"\\t\"),\n  cc(\"\\v\"),\n  cc(\"\\t\"),\n  cc(\"\\u00a0\"),\n  cc(\"\\u1680\"),\n  cc(\"\\u2000\"),\n  cc(\"\\u2001\"),\n  cc(\"\\u2002\"),\n  cc(\"\\u2003\"),\n  cc(\"\\u2004\"),\n  cc(\"\\u2005\"),\n  cc(\"\\u2006\"),\n  cc(\"\\u2007\"),\n  cc(\"\\u2008\"),\n  cc(\"\\u2009\"),\n  cc(\"\\u200a\"),\n  cc(\"\\u2028\"),\n  cc(\"\\u2029\"),\n  cc(\"\\u202f\"),\n  cc(\"\\u205f\"),\n  cc(\"\\u3000\"),\n  cc(\"\\ufeff\"),\n];\n","import type {\n  Alternative,\n  Assertion,\n  Atom,\n  Character,\n  Disjunction,\n  Group,\n  GroupBackReference,\n  Location,\n  Quantifier,\n  Range,\n  RegExpFlags,\n  RegExpPattern,\n  Set,\n  Term,\n} from \"../types\";\nimport {\n  addFlag,\n  ASSERT_EXISTS,\n  ASSERT_NEVER_REACH_HERE,\n  cc,\n  insertToSet,\n  isCharacter,\n} from \"./utils.js\";\nimport {\n  digitsCharCodes,\n  whitespaceCodes,\n  wordCharCodes,\n} from \"./character-classes.js\";\n\n// consts and utilities\nconst hexDigitPattern = /[0-9a-fA-F]/;\nconst decimalPattern = /[0-9]/;\nconst decimalPatternNoZero = /[1-9]/;\n\n// https://hackernoon.com/the-madness-of-parsing-real-world-javascript-regexps-d9ee336df983\n// https://www.ecma-international.org/ecma-262/8.0/index.html#prod-Pattern\nexport class RegExpParser {\n  protected idx: number = 0;\n  protected input: string = \"\";\n  protected groupIdx: number = 0;\n\n  protected saveState() {\n    return {\n      idx: this.idx,\n      input: this.input,\n      groupIdx: this.groupIdx,\n    };\n  }\n\n  protected restoreState(newState: {\n    idx: number;\n    input: string;\n    groupIdx: number;\n  }) {\n    this.idx = newState.idx;\n    this.input = newState.input;\n    this.groupIdx = newState.groupIdx;\n  }\n\n  public pattern(input: string): RegExpPattern {\n    // parser state\n    this.idx = 0;\n    this.input = input;\n    this.groupIdx = 0;\n\n    this.consumeChar(\"/\");\n    const value = this.disjunction();\n    this.consumeChar(\"/\");\n\n    const flags: RegExpFlags = {\n      type: \"Flags\",\n      loc: { begin: this.idx, end: input.length },\n      global: false,\n      ignoreCase: false,\n      multiLine: false,\n      unicode: false,\n      sticky: false,\n    };\n\n    while (this.isRegExpFlag()) {\n      switch (this.popChar()) {\n        case \"g\":\n          addFlag(flags, \"global\");\n          break;\n        case \"i\":\n          addFlag(flags, \"ignoreCase\");\n          break;\n        case \"m\":\n          addFlag(flags, \"multiLine\");\n          break;\n        case \"u\":\n          addFlag(flags, \"unicode\");\n          break;\n        case \"y\":\n          addFlag(flags, \"sticky\");\n          break;\n      }\n    }\n\n    if (this.idx !== this.input.length) {\n      throw Error(\"Redundant input: \" + this.input.substring(this.idx));\n    }\n    return {\n      type: \"Pattern\",\n      flags: flags,\n      value: value,\n      loc: this.loc(0),\n    };\n  }\n\n  protected disjunction(): Disjunction {\n    const alts = [];\n    const begin = this.idx;\n\n    alts.push(this.alternative());\n\n    while (this.peekChar() === \"|\") {\n      this.consumeChar(\"|\");\n      alts.push(this.alternative());\n    }\n\n    return { type: \"Disjunction\", value: alts, loc: this.loc(begin) };\n  }\n\n  protected alternative(): Alternative {\n    const terms = [];\n    const begin = this.idx;\n\n    while (this.isTerm()) {\n      terms.push(this.term());\n    }\n\n    return { type: \"Alternative\", value: terms, loc: this.loc(begin) };\n  }\n\n  protected term(): Term {\n    if (this.isAssertion()) {\n      return this.assertion();\n    } else {\n      return this.atom();\n    }\n  }\n\n  protected assertion(): Assertion {\n    const begin = this.idx;\n    switch (this.popChar()) {\n      case \"^\":\n        return {\n          type: \"StartAnchor\",\n          loc: this.loc(begin),\n        };\n      case \"$\":\n        return { type: \"EndAnchor\", loc: this.loc(begin) };\n      // '\\b' or '\\B'\n      case \"\\\\\":\n        switch (this.popChar()) {\n          case \"b\":\n            return {\n              type: \"WordBoundary\",\n              loc: this.loc(begin),\n            };\n          case \"B\":\n            return {\n              type: \"NonWordBoundary\",\n              loc: this.loc(begin),\n            };\n        }\n        // istanbul ignore next\n        throw Error(\"Invalid Assertion Escape\");\n      // '(?=' or '(?!'\n      case \"(\":\n        this.consumeChar(\"?\");\n\n        let type: \"Lookahead\" | \"NegativeLookahead\" | undefined;\n        switch (this.popChar()) {\n          case \"=\":\n            type = \"Lookahead\";\n            break;\n          case \"!\":\n            type = \"NegativeLookahead\";\n            break;\n        }\n        ASSERT_EXISTS(type);\n\n        const disjunction = this.disjunction();\n\n        this.consumeChar(\")\");\n\n        return {\n          type: type!,\n          value: disjunction,\n          loc: this.loc(begin),\n        };\n    }\n    // istanbul ignore next\n    return ASSERT_NEVER_REACH_HERE();\n  }\n\n  protected quantifier(\n    isBacktracking: boolean = false,\n  ): Quantifier | undefined {\n    let range: Partial<Quantifier> | undefined = undefined;\n    const begin = this.idx;\n    switch (this.popChar()) {\n      case \"*\":\n        range = {\n          atLeast: 0,\n          atMost: Infinity,\n        };\n        break;\n      case \"+\":\n        range = {\n          atLeast: 1,\n          atMost: Infinity,\n        };\n        break;\n      case \"?\":\n        range = {\n          atLeast: 0,\n          atMost: 1,\n        };\n        break;\n      case \"{\":\n        const atLeast = this.integerIncludingZero();\n        switch (this.popChar()) {\n          case \"}\":\n            range = {\n              atLeast: atLeast,\n              atMost: atLeast,\n            };\n            break;\n          case \",\":\n            let atMost;\n            if (this.isDigit()) {\n              atMost = this.integerIncludingZero();\n              range = {\n                atLeast: atLeast,\n                atMost: atMost,\n              };\n            } else {\n              range = {\n                atLeast: atLeast,\n                atMost: Infinity,\n              };\n            }\n            this.consumeChar(\"}\");\n            break;\n        }\n        // throwing exceptions from \"ASSERT_EXISTS\" during backtracking\n        // causes severe performance degradations\n        if (isBacktracking === true && range === undefined) {\n          return undefined;\n        }\n        ASSERT_EXISTS(range);\n        break;\n    }\n\n    // throwing exceptions from \"ASSERT_EXISTS\" during backtracking\n    // causes severe performance degradations\n    if (isBacktracking === true && range === undefined) {\n      return undefined;\n    }\n\n    // istanbul ignore else\n    if (ASSERT_EXISTS(range)) {\n      if (this.peekChar(0) === \"?\") {\n        this.consumeChar(\"?\");\n        range.greedy = false;\n      } else {\n        range.greedy = true;\n      }\n\n      range.type = \"Quantifier\";\n      range.loc = this.loc(begin);\n      return range as Quantifier;\n    }\n  }\n\n  protected atom(): Atom {\n    let atom: Omit<Atom, \"loc\" | \"type\"> | undefined;\n    const begin = this.idx;\n    switch (this.peekChar()) {\n      case \".\":\n        atom = this.dotAll();\n        break;\n      case \"\\\\\":\n        atom = this.atomEscape();\n        break;\n      case \"[\":\n        atom = this.characterClass();\n        break;\n      case \"(\":\n        atom = this.group();\n        break;\n    }\n\n    if (atom === undefined && this.isPatternCharacter()) {\n      atom = this.patternCharacter();\n    }\n\n    // istanbul ignore else\n    if (ASSERT_EXISTS<Atom>(atom)) {\n      atom.loc = this.loc(begin);\n\n      if (this.isQuantifier()) {\n        atom.quantifier = this.quantifier();\n      }\n\n      return atom;\n    }\n\n    // istanbul ignore next\n    return ASSERT_NEVER_REACH_HERE();\n  }\n\n  protected dotAll(): Omit<Set, \"loc\"> {\n    this.consumeChar(\".\");\n    return {\n      type: \"Set\",\n      complement: true,\n      value: [cc(\"\\n\"), cc(\"\\r\"), cc(\"\\u2028\"), cc(\"\\u2029\")],\n    };\n  }\n\n  protected atomEscape(): Omit<GroupBackReference | Set | Character, \"loc\"> {\n    this.consumeChar(\"\\\\\");\n\n    switch (this.peekChar()) {\n      case \"1\":\n      case \"2\":\n      case \"3\":\n      case \"4\":\n      case \"5\":\n      case \"6\":\n      case \"7\":\n      case \"8\":\n      case \"9\":\n        return this.decimalEscapeAtom();\n      case \"d\":\n      case \"D\":\n      case \"s\":\n      case \"S\":\n      case \"w\":\n      case \"W\":\n        return this.characterClassEscape();\n      case \"f\":\n      case \"n\":\n      case \"r\":\n      case \"t\":\n      case \"v\":\n        return this.controlEscapeAtom();\n      case \"c\":\n        return this.controlLetterEscapeAtom();\n      case \"0\":\n        return this.nulCharacterAtom();\n      case \"x\":\n        return this.hexEscapeSequenceAtom();\n      case \"u\":\n        return this.regExpUnicodeEscapeSequenceAtom();\n      default:\n        return this.identityEscapeAtom();\n    }\n  }\n\n  protected decimalEscapeAtom(): Omit<GroupBackReference, \"loc\"> {\n    const value = this.positiveInteger();\n\n    return { type: \"GroupBackReference\", value: value };\n  }\n\n  protected characterClassEscape(): Omit<Set, \"loc\"> {\n    let set: (number | Range)[] | undefined;\n    let complement = false;\n    switch (this.popChar()) {\n      case \"d\":\n        set = digitsCharCodes;\n        break;\n      case \"D\":\n        set = digitsCharCodes;\n        complement = true;\n        break;\n      case \"s\":\n        set = whitespaceCodes;\n        break;\n      case \"S\":\n        set = whitespaceCodes;\n        complement = true;\n        break;\n      case \"w\":\n        set = wordCharCodes;\n        break;\n      case \"W\":\n        set = wordCharCodes;\n        complement = true;\n        break;\n    }\n\n    // istanbul ignore else\n    if (ASSERT_EXISTS(set)) {\n      return { type: \"Set\", value: set, complement: complement };\n    }\n    // istanbul ignore next\n    return ASSERT_NEVER_REACH_HERE();\n  }\n\n  protected controlEscapeAtom(): Omit<Character, \"loc\"> {\n    let escapeCode;\n    switch (this.popChar()) {\n      case \"f\":\n        escapeCode = cc(\"\\f\");\n        break;\n      case \"n\":\n        escapeCode = cc(\"\\n\");\n        break;\n      case \"r\":\n        escapeCode = cc(\"\\r\");\n        break;\n      case \"t\":\n        escapeCode = cc(\"\\t\");\n        break;\n      case \"v\":\n        escapeCode = cc(\"\\v\");\n        break;\n    }\n\n    // istanbul ignore else\n    if (ASSERT_EXISTS(escapeCode)) {\n      return { type: \"Character\", value: escapeCode };\n    }\n    // istanbul ignore next\n    return ASSERT_NEVER_REACH_HERE();\n  }\n\n  protected controlLetterEscapeAtom(): Omit<Character, \"loc\"> {\n    this.consumeChar(\"c\");\n    const letter = this.popChar();\n    if (/[a-zA-Z]/.test(letter) === false) {\n      throw Error(\"Invalid \");\n    }\n\n    const letterCode = letter.toUpperCase().charCodeAt(0) - 64;\n    return { type: \"Character\", value: letterCode };\n  }\n\n  protected nulCharacterAtom(): Omit<Character, \"loc\"> {\n    // TODO implement '[lookahead ∉ DecimalDigit]'\n    // TODO: for the deprecated octal escape sequence\n    this.consumeChar(\"0\");\n    return { type: \"Character\", value: cc(\"\\0\") };\n  }\n\n  protected hexEscapeSequenceAtom(): Omit<Character, \"loc\"> {\n    this.consumeChar(\"x\");\n    return this.parseHexDigits(2);\n  }\n\n  protected regExpUnicodeEscapeSequenceAtom(): Omit<Character, \"loc\"> {\n    this.consumeChar(\"u\");\n    return this.parseHexDigits(4);\n  }\n\n  protected identityEscapeAtom(): Omit<Character, \"loc\"> {\n    // TODO: implement \"SourceCharacter but not UnicodeIDContinue\"\n    // // http://unicode.org/reports/tr31/#Specific_Character_Adjustments\n    const escapedChar = this.popChar();\n    return { type: \"Character\", value: cc(escapedChar) };\n  }\n\n  protected classPatternCharacterAtom(): Omit<Character, \"loc\"> {\n    switch (this.peekChar()) {\n      // istanbul ignore next\n      case \"\\n\":\n      // istanbul ignore next\n      case \"\\r\":\n      // istanbul ignore next\n      case \"\\u2028\":\n      // istanbul ignore next\n      case \"\\u2029\":\n      // istanbul ignore next\n      case \"\\\\\":\n      // istanbul ignore next\n      case \"]\":\n        throw Error(\"TBD\");\n      default:\n        const nextChar = this.popChar();\n        return { type: \"Character\", value: cc(nextChar) };\n    }\n  }\n\n  protected characterClass(): Omit<Set, \"loc\"> {\n    const set: (number | Range)[] = [];\n    let complement = false;\n    this.consumeChar(\"[\");\n    if (this.peekChar(0) === \"^\") {\n      this.consumeChar(\"^\");\n      complement = true;\n    }\n\n    while (this.isClassAtom()) {\n      const from = this.classAtom();\n      const isFromSingleChar = from.type === \"Character\";\n      if (isCharacter(from) && this.isRangeDash()) {\n        this.consumeChar(\"-\");\n        const to = this.classAtom();\n        const isToSingleChar = to.type === \"Character\";\n\n        // a range can only be used when both sides are single characters\n        if (isCharacter(to)) {\n          if (to.value < from.value) {\n            throw Error(\"Range out of order in character class\");\n          }\n          set.push({ from: from.value, to: to.value });\n        } else {\n          // literal dash\n          insertToSet(from.value, set);\n          set.push(cc(\"-\"));\n          insertToSet(to.value, set);\n        }\n      } else {\n        insertToSet(from.value, set);\n      }\n    }\n\n    this.consumeChar(\"]\");\n\n    return { type: \"Set\", complement: complement, value: set };\n  }\n\n  protected classAtom(): Omit<Character | Set, \"loc\"> {\n    switch (this.peekChar()) {\n      // istanbul ignore next\n      case \"]\":\n      // istanbul ignore next\n      case \"\\n\":\n      // istanbul ignore next\n      case \"\\r\":\n      // istanbul ignore next\n      case \"\\u2028\":\n      // istanbul ignore next\n      case \"\\u2029\":\n        throw Error(\"TBD\");\n      case \"\\\\\":\n        return this.classEscape();\n      default:\n        return this.classPatternCharacterAtom();\n    }\n  }\n\n  protected classEscape(): Omit<Character | Set, \"loc\"> {\n    this.consumeChar(\"\\\\\");\n    switch (this.peekChar()) {\n      // Matches a backspace.\n      // (Not to be confused with \\b word boundary outside characterClass)\n      case \"b\":\n        this.consumeChar(\"b\");\n        return { type: \"Character\", value: cc(\"\\u0008\") };\n      case \"d\":\n      case \"D\":\n      case \"s\":\n      case \"S\":\n      case \"w\":\n      case \"W\":\n        return this.characterClassEscape();\n      case \"f\":\n      case \"n\":\n      case \"r\":\n      case \"t\":\n      case \"v\":\n        return this.controlEscapeAtom();\n      case \"c\":\n        return this.controlLetterEscapeAtom();\n      case \"0\":\n        return this.nulCharacterAtom();\n      case \"x\":\n        return this.hexEscapeSequenceAtom();\n      case \"u\":\n        return this.regExpUnicodeEscapeSequenceAtom();\n      default:\n        return this.identityEscapeAtom();\n    }\n  }\n\n  protected group(): Omit<Group, \"loc\"> {\n    let capturing = true;\n    this.consumeChar(\"(\");\n    switch (this.peekChar(0)) {\n      case \"?\":\n        this.consumeChar(\"?\");\n        this.consumeChar(\":\");\n        capturing = false;\n        break;\n      default:\n        this.groupIdx++;\n        break;\n    }\n    const value = this.disjunction();\n    this.consumeChar(\")\");\n\n    const groupAst: Omit<Group, \"loc\"> = {\n      type: \"Group\",\n      capturing: capturing,\n      value: value,\n    };\n\n    if (capturing) {\n      groupAst[\"idx\"] = this.groupIdx;\n    }\n\n    return groupAst;\n  }\n\n  protected positiveInteger(): number {\n    let number = this.popChar();\n\n    // istanbul ignore next - can't ever get here due to previous lookahead checks\n    // still implementing this error checking in case this ever changes.\n    if (decimalPatternNoZero.test(number) === false) {\n      throw Error(\"Expecting a positive integer\");\n    }\n\n    while (decimalPattern.test(this.peekChar(0))) {\n      number += this.popChar();\n    }\n\n    return parseInt(number, 10);\n  }\n\n  protected integerIncludingZero(): number {\n    let number = this.popChar();\n    if (decimalPattern.test(number) === false) {\n      throw Error(\"Expecting an integer\");\n    }\n\n    while (decimalPattern.test(this.peekChar(0))) {\n      number += this.popChar();\n    }\n\n    return parseInt(number, 10);\n  }\n\n  protected patternCharacter(): Omit<Character, \"loc\"> {\n    const nextChar = this.popChar();\n    switch (nextChar) {\n      // istanbul ignore next\n      case \"\\n\":\n      // istanbul ignore next\n      case \"\\r\":\n      // istanbul ignore next\n      case \"\\u2028\":\n      // istanbul ignore next\n      case \"\\u2029\":\n      // istanbul ignore next\n      case \"^\":\n      // istanbul ignore next\n      case \"$\":\n      // istanbul ignore next\n      case \"\\\\\":\n      // istanbul ignore next\n      case \".\":\n      // istanbul ignore next\n      case \"*\":\n      // istanbul ignore next\n      case \"+\":\n      // istanbul ignore next\n      case \"?\":\n      // istanbul ignore next\n      case \"(\":\n      // istanbul ignore next\n      case \")\":\n      // istanbul ignore next\n      case \"[\":\n      // istanbul ignore next\n      case \"|\":\n        // istanbul ignore next\n        throw Error(\"TBD\");\n      default:\n        return { type: \"Character\", value: cc(nextChar) };\n    }\n  }\n  protected isRegExpFlag(): boolean {\n    switch (this.peekChar(0)) {\n      case \"g\":\n      case \"i\":\n      case \"m\":\n      case \"u\":\n      case \"y\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  protected isRangeDash(): boolean {\n    return this.peekChar() === \"-\" && this.isClassAtom(1);\n  }\n\n  protected isDigit(): boolean {\n    return decimalPattern.test(this.peekChar(0));\n  }\n\n  protected isClassAtom(howMuch = 0): boolean {\n    switch (this.peekChar(howMuch)) {\n      case \"]\":\n      case \"\\n\":\n      case \"\\r\":\n      case \"\\u2028\":\n      case \"\\u2029\":\n        return false;\n      default:\n        return true;\n    }\n  }\n\n  protected isTerm() {\n    return this.isAtom() || this.isAssertion();\n  }\n\n  protected isAtom(): boolean {\n    if (this.isPatternCharacter()) {\n      return true;\n    }\n\n    switch (this.peekChar(0)) {\n      case \".\":\n      case \"\\\\\": // atomEscape\n      case \"[\": // characterClass\n      // TODO: isAtom must be called before isAssertion - disambiguate\n      case \"(\": // group\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  protected isAssertion(): boolean {\n    switch (this.peekChar(0)) {\n      case \"^\":\n      case \"$\":\n        return true;\n      // '\\b' or '\\B'\n      case \"\\\\\":\n        switch (this.peekChar(1)) {\n          case \"b\":\n          case \"B\":\n            return true;\n          default:\n            return false;\n        }\n      // '(?=' or '(?!'\n      case \"(\":\n        return (\n          this.peekChar(1) === \"?\" &&\n          (this.peekChar(2) === \"=\" || this.peekChar(2) === \"!\")\n        );\n      default:\n        return false;\n    }\n  }\n\n  protected isQuantifier(): boolean {\n    const prevState = this.saveState();\n    try {\n      return this.quantifier(true) !== undefined;\n    } catch (e) {\n      return false;\n    } finally {\n      this.restoreState(prevState);\n    }\n  }\n\n  protected isPatternCharacter(): boolean {\n    switch (this.peekChar()) {\n      case \"^\":\n      case \"$\":\n      case \"\\\\\":\n      case \".\":\n      case \"*\":\n      case \"+\":\n      case \"?\":\n      case \"(\":\n      case \")\":\n      case \"[\":\n      case \"|\":\n      case \"/\":\n      case \"\\n\":\n      case \"\\r\":\n      case \"\\u2028\":\n      case \"\\u2029\":\n        return false;\n      default:\n        return true;\n    }\n  }\n\n  protected parseHexDigits(howMany: number): Omit<Character, \"loc\"> {\n    let hexString = \"\";\n    for (let i = 0; i < howMany; i++) {\n      const hexChar = this.popChar();\n      if (hexDigitPattern.test(hexChar) === false) {\n        throw Error(\"Expecting a HexDecimal digits\");\n      }\n      hexString += hexChar;\n    }\n    const charCode = parseInt(hexString, 16);\n    return { type: \"Character\", value: charCode };\n  }\n\n  protected peekChar(howMuch = 0): string {\n    return this.input[this.idx + howMuch];\n  }\n\n  protected popChar(): string {\n    const nextChar = this.peekChar(0);\n    this.consumeChar(undefined);\n    return nextChar;\n  }\n\n  protected consumeChar(char: string | undefined): void {\n    if (char !== undefined && this.input[this.idx] !== char) {\n      throw Error(\n        \"Expected: '\" +\n          char +\n          \"' but found: '\" +\n          this.input[this.idx] +\n          \"' at offset: \" +\n          this.idx,\n      );\n    }\n\n    if (this.idx >= this.input.length) {\n      throw Error(\"Unexpected end of input\");\n    }\n    this.idx++;\n  }\n\n  protected loc(begin: number): Location {\n    return { begin: begin, end: this.idx };\n  }\n}\n","import type {\n  Alternative,\n  Assertion,\n  Character,\n  Disjunction,\n  Group,\n  GroupBackReference,\n  IRegExpAST,\n  Quantifier,\n  RegExpAstPart,\n  RegExpFlags,\n  RegExpPattern,\n  Set,\n} from \"../types\";\n\nexport class BaseRegExpVisitor {\n  public visitChildren(node: IRegExpAST) {\n    for (const key in node) {\n      const child = (node as any)[key];\n      /* istanbul ignore else */\n      if (node.hasOwnProperty(key)) {\n        if (child.type !== undefined) {\n          this.visit(child);\n        } else if (Array.isArray(child)) {\n          child.forEach((subChild) => {\n            this.visit(subChild);\n          }, this);\n        }\n      }\n    }\n  }\n\n  public visit(node: RegExpAstPart): void {\n    switch (node.type) {\n      case \"Pattern\":\n        this.visitPattern(node);\n        break;\n      case \"Flags\":\n        this.visitFlags(node);\n        break;\n      case \"Disjunction\":\n        this.visitDisjunction(node);\n        break;\n      case \"Alternative\":\n        this.visitAlternative(node);\n        break;\n      case \"StartAnchor\":\n        this.visitStartAnchor(node);\n        break;\n      case \"EndAnchor\":\n        this.visitEndAnchor(node);\n        break;\n      case \"WordBoundary\":\n        this.visitWordBoundary(node);\n        break;\n      case \"NonWordBoundary\":\n        this.visitNonWordBoundary(node);\n        break;\n      case \"Lookahead\":\n        this.visitLookahead(node);\n        break;\n      case \"NegativeLookahead\":\n        this.visitNegativeLookahead(node);\n        break;\n      case \"Character\":\n        this.visitCharacter(node);\n        break;\n      case \"Set\":\n        this.visitSet(node);\n        break;\n      case \"Group\":\n        this.visitGroup(node);\n        break;\n      case \"GroupBackReference\":\n        this.visitGroupBackReference(node);\n        break;\n      case \"Quantifier\":\n        this.visitQuantifier(node);\n        break;\n    }\n\n    this.visitChildren(node);\n  }\n\n  public visitPattern(node: RegExpPattern): void {}\n\n  public visitFlags(node: RegExpFlags): void {}\n\n  public visitDisjunction(node: Disjunction): void {}\n\n  public visitAlternative(node: Alternative): void {}\n\n  // Assertion\n  public visitStartAnchor(node: Assertion): void {}\n\n  public visitEndAnchor(node: Assertion): void {}\n\n  public visitWordBoundary(node: Assertion): void {}\n\n  public visitNonWordBoundary(node: Assertion): void {}\n\n  public visitLookahead(node: Assertion): void {}\n\n  public visitNegativeLookahead(node: Assertion): void {}\n\n  // atoms\n  public visitCharacter(node: Character): void {}\n\n  public visitSet(node: Set): void {}\n\n  public visitGroup(node: Group): void {}\n\n  public visitGroupBackReference(node: GroupBackReference): void {}\n\n  public visitQuantifier(node: Quantifier): void {}\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { Set, Group, Character, IRegExpAST } from '@chevrotain/regexp-to-ast';\nimport { RegExpParser, BaseRegExpVisitor } from '@chevrotain/regexp-to-ast';\n\nexport const NEWLINE_REGEXP = /\\r?\\n/gm;\n\nconst regexpParser = new RegExpParser();\n\n/**\n * This class is in charge of heuristically identifying start/end tokens of terminals.\n *\n * The way this works is by doing the following:\n * 1. Traverse the regular expression in the \"start state\"\n * 2. Add any encountered sets/single characters to the \"start regexp\"\n * 3. Once we encounter any variable-length content (i.e. with quantifiers such as +/?/*), we enter the \"end state\"\n * 4. In the end state, any sets/single characters are added to an \"end stack\".\n * 5. If we re-encounter any variable-length content we reset the end stack\n * 6. We continue visiting the regex until the end, reseting the end stack and rebuilding it as necessary\n *\n * After traversing a regular expression the `startRegexp/endRegexp` properties allow access to the stored start/end of the terminal\n */\nclass TerminalRegExpVisitor extends BaseRegExpVisitor {\n\n    private isStarting = true;\n    startRegexp: string;\n    private endRegexpStack: string[] = [];\n    multiline = false;\n    regex: string;\n\n    get endRegex(): string {\n        return this.endRegexpStack.join('');\n    }\n\n    reset(regex: string): void {\n        this.multiline = false;\n        this.regex = regex;\n        this.startRegexp = '';\n        this.isStarting = true;\n        this.endRegexpStack = [];\n    }\n\n    override visitGroup(node: Group) {\n        if (node.quantifier) {\n            this.isStarting = false;\n            this.endRegexpStack = [];\n        }\n    }\n\n    override visitCharacter(node: Character): void {\n        const char = String.fromCharCode(node.value);\n        if (!this.multiline && char === '\\n') {\n            this.multiline = true;\n        }\n        if (node.quantifier) {\n            this.isStarting = false;\n            this.endRegexpStack = [];\n        } else {\n            const escapedChar = escapeRegExp(char);\n            this.endRegexpStack.push(escapedChar);\n            if (this.isStarting) {\n                this.startRegexp += escapedChar;\n            }\n        }\n    }\n\n    override visitSet(node: Set): void {\n        if (!this.multiline) {\n            const set = this.regex.substring(node.loc.begin, node.loc.end);\n            const regex = new RegExp(set);\n            this.multiline = Boolean('\\n'.match(regex));\n        }\n        if (node.quantifier) {\n            this.isStarting = false;\n            this.endRegexpStack = [];\n        } else {\n            const set = this.regex.substring(node.loc.begin, node.loc.end);\n            this.endRegexpStack.push(set);\n            if (this.isStarting) {\n                this.startRegexp += set;\n            }\n        }\n    }\n\n    override visitChildren(node: IRegExpAST): void {\n        if (node.type === 'Group') {\n            // Ignore children of groups with quantifier (+/*/?)\n            // These groups are unrelated to start/end tokens of terminals\n            const group = node as Group;\n            if (group.quantifier) {\n                return;\n            }\n        }\n        super.visitChildren(node);\n    }\n}\n\nconst visitor = new TerminalRegExpVisitor();\n\nexport function getTerminalParts(regexp: RegExp | string): Array<{ start: string, end: string }> {\n    try {\n        if (typeof regexp !== 'string') {\n            regexp = regexp.source;\n        }\n        regexp = `/${regexp}/`;\n        const pattern = regexpParser.pattern(regexp);\n        const parts: Array<{ start: string, end: string }> = [];\n        for (const alternative of pattern.value.value) {\n            visitor.reset(regexp);\n            visitor.visit(alternative);\n            parts.push({\n                start: visitor.startRegexp,\n                end: visitor.endRegex\n            });\n        }\n        return parts;\n    } catch {\n        return [];\n    }\n}\n\nexport function isMultilineComment(regexp: RegExp | string): boolean {\n    try {\n        if (typeof regexp === 'string') {\n            regexp = new RegExp(regexp);\n        }\n        regexp = regexp.toString();\n        visitor.reset(regexp);\n        // Parsing the pattern might fail (since it's user code)\n        visitor.visit(regexpParser.pattern(regexp));\n        return visitor.multiline;\n    } catch {\n        return false;\n    }\n}\n\nexport function isWhitespace(value: RegExp | string): boolean {\n    const regexp = typeof value === 'string' ? new RegExp(value) : value;\n    return regexp.test(' ');\n}\n\nexport function escapeRegExp(value: string): string {\n    return value.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\n\nexport function getCaseInsensitivePattern(keyword: string): string {\n    return Array.prototype.map.call(keyword, letter =>\n        /\\w/.test(letter) ? `[${letter.toLowerCase()}${letter.toUpperCase()}]` : escapeRegExp(letter)\n    ).join('');\n}\n\n/**\n * Determines whether the given input has a partial match with the specified regex.\n * @param regex The regex to partially match against\n * @param input The input string\n * @returns Whether any match exists.\n */\nexport function partialMatches(regex: RegExp | string, input: string): boolean {\n    const partial = partialRegExp(regex);\n    const match = input.match(partial);\n    return !!match && match[0].length > 0;\n}\n\n/**\n * Builds a partial regex from the input regex. A partial regex is able to match incomplete input strings. E.g.\n * a partial regex constructed from `/ab/` is able to match the string `a` without needing a following `b` character. However it won't match `b` alone.\n * @param regex The input regex to be converted.\n * @returns A partial regex constructed from the input regex.\n */\nexport function partialRegExp(regex: RegExp | string): RegExp {\n    if (typeof regex === 'string') {\n        regex = new RegExp(regex);\n    }\n    const re = regex, source = regex.source;\n    let i = 0;\n\n    function process() {\n        let result = '',\n            tmp;\n\n        function appendRaw(nbChars: number) {\n            result += source.substr(i, nbChars);\n            i += nbChars;\n        }\n\n        function appendOptional(nbChars: number) {\n            result += '(?:' + source.substr(i, nbChars) + '|$)';\n            i += nbChars;\n        }\n\n        while (i < source.length) {\n            switch (source[i]) {\n                case '\\\\':\n                    switch (source[i + 1]) {\n                        case 'c':\n                            appendOptional(3);\n                            break;\n                        case 'x':\n                            appendOptional(4);\n                            break;\n                        case 'u':\n                            if (re.unicode) {\n                                if (source[i + 2] === '{') {\n                                    appendOptional(source.indexOf('}', i) - i + 1);\n                                } else {\n                                    appendOptional(6);\n                                }\n                            } else {\n                                appendOptional(2);\n                            }\n                            break;\n                        case 'p':\n                        case 'P':\n                            if (re.unicode) {\n                                appendOptional(source.indexOf('}', i) - i + 1);\n                            } else {\n                                appendOptional(2);\n                            }\n                            break;\n                        case 'k':\n                            appendOptional(source.indexOf('>', i) - i + 1);\n                            break;\n                        default:\n                            appendOptional(2);\n                            break;\n                    }\n                    break;\n\n                case '[':\n                    tmp = /\\[(?:\\\\.|.)*?\\]/g;\n                    tmp.lastIndex = i;\n                    tmp = tmp.exec(source) || [];\n                    appendOptional(tmp[0].length);\n                    break;\n\n                case '|':\n                case '^':\n                case '$':\n                case '*':\n                case '+':\n                case '?':\n                    appendRaw(1);\n                    break;\n                case '{':\n                    tmp = /\\{\\d+,?\\d*\\}/g;\n                    tmp.lastIndex = i;\n                    tmp = tmp.exec(source);\n                    if (tmp) {\n                        appendRaw(tmp[0].length);\n                    } else {\n                        appendOptional(1);\n                    }\n                    break;\n                case '(':\n                    if (source[i + 1] === '?') {\n                        switch (source[i + 2]) {\n                            case ':':\n                                result += '(?:';\n                                i += 3;\n                                result += process() + '|$)';\n                                break;\n                            case '=':\n                                result += '(?=';\n                                i += 3;\n                                result += process() + ')';\n                                break;\n                            case '!':\n                                tmp = i;\n                                i += 3;\n                                process();\n                                result += source.substr(tmp, i - tmp);\n                                break;\n                            case '<':\n                                switch (source[i + 3]) {\n                                    case '=':\n                                    case '!':\n                                        tmp = i;\n                                        i += 4;\n                                        process();\n                                        result += source.substr(tmp, i - tmp);\n                                        break;\n                                    default:\n                                        appendRaw(source.indexOf('>', i) - i + 1);\n                                        result += process() + '|$)';\n                                        break;\n                                }\n                                break;\n                        }\n                    } else {\n                        appendRaw(1);\n                        result += process() + '|$)';\n                    }\n                    break;\n                case ')':\n                    ++i;\n                    return result;\n                default:\n                    appendOptional(1);\n                    break;\n            }\n        }\n\n        return result;\n    }\n\n    return new RegExp(process(), regex.flags);\n}\n","/******************************************************************************\n * Copyright 2021-2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport { assertUnreachable } from '../utils/errors.js';\nimport * as ast from '../languages/generated/ast.js';\nimport type { AstNode, CstNode } from '../syntax-tree.js';\nimport { isCompositeCstNode } from '../syntax-tree.js';\nimport { getContainerOfType, streamAllContents } from './ast-utils.js';\nimport { streamCst } from './cst-utils.js';\nimport { escapeRegExp } from './regexp-utils.js';\n\n/**\n * Returns the entry rule of the given grammar, if any. If the grammar file does not contain an entry rule,\n * the result is `undefined`.\n */\nexport function getEntryRule(grammar: ast.Grammar): ast.ParserRule | undefined {\n    return grammar.rules.find(e => ast.isParserRule(e) && e.entry) as ast.ParserRule;\n}\n\n/**\n * Returns all hidden terminal rules of the given grammar, if any.\n */\nexport function getHiddenRules(grammar: ast.Grammar) {\n    return grammar.rules.filter((e): e is ast.TerminalRule => ast.isTerminalRule(e) && e.hidden);\n}\n\n/**\n * Returns all rules that can be reached from the topmost rules of the specified grammar (entry and hidden terminal rules).\n *\n * @param grammar The grammar that contains all rules\n * @param allTerminals Whether or not to include terminals that are referenced only by other terminals\n * @returns A list of referenced parser and terminal rules. If the grammar contains no entry rule,\n *      this function returns all rules of the specified grammar.\n */\nexport function getAllReachableRules(grammar: ast.Grammar, allTerminals: boolean): Set<ast.AbstractRule> {\n    const ruleNames = new Set<string>();\n    const entryRule = getEntryRule(grammar);\n    if (!entryRule) {\n        return new Set(grammar.rules);\n    }\n\n    const topMostRules = [entryRule as ast.AbstractRule].concat(getHiddenRules(grammar));\n    for (const rule of topMostRules) {\n        ruleDfs(rule, ruleNames, allTerminals);\n    }\n\n    const rules = new Set<ast.AbstractRule>();\n    for (const rule of grammar.rules) {\n        if (ruleNames.has(rule.name) || (ast.isTerminalRule(rule) && rule.hidden)) {\n            rules.add(rule);\n        }\n    }\n    return rules;\n}\n\nfunction ruleDfs(rule: ast.AbstractRule, visitedSet: Set<string>, allTerminals: boolean): void {\n    visitedSet.add(rule.name);\n    streamAllContents(rule).forEach(node => {\n        if (ast.isRuleCall(node) || (allTerminals && ast.isTerminalRuleCall(node))) {\n            const refRule = node.rule.ref;\n            if (refRule && !visitedSet.has(refRule.name)) {\n                ruleDfs(refRule, visitedSet, allTerminals);\n            }\n        }\n    });\n}\n\n/**\n * Determines the grammar expression used to parse a cross-reference (usually a reference to a terminal rule).\n * A cross-reference can declare this expression explicitly in the form `[Type : Terminal]`, but if `Terminal`\n * is omitted, this function attempts to infer it from the name of the referenced `Type` (using `findNameAssignment`).\n *\n * Returns the grammar expression used to parse the given cross-reference, or `undefined` if it is not declared\n * and cannot be inferred.\n */\nexport function getCrossReferenceTerminal(crossRef: ast.CrossReference): ast.AbstractElement | undefined {\n    if (crossRef.terminal) {\n        return crossRef.terminal;\n    } else if (crossRef.type.ref) {\n        const nameAssigment = findNameAssignment(crossRef.type.ref);\n        return nameAssigment?.terminal;\n    }\n    return undefined;\n}\n\n/**\n * Determines whether the given terminal rule represents a comment. This is true if the rule is marked\n * as `hidden` and it does not match white space. This means every hidden token (i.e. excluded from the AST)\n * that contains visible characters is considered a comment.\n */\nexport function isCommentTerminal(terminalRule: ast.TerminalRule): boolean {\n    return terminalRule.hidden && !terminalRegex(terminalRule).test(' ');\n}\n\n/**\n * Find all CST nodes within the given node that contribute to the specified property.\n *\n * @param node A CST node in which to look for property assignments. If this is undefined, the result is an empty array.\n * @param property A property name of the constructed AST node. If this is undefined, the result is an empty array.\n */\nexport function findNodesForProperty(node: CstNode | undefined, property: string | undefined): CstNode[] {\n    if (!node || !property) {\n        return [];\n    }\n    return findNodesForPropertyInternal(node, property, node.astNode, true);\n}\n\n/**\n * Find a single CST node within the given node that contributes to the specified property.\n *\n * @param node A CST node in which to look for property assignments. If this is undefined, the result is `undefined`.\n * @param property A property name of the constructed AST node. If this is undefined, the result is `undefined`.\n * @param index If no index is specified or the index is less than zero, the first found node is returned. If the\n *        specified index exceeds the number of assignments to the property, the last found node is returned. Otherwise,\n *        the node with the specified index is returned.\n */\nexport function findNodeForProperty(node: CstNode | undefined, property: string | undefined, index?: number): CstNode | undefined {\n    if (!node || !property) {\n        return undefined;\n    }\n    const nodes = findNodesForPropertyInternal(node, property, node.astNode, true);\n    if (nodes.length === 0) {\n        return undefined;\n    }\n    if (index !== undefined) {\n        index = Math.max(0, Math.min(index, nodes.length - 1));\n    } else {\n        index = 0;\n    }\n    return nodes[index];\n}\n\nfunction findNodesForPropertyInternal(node: CstNode, property: string, element: AstNode | undefined, first: boolean): CstNode[] {\n    if (!first) {\n        const nodeFeature = getContainerOfType(node.grammarSource, ast.isAssignment);\n        if (nodeFeature && nodeFeature.feature === property) {\n            return [node];\n        }\n    }\n    if (isCompositeCstNode(node) && node.astNode === element) {\n        return node.content.flatMap(e => findNodesForPropertyInternal(e, property, element, false));\n    }\n    return [];\n}\n\n/**\n * Find all CST nodes within the given node that correspond to the specified keyword.\n *\n * @param node A CST node in which to look for keywords. If this is undefined, the result is an empty array.\n * @param keyword A keyword as specified in the grammar.\n */\nexport function findNodesForKeyword(node: CstNode | undefined, keyword: string): CstNode[] {\n    if (!node) {\n        return [];\n    }\n    return findNodesForKeywordInternal(node, keyword, node?.astNode);\n}\n\n/**\n * Find a single CST node within the given node that corresponds to the specified keyword.\n *\n * @param node A CST node in which to look for keywords. If this is undefined, the result is `undefined`.\n * @param keyword A keyword as specified in the grammar.\n * @param index If no index is specified or the index is less than zero, the first found node is returned. If the\n *        specified index exceeds the number of keyword occurrences, the last found node is returned. Otherwise,\n *        the node with the specified index is returned.\n */\nexport function findNodeForKeyword(node: CstNode | undefined, keyword: string, index?: number): CstNode | undefined {\n    if (!node) {\n        return undefined;\n    }\n    const nodes = findNodesForKeywordInternal(node, keyword, node?.astNode);\n    if (nodes.length === 0) {\n        return undefined;\n    }\n    if (index !== undefined) {\n        index = Math.max(0, Math.min(index, nodes.length - 1));\n    } else {\n        index = 0;\n    }\n    return nodes[index];\n}\n\nexport function findNodesForKeywordInternal(node: CstNode, keyword: string, element: AstNode | undefined): CstNode[] {\n    if (node.astNode !== element) {\n        return [];\n    }\n    if (ast.isKeyword(node.grammarSource) && node.grammarSource.value === keyword) {\n        return [node];\n    }\n    const treeIterator = streamCst(node).iterator();\n    let result: IteratorResult<CstNode>;\n    const keywordNodes: CstNode[] = [];\n    do {\n        result = treeIterator.next();\n        if (!result.done) {\n            const childNode = result.value;\n            if (childNode.astNode === element) {\n                if (ast.isKeyword(childNode.grammarSource) && childNode.grammarSource.value === keyword) {\n                    keywordNodes.push(childNode);\n                }\n            } else {\n                treeIterator.prune();\n            }\n        }\n    } while (!result.done);\n    return keywordNodes;\n}\n\n/**\n * If the given CST node was parsed in the context of a property assignment, the respective `Assignment` grammar\n * node is returned. If no assignment is found, the result is `undefined`.\n *\n * @param cstNode A CST node for which to find a property assignment.\n */\nexport function findAssignment(cstNode: CstNode): ast.Assignment | undefined {\n    const astNode = cstNode.astNode;\n    // Only search until the ast node of the parent cst node is no longer the original ast node\n    // This would make us jump to a preceding rule call, which contains only unrelated assignments\n    while (astNode === cstNode.container?.astNode) {\n        const assignment = getContainerOfType(cstNode.grammarSource, ast.isAssignment);\n        if (assignment) {\n            return assignment;\n        }\n        cstNode = cstNode.container;\n    }\n    return undefined;\n}\n\n/**\n * Find an assignment to the `name` property for the given grammar type. This requires the `type` to be inferred\n * from a parser rule, and that rule must contain an assignment to the `name` property. In all other cases,\n * this function returns `undefined`.\n */\nexport function findNameAssignment(type: ast.AbstractType): ast.Assignment | undefined {\n    let startNode: AstNode = type;\n    if (ast.isInferredType(startNode)) {\n        // for inferred types, the location to start searching for the name-assignment is different\n        if (ast.isAction(startNode.$container)) {\n            // a type which is explicitly inferred by an action: investigate the sibbling of the Action node, i.e. start searching at the Action's parent\n            startNode = startNode.$container.$container!;\n        } else if (ast.isParserRule(startNode.$container)) {\n            // investigate the parser rule with the explicitly inferred type\n            startNode = startNode.$container;\n        } else {\n            assertUnreachable(startNode.$container);\n        }\n    }\n    return findNameAssignmentInternal(type, startNode, new Map());\n}\n\nfunction findNameAssignmentInternal(type: ast.AbstractType, startNode: AstNode, cache: Map<ast.AbstractType, ast.Assignment | undefined>): ast.Assignment | undefined {\n    // the cache is only required to prevent infinite loops\n    function go(node: AstNode, refType: ast.AbstractType): ast.Assignment | undefined {\n        let childAssignment: ast.Assignment | undefined = undefined;\n        const parentAssignment = getContainerOfType(node, ast.isAssignment);\n        // No parent assignment implies unassigned rule call\n        if (!parentAssignment) {\n            childAssignment = findNameAssignmentInternal(refType, refType, cache);\n        }\n        cache.set(type, childAssignment);\n        return childAssignment;\n    }\n\n    if (cache.has(type)) {\n        return cache.get(type);\n    }\n    cache.set(type, undefined);\n    for (const node of streamAllContents(startNode)) {\n        if (ast.isAssignment(node) && node.feature.toLowerCase() === 'name') {\n            cache.set(type, node);\n            return node;\n        } else if (ast.isRuleCall(node) && ast.isParserRule(node.rule.ref)) {\n            return go(node, node.rule.ref);\n        } else if (ast.isSimpleType(node) && node.typeRef?.ref) {\n            return go(node, node.typeRef.ref);\n        }\n    }\n    return undefined;\n}\n\nexport function getActionAtElement(element: ast.AbstractElement): ast.Action | undefined {\n    const parent = element.$container;\n    if (ast.isGroup(parent)) {\n        const elements = parent.elements;\n        const index = elements.indexOf(element);\n        for (let i = index - 1; i >= 0; i--) {\n            const item = elements[i];\n            if (ast.isAction(item)) {\n                return item;\n            } else {\n                const action = streamAllContents(elements[i]).find(ast.isAction);\n                if (action) {\n                    return action;\n                }\n            }\n        }\n    }\n    if (ast.isAbstractElement(parent)) {\n        return getActionAtElement(parent);\n    } else {\n        return undefined;\n    }\n}\n\nexport type Cardinality = '?' | '*' | '+' | undefined;\nexport type Operator = '=' | '+=' | '?=' | undefined;\n\nexport function isOptionalCardinality(cardinality?: Cardinality, element?: ast.AbstractElement): boolean {\n    return cardinality === '?' || cardinality === '*' || (ast.isGroup(element) && Boolean(element.guardCondition));\n}\n\nexport function isArrayCardinality(cardinality?: Cardinality): boolean {\n    return cardinality === '*' || cardinality === '+';\n}\n\nexport function isArrayOperator(operator?: Operator): boolean {\n    return operator === '+=';\n}\n\n/**\n * Determines whether the given parser rule is a _data type rule_, meaning that it has a\n * primitive return type like `number`, `boolean`, etc.\n */\nexport function isDataTypeRule(rule: ast.ParserRule): boolean {\n    return isDataTypeRuleInternal(rule, new Set());\n}\n\nfunction isDataTypeRuleInternal(rule: ast.ParserRule, visited: Set<ast.ParserRule>): boolean {\n    if (visited.has(rule)) {\n        return true;\n    } else {\n        visited.add(rule);\n    }\n    for (const node of streamAllContents(rule)) {\n        if (ast.isRuleCall(node)) {\n            if (!node.rule.ref) {\n                // RuleCall to unresolved rule. Don't assume `rule` is a DataType rule.\n                return false;\n            }\n            if (ast.isParserRule(node.rule.ref) && !isDataTypeRuleInternal(node.rule.ref, visited)) {\n                return false;\n            }\n        } else if (ast.isAssignment(node)) {\n            return false;\n        } else if (ast.isAction(node)) {\n            return false;\n        }\n    }\n    return Boolean(rule.definition);\n}\n\nexport function isDataType(type: ast.Type): boolean {\n    return isDataTypeInternal(type.type, new Set());\n}\n\nfunction isDataTypeInternal(type: ast.TypeDefinition, visited: Set<ast.TypeDefinition>): boolean {\n    if (visited.has(type)) {\n        return true;\n    } else {\n        visited.add(type);\n    }\n    if (ast.isArrayType(type)) {\n        return false;\n    } else if (ast.isReferenceType(type)) {\n        return false;\n    } else if (ast.isUnionType(type)) {\n        return type.types.every(e => isDataTypeInternal(e, visited));\n    } else if (ast.isSimpleType(type)) {\n        if (type.primitiveType !== undefined) {\n            return true;\n        } else if (type.stringType !== undefined) {\n            return true;\n        } else if (type.typeRef !== undefined) {\n            const ref = type.typeRef.ref;\n            if (ast.isType(ref)) {\n                return isDataTypeInternal(ref.type, visited);\n            } else {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    } else {\n        return false;\n    }\n}\n\nexport function getExplicitRuleType(rule: ast.ParserRule): string | undefined {\n    if (rule.inferredType) {\n        return rule.inferredType.name;\n    } else if (rule.dataType) {\n        return rule.dataType;\n    } else if (rule.returnType) {\n        const refType = rule.returnType.ref;\n        if(refType) {\n            // check if we need to check Action as return type\n            if (ast.isParserRule(refType)) {\n                return refType.name;\n            }  else if(ast.isInterface(refType) || ast.isType(refType)) {\n                return refType.name;\n            }\n        }\n    }\n    return undefined;\n}\n\nexport function getTypeName(type: ast.AbstractType | ast.Action): string {\n    if (ast.isParserRule(type)) {\n        return isDataTypeRule(type) ? type.name : getExplicitRuleType(type) ?? type.name;\n    } else if (ast.isInterface(type) || ast.isType(type) || ast.isReturnType(type)) {\n        return type.name;\n    } else if (ast.isAction(type)) {\n        const actionType = getActionType(type);\n        if (actionType) {\n            return actionType;\n        }\n    } else if (ast.isInferredType(type)) {\n        return type.name;\n    }\n    throw new Error('Cannot get name of Unknown Type');\n}\n\nexport function getActionType(action: ast.Action): string | undefined {\n    if (action.inferredType) {\n        return action.inferredType.name;\n    } else if (action.type?.ref) {\n        return getTypeName(action.type.ref);\n    }\n    return undefined; // not inferring and not referencing a valid type\n}\n\nexport function getRuleType(rule: ast.AbstractRule): string {\n    if (ast.isTerminalRule(rule)) {\n        return rule.type?.name ?? 'string';\n    } else {\n        return isDataTypeRule(rule) ? rule.name : getExplicitRuleType(rule) ?? rule.name;\n    }\n}\n\nexport function terminalRegex(terminalRule: ast.TerminalRule): RegExp {\n    const flags: Flags = {\n        s: false,\n        i: false,\n        u: false\n    };\n    const source = abstractElementToRegex(terminalRule.definition, flags);\n    const flagText = Object.entries(flags).filter(([, value]) => value).map(([name]) => name).join('');\n    return new RegExp(source, flagText);\n}\n\n// Using [\\s\\S]* allows to match everything, compared to . which doesn't match line terminators\nconst WILDCARD = /[\\s\\S]/.source;\n\ntype Flags = {\n    s: boolean;\n    i: boolean;\n    u: boolean;\n}\n\nfunction abstractElementToRegex(element: ast.AbstractElement, flags?: Flags): string {\n    if (ast.isTerminalAlternatives(element)) {\n        return terminalAlternativesToRegex(element);\n    } else if (ast.isTerminalGroup(element)) {\n        return terminalGroupToRegex(element);\n    } else if (ast.isCharacterRange(element)) {\n        return characterRangeToRegex(element);\n    } else if (ast.isTerminalRuleCall(element)) {\n        const rule = element.rule.ref;\n        if (!rule) {\n            throw new Error('Missing rule reference.');\n        }\n        return withCardinality(abstractElementToRegex(rule.definition), {\n            cardinality: element.cardinality,\n            lookahead: element.lookahead\n        });\n    } else if (ast.isNegatedToken(element)) {\n        return negateTokenToRegex(element);\n    } else if (ast.isUntilToken(element)) {\n        return untilTokenToRegex(element);\n    } else if (ast.isRegexToken(element)) {\n        const lastSlash = element.regex.lastIndexOf('/');\n        const source = element.regex.substring(1, lastSlash);\n        const regexFlags = element.regex.substring(lastSlash + 1);\n        if (flags) {\n            flags.i = regexFlags.includes('i');\n            flags.s = regexFlags.includes('s');\n            flags.u = regexFlags.includes('u');\n        }\n        return withCardinality(source, {\n            cardinality: element.cardinality,\n            lookahead: element.lookahead,\n            wrap: false\n        });\n    } else if (ast.isWildcard(element)) {\n        return withCardinality(WILDCARD, {\n            cardinality: element.cardinality,\n            lookahead: element.lookahead\n        });\n    } else {\n        throw new Error(`Invalid terminal element: ${element?.$type}`);\n    }\n}\n\nfunction terminalAlternativesToRegex(alternatives: ast.TerminalAlternatives): string {\n    return withCardinality(alternatives.elements.map(e => abstractElementToRegex(e)).join('|'), {\n        cardinality: alternatives.cardinality,\n        lookahead: alternatives.lookahead\n    });\n}\n\nfunction terminalGroupToRegex(group: ast.TerminalGroup): string {\n    return withCardinality(group.elements.map(e => abstractElementToRegex(e)).join(''), {\n        cardinality: group.cardinality,\n        lookahead: group.lookahead\n    });\n}\n\nfunction untilTokenToRegex(until: ast.UntilToken): string {\n    return withCardinality(`${WILDCARD}*?${abstractElementToRegex(until.terminal)}`, {\n        cardinality: until.cardinality,\n        lookahead: until.lookahead\n    });\n}\n\nfunction negateTokenToRegex(negate: ast.NegatedToken): string {\n    return withCardinality(`(?!${abstractElementToRegex(negate.terminal)})${WILDCARD}*?`, {\n        cardinality: negate.cardinality,\n        lookahead: negate.lookahead\n    });\n}\n\nfunction characterRangeToRegex(range: ast.CharacterRange): string {\n    if (range.right) {\n        return withCardinality(`[${keywordToRegex(range.left)}-${keywordToRegex(range.right)}]`, {\n            cardinality: range.cardinality,\n            lookahead: range.lookahead,\n            wrap: false\n        });\n    }\n    return withCardinality(keywordToRegex(range.left), {\n        cardinality: range.cardinality,\n        lookahead: range.lookahead,\n        wrap: false\n    });\n}\n\nfunction keywordToRegex(keyword: ast.Keyword): string {\n    return escapeRegExp(keyword.value);\n}\n\nfunction withCardinality(regex: string, options: {\n    cardinality?: string\n    wrap?: boolean\n    lookahead?: string\n}): string {\n    if (options.wrap !== false || options.lookahead) {\n        regex = `(${options.lookahead ?? ''}${regex})`;\n    }\n    if (options.cardinality) {\n        return `${regex}${options.cardinality}`;\n    }\n    return regex;\n}\n","// based on: https://github.com/petkaantonov/bluebird/blob/b97c0d2d487e8c5076e8bd897e0dcd4622d31846/src/util.js#L201-L216\nexport function toFastProperties(toBecomeFast: any) {\n  function FakeConstructor() {}\n\n  // If our object is used as a constructor, it would receive\n  FakeConstructor.prototype = toBecomeFast;\n  const fakeInstance = new (FakeConstructor as any)();\n\n  function fakeAccess() {\n    return typeof fakeInstance.bar;\n  }\n\n  // help V8 understand this is a \"real\" prototype by actually using\n  // the fake instance.\n  fakeAccess();\n  fakeAccess();\n\n  // Always true condition to suppress the Firefox warning of unreachable\n  // code after a return statement.\n  if (1) return toBecomeFast;\n\n  // Eval prevents optimization of this method (even though this is dead code)\n  // - https://esbuild.github.io/content-types/#direct-eval\n  /* istanbul ignore next */\n  // tslint:disable-next-line\n  (0, eval)(toBecomeFast);\n}\n","/**\n * The base implementation of `_.slice` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction baseSlice(array, start, end) {\n  var index = -1,\n      length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : (length + start);\n  }\n  end = end > length ? length : end;\n  if (end < 0) {\n    end += length;\n  }\n  length = start > end ? 0 : ((end - start) >>> 0);\n  start >>>= 0;\n\n  var result = Array(length);\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n  return result;\n}\n\nexport default baseSlice;\n","import baseSlice from './_baseSlice.js';\nimport toInteger from './toInteger.js';\n\n/**\n * Creates a slice of `array` with `n` elements dropped from the beginning.\n *\n * @static\n * @memberOf _\n * @since 0.5.0\n * @category Array\n * @param {Array} array The array to query.\n * @param {number} [n=1] The number of elements to drop.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the slice of `array`.\n * @example\n *\n * _.drop([1, 2, 3]);\n * // => [2, 3]\n *\n * _.drop([1, 2, 3], 2);\n * // => [3]\n *\n * _.drop([1, 2, 3], 5);\n * // => []\n *\n * _.drop([1, 2, 3], 0);\n * // => [1, 2, 3]\n */\nfunction drop(array, n, guard) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return [];\n  }\n  n = (guard || n === undefined) ? 1 : toInteger(n);\n  return baseSlice(array, n < 0 ? 0 : n, length);\n}\n\nexport default drop;\n","import assignValue from './_assignValue.js';\nimport copyObject from './_copyObject.js';\nimport createAssigner from './_createAssigner.js';\nimport isArrayLike from './isArrayLike.js';\nimport isPrototype from './_isPrototype.js';\nimport keys from './keys.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns own enumerable string keyed properties of source objects to the\n * destination object. Source objects are applied from left to right.\n * Subsequent sources overwrite property assignments of previous sources.\n *\n * **Note:** This method mutates `object` and is loosely based on\n * [`Object.assign`](https://mdn.io/Object/assign).\n *\n * @static\n * @memberOf _\n * @since 0.10.0\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @see _.assignIn\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * function Bar() {\n *   this.c = 3;\n * }\n *\n * Foo.prototype.b = 2;\n * Bar.prototype.d = 4;\n *\n * _.assign({ 'a': 0 }, new Foo, new Bar);\n * // => { 'a': 1, 'c': 3 }\n */\nvar assign = createAssigner(function(object, source) {\n  if (isPrototype(source) || isArrayLike(source)) {\n    copyObject(source, keys(source), object);\n    return;\n  }\n  for (var key in source) {\n    if (hasOwnProperty.call(source, key)) {\n      assignValue(object, key, source[key]);\n    }\n  }\n});\n\nexport default assign;\n","import arrayMap from './_arrayMap.js';\nimport baseIteratee from './_baseIteratee.js';\nimport basePickBy from './_basePickBy.js';\nimport getAllKeysIn from './_getAllKeysIn.js';\n\n/**\n * Creates an object composed of the `object` properties `predicate` returns\n * truthy for. The predicate is invoked with two arguments: (value, key).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The source object.\n * @param {Function} [predicate=_.identity] The function invoked per property.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.pickBy(object, _.isNumber);\n * // => { 'a': 1, 'c': 3 }\n */\nfunction pickBy(object, predicate) {\n  if (object == null) {\n    return {};\n  }\n  var props = arrayMap(getAllKeysIn(object), function(prop) {\n    return [prop];\n  });\n  predicate = baseIteratee(predicate);\n  return basePickBy(object, props, function(value, path) {\n    return predicate(value, path[0]);\n  });\n}\n\nexport default pickBy;\n","import baseGetTag from './_baseGetTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar regexpTag = '[object RegExp]';\n\n/**\n * The base implementation of `_.isRegExp` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n */\nfunction baseIsRegExp(value) {\n  return isObjectLike(value) && baseGetTag(value) == regexpTag;\n}\n\nexport default baseIsRegExp;\n","import baseIsRegExp from './_baseIsRegExp.js';\nimport baseUnary from './_baseUnary.js';\nimport nodeUtil from './_nodeUtil.js';\n\n/* Node.js helper references. */\nvar nodeIsRegExp = nodeUtil && nodeUtil.isRegExp;\n\n/**\n * Checks if `value` is classified as a `RegExp` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n * @example\n *\n * _.isRegExp(/abc/);\n * // => true\n *\n * _.isRegExp('/abc/');\n * // => false\n */\nvar isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;\n\nexport default isRegExp;\n","import { assign, forEach, isRegExp, isString, map, pickBy } from \"lodash-es\";\nimport type {\n  IGASTVisitor,\n  IProduction,\n  IProductionWithOccurrence,\n  ISerializedGast,\n  TokenType,\n} from \"@chevrotain/types\";\n\n// TODO: duplicated code to avoid extracting another sub-package -- how to avoid?\nfunction tokenLabel(tokType: TokenType): string {\n  if (hasTokenLabel(tokType)) {\n    return tokType.LABEL;\n  } else {\n    return tokType.name;\n  }\n}\n\n// TODO: duplicated code to avoid extracting another sub-package -- how to avoid?\nfunction hasTokenLabel(\n  obj: TokenType,\n): obj is TokenType & Pick<Required<TokenType>, \"LABEL\"> {\n  return isString(obj.LABEL) && obj.LABEL !== \"\";\n}\n\nexport abstract class AbstractProduction<T extends IProduction = IProduction>\n  implements IProduction\n{\n  public get definition(): T[] {\n    return this._definition;\n  }\n  public set definition(value: T[]) {\n    this._definition = value;\n  }\n\n  constructor(protected _definition: T[]) {}\n\n  accept(visitor: IGASTVisitor): void {\n    visitor.visit(this);\n    forEach(this.definition, (prod) => {\n      prod.accept(visitor);\n    });\n  }\n}\n\nexport class NonTerminal\n  extends AbstractProduction\n  implements IProductionWithOccurrence\n{\n  public nonTerminalName!: string;\n  public label?: string;\n  public referencedRule!: Rule;\n  public idx: number = 1;\n\n  constructor(options: {\n    nonTerminalName: string;\n    label?: string;\n    referencedRule?: Rule;\n    idx?: number;\n  }) {\n    super([]);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n\n  set definition(definition: IProduction[]) {\n    // immutable\n  }\n\n  get definition(): IProduction[] {\n    if (this.referencedRule !== undefined) {\n      return this.referencedRule.definition;\n    }\n    return [];\n  }\n\n  accept(visitor: IGASTVisitor): void {\n    visitor.visit(this);\n    // don't visit children of a reference, we will get cyclic infinite loops if we do so\n  }\n}\n\nexport class Rule extends AbstractProduction {\n  public name!: string;\n  public orgText: string = \"\";\n\n  constructor(options: {\n    name: string;\n    definition: IProduction[];\n    orgText?: string;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class Alternative extends AbstractProduction {\n  public ignoreAmbiguities: boolean = false;\n\n  constructor(options: {\n    definition: IProduction[];\n    ignoreAmbiguities?: boolean;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class Option\n  extends AbstractProduction\n  implements IProductionWithOccurrence\n{\n  public idx: number = 1;\n  public maxLookahead?: number;\n\n  constructor(options: {\n    definition: IProduction[];\n    idx?: number;\n    maxLookahead?: number;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class RepetitionMandatory\n  extends AbstractProduction\n  implements IProductionWithOccurrence\n{\n  public idx: number = 1;\n  public maxLookahead?: number;\n\n  constructor(options: {\n    definition: IProduction[];\n    idx?: number;\n    maxLookahead?: number;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class RepetitionMandatoryWithSeparator\n  extends AbstractProduction\n  implements IProductionWithOccurrence\n{\n  public separator!: TokenType;\n  public idx: number = 1;\n  public maxLookahead?: number;\n\n  constructor(options: {\n    definition: IProduction[];\n    separator: TokenType;\n    idx?: number;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class Repetition\n  extends AbstractProduction\n  implements IProductionWithOccurrence\n{\n  public separator!: TokenType;\n  public idx: number = 1;\n  public maxLookahead?: number;\n\n  constructor(options: {\n    definition: IProduction[];\n    idx?: number;\n    maxLookahead?: number;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class RepetitionWithSeparator\n  extends AbstractProduction\n  implements IProductionWithOccurrence\n{\n  public separator!: TokenType;\n  public idx: number = 1;\n  public maxLookahead?: number;\n\n  constructor(options: {\n    definition: IProduction[];\n    separator: TokenType;\n    idx?: number;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class Alternation\n  extends AbstractProduction<Alternative>\n  implements IProductionWithOccurrence\n{\n  public idx: number = 1;\n  public ignoreAmbiguities: boolean = false;\n  public hasPredicates: boolean = false;\n  public maxLookahead?: number;\n\n  public get definition(): Alternative[] {\n    return this._definition;\n  }\n  public set definition(value: Alternative[]) {\n    this._definition = value;\n  }\n\n  constructor(options: {\n    definition: Alternative[];\n    idx?: number;\n    ignoreAmbiguities?: boolean;\n    hasPredicates?: boolean;\n    maxLookahead?: number;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class Terminal implements IProductionWithOccurrence {\n  public terminalType!: TokenType;\n  public label?: string;\n  public idx: number = 1;\n\n  constructor(options: {\n    terminalType: TokenType;\n    label?: string;\n    idx?: number;\n  }) {\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n\n  accept(visitor: IGASTVisitor): void {\n    visitor.visit(this);\n  }\n}\n\nexport interface ISerializedBasic extends ISerializedGast {\n  type:\n    | \"Alternative\"\n    | \"Option\"\n    | \"RepetitionMandatory\"\n    | \"Repetition\"\n    | \"Alternation\";\n  idx?: number;\n}\n\nexport interface ISerializedGastRule extends ISerializedGast {\n  type: \"Rule\";\n  name: string;\n  orgText: string;\n}\n\nexport interface ISerializedNonTerminal extends ISerializedGast {\n  type: \"NonTerminal\";\n  name: string;\n  label?: string;\n  idx: number;\n}\n\nexport interface ISerializedTerminal extends ISerializedGast {\n  type: \"Terminal\";\n  name: string;\n  terminalLabel?: string;\n  label?: string;\n  pattern?: string;\n  idx: number;\n}\n\nexport interface ISerializedTerminalWithSeparator extends ISerializedGast {\n  type: \"RepetitionMandatoryWithSeparator\" | \"RepetitionWithSeparator\";\n  idx: number;\n  separator: ISerializedTerminal;\n}\n\nexport type ISerializedGastAny =\n  | ISerializedBasic\n  | ISerializedGastRule\n  | ISerializedNonTerminal\n  | ISerializedTerminal\n  | ISerializedTerminalWithSeparator;\n\nexport function serializeGrammar(topRules: Rule[]): ISerializedGast[] {\n  return map(topRules, serializeProduction);\n}\n\nexport function serializeProduction(node: IProduction): ISerializedGast {\n  function convertDefinition(definition: IProduction[]): ISerializedGast[] {\n    return map(definition, serializeProduction);\n  }\n  /* istanbul ignore else */\n  if (node instanceof NonTerminal) {\n    const serializedNonTerminal: ISerializedNonTerminal = {\n      type: \"NonTerminal\",\n      name: node.nonTerminalName,\n      idx: node.idx,\n    };\n\n    if (isString(node.label)) {\n      serializedNonTerminal.label = node.label;\n    }\n\n    return serializedNonTerminal;\n  } else if (node instanceof Alternative) {\n    return <ISerializedBasic>{\n      type: \"Alternative\",\n      definition: convertDefinition(node.definition),\n    };\n  } else if (node instanceof Option) {\n    return <ISerializedBasic>{\n      type: \"Option\",\n      idx: node.idx,\n      definition: convertDefinition(node.definition),\n    };\n  } else if (node instanceof RepetitionMandatory) {\n    return <ISerializedBasic>{\n      type: \"RepetitionMandatory\",\n      idx: node.idx,\n      definition: convertDefinition(node.definition),\n    };\n  } else if (node instanceof RepetitionMandatoryWithSeparator) {\n    return <ISerializedTerminalWithSeparator>{\n      type: \"RepetitionMandatoryWithSeparator\",\n      idx: node.idx,\n      separator: <ISerializedTerminal>(\n        serializeProduction(new Terminal({ terminalType: node.separator }))\n      ),\n      definition: convertDefinition(node.definition),\n    };\n  } else if (node instanceof RepetitionWithSeparator) {\n    return <ISerializedTerminalWithSeparator>{\n      type: \"RepetitionWithSeparator\",\n      idx: node.idx,\n      separator: <ISerializedTerminal>(\n        serializeProduction(new Terminal({ terminalType: node.separator }))\n      ),\n      definition: convertDefinition(node.definition),\n    };\n  } else if (node instanceof Repetition) {\n    return <ISerializedBasic>{\n      type: \"Repetition\",\n      idx: node.idx,\n      definition: convertDefinition(node.definition),\n    };\n  } else if (node instanceof Alternation) {\n    return <ISerializedBasic>{\n      type: \"Alternation\",\n      idx: node.idx,\n      definition: convertDefinition(node.definition),\n    };\n  } else if (node instanceof Terminal) {\n    const serializedTerminal = <ISerializedTerminal>{\n      type: \"Terminal\",\n      name: node.terminalType.name,\n      label: tokenLabel(node.terminalType),\n      idx: node.idx,\n    };\n\n    if (isString(node.label)) {\n      serializedTerminal.terminalLabel = node.label;\n    }\n\n    const pattern = node.terminalType.PATTERN;\n    if (node.terminalType.PATTERN) {\n      serializedTerminal.pattern = isRegExp(pattern)\n        ? (<any>pattern).source\n        : pattern;\n    }\n\n    return serializedTerminal;\n  } else if (node instanceof Rule) {\n    return <ISerializedGastRule>{\n      type: \"Rule\",\n      name: node.name,\n      orgText: node.orgText,\n      definition: convertDefinition(node.definition),\n    };\n    /* c8 ignore next 3 */\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n","import {\n  Alternation,\n  Alternative,\n  NonTerminal,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Rule,\n  Terminal,\n} from \"./model.js\";\nimport type { IProduction } from \"@chevrotain/types\";\n\nexport abstract class GAstVisitor {\n  public visit(node: IProduction): any {\n    const nodeAny: any = node;\n    switch (nodeAny.constructor) {\n      case NonTerminal:\n        return this.visitNonTerminal(nodeAny);\n      case Alternative:\n        return this.visitAlternative(nodeAny);\n      case Option:\n        return this.visitOption(nodeAny);\n      case RepetitionMandatory:\n        return this.visitRepetitionMandatory(nodeAny);\n      case RepetitionMandatoryWithSeparator:\n        return this.visitRepetitionMandatoryWithSeparator(nodeAny);\n      case RepetitionWithSeparator:\n        return this.visitRepetitionWithSeparator(nodeAny);\n      case Repetition:\n        return this.visitRepetition(nodeAny);\n      case Alternation:\n        return this.visitAlternation(nodeAny);\n      case Terminal:\n        return this.visitTerminal(nodeAny);\n      case Rule:\n        return this.visitRule(nodeAny);\n      /* c8 ignore next 2 */\n      default:\n        throw Error(\"non exhaustive match\");\n    }\n  }\n\n  /* c8 ignore next */\n  public visitNonTerminal(node: NonTerminal): any {}\n\n  /* c8 ignore next */\n  public visitAlternative(node: Alternative): any {}\n\n  /* c8 ignore next */\n  public visitOption(node: Option): any {}\n\n  /* c8 ignore next */\n  public visitRepetition(node: Repetition): any {}\n\n  /* c8 ignore next */\n  public visitRepetitionMandatory(node: RepetitionMandatory): any {}\n\n  /* c8 ignore next 3 */\n  public visitRepetitionMandatoryWithSeparator(\n    node: RepetitionMandatoryWithSeparator,\n  ): any {}\n\n  /* c8 ignore next */\n  public visitRepetitionWithSeparator(node: RepetitionWithSeparator): any {}\n\n  /* c8 ignore next */\n  public visitAlternation(node: Alternation): any {}\n\n  /* c8 ignore next */\n  public visitTerminal(node: Terminal): any {}\n\n  /* c8 ignore next */\n  public visitRule(node: Rule): any {}\n}\n","import baseEach from './_baseEach.js';\n\n/**\n * The base implementation of `_.some` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction baseSome(collection, predicate) {\n  var result;\n\n  baseEach(collection, function(value, index, collection) {\n    result = predicate(value, index, collection);\n    return !result;\n  });\n  return !!result;\n}\n\nexport default baseSome;\n","import arraySome from './_arraySome.js';\nimport baseIteratee from './_baseIteratee.js';\nimport baseSome from './_baseSome.js';\nimport isArray from './isArray.js';\nimport isIterateeCall from './_isIterateeCall.js';\n\n/**\n * Checks if `predicate` returns truthy for **any** element of `collection`.\n * Iteration is stopped once `predicate` returns truthy. The predicate is\n * invoked with three arguments: (value, index|key, collection).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n * @example\n *\n * _.some([null, 0, 'yes', false], Boolean);\n * // => true\n *\n * var users = [\n *   { 'user': 'barney', 'active': true },\n *   { 'user': 'fred',   'active': false }\n * ];\n *\n * // The `_.matches` iteratee shorthand.\n * _.some(users, { 'user': 'barney', 'active': false });\n * // => false\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.some(users, ['active', false]);\n * // => true\n *\n * // The `_.property` iteratee shorthand.\n * _.some(users, 'active');\n * // => true\n */\nfunction some(collection, predicate, guard) {\n  var func = isArray(collection) ? arraySome : baseSome;\n  if (guard && isIterateeCall(collection, predicate, guard)) {\n    predicate = undefined;\n  }\n  return func(collection, baseIteratee(predicate, 3));\n}\n\nexport default some;\n","import baseIndexOf from './_baseIndexOf.js';\nimport isArrayLike from './isArrayLike.js';\nimport isString from './isString.js';\nimport toInteger from './toInteger.js';\nimport values from './values.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * Checks if `value` is in `collection`. If `collection` is a string, it's\n * checked for a substring of `value`, otherwise\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * is used for equality comparisons. If `fromIndex` is negative, it's used as\n * the offset from the end of `collection`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object|string} collection The collection to inspect.\n * @param {*} value The value to search for.\n * @param {number} [fromIndex=0] The index to search from.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n * @returns {boolean} Returns `true` if `value` is found, else `false`.\n * @example\n *\n * _.includes([1, 2, 3], 1);\n * // => true\n *\n * _.includes([1, 2, 3], 1, 2);\n * // => false\n *\n * _.includes({ 'a': 1, 'b': 2 }, 1);\n * // => true\n *\n * _.includes('abcd', 'bc');\n * // => true\n */\nfunction includes(collection, value, fromIndex, guard) {\n  collection = isArrayLike(collection) ? collection : values(collection);\n  fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;\n\n  var length = collection.length;\n  if (fromIndex < 0) {\n    fromIndex = nativeMax(length + fromIndex, 0);\n  }\n  return isString(collection)\n    ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)\n    : (!!length && baseIndexOf(collection, value, fromIndex) > -1);\n}\n\nexport default includes;\n","/**\n * A specialized version of `_.every` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if all elements pass the predicate check,\n *  else `false`.\n */\nfunction arrayEvery(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (!predicate(array[index], index, array)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport default arrayEvery;\n","import baseEach from './_baseEach.js';\n\n/**\n * The base implementation of `_.every` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if all elements pass the predicate check,\n *  else `false`\n */\nfunction baseEvery(collection, predicate) {\n  var result = true;\n  baseEach(collection, function(value, index, collection) {\n    result = !!predicate(value, index, collection);\n    return result;\n  });\n  return result;\n}\n\nexport default baseEvery;\n","import arrayEvery from './_arrayEvery.js';\nimport baseEvery from './_baseEvery.js';\nimport baseIteratee from './_baseIteratee.js';\nimport isArray from './isArray.js';\nimport isIterateeCall from './_isIterateeCall.js';\n\n/**\n * Checks if `predicate` returns truthy for **all** elements of `collection`.\n * Iteration is stopped once `predicate` returns falsey. The predicate is\n * invoked with three arguments: (value, index|key, collection).\n *\n * **Note:** This method returns `true` for\n * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because\n * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of\n * elements of empty collections.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {boolean} Returns `true` if all elements pass the predicate check,\n *  else `false`.\n * @example\n *\n * _.every([true, 1, null, 'yes'], Boolean);\n * // => false\n *\n * var users = [\n *   { 'user': 'barney', 'age': 36, 'active': false },\n *   { 'user': 'fred',   'age': 40, 'active': false }\n * ];\n *\n * // The `_.matches` iteratee shorthand.\n * _.every(users, { 'user': 'barney', 'active': false });\n * // => false\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.every(users, ['active', false]);\n * // => true\n *\n * // The `_.property` iteratee shorthand.\n * _.every(users, 'active');\n * // => false\n */\nfunction every(collection, predicate, guard) {\n  var func = isArray(collection) ? arrayEvery : baseEvery;\n  if (guard && isIterateeCall(collection, predicate, guard)) {\n    predicate = undefined;\n  }\n  return func(collection, baseIteratee(predicate, 3));\n}\n\nexport default every;\n","import { every, includes, some } from \"lodash-es\";\nimport {\n  AbstractProduction,\n  Alternation,\n  Alternative,\n  NonTerminal,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Rule,\n  Terminal,\n} from \"./model.js\";\nimport type { IProduction, IProductionWithOccurrence } from \"@chevrotain/types\";\n\nexport function isSequenceProd(\n  prod: IProduction,\n): prod is { definition: IProduction[] } & IProduction {\n  return (\n    prod instanceof Alternative ||\n    prod instanceof Option ||\n    prod instanceof Repetition ||\n    prod instanceof RepetitionMandatory ||\n    prod instanceof RepetitionMandatoryWithSeparator ||\n    prod instanceof RepetitionWithSeparator ||\n    prod instanceof Terminal ||\n    prod instanceof Rule\n  );\n}\n\nexport function isOptionalProd(\n  prod: IProduction,\n  alreadyVisited: NonTerminal[] = [],\n): boolean {\n  const isDirectlyOptional =\n    prod instanceof Option ||\n    prod instanceof Repetition ||\n    prod instanceof RepetitionWithSeparator;\n  if (isDirectlyOptional) {\n    return true;\n  }\n\n  // note that this can cause infinite loop if one optional empty TOP production has a cyclic dependency with another\n  // empty optional top rule\n  // may be indirectly optional ((A?B?C?) | (D?E?F?))\n  if (prod instanceof Alternation) {\n    // for OR its enough for just one of the alternatives to be optional\n    return some((<Alternation>prod).definition, (subProd: IProduction) => {\n      return isOptionalProd(subProd, alreadyVisited);\n    });\n  } else if (prod instanceof NonTerminal && includes(alreadyVisited, prod)) {\n    // avoiding stack overflow due to infinite recursion\n    return false;\n  } else if (prod instanceof AbstractProduction) {\n    if (prod instanceof NonTerminal) {\n      alreadyVisited.push(prod);\n    }\n    return every(\n      (<AbstractProduction>prod).definition,\n      (subProd: IProduction) => {\n        return isOptionalProd(subProd, alreadyVisited);\n      },\n    );\n  } else {\n    return false;\n  }\n}\n\nexport function isBranchingProd(\n  prod: IProduction,\n): prod is { definition: IProduction[] } & IProduction {\n  return prod instanceof Alternation;\n}\n\nexport function getProductionDslName(prod: IProductionWithOccurrence): string {\n  /* istanbul ignore else */\n  if (prod instanceof NonTerminal) {\n    return \"SUBRULE\";\n  } else if (prod instanceof Option) {\n    return \"OPTION\";\n  } else if (prod instanceof Alternation) {\n    return \"OR\";\n  } else if (prod instanceof RepetitionMandatory) {\n    return \"AT_LEAST_ONE\";\n  } else if (prod instanceof RepetitionMandatoryWithSeparator) {\n    return \"AT_LEAST_ONE_SEP\";\n  } else if (prod instanceof RepetitionWithSeparator) {\n    return \"MANY_SEP\";\n  } else if (prod instanceof Repetition) {\n    return \"MANY\";\n  } else if (prod instanceof Terminal) {\n    return \"CONSUME\";\n    /* c8 ignore next 3 */\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n","import { drop, forEach } from \"lodash-es\";\nimport {\n  Alternation,\n  Alternative,\n  NonTerminal,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Terminal,\n} from \"@chevrotain/gast\";\nimport { IProduction } from \"@chevrotain/types\";\n\n/**\n *  A Grammar Walker that computes the \"remaining\" grammar \"after\" a productions in the grammar.\n */\nexport abstract class RestWalker {\n  walk(prod: { definition: IProduction[] }, prevRest: any[] = []): void {\n    forEach(prod.definition, (subProd: IProduction, index) => {\n      const currRest = drop(prod.definition, index + 1);\n      /* istanbul ignore else */\n      if (subProd instanceof NonTerminal) {\n        this.walkProdRef(subProd, currRest, prevRest);\n      } else if (subProd instanceof Terminal) {\n        this.walkTerminal(subProd, currRest, prevRest);\n      } else if (subProd instanceof Alternative) {\n        this.walkFlat(subProd, currRest, prevRest);\n      } else if (subProd instanceof Option) {\n        this.walkOption(subProd, currRest, prevRest);\n      } else if (subProd instanceof RepetitionMandatory) {\n        this.walkAtLeastOne(subProd, currRest, prevRest);\n      } else if (subProd instanceof RepetitionMandatoryWithSeparator) {\n        this.walkAtLeastOneSep(subProd, currRest, prevRest);\n      } else if (subProd instanceof RepetitionWithSeparator) {\n        this.walkManySep(subProd, currRest, prevRest);\n      } else if (subProd instanceof Repetition) {\n        this.walkMany(subProd, currRest, prevRest);\n      } else if (subProd instanceof Alternation) {\n        this.walkOr(subProd, currRest, prevRest);\n      } else {\n        throw Error(\"non exhaustive match\");\n      }\n    });\n  }\n\n  walkTerminal(\n    terminal: Terminal,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {}\n\n  walkProdRef(\n    refProd: NonTerminal,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {}\n\n  walkFlat(\n    flatProd: Alternative,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // ABCDEF => after the D the rest is EF\n    const fullOrRest = currRest.concat(prevRest);\n    this.walk(flatProd, <any>fullOrRest);\n  }\n\n  walkOption(\n    optionProd: Option,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // ABC(DE)?F => after the (DE)? the rest is F\n    const fullOrRest = currRest.concat(prevRest);\n    this.walk(optionProd, <any>fullOrRest);\n  }\n\n  walkAtLeastOne(\n    atLeastOneProd: RepetitionMandatory,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // ABC(DE)+F => after the (DE)+ the rest is (DE)?F\n    const fullAtLeastOneRest: IProduction[] = [\n      new Option({ definition: atLeastOneProd.definition }),\n    ].concat(<any>currRest, <any>prevRest);\n    this.walk(atLeastOneProd, fullAtLeastOneRest);\n  }\n\n  walkAtLeastOneSep(\n    atLeastOneSepProd: RepetitionMandatoryWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // ABC DE(,DE)* F => after the (,DE)+ the rest is (,DE)?F\n    const fullAtLeastOneSepRest = restForRepetitionWithSeparator(\n      atLeastOneSepProd,\n      currRest,\n      prevRest,\n    );\n    this.walk(atLeastOneSepProd, fullAtLeastOneSepRest);\n  }\n\n  walkMany(\n    manyProd: Repetition,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // ABC(DE)*F => after the (DE)* the rest is (DE)?F\n    const fullManyRest: IProduction[] = [\n      new Option({ definition: manyProd.definition }),\n    ].concat(<any>currRest, <any>prevRest);\n    this.walk(manyProd, fullManyRest);\n  }\n\n  walkManySep(\n    manySepProd: RepetitionWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // ABC (DE(,DE)*)? F => after the (,DE)* the rest is (,DE)?F\n    const fullManySepRest = restForRepetitionWithSeparator(\n      manySepProd,\n      currRest,\n      prevRest,\n    );\n    this.walk(manySepProd, fullManySepRest);\n  }\n\n  walkOr(\n    orProd: Alternation,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // ABC(D|E|F)G => when finding the (D|E|F) the rest is G\n    const fullOrRest = currRest.concat(prevRest);\n    // walk all different alternatives\n    forEach(orProd.definition, (alt) => {\n      // wrapping each alternative in a single definition wrapper\n      // to avoid errors in computing the rest of that alternative in the invocation to computeInProdFollows\n      // (otherwise for OR([alt1,alt2]) alt2 will be considered in 'rest' of alt1\n      const prodWrapper = new Alternative({ definition: [alt] });\n      this.walk(prodWrapper, <any>fullOrRest);\n    });\n  }\n}\n\nfunction restForRepetitionWithSeparator(\n  repSepProd: RepetitionWithSeparator,\n  currRest: IProduction[],\n  prevRest: IProduction[],\n) {\n  const repSepRest = [\n    new Option({\n      definition: [\n        new Terminal({ terminalType: repSepProd.separator }) as IProduction,\n      ].concat(repSepProd.definition),\n    }) as IProduction,\n  ];\n  const fullRepSepRest: IProduction[] = repSepRest.concat(currRest, prevRest);\n  return fullRepSepRest;\n}\n","import baseUniq from './_baseUniq.js';\n\n/**\n * Creates a duplicate-free version of an array, using\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons, in which only the first occurrence of each element\n * is kept. The order of result values is determined by the order they occur\n * in the array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @returns {Array} Returns the new duplicate free array.\n * @example\n *\n * _.uniq([2, 1, 2]);\n * // => [2, 1]\n */\nfunction uniq(array) {\n  return (array && array.length) ? baseUniq(array) : [];\n}\n\nexport default uniq;\n","import { flatten, map, uniq } from \"lodash-es\";\nimport {\n  isBranchingProd,\n  isOptionalProd,\n  isSequenceProd,\n  NonTerminal,\n  Terminal,\n} from \"@chevrotain/gast\";\nimport { IProduction, TokenType } from \"@chevrotain/types\";\n\nexport function first(prod: IProduction): TokenType[] {\n  /* istanbul ignore else */\n  if (prod instanceof NonTerminal) {\n    // this could in theory cause infinite loops if\n    // (1) prod A refs prod B.\n    // (2) prod B refs prod A\n    // (3) AB can match the empty set\n    // in other words a cycle where everything is optional so the first will keep\n    // looking ahead for the next optional part and will never exit\n    // currently there is no safeguard for this unique edge case because\n    // (1) not sure a grammar in which this can happen is useful for anything (productive)\n    return first((<NonTerminal>prod).referencedRule);\n  } else if (prod instanceof Terminal) {\n    return firstForTerminal(<Terminal>prod);\n  } else if (isSequenceProd(prod)) {\n    return firstForSequence(prod);\n  } else if (isBranchingProd(prod)) {\n    return firstForBranching(prod);\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n\nexport function firstForSequence(prod: {\n  definition: IProduction[];\n}): TokenType[] {\n  let firstSet: TokenType[] = [];\n  const seq = prod.definition;\n  let nextSubProdIdx = 0;\n  let hasInnerProdsRemaining = seq.length > nextSubProdIdx;\n  let currSubProd;\n  // so we enter the loop at least once (if the definition is not empty\n  let isLastInnerProdOptional = true;\n  // scan a sequence until it's end or until we have found a NONE optional production in it\n  while (hasInnerProdsRemaining && isLastInnerProdOptional) {\n    currSubProd = seq[nextSubProdIdx];\n    isLastInnerProdOptional = isOptionalProd(currSubProd);\n    firstSet = firstSet.concat(first(currSubProd));\n    nextSubProdIdx = nextSubProdIdx + 1;\n    hasInnerProdsRemaining = seq.length > nextSubProdIdx;\n  }\n\n  return uniq(firstSet);\n}\n\nexport function firstForBranching(prod: {\n  definition: IProduction[];\n}): TokenType[] {\n  const allAlternativesFirsts: TokenType[][] = map(\n    prod.definition,\n    (innerProd) => {\n      return first(innerProd);\n    },\n  );\n  return uniq(flatten<TokenType>(allAlternativesFirsts));\n}\n\nexport function firstForTerminal(terminal: Terminal): TokenType[] {\n  return [terminal.terminalType];\n}\n","// TODO: can this be removed? where is it used?\nexport const IN = \"_~IN~_\";\n","import { RestWalker } from \"./rest.js\";\nimport { first } from \"./first.js\";\nimport { assign, forEach } from \"lodash-es\";\nimport { IN } from \"../constants.js\";\nimport { Alternative, NonTerminal, Rule, Terminal } from \"@chevrotain/gast\";\nimport { IProduction, TokenType } from \"@chevrotain/types\";\n\n// This ResyncFollowsWalker computes all of the follows required for RESYNC\n// (skipping reference production).\nexport class ResyncFollowsWalker extends RestWalker {\n  public follows: Record<string, TokenType[]> = {};\n\n  constructor(private topProd: Rule) {\n    super();\n  }\n\n  startWalking(): Record<string, TokenType[]> {\n    this.walk(this.topProd);\n    return this.follows;\n  }\n\n  walkTerminal(\n    terminal: Terminal,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // do nothing! just like in the public sector after 13:00\n  }\n\n  walkProdRef(\n    refProd: NonTerminal,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    const followName =\n      buildBetweenProdsFollowPrefix(refProd.referencedRule, refProd.idx) +\n      this.topProd.name;\n    const fullRest: IProduction[] = currRest.concat(prevRest);\n    const restProd = new Alternative({ definition: fullRest });\n    const t_in_topProd_follows = first(restProd);\n    this.follows[followName] = t_in_topProd_follows;\n  }\n}\n\nexport function computeAllProdsFollows(\n  topProductions: Rule[],\n): Record<string, TokenType[]> {\n  const reSyncFollows = {};\n\n  forEach(topProductions, (topProd) => {\n    const currRefsFollow = new ResyncFollowsWalker(topProd).startWalking();\n    assign(reSyncFollows, currRefsFollow);\n  });\n  return reSyncFollows;\n}\n\nexport function buildBetweenProdsFollowPrefix(\n  inner: Rule,\n  occurenceInParent: number,\n): string {\n  return inner.name + occurenceInParent + IN;\n}\n\nexport function buildInProdFollowPrefix(terminal: Terminal): string {\n  const terminalName = terminal.terminalType.name;\n  return terminalName + terminal.idx + IN;\n}\n","/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a function that negates the result of the predicate `func`. The\n * `func` predicate is invoked with the `this` binding and arguments of the\n * created function.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Function\n * @param {Function} predicate The predicate to negate.\n * @returns {Function} Returns the new negated function.\n * @example\n *\n * function isEven(n) {\n *   return n % 2 == 0;\n * }\n *\n * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n * // => [1, 3, 5]\n */\nfunction negate(predicate) {\n  if (typeof predicate != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  return function() {\n    var args = arguments;\n    switch (args.length) {\n      case 0: return !predicate.call(this);\n      case 1: return !predicate.call(this, args[0]);\n      case 2: return !predicate.call(this, args[0], args[1]);\n      case 3: return !predicate.call(this, args[0], args[1], args[2]);\n    }\n    return !predicate.apply(this, args);\n  };\n}\n\nexport default negate;\n","import arrayFilter from './_arrayFilter.js';\nimport baseFilter from './_baseFilter.js';\nimport baseIteratee from './_baseIteratee.js';\nimport isArray from './isArray.js';\nimport negate from './negate.js';\n\n/**\n * The opposite of `_.filter`; this method returns the elements of `collection`\n * that `predicate` does **not** return truthy for.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n * @see _.filter\n * @example\n *\n * var users = [\n *   { 'user': 'barney', 'age': 36, 'active': false },\n *   { 'user': 'fred',   'age': 40, 'active': true }\n * ];\n *\n * _.reject(users, function(o) { return !o.active; });\n * // => objects for ['fred']\n *\n * // The `_.matches` iteratee shorthand.\n * _.reject(users, { 'age': 40, 'active': true });\n * // => objects for ['barney']\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.reject(users, ['active', false]);\n * // => objects for ['fred']\n *\n * // The `_.property` iteratee shorthand.\n * _.reject(users, 'active');\n * // => objects for ['barney']\n */\nfunction reject(collection, predicate) {\n  var func = isArray(collection) ? arrayFilter : baseFilter;\n  return func(collection, negate(baseIteratee(predicate, 3)));\n}\n\nexport default reject;\n","import baseIndexOf from './_baseIndexOf.js';\nimport toInteger from './toInteger.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * Gets the index at which the first occurrence of `value` is found in `array`\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons. If `fromIndex` is negative, it's used as the\n * offset from the end of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n * @example\n *\n * _.indexOf([1, 2, 1, 2], 2);\n * // => 1\n *\n * // Search from the `fromIndex`.\n * _.indexOf([1, 2, 1, 2], 2, 2);\n * // => 3\n */\nfunction indexOf(array, value, fromIndex) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return -1;\n  }\n  var index = fromIndex == null ? 0 : toInteger(fromIndex);\n  if (index < 0) {\n    index = nativeMax(length + index, 0);\n  }\n  return baseIndexOf(array, value, index);\n}\n\nexport default indexOf;\n","import SetCache from './_SetCache.js';\nimport arrayIncludes from './_arrayIncludes.js';\nimport arrayIncludesWith from './_arrayIncludesWith.js';\nimport arrayMap from './_arrayMap.js';\nimport baseUnary from './_baseUnary.js';\nimport cacheHas from './_cacheHas.js';\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * The base implementation of methods like `_.difference` without support\n * for excluding multiple arrays or iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Array} values The values to exclude.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of filtered values.\n */\nfunction baseDifference(array, values, iteratee, comparator) {\n  var index = -1,\n      includes = arrayIncludes,\n      isCommon = true,\n      length = array.length,\n      result = [],\n      valuesLength = values.length;\n\n  if (!length) {\n    return result;\n  }\n  if (iteratee) {\n    values = arrayMap(values, baseUnary(iteratee));\n  }\n  if (comparator) {\n    includes = arrayIncludesWith;\n    isCommon = false;\n  }\n  else if (values.length >= LARGE_ARRAY_SIZE) {\n    includes = cacheHas;\n    isCommon = false;\n    values = new SetCache(values);\n  }\n  outer:\n  while (++index < length) {\n    var value = array[index],\n        computed = iteratee == null ? value : iteratee(value);\n\n    value = (comparator || value !== 0) ? value : 0;\n    if (isCommon && computed === computed) {\n      var valuesIndex = valuesLength;\n      while (valuesIndex--) {\n        if (values[valuesIndex] === computed) {\n          continue outer;\n        }\n      }\n      result.push(value);\n    }\n    else if (!includes(values, computed, comparator)) {\n      result.push(value);\n    }\n  }\n  return result;\n}\n\nexport default baseDifference;\n","import baseDifference from './_baseDifference.js';\nimport baseFlatten from './_baseFlatten.js';\nimport baseRest from './_baseRest.js';\nimport isArrayLikeObject from './isArrayLikeObject.js';\n\n/**\n * Creates an array of `array` values not included in the other given arrays\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons. The order and references of result values are\n * determined by the first array.\n *\n * **Note:** Unlike `_.pullAll`, this method returns a new array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {...Array} [values] The values to exclude.\n * @returns {Array} Returns the new array of filtered values.\n * @see _.without, _.xor\n * @example\n *\n * _.difference([2, 1], [2, 3]);\n * // => [1]\n */\nvar difference = baseRest(function(array, values) {\n  return isArrayLikeObject(array)\n    ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))\n    : [];\n});\n\nexport default difference;\n","/**\n * Creates an array with all falsey values removed. The values `false`, `null`,\n * `0`, `\"\"`, `undefined`, and `NaN` are falsey.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to compact.\n * @returns {Array} Returns the new array of filtered values.\n * @example\n *\n * _.compact([0, 1, false, 2, '', 3]);\n * // => [1, 2, 3]\n */\nfunction compact(array) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (value) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\nexport default compact;\n","/**\n * Gets the first element of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @alias first\n * @category Array\n * @param {Array} array The array to query.\n * @returns {*} Returns the first element of `array`.\n * @example\n *\n * _.head([1, 2, 3]);\n * // => 1\n *\n * _.head([]);\n * // => undefined\n */\nfunction head(array) {\n  return (array && array.length) ? array[0] : undefined;\n}\n\nexport default head;\n","export function PRINT_ERROR(msg: string) {\n  /* istanbul ignore else - can't override global.console in node.js */\n  if (console && console.error) {\n    console.error(`Error: ${msg}`);\n  }\n}\n\nexport function PRINT_WARNING(msg: string) {\n  /* istanbul ignore else - can't override global.console in node.js*/\n  if (console && console.warn) {\n    // TODO: modify docs accordingly\n    console.warn(`Warning: ${msg}`);\n  }\n}\n","import {\n  Alternative,\n  Assertion,\n  Atom,\n  Disjunction,\n  RegExpParser,\n  RegExpPattern,\n} from \"@chevrotain/regexp-to-ast\";\n\nlet regExpAstCache: { [regex: string]: RegExpPattern } = {};\nconst regExpParser = new RegExpParser();\n\n// this should be moved to regexp-to-ast\nexport type ASTNode =\n  | RegExpPattern\n  | Disjunction\n  | Alternative\n  | Assertion\n  | Atom;\n\nexport function getRegExpAst(regExp: RegExp): RegExpPattern {\n  const regExpStr = regExp.toString();\n  if (regExpAstCache.hasOwnProperty(regExpStr)) {\n    return regExpAstCache[regExpStr];\n  } else {\n    const regExpAst = regExpParser.pattern(regExpStr);\n    regExpAstCache[regExpStr] = regExpAst;\n    return regExpAst;\n  }\n}\n\nexport function clearRegExpParserCache() {\n  regExpAstCache = {};\n}\n","import {\n  Alternative,\n  Atom,\n  BaseRegExpVisitor,\n  Character,\n  Disjunction,\n  Group,\n  Set,\n} from \"@chevrotain/regexp-to-ast\";\nimport { every, find, forEach, includes, isArray, values } from \"lodash-es\";\nimport { PRINT_ERROR, PRINT_WARNING } from \"@chevrotain/utils\";\nimport { ASTNode, getRegExpAst } from \"./reg_exp_parser.js\";\nimport { charCodeToOptimizedIndex, minOptimizationVal } from \"./lexer.js\";\n\nconst complementErrorMessage =\n  \"Complement Sets are not supported for first char optimization\";\nexport const failedOptimizationPrefixMsg =\n  'Unable to use \"first char\" lexer optimizations:\\n';\n\nexport function getOptimizedStartCodesIndices(\n  regExp: RegExp,\n  ensureOptimizations = false,\n): number[] {\n  try {\n    const ast = getRegExpAst(regExp);\n    const firstChars = firstCharOptimizedIndices(\n      ast.value,\n      {},\n      ast.flags.ignoreCase,\n    );\n    return firstChars;\n  } catch (e) {\n    /* istanbul ignore next */\n    // Testing this relies on the regexp-to-ast library having a bug... */\n    // TODO: only the else branch needs to be ignored, try to fix with newer prettier / tsc\n    if (e.message === complementErrorMessage) {\n      if (ensureOptimizations) {\n        PRINT_WARNING(\n          `${failedOptimizationPrefixMsg}` +\n            `\\tUnable to optimize: < ${regExp.toString()} >\\n` +\n            \"\\tComplement Sets cannot be automatically optimized.\\n\" +\n            \"\\tThis will disable the lexer's first char optimizations.\\n\" +\n            \"\\tSee: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#COMPLEMENT for details.\",\n        );\n      }\n    } else {\n      let msgSuffix = \"\";\n      if (ensureOptimizations) {\n        msgSuffix =\n          \"\\n\\tThis will disable the lexer's first char optimizations.\\n\" +\n          \"\\tSee: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#REGEXP_PARSING for details.\";\n      }\n      PRINT_ERROR(\n        `${failedOptimizationPrefixMsg}\\n` +\n          `\\tFailed parsing: < ${regExp.toString()} >\\n` +\n          `\\tUsing the @chevrotain/regexp-to-ast library\\n` +\n          \"\\tPlease open an issue at: https://github.com/chevrotain/chevrotain/issues\" +\n          msgSuffix,\n      );\n    }\n  }\n\n  return [];\n}\n\nexport function firstCharOptimizedIndices(\n  ast: ASTNode,\n  result: { [charCode: number]: number },\n  ignoreCase: boolean,\n): number[] {\n  switch (ast.type) {\n    case \"Disjunction\":\n      for (let i = 0; i < ast.value.length; i++) {\n        firstCharOptimizedIndices(ast.value[i], result, ignoreCase);\n      }\n      break;\n    case \"Alternative\":\n      const terms = ast.value;\n      for (let i = 0; i < terms.length; i++) {\n        const term = terms[i];\n\n        // skip terms that cannot effect the first char results\n        switch (term.type) {\n          case \"EndAnchor\":\n          // A group back reference cannot affect potential starting char.\n          // because if a back reference is the first production than automatically\n          // the group being referenced has had to come BEFORE so its codes have already been added\n          case \"GroupBackReference\":\n          // assertions do not affect potential starting codes\n          case \"Lookahead\":\n          case \"NegativeLookahead\":\n          case \"StartAnchor\":\n          case \"WordBoundary\":\n          case \"NonWordBoundary\":\n            continue;\n        }\n\n        const atom = term;\n        switch (atom.type) {\n          case \"Character\":\n            addOptimizedIdxToResult(atom.value, result, ignoreCase);\n            break;\n          case \"Set\":\n            if (atom.complement === true) {\n              throw Error(complementErrorMessage);\n            }\n            forEach(atom.value, (code) => {\n              if (typeof code === \"number\") {\n                addOptimizedIdxToResult(code, result, ignoreCase);\n              } else {\n                // range\n                const range = code as any;\n                // cannot optimize when ignoreCase is\n                if (ignoreCase === true) {\n                  for (\n                    let rangeCode = range.from;\n                    rangeCode <= range.to;\n                    rangeCode++\n                  ) {\n                    addOptimizedIdxToResult(rangeCode, result, ignoreCase);\n                  }\n                }\n                // Optimization (2 orders of magnitude less work for very large ranges)\n                else {\n                  // handle unoptimized values\n                  for (\n                    let rangeCode = range.from;\n                    rangeCode <= range.to && rangeCode < minOptimizationVal;\n                    rangeCode++\n                  ) {\n                    addOptimizedIdxToResult(rangeCode, result, ignoreCase);\n                  }\n\n                  // Less common charCode where we optimize for faster init time, by using larger \"buckets\"\n                  if (range.to >= minOptimizationVal) {\n                    const minUnOptVal =\n                      range.from >= minOptimizationVal\n                        ? range.from\n                        : minOptimizationVal;\n                    const maxUnOptVal = range.to;\n                    const minOptIdx = charCodeToOptimizedIndex(minUnOptVal);\n                    const maxOptIdx = charCodeToOptimizedIndex(maxUnOptVal);\n\n                    for (\n                      let currOptIdx = minOptIdx;\n                      currOptIdx <= maxOptIdx;\n                      currOptIdx++\n                    ) {\n                      result[currOptIdx] = currOptIdx;\n                    }\n                  }\n                }\n              }\n            });\n            break;\n          case \"Group\":\n            firstCharOptimizedIndices(atom.value, result, ignoreCase);\n            break;\n          /* istanbul ignore next */\n          default:\n            throw Error(\"Non Exhaustive Match\");\n        }\n\n        // reached a mandatory production, no more **start** codes can be found on this alternative\n        const isOptionalQuantifier =\n          atom.quantifier !== undefined && atom.quantifier.atLeast === 0;\n        if (\n          // A group may be optional due to empty contents /(?:)/\n          // or if everything inside it is optional /((a)?)/\n          (atom.type === \"Group\" && isWholeOptional(atom) === false) ||\n          // If this term is not a group it may only be optional if it has an optional quantifier\n          (atom.type !== \"Group\" && isOptionalQuantifier === false)\n        ) {\n          break;\n        }\n      }\n      break;\n    /* istanbul ignore next */\n    default:\n      throw Error(\"non exhaustive match!\");\n  }\n\n  // console.log(Object.keys(result).length)\n  return values(result);\n}\n\nfunction addOptimizedIdxToResult(\n  code: number,\n  result: { [charCode: number]: number },\n  ignoreCase: boolean,\n) {\n  const optimizedCharIdx = charCodeToOptimizedIndex(code);\n  result[optimizedCharIdx] = optimizedCharIdx;\n\n  if (ignoreCase === true) {\n    handleIgnoreCase(code, result);\n  }\n}\n\nfunction handleIgnoreCase(\n  code: number,\n  result: { [charCode: number]: number },\n) {\n  const char = String.fromCharCode(code);\n  const upperChar = char.toUpperCase();\n  /* istanbul ignore else */\n  if (upperChar !== char) {\n    const optimizedCharIdx = charCodeToOptimizedIndex(upperChar.charCodeAt(0));\n    result[optimizedCharIdx] = optimizedCharIdx;\n  } else {\n    const lowerChar = char.toLowerCase();\n    if (lowerChar !== char) {\n      const optimizedCharIdx = charCodeToOptimizedIndex(\n        lowerChar.charCodeAt(0),\n      );\n      result[optimizedCharIdx] = optimizedCharIdx;\n    }\n  }\n}\n\nfunction findCode(setNode: Set, targetCharCodes: number[]) {\n  return find(setNode.value, (codeOrRange) => {\n    if (typeof codeOrRange === \"number\") {\n      return includes(targetCharCodes, codeOrRange);\n    } else {\n      // range\n      const range = <any>codeOrRange;\n      return (\n        find(\n          targetCharCodes,\n          (targetCode) => range.from <= targetCode && targetCode <= range.to,\n        ) !== undefined\n      );\n    }\n  });\n}\n\nfunction isWholeOptional(ast: any): boolean {\n  const quantifier = (ast as Atom).quantifier;\n  if (quantifier && quantifier.atLeast === 0) {\n    return true;\n  }\n\n  if (!ast.value) {\n    return false;\n  }\n\n  return isArray(ast.value)\n    ? every(ast.value, isWholeOptional)\n    : isWholeOptional(ast.value);\n}\n\nclass CharCodeFinder extends BaseRegExpVisitor {\n  found: boolean = false;\n\n  constructor(private targetCharCodes: number[]) {\n    super();\n  }\n\n  visitChildren(node: ASTNode) {\n    // No need to keep looking...\n    if (this.found === true) {\n      return;\n    }\n\n    // switch lookaheads as they do not actually consume any characters thus\n    // finding a charCode at lookahead context does not mean that regexp can actually contain it in a match.\n    switch (node.type) {\n      case \"Lookahead\":\n        this.visitLookahead(node);\n        return;\n      case \"NegativeLookahead\":\n        this.visitNegativeLookahead(node);\n        return;\n    }\n\n    super.visitChildren(node);\n  }\n\n  visitCharacter(node: Character) {\n    if (includes(this.targetCharCodes, node.value)) {\n      this.found = true;\n    }\n  }\n\n  visitSet(node: Set) {\n    if (node.complement) {\n      if (findCode(node, this.targetCharCodes) === undefined) {\n        this.found = true;\n      }\n    } else {\n      if (findCode(node, this.targetCharCodes) !== undefined) {\n        this.found = true;\n      }\n    }\n  }\n}\n\nexport function canMatchCharCode(\n  charCodes: number[],\n  pattern: RegExp | string,\n) {\n  if (pattern instanceof RegExp) {\n    const ast = getRegExpAst(pattern);\n    const charCodeFinder = new CharCodeFinder(charCodes);\n    charCodeFinder.visit(ast);\n    return charCodeFinder.found;\n  } else {\n    return (\n      find(<any>pattern, (char) => {\n        return includes(charCodes, (<string>char).charCodeAt(0));\n      }) !== undefined\n    );\n  }\n}\n","import { BaseRegExpVisitor } from \"@chevrotain/regexp-to-ast\";\nimport {\n  IRegExpExec,\n  Lexer,\n  LexerDefinitionErrorType,\n} from \"./lexer_public.js\";\nimport {\n  compact,\n  defaults,\n  difference,\n  filter,\n  find,\n  first,\n  flatten,\n  forEach,\n  has,\n  includes,\n  indexOf,\n  isArray,\n  isEmpty,\n  isFunction,\n  isRegExp,\n  isString,\n  isUndefined,\n  keys,\n  map,\n  reduce,\n  reject,\n  values,\n} from \"lodash-es\";\nimport { PRINT_ERROR } from \"@chevrotain/utils\";\nimport {\n  canMatchCharCode,\n  failedOptimizationPrefixMsg,\n  getOptimizedStartCodesIndices,\n} from \"./reg_exp.js\";\nimport {\n  ILexerDefinitionError,\n  ILineTerminatorsTester,\n  IMultiModeLexerDefinition,\n  IToken,\n  TokenType,\n} from \"@chevrotain/types\";\nimport { getRegExpAst } from \"./reg_exp_parser.js\";\n\nconst PATTERN = \"PATTERN\";\nexport const DEFAULT_MODE = \"defaultMode\";\nexport const MODES = \"modes\";\n\nexport interface IPatternConfig {\n  pattern: IRegExpExec | string;\n  longerAlt: number[] | undefined;\n  canLineTerminator: boolean;\n  isCustom: boolean;\n  short: number | false;\n  group: string | undefined | false;\n  push: string | undefined;\n  pop: boolean;\n  tokenType: TokenType;\n  tokenTypeIdx: number;\n}\n\nexport interface IAnalyzeResult {\n  patternIdxToConfig: IPatternConfig[];\n  charCodeToPatternIdxToConfig: { [charCode: number]: IPatternConfig[] };\n  emptyGroups: { [groupName: string]: IToken[] };\n  hasCustom: boolean;\n  canBeOptimized: boolean;\n}\n\nexport let SUPPORT_STICKY =\n  typeof (<any>new RegExp(\"(?:)\")).sticky === \"boolean\";\n\nexport function disableSticky() {\n  SUPPORT_STICKY = false;\n}\n\nexport function enableSticky() {\n  SUPPORT_STICKY = true;\n}\n\nexport function analyzeTokenTypes(\n  tokenTypes: TokenType[],\n  options: {\n    positionTracking?: \"full\" | \"onlyStart\" | \"onlyOffset\";\n    ensureOptimizations?: boolean;\n    lineTerminatorCharacters?: (number | string)[];\n    // TODO: should `useSticky` be an argument here?\n    useSticky?: boolean;\n    safeMode?: boolean;\n    tracer?: (msg: string, action: () => void) => void;\n  },\n): IAnalyzeResult {\n  options = defaults(options, {\n    useSticky: SUPPORT_STICKY,\n    debug: false as boolean,\n    safeMode: false as boolean,\n    positionTracking: \"full\",\n    lineTerminatorCharacters: [\"\\r\", \"\\n\"],\n    tracer: (msg: string, action: Function) => action(),\n  });\n\n  const tracer = options.tracer!;\n\n  tracer(\"initCharCodeToOptimizedIndexMap\", () => {\n    initCharCodeToOptimizedIndexMap();\n  });\n\n  let onlyRelevantTypes: TokenType[];\n  tracer(\"Reject Lexer.NA\", () => {\n    onlyRelevantTypes = reject(tokenTypes, (currType) => {\n      return currType[PATTERN] === Lexer.NA;\n    });\n  });\n\n  let hasCustom = false;\n  let allTransformedPatterns: (IRegExpExec | string)[];\n  tracer(\"Transform Patterns\", () => {\n    hasCustom = false;\n    allTransformedPatterns = map(\n      onlyRelevantTypes,\n      (currType): IRegExpExec | string => {\n        const currPattern = currType[PATTERN];\n\n        /* istanbul ignore else */\n        if (isRegExp(currPattern)) {\n          const regExpSource = currPattern.source;\n          if (\n            regExpSource.length === 1 &&\n            // only these regExp meta characters which can appear in a length one regExp\n            regExpSource !== \"^\" &&\n            regExpSource !== \"$\" &&\n            regExpSource !== \".\" &&\n            !currPattern.ignoreCase\n          ) {\n            return regExpSource;\n          } else if (\n            regExpSource.length === 2 &&\n            regExpSource[0] === \"\\\\\" &&\n            // not a meta character\n            !includes(\n              [\n                \"d\",\n                \"D\",\n                \"s\",\n                \"S\",\n                \"t\",\n                \"r\",\n                \"n\",\n                \"t\",\n                \"0\",\n                \"c\",\n                \"b\",\n                \"B\",\n                \"f\",\n                \"v\",\n                \"w\",\n                \"W\",\n              ],\n              regExpSource[1],\n            )\n          ) {\n            // escaped meta Characters: /\\+/ /\\[/\n            // or redundant escaping: /\\a/\n            // without the escaping \"\\\"\n            return regExpSource[1];\n          } else {\n            return options.useSticky\n              ? addStickyFlag(currPattern)\n              : addStartOfInput(currPattern);\n          }\n        } else if (isFunction(currPattern)) {\n          hasCustom = true;\n          // CustomPatternMatcherFunc - custom patterns do not require any transformations, only wrapping in a RegExp Like object\n          return { exec: currPattern };\n        } else if (typeof currPattern === \"object\") {\n          hasCustom = true;\n          // ICustomPattern\n          return currPattern;\n        } else if (typeof currPattern === \"string\") {\n          if (currPattern.length === 1) {\n            return currPattern;\n          } else {\n            const escapedRegExpString = currPattern.replace(\n              /[\\\\^$.*+?()[\\]{}|]/g,\n              \"\\\\$&\",\n            );\n            const wrappedRegExp = new RegExp(escapedRegExpString);\n            return options.useSticky\n              ? addStickyFlag(wrappedRegExp)\n              : addStartOfInput(wrappedRegExp);\n          }\n        } else {\n          throw Error(\"non exhaustive match\");\n        }\n      },\n    );\n  });\n\n  let patternIdxToType: number[];\n  let patternIdxToGroup: (string | undefined | false)[];\n  let patternIdxToLongerAltIdxArr: (number[] | undefined)[];\n  let patternIdxToPushMode: (string | undefined)[];\n  let patternIdxToPopMode: boolean[];\n  tracer(\"misc mapping\", () => {\n    patternIdxToType = map(\n      onlyRelevantTypes,\n      (currType) => currType.tokenTypeIdx!,\n    );\n\n    patternIdxToGroup = map(onlyRelevantTypes, (clazz: any) => {\n      const groupName = clazz.GROUP;\n      /* istanbul ignore next */\n      if (groupName === Lexer.SKIPPED) {\n        return undefined;\n      } else if (isString(groupName)) {\n        return groupName;\n      } else if (isUndefined(groupName)) {\n        return false;\n      } else {\n        throw Error(\"non exhaustive match\");\n      }\n    });\n\n    patternIdxToLongerAltIdxArr = map(onlyRelevantTypes, (clazz: any) => {\n      const longerAltType = clazz.LONGER_ALT;\n\n      if (longerAltType) {\n        const longerAltIdxArr = isArray(longerAltType)\n          ? map(longerAltType, (type: any) => indexOf(onlyRelevantTypes, type))\n          : [indexOf(onlyRelevantTypes, longerAltType)];\n        return longerAltIdxArr;\n      }\n    });\n\n    patternIdxToPushMode = map(\n      onlyRelevantTypes,\n      (clazz: any) => clazz.PUSH_MODE,\n    );\n\n    patternIdxToPopMode = map(onlyRelevantTypes, (clazz: any) =>\n      has(clazz, \"POP_MODE\"),\n    );\n  });\n\n  let patternIdxToCanLineTerminator: boolean[];\n  tracer(\"Line Terminator Handling\", () => {\n    const lineTerminatorCharCodes = getCharCodes(\n      options.lineTerminatorCharacters!,\n    );\n    patternIdxToCanLineTerminator = map(onlyRelevantTypes, (tokType) => false);\n    if (options.positionTracking !== \"onlyOffset\") {\n      patternIdxToCanLineTerminator = map(onlyRelevantTypes, (tokType) => {\n        if (has(tokType, \"LINE_BREAKS\")) {\n          return !!tokType.LINE_BREAKS;\n        } else {\n          return (\n            checkLineBreaksIssues(tokType, lineTerminatorCharCodes) === false &&\n            canMatchCharCode(\n              lineTerminatorCharCodes,\n              tokType.PATTERN as RegExp | string,\n            )\n          );\n        }\n      });\n    }\n  });\n\n  let patternIdxToIsCustom: boolean[];\n  let patternIdxToShort: (number | false)[];\n  let emptyGroups!: { [groupName: string]: IToken[] };\n  let patternIdxToConfig!: IPatternConfig[];\n  tracer(\"Misc Mapping #2\", () => {\n    patternIdxToIsCustom = map(onlyRelevantTypes, isCustomPattern);\n    patternIdxToShort = map(allTransformedPatterns, isShortPattern);\n\n    emptyGroups = reduce(\n      onlyRelevantTypes,\n      (acc, clazz: any) => {\n        const groupName = clazz.GROUP;\n        if (isString(groupName) && !(groupName === Lexer.SKIPPED)) {\n          acc[groupName] = [];\n        }\n        return acc;\n      },\n      {} as { [groupName: string]: IToken[] },\n    );\n\n    patternIdxToConfig = map(\n      allTransformedPatterns,\n      (x, idx): IPatternConfig => {\n        return {\n          pattern: allTransformedPatterns[idx],\n          longerAlt: patternIdxToLongerAltIdxArr[idx],\n          canLineTerminator: patternIdxToCanLineTerminator[idx],\n          isCustom: patternIdxToIsCustom[idx],\n          short: patternIdxToShort[idx],\n          group: patternIdxToGroup[idx],\n          push: patternIdxToPushMode[idx],\n          pop: patternIdxToPopMode[idx],\n          tokenTypeIdx: patternIdxToType[idx],\n          tokenType: onlyRelevantTypes[idx],\n        };\n      },\n    );\n  });\n\n  let canBeOptimized = true;\n  let charCodeToPatternIdxToConfig: { [charCode: number]: IPatternConfig[] } =\n    [];\n\n  if (!options.safeMode) {\n    tracer(\"First Char Optimization\", () => {\n      charCodeToPatternIdxToConfig = reduce(\n        onlyRelevantTypes,\n        (result, currTokType, idx) => {\n          if (typeof currTokType.PATTERN === \"string\") {\n            const charCode = currTokType.PATTERN.charCodeAt(0);\n            const optimizedIdx = charCodeToOptimizedIndex(charCode);\n            addToMapOfArrays(result, optimizedIdx, patternIdxToConfig[idx]);\n          } else if (isArray(currTokType.START_CHARS_HINT)) {\n            let lastOptimizedIdx: number;\n            forEach(currTokType.START_CHARS_HINT, (charOrInt) => {\n              const charCode =\n                typeof charOrInt === \"string\"\n                  ? charOrInt.charCodeAt(0)\n                  : charOrInt;\n              const currOptimizedIdx = charCodeToOptimizedIndex(charCode);\n              // Avoid adding the config multiple times\n              /* istanbul ignore else */\n              // - Difficult to check this scenario effects as it is only a performance\n              //   optimization that does not change correctness\n              if (lastOptimizedIdx !== currOptimizedIdx) {\n                lastOptimizedIdx = currOptimizedIdx;\n                addToMapOfArrays(\n                  result,\n                  currOptimizedIdx,\n                  patternIdxToConfig[idx],\n                );\n              }\n            });\n          } else if (isRegExp(currTokType.PATTERN)) {\n            if (currTokType.PATTERN.unicode) {\n              canBeOptimized = false;\n              if (options.ensureOptimizations) {\n                PRINT_ERROR(\n                  `${failedOptimizationPrefixMsg}` +\n                    `\\tUnable to analyze < ${currTokType.PATTERN.toString()} > pattern.\\n` +\n                    \"\\tThe regexp unicode flag is not currently supported by the regexp-to-ast library.\\n\" +\n                    \"\\tThis will disable the lexer's first char optimizations.\\n\" +\n                    \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#UNICODE_OPTIMIZE\",\n                );\n              }\n            } else {\n              const optimizedCodes = getOptimizedStartCodesIndices(\n                currTokType.PATTERN,\n                options.ensureOptimizations,\n              );\n              /* istanbul ignore if */\n              // start code will only be empty given an empty regExp or failure of regexp-to-ast library\n              // the first should be a different validation and the second cannot be tested.\n              if (isEmpty(optimizedCodes)) {\n                // we cannot understand what codes may start possible matches\n                // The optimization correctness requires knowing start codes for ALL patterns.\n                // Not actually sure this is an error, no debug message\n                canBeOptimized = false;\n              }\n              forEach(optimizedCodes, (code) => {\n                addToMapOfArrays(result, code, patternIdxToConfig[idx]);\n              });\n            }\n          } else {\n            if (options.ensureOptimizations) {\n              PRINT_ERROR(\n                `${failedOptimizationPrefixMsg}` +\n                  `\\tTokenType: <${currTokType.name}> is using a custom token pattern without providing <start_chars_hint> parameter.\\n` +\n                  \"\\tThis will disable the lexer's first char optimizations.\\n\" +\n                  \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#CUSTOM_OPTIMIZE\",\n              );\n            }\n            canBeOptimized = false;\n          }\n\n          return result;\n        },\n        [] as { [charCode: number]: IPatternConfig[] },\n      );\n    });\n  }\n\n  return {\n    emptyGroups: emptyGroups,\n    patternIdxToConfig: patternIdxToConfig,\n    charCodeToPatternIdxToConfig: charCodeToPatternIdxToConfig,\n    hasCustom: hasCustom,\n    canBeOptimized: canBeOptimized,\n  };\n}\n\nexport function validatePatterns(\n  tokenTypes: TokenType[],\n  validModesNames: string[],\n): ILexerDefinitionError[] {\n  let errors: ILexerDefinitionError[] = [];\n\n  const missingResult = findMissingPatterns(tokenTypes);\n  errors = errors.concat(missingResult.errors);\n\n  const invalidResult = findInvalidPatterns(missingResult.valid);\n  const validTokenTypes = invalidResult.valid;\n  errors = errors.concat(invalidResult.errors);\n\n  errors = errors.concat(validateRegExpPattern(validTokenTypes));\n\n  errors = errors.concat(findInvalidGroupType(validTokenTypes));\n\n  errors = errors.concat(\n    findModesThatDoNotExist(validTokenTypes, validModesNames),\n  );\n\n  errors = errors.concat(findUnreachablePatterns(validTokenTypes));\n\n  return errors;\n}\n\nfunction validateRegExpPattern(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  let errors: ILexerDefinitionError[] = [];\n  const withRegExpPatterns = filter(tokenTypes, (currTokType) =>\n    isRegExp(currTokType[PATTERN]),\n  );\n\n  errors = errors.concat(findEndOfInputAnchor(withRegExpPatterns));\n\n  errors = errors.concat(findStartOfInputAnchor(withRegExpPatterns));\n\n  errors = errors.concat(findUnsupportedFlags(withRegExpPatterns));\n\n  errors = errors.concat(findDuplicatePatterns(withRegExpPatterns));\n\n  errors = errors.concat(findEmptyMatchRegExps(withRegExpPatterns));\n\n  return errors;\n}\n\nexport interface ILexerFilterResult {\n  errors: ILexerDefinitionError[];\n  valid: TokenType[];\n}\n\nexport function findMissingPatterns(\n  tokenTypes: TokenType[],\n): ILexerFilterResult {\n  const tokenTypesWithMissingPattern = filter(tokenTypes, (currType) => {\n    return !has(currType, PATTERN);\n  });\n\n  const errors = map(tokenTypesWithMissingPattern, (currType) => {\n    return {\n      message:\n        \"Token Type: ->\" +\n        currType.name +\n        \"<- missing static 'PATTERN' property\",\n      type: LexerDefinitionErrorType.MISSING_PATTERN,\n      tokenTypes: [currType],\n    };\n  });\n\n  const valid = difference(tokenTypes, tokenTypesWithMissingPattern);\n  return { errors, valid };\n}\n\nexport function findInvalidPatterns(\n  tokenTypes: TokenType[],\n): ILexerFilterResult {\n  const tokenTypesWithInvalidPattern = filter(tokenTypes, (currType) => {\n    const pattern = currType[PATTERN];\n    return (\n      !isRegExp(pattern) &&\n      !isFunction(pattern) &&\n      !has(pattern, \"exec\") &&\n      !isString(pattern)\n    );\n  });\n\n  const errors = map(tokenTypesWithInvalidPattern, (currType) => {\n    return {\n      message:\n        \"Token Type: ->\" +\n        currType.name +\n        \"<- static 'PATTERN' can only be a RegExp, a\" +\n        \" Function matching the {CustomPatternMatcherFunc} type or an Object matching the {ICustomPattern} interface.\",\n      type: LexerDefinitionErrorType.INVALID_PATTERN,\n      tokenTypes: [currType],\n    };\n  });\n\n  const valid = difference(tokenTypes, tokenTypesWithInvalidPattern);\n  return { errors, valid };\n}\n\nconst end_of_input = /[^\\\\][$]/;\n\nexport function findEndOfInputAnchor(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  class EndAnchorFinder extends BaseRegExpVisitor {\n    found = false;\n\n    visitEndAnchor(node: unknown) {\n      this.found = true;\n    }\n  }\n\n  const invalidRegex = filter(tokenTypes, (currType) => {\n    const pattern = currType.PATTERN;\n\n    try {\n      const regexpAst = getRegExpAst(pattern as RegExp);\n      const endAnchorVisitor = new EndAnchorFinder();\n      endAnchorVisitor.visit(regexpAst);\n\n      return endAnchorVisitor.found;\n    } catch (e) {\n      // old behavior in case of runtime exceptions with regexp-to-ast.\n      /* istanbul ignore next - cannot ensure an error in regexp-to-ast*/\n      return end_of_input.test((pattern as RegExp).source);\n    }\n  });\n\n  const errors = map(invalidRegex, (currType) => {\n    return {\n      message:\n        \"Unexpected RegExp Anchor Error:\\n\" +\n        \"\\tToken Type: ->\" +\n        currType.name +\n        \"<- static 'PATTERN' cannot contain end of input anchor '$'\\n\" +\n        \"\\tSee chevrotain.io/docs/guide/resolving_lexer_errors.html#ANCHORS\" +\n        \"\\tfor details.\",\n      type: LexerDefinitionErrorType.EOI_ANCHOR_FOUND,\n      tokenTypes: [currType],\n    };\n  });\n\n  return errors;\n}\n\nexport function findEmptyMatchRegExps(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  const matchesEmptyString = filter(tokenTypes, (currType) => {\n    const pattern = currType.PATTERN as RegExp;\n    return pattern.test(\"\");\n  });\n\n  const errors = map(matchesEmptyString, (currType) => {\n    return {\n      message:\n        \"Token Type: ->\" +\n        currType.name +\n        \"<- static 'PATTERN' must not match an empty string\",\n      type: LexerDefinitionErrorType.EMPTY_MATCH_PATTERN,\n      tokenTypes: [currType],\n    };\n  });\n\n  return errors;\n}\n\nconst start_of_input = /[^\\\\[][\\^]|^\\^/;\n\nexport function findStartOfInputAnchor(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  class StartAnchorFinder extends BaseRegExpVisitor {\n    found = false;\n\n    visitStartAnchor(node: unknown) {\n      this.found = true;\n    }\n  }\n\n  const invalidRegex = filter(tokenTypes, (currType) => {\n    const pattern = currType.PATTERN as RegExp;\n    try {\n      const regexpAst = getRegExpAst(pattern);\n      const startAnchorVisitor = new StartAnchorFinder();\n      startAnchorVisitor.visit(regexpAst);\n\n      return startAnchorVisitor.found;\n    } catch (e) {\n      // old behavior in case of runtime exceptions with regexp-to-ast.\n      /* istanbul ignore next - cannot ensure an error in regexp-to-ast*/\n      return start_of_input.test(pattern.source);\n    }\n  });\n\n  const errors = map(invalidRegex, (currType) => {\n    return {\n      message:\n        \"Unexpected RegExp Anchor Error:\\n\" +\n        \"\\tToken Type: ->\" +\n        currType.name +\n        \"<- static 'PATTERN' cannot contain start of input anchor '^'\\n\" +\n        \"\\tSee https://chevrotain.io/docs/guide/resolving_lexer_errors.html#ANCHORS\" +\n        \"\\tfor details.\",\n      type: LexerDefinitionErrorType.SOI_ANCHOR_FOUND,\n      tokenTypes: [currType],\n    };\n  });\n\n  return errors;\n}\n\nexport function findUnsupportedFlags(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  const invalidFlags = filter(tokenTypes, (currType) => {\n    const pattern = currType[PATTERN];\n    return pattern instanceof RegExp && (pattern.multiline || pattern.global);\n  });\n\n  const errors = map(invalidFlags, (currType) => {\n    return {\n      message:\n        \"Token Type: ->\" +\n        currType.name +\n        \"<- static 'PATTERN' may NOT contain global('g') or multiline('m')\",\n      type: LexerDefinitionErrorType.UNSUPPORTED_FLAGS_FOUND,\n      tokenTypes: [currType],\n    };\n  });\n\n  return errors;\n}\n\n// This can only test for identical duplicate RegExps, not semantically equivalent ones.\nexport function findDuplicatePatterns(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  const found: TokenType[] = [];\n  let identicalPatterns = map(tokenTypes, (outerType: any) => {\n    return reduce(\n      tokenTypes,\n      (result, innerType) => {\n        if (\n          outerType.PATTERN.source === (innerType.PATTERN as RegExp).source &&\n          !includes(found, innerType) &&\n          innerType.PATTERN !== Lexer.NA\n        ) {\n          // this avoids duplicates in the result, each Token Type may only appear in one \"set\"\n          // in essence we are creating Equivalence classes on equality relation.\n          found.push(innerType);\n          result.push(innerType);\n          return result;\n        }\n        return result;\n      },\n      [] as TokenType[],\n    );\n  });\n\n  identicalPatterns = compact(identicalPatterns);\n\n  const duplicatePatterns = filter(identicalPatterns, (currIdenticalSet) => {\n    return currIdenticalSet.length > 1;\n  });\n\n  const errors = map(duplicatePatterns, (setOfIdentical: any) => {\n    const tokenTypeNames = map(setOfIdentical, (currType: any) => {\n      return currType.name;\n    });\n\n    const dupPatternSrc = (<any>first(setOfIdentical)).PATTERN;\n    return {\n      message:\n        `The same RegExp pattern ->${dupPatternSrc}<-` +\n        `has been used in all of the following Token Types: ${tokenTypeNames.join(\n          \", \",\n        )} <-`,\n      type: LexerDefinitionErrorType.DUPLICATE_PATTERNS_FOUND,\n      tokenTypes: setOfIdentical,\n    };\n  });\n\n  return errors;\n}\n\nexport function findInvalidGroupType(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  const invalidTypes = filter(tokenTypes, (clazz: any) => {\n    if (!has(clazz, \"GROUP\")) {\n      return false;\n    }\n    const group = clazz.GROUP;\n\n    return group !== Lexer.SKIPPED && group !== Lexer.NA && !isString(group);\n  });\n\n  const errors = map(invalidTypes, (currType) => {\n    return {\n      message:\n        \"Token Type: ->\" +\n        currType.name +\n        \"<- static 'GROUP' can only be Lexer.SKIPPED/Lexer.NA/A String\",\n      type: LexerDefinitionErrorType.INVALID_GROUP_TYPE_FOUND,\n      tokenTypes: [currType],\n    };\n  });\n\n  return errors;\n}\n\nexport function findModesThatDoNotExist(\n  tokenTypes: TokenType[],\n  validModes: string[],\n): ILexerDefinitionError[] {\n  const invalidModes = filter(tokenTypes, (clazz: any) => {\n    return (\n      clazz.PUSH_MODE !== undefined && !includes(validModes, clazz.PUSH_MODE)\n    );\n  });\n\n  const errors = map(invalidModes, (tokType) => {\n    const msg =\n      `Token Type: ->${tokType.name}<- static 'PUSH_MODE' value cannot refer to a Lexer Mode ->${tokType.PUSH_MODE}<-` +\n      `which does not exist`;\n    return {\n      message: msg,\n      type: LexerDefinitionErrorType.PUSH_MODE_DOES_NOT_EXIST,\n      tokenTypes: [tokType],\n    };\n  });\n\n  return errors;\n}\n\nexport function findUnreachablePatterns(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  const errors: ILexerDefinitionError[] = [];\n\n  const canBeTested = reduce(\n    tokenTypes,\n    (result, tokType, idx) => {\n      const pattern = tokType.PATTERN;\n\n      if (pattern === Lexer.NA) {\n        return result;\n      }\n\n      // a more comprehensive validation for all forms of regExps would require\n      // deeper regExp analysis capabilities\n      if (isString(pattern)) {\n        result.push({ str: pattern, idx, tokenType: tokType });\n      } else if (isRegExp(pattern) && noMetaChar(pattern)) {\n        result.push({ str: pattern.source, idx, tokenType: tokType });\n      }\n      return result;\n    },\n    [] as { str: string; idx: number; tokenType: TokenType }[],\n  );\n\n  forEach(tokenTypes, (tokType, testIdx) => {\n    forEach(canBeTested, ({ str, idx, tokenType }) => {\n      if (testIdx < idx && testTokenType(str, tokType.PATTERN)) {\n        const msg =\n          `Token: ->${tokenType.name}<- can never be matched.\\n` +\n          `Because it appears AFTER the Token Type ->${tokType.name}<-` +\n          `in the lexer's definition.\\n` +\n          `See https://chevrotain.io/docs/guide/resolving_lexer_errors.html#UNREACHABLE`;\n        errors.push({\n          message: msg,\n          type: LexerDefinitionErrorType.UNREACHABLE_PATTERN,\n          tokenTypes: [tokType, tokenType],\n        });\n      }\n    });\n  });\n\n  return errors;\n}\n\nfunction testTokenType(str: string, pattern: any): boolean {\n  /* istanbul ignore else */\n  if (isRegExp(pattern)) {\n    const regExpArray = pattern.exec(str);\n    return regExpArray !== null && regExpArray.index === 0;\n  } else if (isFunction(pattern)) {\n    // maintain the API of custom patterns\n    return pattern(str, 0, [], {});\n  } else if (has(pattern, \"exec\")) {\n    // maintain the API of custom patterns\n    return pattern.exec(str, 0, [], {});\n  } else if (typeof pattern === \"string\") {\n    return pattern === str;\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n\nfunction noMetaChar(regExp: RegExp): boolean {\n  //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\n  const metaChars = [\n    \".\",\n    \"\\\\\",\n    \"[\",\n    \"]\",\n    \"|\",\n    \"^\",\n    \"$\",\n    \"(\",\n    \")\",\n    \"?\",\n    \"*\",\n    \"+\",\n    \"{\",\n  ];\n  return (\n    find(metaChars, (char) => regExp.source.indexOf(char) !== -1) === undefined\n  );\n}\n\nexport function addStartOfInput(pattern: RegExp): RegExp {\n  const flags = pattern.ignoreCase ? \"i\" : \"\";\n  // always wrapping in a none capturing group preceded by '^' to make sure matching can only work on start of input.\n  // duplicate/redundant start of input markers have no meaning (/^^^^A/ === /^A/)\n  return new RegExp(`^(?:${pattern.source})`, flags);\n}\n\nexport function addStickyFlag(pattern: RegExp): RegExp {\n  const flags = pattern.ignoreCase ? \"iy\" : \"y\";\n  // always wrapping in a none capturing group preceded by '^' to make sure matching can only work on start of input.\n  // duplicate/redundant start of input markers have no meaning (/^^^^A/ === /^A/)\n  return new RegExp(`${pattern.source}`, flags);\n}\n\nexport function performRuntimeChecks(\n  lexerDefinition: IMultiModeLexerDefinition,\n  trackLines: boolean,\n  lineTerminatorCharacters: (number | string)[],\n): ILexerDefinitionError[] {\n  const errors: ILexerDefinitionError[] = [];\n\n  // some run time checks to help the end users.\n  if (!has(lexerDefinition, DEFAULT_MODE)) {\n    errors.push({\n      message:\n        \"A MultiMode Lexer cannot be initialized without a <\" +\n        DEFAULT_MODE +\n        \"> property in its definition\\n\",\n      type: LexerDefinitionErrorType.MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE,\n    });\n  }\n  if (!has(lexerDefinition, MODES)) {\n    errors.push({\n      message:\n        \"A MultiMode Lexer cannot be initialized without a <\" +\n        MODES +\n        \"> property in its definition\\n\",\n      type: LexerDefinitionErrorType.MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY,\n    });\n  }\n\n  if (\n    has(lexerDefinition, MODES) &&\n    has(lexerDefinition, DEFAULT_MODE) &&\n    !has(lexerDefinition.modes, lexerDefinition.defaultMode)\n  ) {\n    errors.push({\n      message:\n        `A MultiMode Lexer cannot be initialized with a ${DEFAULT_MODE}: <${lexerDefinition.defaultMode}>` +\n        `which does not exist\\n`,\n      type: LexerDefinitionErrorType.MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST,\n    });\n  }\n\n  if (has(lexerDefinition, MODES)) {\n    forEach(lexerDefinition.modes, (currModeValue, currModeName) => {\n      forEach(currModeValue, (currTokType, currIdx) => {\n        if (isUndefined(currTokType)) {\n          errors.push({\n            message:\n              `A Lexer cannot be initialized using an undefined Token Type. Mode:` +\n              `<${currModeName}> at index: <${currIdx}>\\n`,\n            type: LexerDefinitionErrorType.LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED,\n          });\n        } else if (has(currTokType, \"LONGER_ALT\")) {\n          const longerAlt = isArray(currTokType.LONGER_ALT)\n            ? currTokType.LONGER_ALT\n            : [currTokType.LONGER_ALT];\n          forEach(longerAlt, (currLongerAlt) => {\n            if (\n              !isUndefined(currLongerAlt) &&\n              !includes(currModeValue, currLongerAlt)\n            ) {\n              errors.push({\n                message: `A MultiMode Lexer cannot be initialized with a longer_alt <${currLongerAlt.name}> on token <${currTokType.name}> outside of mode <${currModeName}>\\n`,\n                type: LexerDefinitionErrorType.MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE,\n              });\n            }\n          });\n        }\n      });\n    });\n  }\n\n  return errors;\n}\n\nexport function performWarningRuntimeChecks(\n  lexerDefinition: IMultiModeLexerDefinition,\n  trackLines: boolean,\n  lineTerminatorCharacters: (number | string)[],\n): ILexerDefinitionError[] {\n  const warnings = [];\n  let hasAnyLineBreak = false;\n  const allTokenTypes = compact(flatten(values(lexerDefinition.modes)));\n\n  const concreteTokenTypes = reject(\n    allTokenTypes,\n    (currType) => currType[PATTERN] === Lexer.NA,\n  );\n  const terminatorCharCodes = getCharCodes(lineTerminatorCharacters);\n  if (trackLines) {\n    forEach(concreteTokenTypes, (tokType) => {\n      const currIssue = checkLineBreaksIssues(tokType, terminatorCharCodes);\n      if (currIssue !== false) {\n        const message = buildLineBreakIssueMessage(tokType, currIssue);\n        const warningDescriptor = {\n          message,\n          type: currIssue.issue,\n          tokenType: tokType,\n        };\n        warnings.push(warningDescriptor);\n      } else {\n        // we don't want to attempt to scan if the user explicitly specified the line_breaks option.\n        if (has(tokType, \"LINE_BREAKS\")) {\n          if (tokType.LINE_BREAKS === true) {\n            hasAnyLineBreak = true;\n          }\n        } else {\n          if (\n            canMatchCharCode(terminatorCharCodes, tokType.PATTERN as RegExp)\n          ) {\n            hasAnyLineBreak = true;\n          }\n        }\n      }\n    });\n  }\n\n  if (trackLines && !hasAnyLineBreak) {\n    warnings.push({\n      message:\n        \"Warning: No LINE_BREAKS Found.\\n\" +\n        \"\\tThis Lexer has been defined to track line and column information,\\n\" +\n        \"\\tBut none of the Token Types can be identified as matching a line terminator.\\n\" +\n        \"\\tSee https://chevrotain.io/docs/guide/resolving_lexer_errors.html#LINE_BREAKS \\n\" +\n        \"\\tfor details.\",\n      type: LexerDefinitionErrorType.NO_LINE_BREAKS_FLAGS,\n    });\n  }\n  return warnings;\n}\n\nexport function cloneEmptyGroups(emptyGroups: {\n  [groupName: string]: IToken;\n}): { [groupName: string]: IToken } {\n  const clonedResult: any = {};\n  const groupKeys = keys(emptyGroups);\n\n  forEach(groupKeys, (currKey) => {\n    const currGroupValue = emptyGroups[currKey];\n\n    /* istanbul ignore else */\n    if (isArray(currGroupValue)) {\n      clonedResult[currKey] = [];\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n  });\n\n  return clonedResult;\n}\n\n// TODO: refactor to avoid duplication\nexport function isCustomPattern(tokenType: TokenType): boolean {\n  const pattern = tokenType.PATTERN;\n  /* istanbul ignore else */\n  if (isRegExp(pattern)) {\n    return false;\n  } else if (isFunction(pattern)) {\n    // CustomPatternMatcherFunc - custom patterns do not require any transformations, only wrapping in a RegExp Like object\n    return true;\n  } else if (has(pattern, \"exec\")) {\n    // ICustomPattern\n    return true;\n  } else if (isString(pattern)) {\n    return false;\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n\nexport function isShortPattern(pattern: any): number | false {\n  if (isString(pattern) && pattern.length === 1) {\n    return pattern.charCodeAt(0);\n  } else {\n    return false;\n  }\n}\n\n/**\n * Faster than using a RegExp for default newline detection during lexing.\n */\nexport const LineTerminatorOptimizedTester: ILineTerminatorsTester = {\n  // implements /\\n|\\r\\n?/g.test\n  test: function (text) {\n    const len = text.length;\n    for (let i = this.lastIndex; i < len; i++) {\n      const c = text.charCodeAt(i);\n      if (c === 10) {\n        this.lastIndex = i + 1;\n        return true;\n      } else if (c === 13) {\n        if (text.charCodeAt(i + 1) === 10) {\n          this.lastIndex = i + 2;\n        } else {\n          this.lastIndex = i + 1;\n        }\n        return true;\n      }\n    }\n    return false;\n  },\n\n  lastIndex: 0,\n};\n\nfunction checkLineBreaksIssues(\n  tokType: TokenType,\n  lineTerminatorCharCodes: number[],\n):\n  | {\n      issue:\n        | LexerDefinitionErrorType.IDENTIFY_TERMINATOR\n        | LexerDefinitionErrorType.CUSTOM_LINE_BREAK;\n      errMsg?: string;\n    }\n  | false {\n  if (has(tokType, \"LINE_BREAKS\")) {\n    // if the user explicitly declared the line_breaks option we will respect their choice\n    // and assume it is correct.\n    return false;\n  } else {\n    /* istanbul ignore else */\n    if (isRegExp(tokType.PATTERN)) {\n      try {\n        // TODO: why is the casting suddenly needed?\n        canMatchCharCode(lineTerminatorCharCodes, tokType.PATTERN as RegExp);\n      } catch (e) {\n        /* istanbul ignore next - to test this we would have to mock <canMatchCharCode> to throw an error */\n        return {\n          issue: LexerDefinitionErrorType.IDENTIFY_TERMINATOR,\n          errMsg: (e as Error).message,\n        };\n      }\n      return false;\n    } else if (isString(tokType.PATTERN)) {\n      // string literal patterns can always be analyzed to detect line terminator usage\n      return false;\n    } else if (isCustomPattern(tokType)) {\n      // custom token types\n      return { issue: LexerDefinitionErrorType.CUSTOM_LINE_BREAK };\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n  }\n}\n\nexport function buildLineBreakIssueMessage(\n  tokType: TokenType,\n  details: {\n    issue:\n      | LexerDefinitionErrorType.IDENTIFY_TERMINATOR\n      | LexerDefinitionErrorType.CUSTOM_LINE_BREAK;\n    errMsg?: string;\n  },\n): string {\n  /* istanbul ignore else */\n  if (details.issue === LexerDefinitionErrorType.IDENTIFY_TERMINATOR) {\n    return (\n      \"Warning: unable to identify line terminator usage in pattern.\\n\" +\n      `\\tThe problem is in the <${tokType.name}> Token Type\\n` +\n      `\\t Root cause: ${details.errMsg}.\\n` +\n      \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#IDENTIFY_TERMINATOR\"\n    );\n  } else if (details.issue === LexerDefinitionErrorType.CUSTOM_LINE_BREAK) {\n    return (\n      \"Warning: A Custom Token Pattern should specify the <line_breaks> option.\\n\" +\n      `\\tThe problem is in the <${tokType.name}> Token Type\\n` +\n      \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#CUSTOM_LINE_BREAK\"\n    );\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n\nfunction getCharCodes(charsOrCodes: (number | string)[]): number[] {\n  const charCodes = map(charsOrCodes, (numOrString) => {\n    if (isString(numOrString)) {\n      return numOrString.charCodeAt(0);\n    } else {\n      return numOrString;\n    }\n  });\n\n  return charCodes;\n}\n\nfunction addToMapOfArrays<T>(\n  map: Record<number, T[]>,\n  key: number,\n  value: T,\n): void {\n  if (map[key] === undefined) {\n    map[key] = [value];\n  } else {\n    map[key].push(value);\n  }\n}\n\nexport const minOptimizationVal = 256;\n\n/**\n * We are mapping charCode above ASCI (256) into buckets each in the size of 256.\n * This is because ASCI are the most common start chars so each one of those will get its own\n * possible token configs vector.\n *\n * Tokens starting with charCodes \"above\" ASCI are uncommon, so we can \"afford\"\n * to place these into buckets of possible token configs, What we gain from\n * this is avoiding the case of creating an optimization 'charCodeToPatternIdxToConfig'\n * which would contain 10,000+ arrays of small size (e.g unicode Identifiers scenario).\n * Our 'charCodeToPatternIdxToConfig' max size will now be:\n * 256 + (2^16 / 2^8) - 1 === 511\n *\n * note the hack for fast division integer part extraction\n * See: https://stackoverflow.com/a/4228528\n */\nlet charCodeToOptimizedIdxMap: number[] = [];\nexport function charCodeToOptimizedIndex(charCode: number): number {\n  return charCode < minOptimizationVal\n    ? charCode\n    : charCodeToOptimizedIdxMap[charCode];\n}\n\n/**\n * This is a compromise between cold start / hot running performance\n * Creating this array takes ~3ms on a modern machine,\n * But if we perform the computation at runtime as needed the CSS Lexer benchmark\n * performance degrades by ~10%\n *\n * TODO: Perhaps it should be lazy initialized only if a charCode > 255 is used.\n */\nfunction initCharCodeToOptimizedIndexMap() {\n  if (isEmpty(charCodeToOptimizedIdxMap)) {\n    charCodeToOptimizedIdxMap = new Array(65536);\n    for (let i = 0; i < 65536; i++) {\n      charCodeToOptimizedIdxMap[i] = i > 255 ? 255 + ~~(i / 255) : i;\n    }\n  }\n}\n","export function timer<T>(func: () => T): { time: number; value: T } {\n  const start = new Date().getTime();\n  const val = func();\n  const end = new Date().getTime();\n  const total = end - start;\n  return { time: total, value: val };\n}\n","import {\n  clone,\n  compact,\n  difference,\n  flatten,\n  forEach,\n  has,\n  includes,\n  isArray,\n  isEmpty,\n  map,\n} from \"lodash-es\";\nimport { IToken, TokenType } from \"@chevrotain/types\";\n\nexport function tokenStructuredMatcher(\n  tokInstance: IToken,\n  tokConstructor: TokenType,\n) {\n  const instanceType = tokInstance.tokenTypeIdx;\n  if (instanceType === tokConstructor.tokenTypeIdx) {\n    return true;\n  } else {\n    return (\n      tokConstructor.isParent === true &&\n      tokConstructor.categoryMatchesMap![instanceType] === true\n    );\n  }\n}\n\n// Optimized tokenMatcher in case our grammar does not use token categories\n// Being so tiny it is much more likely to be in-lined and this avoid the function call overhead\nexport function tokenStructuredMatcherNoCategories(\n  token: IToken,\n  tokType: TokenType,\n) {\n  return token.tokenTypeIdx === tokType.tokenTypeIdx;\n}\n\nexport let tokenShortNameIdx = 1;\nexport const tokenIdxToClass: { [tokenIdx: number]: TokenType } = {};\n\nexport function augmentTokenTypes(tokenTypes: TokenType[]): void {\n  // collect the parent Token Types as well.\n  const tokenTypesAndParents = expandCategories(tokenTypes);\n\n  // add required tokenType and categoryMatches properties\n  assignTokenDefaultProps(tokenTypesAndParents);\n\n  // fill up the categoryMatches\n  assignCategoriesMapProp(tokenTypesAndParents);\n  assignCategoriesTokensProp(tokenTypesAndParents);\n\n  forEach(tokenTypesAndParents, (tokType) => {\n    tokType.isParent = tokType.categoryMatches!.length > 0;\n  });\n}\n\nexport function expandCategories(tokenTypes: TokenType[]): TokenType[] {\n  let result = clone(tokenTypes);\n\n  let categories = tokenTypes;\n  let searching = true;\n  while (searching) {\n    categories = compact(\n      flatten(map(categories, (currTokType) => currTokType.CATEGORIES)),\n    );\n\n    const newCategories = difference(categories, result);\n\n    result = result.concat(newCategories);\n\n    if (isEmpty(newCategories)) {\n      searching = false;\n    } else {\n      categories = newCategories;\n    }\n  }\n  return result;\n}\n\nexport function assignTokenDefaultProps(tokenTypes: TokenType[]): void {\n  forEach(tokenTypes, (currTokType) => {\n    if (!hasShortKeyProperty(currTokType)) {\n      tokenIdxToClass[tokenShortNameIdx] = currTokType;\n      (<any>currTokType).tokenTypeIdx = tokenShortNameIdx++;\n    }\n\n    // CATEGORIES? : TokenType | TokenType[]\n    if (\n      hasCategoriesProperty(currTokType) &&\n      !isArray(currTokType.CATEGORIES)\n      // &&\n      // !isUndefined(currTokType.CATEGORIES.PATTERN)\n    ) {\n      currTokType.CATEGORIES = [currTokType.CATEGORIES as unknown as TokenType];\n    }\n\n    if (!hasCategoriesProperty(currTokType)) {\n      currTokType.CATEGORIES = [];\n    }\n\n    if (!hasExtendingTokensTypesProperty(currTokType)) {\n      currTokType.categoryMatches = [];\n    }\n\n    if (!hasExtendingTokensTypesMapProperty(currTokType)) {\n      currTokType.categoryMatchesMap = {};\n    }\n  });\n}\n\nexport function assignCategoriesTokensProp(tokenTypes: TokenType[]): void {\n  forEach(tokenTypes, (currTokType) => {\n    // avoid duplications\n    currTokType.categoryMatches = [];\n    forEach(currTokType.categoryMatchesMap!, (val, key) => {\n      currTokType.categoryMatches!.push(\n        tokenIdxToClass[key as unknown as number].tokenTypeIdx!,\n      );\n    });\n  });\n}\n\nexport function assignCategoriesMapProp(tokenTypes: TokenType[]): void {\n  forEach(tokenTypes, (currTokType) => {\n    singleAssignCategoriesToksMap([], currTokType);\n  });\n}\n\nexport function singleAssignCategoriesToksMap(\n  path: TokenType[],\n  nextNode: TokenType,\n): void {\n  forEach(path, (pathNode) => {\n    nextNode.categoryMatchesMap![pathNode.tokenTypeIdx!] = true;\n  });\n\n  forEach(nextNode.CATEGORIES, (nextCategory) => {\n    const newPath = path.concat(nextNode);\n    // avoids infinite loops due to cyclic categories.\n    if (!includes(newPath, nextCategory)) {\n      singleAssignCategoriesToksMap(newPath, nextCategory);\n    }\n  });\n}\n\nexport function hasShortKeyProperty(tokType: TokenType): boolean {\n  return has(tokType, \"tokenTypeIdx\");\n}\n\nexport function hasCategoriesProperty(tokType: TokenType): boolean {\n  return has(tokType, \"CATEGORIES\");\n}\n\nexport function hasExtendingTokensTypesProperty(tokType: TokenType): boolean {\n  return has(tokType, \"categoryMatches\");\n}\n\nexport function hasExtendingTokensTypesMapProperty(\n  tokType: TokenType,\n): boolean {\n  return has(tokType, \"categoryMatchesMap\");\n}\n\nexport function isTokenType(tokType: TokenType): boolean {\n  return has(tokType, \"tokenTypeIdx\");\n}\n","import { ILexerErrorMessageProvider, IToken } from \"@chevrotain/types\";\n\nexport const defaultLexerErrorProvider: ILexerErrorMessageProvider = {\n  buildUnableToPopLexerModeMessage(token: IToken): string {\n    return `Unable to pop Lexer Mode after encountering Token ->${token.image}<- The Mode Stack is empty`;\n  },\n\n  buildUnexpectedCharactersMessage(\n    fullText: string,\n    startOffset: number,\n    length: number,\n    line?: number,\n    column?: number,\n  ): string {\n    return (\n      `unexpected character: ->${fullText.charAt(\n        startOffset,\n      )}<- at offset: ${startOffset},` + ` skipped ${length} characters.`\n    );\n  },\n};\n","import {\n  analyzeTokenTypes,\n  charCodeToOptimizedIndex,\n  cloneEmptyGroups,\n  DEFAULT_MODE,\n  IAnalyzeResult,\n  IPatternConfig,\n  LineTerminatorOptimizedTester,\n  performRuntimeChecks,\n  performWarningRuntimeChecks,\n  SUPPORT_STICKY,\n  validatePatterns,\n} from \"./lexer.js\";\nimport {\n  assign,\n  clone,\n  forEach,\n  identity,\n  isArray,\n  isEmpty,\n  isUndefined,\n  keys,\n  last,\n  map,\n  noop,\n  reduce,\n  reject,\n} from \"lodash-es\";\nimport { PRINT_WARNING, timer, toFastProperties } from \"@chevrotain/utils\";\nimport { augmentTokenTypes } from \"./tokens.js\";\nimport {\n  CustomPatternMatcherFunc,\n  CustomPatternMatcherReturn,\n  ILexerConfig,\n  ILexerDefinitionError,\n  ILexingError,\n  IMultiModeLexerDefinition,\n  IToken,\n  TokenType,\n} from \"@chevrotain/types\";\nimport { defaultLexerErrorProvider } from \"./lexer_errors_public.js\";\nimport { clearRegExpParserCache } from \"./reg_exp_parser.js\";\n\nexport interface ILexingResult {\n  tokens: IToken[];\n  groups: { [groupName: string]: IToken[] };\n  errors: ILexingError[];\n}\n\nexport enum LexerDefinitionErrorType {\n  MISSING_PATTERN,\n  INVALID_PATTERN,\n  EOI_ANCHOR_FOUND,\n  UNSUPPORTED_FLAGS_FOUND,\n  DUPLICATE_PATTERNS_FOUND,\n  INVALID_GROUP_TYPE_FOUND,\n  PUSH_MODE_DOES_NOT_EXIST,\n  MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE,\n  MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY,\n  MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST,\n  LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED,\n  SOI_ANCHOR_FOUND,\n  EMPTY_MATCH_PATTERN,\n  NO_LINE_BREAKS_FLAGS,\n  UNREACHABLE_PATTERN,\n  IDENTIFY_TERMINATOR,\n  CUSTOM_LINE_BREAK,\n  MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE,\n}\n\nexport interface IRegExpExec {\n  exec: CustomPatternMatcherFunc;\n}\n\nconst DEFAULT_LEXER_CONFIG: Required<ILexerConfig> = {\n  deferDefinitionErrorsHandling: false,\n  positionTracking: \"full\",\n  lineTerminatorsPattern: /\\n|\\r\\n?/g,\n  lineTerminatorCharacters: [\"\\n\", \"\\r\"],\n  ensureOptimizations: false,\n  safeMode: false,\n  errorMessageProvider: defaultLexerErrorProvider,\n  traceInitPerf: false,\n  skipValidations: false,\n  recoveryEnabled: true,\n};\n\nObject.freeze(DEFAULT_LEXER_CONFIG);\n\nexport class Lexer {\n  public static SKIPPED =\n    \"This marks a skipped Token pattern, this means each token identified by it will\" +\n    \"be consumed and then thrown into oblivion, this can be used to for example to completely ignore whitespace.\";\n\n  public static NA = /NOT_APPLICABLE/;\n  public lexerDefinitionErrors: ILexerDefinitionError[] = [];\n  public lexerDefinitionWarning: ILexerDefinitionError[] = [];\n\n  protected patternIdxToConfig: Record<string, IPatternConfig[]> = {};\n  protected charCodeToPatternIdxToConfig: {\n    [modeName: string]: { [charCode: number]: IPatternConfig[] };\n  } = {};\n\n  protected modes: string[] = [];\n  protected defaultMode!: string;\n  protected emptyGroups: { [groupName: string]: IToken } = {};\n\n  private config: Required<ILexerConfig>;\n  private trackStartLines: boolean = true;\n  private trackEndLines: boolean = true;\n  private hasCustom: boolean = false;\n  private canModeBeOptimized: Record<string, boolean> = {};\n\n  private traceInitPerf!: boolean | number;\n  private traceInitMaxIdent!: number;\n  private traceInitIndent: number;\n\n  constructor(\n    protected lexerDefinition: TokenType[] | IMultiModeLexerDefinition,\n    config: ILexerConfig = DEFAULT_LEXER_CONFIG,\n  ) {\n    if (typeof config === \"boolean\") {\n      throw Error(\n        \"The second argument to the Lexer constructor is now an ILexerConfig Object.\\n\" +\n          \"a boolean 2nd argument is no longer supported\",\n      );\n    }\n\n    // todo: defaults func?\n    this.config = assign({}, DEFAULT_LEXER_CONFIG, config) as any;\n\n    const traceInitVal = this.config.traceInitPerf;\n    if (traceInitVal === true) {\n      this.traceInitMaxIdent = Infinity;\n      this.traceInitPerf = true;\n    } else if (typeof traceInitVal === \"number\") {\n      this.traceInitMaxIdent = traceInitVal;\n      this.traceInitPerf = true;\n    }\n    this.traceInitIndent = -1;\n\n    this.TRACE_INIT(\"Lexer Constructor\", () => {\n      let actualDefinition!: IMultiModeLexerDefinition;\n      let hasOnlySingleMode = true;\n      this.TRACE_INIT(\"Lexer Config handling\", () => {\n        if (\n          this.config.lineTerminatorsPattern ===\n          DEFAULT_LEXER_CONFIG.lineTerminatorsPattern\n        ) {\n          // optimized built-in implementation for the defaults definition of lineTerminators\n          this.config.lineTerminatorsPattern = LineTerminatorOptimizedTester;\n        } else {\n          if (\n            this.config.lineTerminatorCharacters ===\n            DEFAULT_LEXER_CONFIG.lineTerminatorCharacters\n          ) {\n            throw Error(\n              \"Error: Missing <lineTerminatorCharacters> property on the Lexer config.\\n\" +\n                \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#MISSING_LINE_TERM_CHARS\",\n            );\n          }\n        }\n\n        if (config.safeMode && config.ensureOptimizations) {\n          throw Error(\n            '\"safeMode\" and \"ensureOptimizations\" flags are mutually exclusive.',\n          );\n        }\n\n        this.trackStartLines = /full|onlyStart/i.test(\n          this.config.positionTracking,\n        );\n        this.trackEndLines = /full/i.test(this.config.positionTracking);\n\n        // Convert SingleModeLexerDefinition into a IMultiModeLexerDefinition.\n        if (isArray(lexerDefinition)) {\n          actualDefinition = {\n            modes: { defaultMode: clone(lexerDefinition) },\n            defaultMode: DEFAULT_MODE,\n          };\n        } else {\n          // no conversion needed, input should already be a IMultiModeLexerDefinition\n          hasOnlySingleMode = false;\n          actualDefinition = clone(<IMultiModeLexerDefinition>lexerDefinition);\n        }\n      });\n\n      if (this.config.skipValidations === false) {\n        this.TRACE_INIT(\"performRuntimeChecks\", () => {\n          this.lexerDefinitionErrors = this.lexerDefinitionErrors.concat(\n            performRuntimeChecks(\n              actualDefinition,\n              this.trackStartLines,\n              this.config.lineTerminatorCharacters,\n            ),\n          );\n        });\n\n        this.TRACE_INIT(\"performWarningRuntimeChecks\", () => {\n          this.lexerDefinitionWarning = this.lexerDefinitionWarning.concat(\n            performWarningRuntimeChecks(\n              actualDefinition,\n              this.trackStartLines,\n              this.config.lineTerminatorCharacters,\n            ),\n          );\n        });\n      }\n\n      // for extra robustness to avoid throwing an none informative error message\n      actualDefinition.modes = actualDefinition.modes\n        ? actualDefinition.modes\n        : {};\n\n      // an error of undefined TokenTypes will be detected in \"performRuntimeChecks\" above.\n      // this transformation is to increase robustness in the case of partially invalid lexer definition.\n      forEach(actualDefinition.modes, (currModeValue, currModeName) => {\n        actualDefinition.modes[currModeName] = reject<TokenType>(\n          currModeValue,\n          (currTokType) => isUndefined(currTokType),\n        );\n      });\n\n      const allModeNames = keys(actualDefinition.modes);\n\n      forEach(\n        actualDefinition.modes,\n        (currModDef: TokenType[], currModName) => {\n          this.TRACE_INIT(`Mode: <${currModName}> processing`, () => {\n            this.modes.push(currModName);\n\n            if (this.config.skipValidations === false) {\n              this.TRACE_INIT(`validatePatterns`, () => {\n                this.lexerDefinitionErrors = this.lexerDefinitionErrors.concat(\n                  validatePatterns(currModDef, allModeNames),\n                );\n              });\n            }\n\n            // If definition errors were encountered, the analysis phase may fail unexpectedly/\n            // Considering a lexer with definition errors may never be used, there is no point\n            // to performing the analysis anyhow...\n            if (isEmpty(this.lexerDefinitionErrors)) {\n              augmentTokenTypes(currModDef);\n\n              let currAnalyzeResult!: IAnalyzeResult;\n              this.TRACE_INIT(`analyzeTokenTypes`, () => {\n                currAnalyzeResult = analyzeTokenTypes(currModDef, {\n                  lineTerminatorCharacters:\n                    this.config.lineTerminatorCharacters,\n                  positionTracking: config.positionTracking,\n                  ensureOptimizations: config.ensureOptimizations,\n                  safeMode: config.safeMode,\n                  tracer: this.TRACE_INIT,\n                });\n              });\n\n              this.patternIdxToConfig[currModName] =\n                currAnalyzeResult.patternIdxToConfig;\n\n              this.charCodeToPatternIdxToConfig[currModName] =\n                currAnalyzeResult.charCodeToPatternIdxToConfig;\n\n              this.emptyGroups = assign(\n                {},\n                this.emptyGroups,\n                currAnalyzeResult.emptyGroups,\n              ) as any;\n\n              this.hasCustom = currAnalyzeResult.hasCustom || this.hasCustom;\n\n              this.canModeBeOptimized[currModName] =\n                currAnalyzeResult.canBeOptimized;\n            }\n          });\n        },\n      );\n\n      this.defaultMode = actualDefinition.defaultMode;\n\n      if (\n        !isEmpty(this.lexerDefinitionErrors) &&\n        !this.config.deferDefinitionErrorsHandling\n      ) {\n        const allErrMessages = map(this.lexerDefinitionErrors, (error) => {\n          return error.message;\n        });\n        const allErrMessagesString = allErrMessages.join(\n          \"-----------------------\\n\",\n        );\n        throw new Error(\n          \"Errors detected in definition of Lexer:\\n\" + allErrMessagesString,\n        );\n      }\n\n      // Only print warning if there are no errors, This will avoid pl\n      forEach(this.lexerDefinitionWarning, (warningDescriptor) => {\n        PRINT_WARNING(warningDescriptor.message);\n      });\n\n      this.TRACE_INIT(\"Choosing sub-methods implementations\", () => {\n        // Choose the relevant internal implementations for this specific parser.\n        // These implementations should be in-lined by the JavaScript engine\n        // to provide optimal performance in each scenario.\n        if (SUPPORT_STICKY) {\n          this.chopInput = <any>identity;\n          this.match = this.matchWithTest;\n        } else {\n          this.updateLastIndex = noop;\n          this.match = this.matchWithExec;\n        }\n\n        if (hasOnlySingleMode) {\n          this.handleModes = noop;\n        }\n\n        if (this.trackStartLines === false) {\n          this.computeNewColumn = identity;\n        }\n\n        if (this.trackEndLines === false) {\n          this.updateTokenEndLineColumnLocation = noop;\n        }\n\n        if (/full/i.test(this.config.positionTracking)) {\n          this.createTokenInstance = this.createFullToken;\n        } else if (/onlyStart/i.test(this.config.positionTracking)) {\n          this.createTokenInstance = this.createStartOnlyToken;\n        } else if (/onlyOffset/i.test(this.config.positionTracking)) {\n          this.createTokenInstance = this.createOffsetOnlyToken;\n        } else {\n          throw Error(\n            `Invalid <positionTracking> config option: \"${this.config.positionTracking}\"`,\n          );\n        }\n\n        if (this.hasCustom) {\n          this.addToken = this.addTokenUsingPush;\n          this.handlePayload = this.handlePayloadWithCustom;\n        } else {\n          this.addToken = this.addTokenUsingMemberAccess;\n          this.handlePayload = this.handlePayloadNoCustom;\n        }\n      });\n\n      this.TRACE_INIT(\"Failed Optimization Warnings\", () => {\n        const unOptimizedModes = reduce(\n          this.canModeBeOptimized,\n          (cannotBeOptimized, canBeOptimized, modeName) => {\n            if (canBeOptimized === false) {\n              cannotBeOptimized.push(modeName);\n            }\n            return cannotBeOptimized;\n          },\n          [] as string[],\n        );\n\n        if (config.ensureOptimizations && !isEmpty(unOptimizedModes)) {\n          throw Error(\n            `Lexer Modes: < ${unOptimizedModes.join(\n              \", \",\n            )} > cannot be optimized.\\n` +\n              '\\t Disable the \"ensureOptimizations\" lexer config flag to silently ignore this and run the lexer in an un-optimized mode.\\n' +\n              \"\\t Or inspect the console log for details on how to resolve these issues.\",\n          );\n        }\n      });\n\n      this.TRACE_INIT(\"clearRegExpParserCache\", () => {\n        clearRegExpParserCache();\n      });\n\n      this.TRACE_INIT(\"toFastProperties\", () => {\n        toFastProperties(this);\n      });\n    });\n  }\n\n  public tokenize(\n    text: string,\n    initialMode: string = this.defaultMode,\n  ): ILexingResult {\n    if (!isEmpty(this.lexerDefinitionErrors)) {\n      const allErrMessages = map(this.lexerDefinitionErrors, (error) => {\n        return error.message;\n      });\n      const allErrMessagesString = allErrMessages.join(\n        \"-----------------------\\n\",\n      );\n      throw new Error(\n        \"Unable to Tokenize because Errors detected in definition of Lexer:\\n\" +\n          allErrMessagesString,\n      );\n    }\n\n    return this.tokenizeInternal(text, initialMode);\n  }\n\n  // There is quite a bit of duplication between this and \"tokenizeInternalLazy\"\n  // This is intentional due to performance considerations.\n  // this method also used quite a bit of `!` none null assertions because it is too optimized\n  // for `tsc` to always understand it is \"safe\"\n  private tokenizeInternal(text: string, initialMode: string): ILexingResult {\n    let i,\n      j,\n      k,\n      matchAltImage,\n      longerAlt,\n      matchedImage: string | null,\n      payload,\n      altPayload,\n      imageLength,\n      group,\n      tokType,\n      newToken: IToken,\n      errLength,\n      droppedChar,\n      msg,\n      match;\n    const orgText = text;\n    const orgLength = orgText.length;\n    let offset = 0;\n    let matchedTokensIndex = 0;\n    // initializing the tokensArray to the \"guessed\" size.\n    // guessing too little will still reduce the number of array re-sizes on pushes.\n    // guessing too large (Tested by guessing x4 too large) may cost a bit more of memory\n    // but would still have a faster runtime by avoiding (All but one) array resizing.\n    const guessedNumberOfTokens = this.hasCustom\n      ? 0 // will break custom token pattern APIs the matchedTokens array will contain undefined elements.\n      : Math.floor(text.length / 10);\n    const matchedTokens = new Array(guessedNumberOfTokens);\n    const errors: ILexingError[] = [];\n    let line = this.trackStartLines ? 1 : undefined;\n    let column = this.trackStartLines ? 1 : undefined;\n    const groups: any = cloneEmptyGroups(this.emptyGroups);\n    const trackLines = this.trackStartLines;\n    const lineTerminatorPattern = this.config.lineTerminatorsPattern;\n\n    let currModePatternsLength = 0;\n    let patternIdxToConfig: IPatternConfig[] = [];\n    let currCharCodeToPatternIdxToConfig: {\n      [charCode: number]: IPatternConfig[];\n    } = [];\n\n    const modeStack: string[] = [];\n\n    const emptyArray: IPatternConfig[] = [];\n    Object.freeze(emptyArray);\n    let getPossiblePatterns!: (charCode: number) => IPatternConfig[];\n\n    function getPossiblePatternsSlow() {\n      return patternIdxToConfig;\n    }\n\n    function getPossiblePatternsOptimized(charCode: number): IPatternConfig[] {\n      const optimizedCharIdx = charCodeToOptimizedIndex(charCode);\n      const possiblePatterns =\n        currCharCodeToPatternIdxToConfig[optimizedCharIdx];\n      if (possiblePatterns === undefined) {\n        return emptyArray;\n      } else {\n        return possiblePatterns;\n      }\n    }\n\n    const pop_mode = (popToken: IToken) => {\n      // TODO: perhaps avoid this error in the edge case there is no more input?\n      if (\n        modeStack.length === 1 &&\n        // if we have both a POP_MODE and a PUSH_MODE this is in-fact a \"transition\"\n        // So no error should occur.\n        popToken.tokenType.PUSH_MODE === undefined\n      ) {\n        // if we try to pop the last mode there lexer will no longer have ANY mode.\n        // thus the pop is ignored, an error will be created and the lexer will continue parsing in the previous mode.\n        const msg =\n          this.config.errorMessageProvider.buildUnableToPopLexerModeMessage(\n            popToken,\n          );\n\n        errors.push({\n          offset: popToken.startOffset,\n          line: popToken.startLine,\n          column: popToken.startColumn,\n          length: popToken.image.length,\n          message: msg,\n        });\n      } else {\n        modeStack.pop();\n        const newMode = last(modeStack)!;\n        patternIdxToConfig = this.patternIdxToConfig[newMode];\n        currCharCodeToPatternIdxToConfig =\n          this.charCodeToPatternIdxToConfig[newMode];\n        currModePatternsLength = patternIdxToConfig.length;\n        const modeCanBeOptimized =\n          this.canModeBeOptimized[newMode] && this.config.safeMode === false;\n\n        if (currCharCodeToPatternIdxToConfig && modeCanBeOptimized) {\n          getPossiblePatterns = getPossiblePatternsOptimized;\n        } else {\n          getPossiblePatterns = getPossiblePatternsSlow;\n        }\n      }\n    };\n\n    function push_mode(this: Lexer, newMode: string) {\n      modeStack.push(newMode);\n      currCharCodeToPatternIdxToConfig =\n        this.charCodeToPatternIdxToConfig[newMode];\n\n      patternIdxToConfig = this.patternIdxToConfig[newMode];\n      currModePatternsLength = patternIdxToConfig.length;\n\n      currModePatternsLength = patternIdxToConfig.length;\n      const modeCanBeOptimized =\n        this.canModeBeOptimized[newMode] && this.config.safeMode === false;\n\n      if (currCharCodeToPatternIdxToConfig && modeCanBeOptimized) {\n        getPossiblePatterns = getPossiblePatternsOptimized;\n      } else {\n        getPossiblePatterns = getPossiblePatternsSlow;\n      }\n    }\n\n    // this pattern seems to avoid a V8 de-optimization, although that de-optimization does not\n    // seem to matter performance wise.\n    push_mode.call(this, initialMode);\n\n    let currConfig!: IPatternConfig;\n\n    const recoveryEnabled = this.config.recoveryEnabled;\n\n    while (offset < orgLength) {\n      matchedImage = null;\n\n      const nextCharCode = orgText.charCodeAt(offset);\n      const chosenPatternIdxToConfig = getPossiblePatterns(nextCharCode);\n      const chosenPatternsLength = chosenPatternIdxToConfig.length;\n\n      for (i = 0; i < chosenPatternsLength; i++) {\n        currConfig = chosenPatternIdxToConfig[i];\n        const currPattern = currConfig.pattern;\n        payload = null;\n\n        // manually in-lined because > 600 chars won't be in-lined in V8\n        const singleCharCode = currConfig.short;\n        if (singleCharCode !== false) {\n          if (nextCharCode === singleCharCode) {\n            // single character string\n            matchedImage = currPattern as string;\n          }\n        } else if (currConfig.isCustom === true) {\n          match = (currPattern as IRegExpExec).exec(\n            orgText,\n            offset,\n            matchedTokens,\n            groups,\n          );\n          if (match !== null) {\n            matchedImage = match[0];\n            if ((match as CustomPatternMatcherReturn).payload !== undefined) {\n              payload = (match as CustomPatternMatcherReturn).payload;\n            }\n          } else {\n            matchedImage = null;\n          }\n        } else {\n          this.updateLastIndex(currPattern as RegExp, offset);\n          matchedImage = this.match(currPattern as RegExp, text, offset);\n        }\n\n        if (matchedImage !== null) {\n          // even though this pattern matched we must try a another longer alternative.\n          // this can be used to prioritize keywords over identifiers\n          longerAlt = currConfig.longerAlt;\n          if (longerAlt !== undefined) {\n            // TODO: micro optimize, avoid extra prop access\n            // by saving/linking longerAlt on the original config?\n            const longerAltLength = longerAlt.length;\n            for (k = 0; k < longerAltLength; k++) {\n              const longerAltConfig = patternIdxToConfig[longerAlt[k]];\n              const longerAltPattern = longerAltConfig.pattern;\n              altPayload = null;\n\n              // single Char can never be a longer alt so no need to test it.\n              // manually in-lined because > 600 chars won't be in-lined in V8\n              if (longerAltConfig.isCustom === true) {\n                match = (longerAltPattern as IRegExpExec).exec(\n                  orgText,\n                  offset,\n                  matchedTokens,\n                  groups,\n                );\n                if (match !== null) {\n                  matchAltImage = match[0];\n                  if (\n                    (match as CustomPatternMatcherReturn).payload !== undefined\n                  ) {\n                    altPayload = (match as CustomPatternMatcherReturn).payload;\n                  }\n                } else {\n                  matchAltImage = null;\n                }\n              } else {\n                this.updateLastIndex(longerAltPattern as RegExp, offset);\n                matchAltImage = this.match(\n                  longerAltPattern as RegExp,\n                  text,\n                  offset,\n                );\n              }\n\n              if (matchAltImage && matchAltImage.length > matchedImage.length) {\n                matchedImage = matchAltImage;\n                payload = altPayload;\n                currConfig = longerAltConfig;\n                // Exit the loop early after matching one of the longer alternatives\n                // The first matched alternative takes precedence\n                break;\n              }\n            }\n          }\n          break;\n        }\n      }\n\n      // successful match\n      if (matchedImage !== null) {\n        imageLength = matchedImage.length;\n        group = currConfig.group;\n        if (group !== undefined) {\n          tokType = currConfig.tokenTypeIdx;\n          // TODO: \"offset + imageLength\" and the new column may be computed twice in case of \"full\" location information inside\n          // createFullToken method\n          newToken = this.createTokenInstance(\n            matchedImage,\n            offset,\n            tokType,\n            currConfig.tokenType,\n            line,\n            column,\n            imageLength,\n          );\n\n          this.handlePayload(newToken, payload);\n\n          // TODO: optimize NOOP in case there are no special groups?\n          if (group === false) {\n            matchedTokensIndex = this.addToken(\n              matchedTokens,\n              matchedTokensIndex,\n              newToken,\n            );\n          } else {\n            groups[group].push(newToken);\n          }\n        }\n        text = this.chopInput(text, imageLength);\n        offset = offset + imageLength;\n\n        // TODO: with newlines the column may be assigned twice\n        column = this.computeNewColumn(column!, imageLength);\n\n        if (trackLines === true && currConfig.canLineTerminator === true) {\n          let numOfLTsInMatch = 0;\n          let foundTerminator;\n          let lastLTEndOffset: number;\n          lineTerminatorPattern.lastIndex = 0;\n          do {\n            foundTerminator = lineTerminatorPattern.test(matchedImage);\n            if (foundTerminator === true) {\n              lastLTEndOffset = lineTerminatorPattern.lastIndex - 1;\n              numOfLTsInMatch++;\n            }\n          } while (foundTerminator === true);\n\n          if (numOfLTsInMatch !== 0) {\n            line = line! + numOfLTsInMatch;\n            column = imageLength - lastLTEndOffset!;\n            this.updateTokenEndLineColumnLocation(\n              newToken!,\n              group!,\n              lastLTEndOffset!,\n              numOfLTsInMatch,\n              line,\n              column,\n              imageLength,\n            );\n          }\n        }\n        // will be NOOP if no modes present\n        this.handleModes(currConfig, pop_mode, push_mode, newToken!);\n      } else {\n        // error recovery, drop characters until we identify a valid token's start point\n        const errorStartOffset = offset;\n        const errorLine = line;\n        const errorColumn = column;\n        let foundResyncPoint = recoveryEnabled === false;\n\n        while (foundResyncPoint === false && offset < orgLength) {\n          // Identity Func (when sticky flag is enabled)\n          text = this.chopInput(text, 1);\n          offset++;\n          for (j = 0; j < currModePatternsLength; j++) {\n            const currConfig = patternIdxToConfig[j];\n            const currPattern = currConfig.pattern;\n\n            // manually in-lined because > 600 chars won't be in-lined in V8\n            const singleCharCode = currConfig.short;\n            if (singleCharCode !== false) {\n              if (orgText.charCodeAt(offset) === singleCharCode) {\n                // single character string\n                foundResyncPoint = true;\n              }\n            } else if (currConfig.isCustom === true) {\n              foundResyncPoint =\n                (currPattern as IRegExpExec).exec(\n                  orgText,\n                  offset,\n                  matchedTokens,\n                  groups,\n                ) !== null;\n            } else {\n              this.updateLastIndex(currPattern as RegExp, offset);\n              foundResyncPoint = (currPattern as RegExp).exec(text) !== null;\n            }\n\n            if (foundResyncPoint === true) {\n              break;\n            }\n          }\n        }\n\n        errLength = offset - errorStartOffset;\n        column = this.computeNewColumn(column!, errLength);\n        // at this point we either re-synced or reached the end of the input text\n        msg = this.config.errorMessageProvider.buildUnexpectedCharactersMessage(\n          orgText,\n          errorStartOffset,\n          errLength,\n          errorLine,\n          errorColumn,\n        );\n        errors.push({\n          offset: errorStartOffset,\n          line: errorLine,\n          column: errorColumn,\n          length: errLength,\n          message: msg,\n        });\n\n        if (recoveryEnabled === false) {\n          break;\n        }\n      }\n    }\n\n    // if we do have custom patterns which push directly into the\n    // TODO: custom tokens should not push directly??\n    if (!this.hasCustom) {\n      // if we guessed a too large size for the tokens array this will shrink it to the right size.\n      matchedTokens.length = matchedTokensIndex;\n    }\n\n    return {\n      tokens: matchedTokens,\n      groups: groups,\n      errors: errors,\n    };\n  }\n\n  private handleModes(\n    config: IPatternConfig,\n    pop_mode: (tok: IToken) => void,\n    push_mode: (this: Lexer, pushMode: string) => void,\n    newToken: IToken,\n  ) {\n    if (config.pop === true) {\n      // need to save the PUSH_MODE property as if the mode is popped\n      // patternIdxToPopMode is updated to reflect the new mode after popping the stack\n      const pushMode = config.push;\n      pop_mode(newToken);\n      if (pushMode !== undefined) {\n        push_mode.call(this, pushMode);\n      }\n    } else if (config.push !== undefined) {\n      push_mode.call(this, config.push);\n    }\n  }\n\n  private chopInput(text: string, length: number): string {\n    return text.substring(length);\n  }\n\n  private updateLastIndex(regExp: RegExp, newLastIndex: number): void {\n    regExp.lastIndex = newLastIndex;\n  }\n\n  // TODO: decrease this under 600 characters? inspect stripping comments option in TSC compiler\n  private updateTokenEndLineColumnLocation(\n    newToken: IToken,\n    group: string | false,\n    lastLTIdx: number,\n    numOfLTsInMatch: number,\n    line: number,\n    column: number,\n    imageLength: number,\n  ): void {\n    let lastCharIsLT, fixForEndingInLT;\n    if (group !== undefined) {\n      // a none skipped multi line Token, need to update endLine/endColumn\n      lastCharIsLT = lastLTIdx === imageLength - 1;\n      fixForEndingInLT = lastCharIsLT ? -1 : 0;\n      if (!(numOfLTsInMatch === 1 && lastCharIsLT === true)) {\n        // if a token ends in a LT that last LT only affects the line numbering of following Tokens\n        newToken.endLine = line + fixForEndingInLT;\n        // the last LT in a token does not affect the endColumn either as the [columnStart ... columnEnd)\n        // inclusive to exclusive range.\n        newToken.endColumn = column - 1 + -fixForEndingInLT;\n      }\n      // else single LT in the last character of a token, no need to modify the endLine/EndColumn\n    }\n  }\n\n  private computeNewColumn(oldColumn: number, imageLength: number) {\n    return oldColumn + imageLength;\n  }\n\n  // Place holder, will be replaced by the correct variant according to the locationTracking option at runtime.\n  /* istanbul ignore next - place holder */\n  private createTokenInstance!: (...args: any[]) => IToken;\n\n  private createOffsetOnlyToken(\n    image: string,\n    startOffset: number,\n    tokenTypeIdx: number,\n    tokenType: TokenType,\n  ) {\n    return {\n      image,\n      startOffset,\n      tokenTypeIdx,\n      tokenType,\n    };\n  }\n\n  private createStartOnlyToken(\n    image: string,\n    startOffset: number,\n    tokenTypeIdx: number,\n    tokenType: TokenType,\n    startLine: number,\n    startColumn: number,\n  ) {\n    return {\n      image,\n      startOffset,\n      startLine,\n      startColumn,\n      tokenTypeIdx,\n      tokenType,\n    };\n  }\n\n  private createFullToken(\n    image: string,\n    startOffset: number,\n    tokenTypeIdx: number,\n    tokenType: TokenType,\n    startLine: number,\n    startColumn: number,\n    imageLength: number,\n  ): IToken {\n    return {\n      image,\n      startOffset,\n      endOffset: startOffset + imageLength - 1,\n      startLine,\n      endLine: startLine,\n      startColumn,\n      endColumn: startColumn + imageLength - 1,\n      tokenTypeIdx,\n      tokenType,\n    };\n  }\n\n  // Place holder, will be replaced by the correct variant according to the locationTracking option at runtime.\n  /* istanbul ignore next - place holder */\n  private addToken!: (\n    tokenVector: IToken[],\n    index: number,\n    tokenToAdd: IToken,\n  ) => number;\n\n  private addTokenUsingPush(\n    tokenVector: IToken[],\n    index: number,\n    tokenToAdd: IToken,\n  ): number {\n    tokenVector.push(tokenToAdd);\n    return index;\n  }\n\n  private addTokenUsingMemberAccess(\n    tokenVector: IToken[],\n    index: number,\n    tokenToAdd: IToken,\n  ): number {\n    tokenVector[index] = tokenToAdd;\n    index++;\n    return index;\n  }\n\n  // Place holder, will be replaced by the correct variant according to the hasCustom flag option at runtime.\n  private handlePayload: (token: IToken, payload: any) => void;\n\n  private handlePayloadNoCustom(token: IToken, payload: any): void {}\n\n  private handlePayloadWithCustom(token: IToken, payload: any): void {\n    if (payload !== null) {\n      token.payload = payload;\n    }\n  }\n\n  // place holder to be replaced with chosen alternative at runtime\n  private match!: (\n    pattern: RegExp,\n    text: string,\n    offset: number,\n  ) => string | null;\n\n  private matchWithTest(\n    pattern: RegExp,\n    text: string,\n    offset: number,\n  ): string | null {\n    const found = pattern.test(text);\n    if (found === true) {\n      return text.substring(offset, pattern.lastIndex);\n    }\n    return null;\n  }\n\n  private matchWithExec(pattern: RegExp, text: string): string | null {\n    const regExpArray = pattern.exec(text);\n    return regExpArray !== null ? regExpArray[0] : null;\n  }\n\n  // Duplicated from the parser's perf trace trait to allow future extraction\n  // of the lexer to a separate package.\n  TRACE_INIT = <T>(phaseDesc: string, phaseImpl: () => T): T => {\n    // No need to optimize this using NOOP pattern because\n    // It is not called in a hot spot...\n    if (this.traceInitPerf === true) {\n      this.traceInitIndent++;\n      const indent = new Array(this.traceInitIndent + 1).join(\"\\t\");\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        console.log(`${indent}--> <${phaseDesc}>`);\n      }\n      const { time, value } = timer(phaseImpl);\n      /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */\n      const traceMethod = time > 10 ? console.warn : console.log;\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        traceMethod(`${indent}<-- <${phaseDesc}> time: ${time}ms`);\n      }\n      this.traceInitIndent--;\n      return value;\n    } else {\n      return phaseImpl();\n    }\n  };\n}\n","import { has, isString, isUndefined } from \"lodash-es\";\nimport { Lexer } from \"./lexer_public.js\";\nimport { augmentTokenTypes, tokenStructuredMatcher } from \"./tokens.js\";\nimport { IToken, ITokenConfig, TokenType } from \"@chevrotain/types\";\n\nexport function tokenLabel(tokType: TokenType): string {\n  if (hasTokenLabel(tokType)) {\n    return tokType.LABEL;\n  } else {\n    return tokType.name;\n  }\n}\n\nexport function tokenName(tokType: TokenType): string {\n  return tokType.name;\n}\n\nexport function hasTokenLabel(\n  obj: TokenType,\n): obj is TokenType & Pick<Required<TokenType>, \"LABEL\"> {\n  return isString(obj.LABEL) && obj.LABEL !== \"\";\n}\n\nconst PARENT = \"parent\";\nconst CATEGORIES = \"categories\";\nconst LABEL = \"label\";\nconst GROUP = \"group\";\nconst PUSH_MODE = \"push_mode\";\nconst POP_MODE = \"pop_mode\";\nconst LONGER_ALT = \"longer_alt\";\nconst LINE_BREAKS = \"line_breaks\";\nconst START_CHARS_HINT = \"start_chars_hint\";\n\nexport function createToken(config: ITokenConfig): TokenType {\n  return createTokenInternal(config);\n}\n\nfunction createTokenInternal(config: ITokenConfig): TokenType {\n  const pattern = config.pattern;\n\n  const tokenType: TokenType = <any>{};\n  tokenType.name = config.name;\n\n  if (!isUndefined(pattern)) {\n    tokenType.PATTERN = pattern;\n  }\n\n  if (has(config, PARENT)) {\n    throw (\n      \"The parent property is no longer supported.\\n\" +\n      \"See: https://github.com/chevrotain/chevrotain/issues/564#issuecomment-349062346 for details.\"\n    );\n  }\n\n  if (has(config, CATEGORIES)) {\n    // casting to ANY as this will be fixed inside `augmentTokenTypes``\n    tokenType.CATEGORIES = <any>config[CATEGORIES];\n  }\n\n  augmentTokenTypes([tokenType]);\n\n  if (has(config, LABEL)) {\n    tokenType.LABEL = config[LABEL];\n  }\n\n  if (has(config, GROUP)) {\n    tokenType.GROUP = config[GROUP];\n  }\n\n  if (has(config, POP_MODE)) {\n    tokenType.POP_MODE = config[POP_MODE];\n  }\n\n  if (has(config, PUSH_MODE)) {\n    tokenType.PUSH_MODE = config[PUSH_MODE];\n  }\n\n  if (has(config, LONGER_ALT)) {\n    tokenType.LONGER_ALT = config[LONGER_ALT];\n  }\n\n  if (has(config, LINE_BREAKS)) {\n    tokenType.LINE_BREAKS = config[LINE_BREAKS];\n  }\n\n  if (has(config, START_CHARS_HINT)) {\n    tokenType.START_CHARS_HINT = config[START_CHARS_HINT];\n  }\n\n  return tokenType;\n}\n\nexport const EOF = createToken({ name: \"EOF\", pattern: Lexer.NA });\naugmentTokenTypes([EOF]);\n\nexport function createTokenInstance(\n  tokType: TokenType,\n  image: string,\n  startOffset: number,\n  endOffset: number,\n  startLine: number,\n  endLine: number,\n  startColumn: number,\n  endColumn: number,\n): IToken {\n  return {\n    image,\n    startOffset,\n    endOffset,\n    startLine,\n    endLine,\n    startColumn,\n    endColumn,\n    tokenTypeIdx: (<any>tokType).tokenTypeIdx,\n    tokenType: tokType,\n  };\n}\n\nexport function tokenMatcher(token: IToken, tokType: TokenType): boolean {\n  return tokenStructuredMatcher(token, tokType);\n}\n","import { hasTokenLabel, tokenLabel } from \"../scan/tokens_public.js\";\nimport { first, map, reduce } from \"lodash-es\";\nimport {\n  Alternation,\n  getProductionDslName,\n  NonTerminal,\n  Rule,\n  Terminal,\n} from \"@chevrotain/gast\";\nimport {\n  IParserErrorMessageProvider,\n  IProductionWithOccurrence,\n  TokenType,\n} from \"@chevrotain/types\";\nimport {\n  IGrammarResolverErrorMessageProvider,\n  IGrammarValidatorErrorMessageProvider,\n} from \"./grammar/types.js\";\n\nexport const defaultParserErrorProvider: IParserErrorMessageProvider = {\n  buildMismatchTokenMessage({ expected, actual, previous, ruleName }): string {\n    const hasLabel = hasTokenLabel(expected);\n    const expectedMsg = hasLabel\n      ? `--> ${tokenLabel(expected)} <--`\n      : `token of type --> ${expected.name} <--`;\n\n    const msg = `Expecting ${expectedMsg} but found --> '${actual.image}' <--`;\n\n    return msg;\n  },\n\n  buildNotAllInputParsedMessage({ firstRedundant, ruleName }): string {\n    return \"Redundant input, expecting EOF but found: \" + firstRedundant.image;\n  },\n\n  buildNoViableAltMessage({\n    expectedPathsPerAlt,\n    actual,\n    previous,\n    customUserDescription,\n    ruleName,\n  }): string {\n    const errPrefix = \"Expecting: \";\n    // TODO: issue: No Viable Alternative Error may have incomplete details. #502\n    const actualText = first(actual)!.image;\n    const errSuffix = \"\\nbut found: '\" + actualText + \"'\";\n\n    if (customUserDescription) {\n      return errPrefix + customUserDescription + errSuffix;\n    } else {\n      const allLookAheadPaths = reduce(\n        expectedPathsPerAlt,\n        (result, currAltPaths) => result.concat(currAltPaths),\n        [] as TokenType[][],\n      );\n      const nextValidTokenSequences = map(\n        allLookAheadPaths,\n        (currPath) =>\n          `[${map(currPath, (currTokenType) => tokenLabel(currTokenType)).join(\n            \", \",\n          )}]`,\n      );\n      const nextValidSequenceItems = map(\n        nextValidTokenSequences,\n        (itemMsg, idx) => `  ${idx + 1}. ${itemMsg}`,\n      );\n      const calculatedDescription = `one of these possible Token sequences:\\n${nextValidSequenceItems.join(\n        \"\\n\",\n      )}`;\n\n      return errPrefix + calculatedDescription + errSuffix;\n    }\n  },\n\n  buildEarlyExitMessage({\n    expectedIterationPaths,\n    actual,\n    customUserDescription,\n    ruleName,\n  }): string {\n    const errPrefix = \"Expecting: \";\n    // TODO: issue: No Viable Alternative Error may have incomplete details. #502\n    const actualText = first(actual)!.image;\n    const errSuffix = \"\\nbut found: '\" + actualText + \"'\";\n\n    if (customUserDescription) {\n      return errPrefix + customUserDescription + errSuffix;\n    } else {\n      const nextValidTokenSequences = map(\n        expectedIterationPaths,\n        (currPath) =>\n          `[${map(currPath, (currTokenType) => tokenLabel(currTokenType)).join(\n            \",\",\n          )}]`,\n      );\n      const calculatedDescription =\n        `expecting at least one iteration which starts with one of these possible Token sequences::\\n  ` +\n        `<${nextValidTokenSequences.join(\" ,\")}>`;\n\n      return errPrefix + calculatedDescription + errSuffix;\n    }\n  },\n};\n\nObject.freeze(defaultParserErrorProvider);\n\nexport const defaultGrammarResolverErrorProvider: IGrammarResolverErrorMessageProvider =\n  {\n    buildRuleNotFoundError(\n      topLevelRule: Rule,\n      undefinedRule: NonTerminal,\n    ): string {\n      const msg =\n        \"Invalid grammar, reference to a rule which is not defined: ->\" +\n        undefinedRule.nonTerminalName +\n        \"<-\\n\" +\n        \"inside top level rule: ->\" +\n        topLevelRule.name +\n        \"<-\";\n      return msg;\n    },\n  };\n\nexport const defaultGrammarValidatorErrorProvider: IGrammarValidatorErrorMessageProvider =\n  {\n    buildDuplicateFoundError(\n      topLevelRule: Rule,\n      duplicateProds: IProductionWithOccurrence[],\n    ): string {\n      function getExtraProductionArgument(\n        prod: IProductionWithOccurrence,\n      ): string {\n        if (prod instanceof Terminal) {\n          return prod.terminalType.name;\n        } else if (prod instanceof NonTerminal) {\n          return prod.nonTerminalName;\n        } else {\n          return \"\";\n        }\n      }\n\n      const topLevelName = topLevelRule.name;\n      const duplicateProd = first(duplicateProds)!;\n      const index = duplicateProd.idx;\n      const dslName = getProductionDslName(duplicateProd);\n      const extraArgument = getExtraProductionArgument(duplicateProd);\n\n      const hasExplicitIndex = index > 0;\n      let msg = `->${dslName}${hasExplicitIndex ? index : \"\"}<- ${\n        extraArgument ? `with argument: ->${extraArgument}<-` : \"\"\n      }\n                  appears more than once (${\n                    duplicateProds.length\n                  } times) in the top level rule: ->${topLevelName}<-.                  \n                  For further details see: https://chevrotain.io/docs/FAQ.html#NUMERICAL_SUFFIXES \n                  `;\n\n      // white space trimming time! better to trim afterwards as it allows to use WELL formatted multi line template strings...\n      msg = msg.replace(/[ \\t]+/g, \" \");\n      msg = msg.replace(/\\s\\s+/g, \"\\n\");\n\n      return msg;\n    },\n\n    buildNamespaceConflictError(rule: Rule): string {\n      const errMsg =\n        `Namespace conflict found in grammar.\\n` +\n        `The grammar has both a Terminal(Token) and a Non-Terminal(Rule) named: <${rule.name}>.\\n` +\n        `To resolve this make sure each Terminal and Non-Terminal names are unique\\n` +\n        `This is easy to accomplish by using the convention that Terminal names start with an uppercase letter\\n` +\n        `and Non-Terminal names start with a lower case letter.`;\n\n      return errMsg;\n    },\n\n    buildAlternationPrefixAmbiguityError(options: {\n      topLevelRule: Rule;\n      prefixPath: TokenType[];\n      ambiguityIndices: number[];\n      alternation: Alternation;\n    }): string {\n      const pathMsg = map(options.prefixPath, (currTok) =>\n        tokenLabel(currTok),\n      ).join(\", \");\n      const occurrence =\n        options.alternation.idx === 0 ? \"\" : options.alternation.idx;\n      const errMsg =\n        `Ambiguous alternatives: <${options.ambiguityIndices.join(\n          \" ,\",\n        )}> due to common lookahead prefix\\n` +\n        `in <OR${occurrence}> inside <${options.topLevelRule.name}> Rule,\\n` +\n        `<${pathMsg}> may appears as a prefix path in all these alternatives.\\n` +\n        `See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#COMMON_PREFIX\\n` +\n        `For Further details.`;\n\n      return errMsg;\n    },\n\n    buildAlternationAmbiguityError(options: {\n      topLevelRule: Rule;\n      prefixPath: TokenType[];\n      ambiguityIndices: number[];\n      alternation: Alternation;\n    }): string {\n      const pathMsg = map(options.prefixPath, (currtok) =>\n        tokenLabel(currtok),\n      ).join(\", \");\n      const occurrence =\n        options.alternation.idx === 0 ? \"\" : options.alternation.idx;\n      let currMessage =\n        `Ambiguous Alternatives Detected: <${options.ambiguityIndices.join(\n          \" ,\",\n        )}> in <OR${occurrence}>` +\n        ` inside <${options.topLevelRule.name}> Rule,\\n` +\n        `<${pathMsg}> may appears as a prefix path in all these alternatives.\\n`;\n\n      currMessage =\n        currMessage +\n        `See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#AMBIGUOUS_ALTERNATIVES\\n` +\n        `For Further details.`;\n      return currMessage;\n    },\n\n    buildEmptyRepetitionError(options: {\n      topLevelRule: Rule;\n      repetition: IProductionWithOccurrence;\n    }): string {\n      let dslName = getProductionDslName(options.repetition);\n      if (options.repetition.idx !== 0) {\n        dslName += options.repetition.idx;\n      }\n\n      const errMsg =\n        `The repetition <${dslName}> within Rule <${options.topLevelRule.name}> can never consume any tokens.\\n` +\n        `This could lead to an infinite loop.`;\n\n      return errMsg;\n    },\n\n    // TODO: remove - `errors_public` from nyc.config.js exclude\n    //       once this method is fully removed from this file\n    buildTokenNameError(options: {\n      tokenType: TokenType;\n      expectedPattern: RegExp;\n    }): string {\n      /* istanbul ignore next */\n      return \"deprecated\";\n    },\n\n    buildEmptyAlternationError(options: {\n      topLevelRule: Rule;\n      alternation: Alternation;\n      emptyChoiceIdx: number;\n    }): string {\n      const errMsg =\n        `Ambiguous empty alternative: <${options.emptyChoiceIdx + 1}>` +\n        ` in <OR${options.alternation.idx}> inside <${options.topLevelRule.name}> Rule.\\n` +\n        `Only the last alternative may be an empty alternative.`;\n\n      return errMsg;\n    },\n\n    buildTooManyAlternativesError(options: {\n      topLevelRule: Rule;\n      alternation: Alternation;\n    }): string {\n      const errMsg =\n        `An Alternation cannot have more than 256 alternatives:\\n` +\n        `<OR${options.alternation.idx}> inside <${\n          options.topLevelRule.name\n        }> Rule.\\n has ${\n          options.alternation.definition.length + 1\n        } alternatives.`;\n\n      return errMsg;\n    },\n\n    buildLeftRecursionError(options: {\n      topLevelRule: Rule;\n      leftRecursionPath: Rule[];\n    }): string {\n      const ruleName = options.topLevelRule.name;\n      const pathNames = map(\n        options.leftRecursionPath,\n        (currRule) => currRule.name,\n      );\n      const leftRecursivePath = `${ruleName} --> ${pathNames\n        .concat([ruleName])\n        .join(\" --> \")}`;\n      const errMsg =\n        `Left Recursion found in grammar.\\n` +\n        `rule: <${ruleName}> can be invoked from itself (directly or indirectly)\\n` +\n        `without consuming any Tokens. The grammar path that causes this is: \\n ${leftRecursivePath}\\n` +\n        ` To fix this refactor your grammar to remove the left recursion.\\n` +\n        `see: https://en.wikipedia.org/wiki/LL_parser#Left_factoring.`;\n\n      return errMsg;\n    },\n\n    // TODO: remove - `errors_public` from nyc.config.js exclude\n    //       once this method is fully removed from this file\n    buildInvalidRuleNameError(options: {\n      topLevelRule: Rule;\n      expectedPattern: RegExp;\n    }): string {\n      /* istanbul ignore next */\n      return \"deprecated\";\n    },\n\n    buildDuplicateRuleNameError(options: {\n      topLevelRule: Rule | string;\n      grammarName: string;\n    }): string {\n      let ruleName;\n      if (options.topLevelRule instanceof Rule) {\n        ruleName = options.topLevelRule.name;\n      } else {\n        ruleName = options.topLevelRule;\n      }\n\n      const errMsg = `Duplicate definition, rule: ->${ruleName}<- is already defined in the grammar: ->${options.grammarName}<-`;\n\n      return errMsg;\n    },\n  };\n","import {\n  IParserUnresolvedRefDefinitionError,\n  ParserDefinitionErrorType,\n} from \"../parser/parser.js\";\nimport { forEach, values } from \"lodash-es\";\nimport { GAstVisitor, NonTerminal, Rule } from \"@chevrotain/gast\";\nimport {\n  IGrammarResolverErrorMessageProvider,\n  IParserDefinitionError,\n} from \"./types.js\";\n\nexport function resolveGrammar(\n  topLevels: Record<string, Rule>,\n  errMsgProvider: IGrammarResolverErrorMessageProvider,\n): IParserDefinitionError[] {\n  const refResolver = new GastRefResolverVisitor(topLevels, errMsgProvider);\n  refResolver.resolveRefs();\n  return refResolver.errors;\n}\n\nexport class GastRefResolverVisitor extends GAstVisitor {\n  public errors: IParserUnresolvedRefDefinitionError[] = [];\n  private currTopLevel: Rule;\n\n  constructor(\n    private nameToTopRule: Record<string, Rule>,\n    private errMsgProvider: IGrammarResolverErrorMessageProvider,\n  ) {\n    super();\n  }\n\n  public resolveRefs(): void {\n    forEach(values(this.nameToTopRule), (prod) => {\n      this.currTopLevel = prod;\n      prod.accept(this);\n    });\n  }\n\n  public visitNonTerminal(node: NonTerminal): void {\n    const ref = this.nameToTopRule[node.nonTerminalName];\n\n    if (!ref) {\n      const msg = this.errMsgProvider.buildRuleNotFoundError(\n        this.currTopLevel,\n        node,\n      );\n      this.errors.push({\n        message: msg,\n        type: ParserDefinitionErrorType.UNRESOLVED_SUBRULE_REF,\n        ruleName: this.currTopLevel.name,\n        unresolvedRefName: node.nonTerminalName,\n      });\n    } else {\n      node.referencedRule = ref;\n    }\n  }\n}\n","import baseFlatten from './_baseFlatten.js';\nimport map from './map.js';\n\n/**\n * Creates a flattened array of values by running each element in `collection`\n * thru `iteratee` and flattening the mapped results. The iteratee is invoked\n * with three arguments: (value, index|key, collection).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new flattened array.\n * @example\n *\n * function duplicate(n) {\n *   return [n, n];\n * }\n *\n * _.flatMap([1, 2], duplicate);\n * // => [1, 1, 2, 2]\n */\nfunction flatMap(collection, iteratee) {\n  return baseFlatten(map(collection, iteratee), 1);\n}\n\nexport default flatMap;\n","/**\n * A specialized version of `baseAggregator` for arrays.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction arrayAggregator(array, setter, iteratee, accumulator) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    var value = array[index];\n    setter(accumulator, value, iteratee(value), array);\n  }\n  return accumulator;\n}\n\nexport default arrayAggregator;\n","import baseEach from './_baseEach.js';\n\n/**\n * Aggregates elements of `collection` on `accumulator` with keys transformed\n * by `iteratee` and values set by `setter`.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction baseAggregator(collection, setter, iteratee, accumulator) {\n  baseEach(collection, function(value, key, collection) {\n    setter(accumulator, value, iteratee(value), collection);\n  });\n  return accumulator;\n}\n\nexport default baseAggregator;\n","import arrayAggregator from './_arrayAggregator.js';\nimport baseAggregator from './_baseAggregator.js';\nimport baseIteratee from './_baseIteratee.js';\nimport isArray from './isArray.js';\n\n/**\n * Creates a function like `_.groupBy`.\n *\n * @private\n * @param {Function} setter The function to set accumulator values.\n * @param {Function} [initializer] The accumulator object initializer.\n * @returns {Function} Returns the new aggregator function.\n */\nfunction createAggregator(setter, initializer) {\n  return function(collection, iteratee) {\n    var func = isArray(collection) ? arrayAggregator : baseAggregator,\n        accumulator = initializer ? initializer() : {};\n\n    return func(collection, setter, baseIteratee(iteratee, 2), accumulator);\n  };\n}\n\nexport default createAggregator;\n","import baseAssignValue from './_baseAssignValue.js';\nimport createAggregator from './_createAggregator.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Creates an object composed of keys generated from the results of running\n * each element of `collection` thru `iteratee`. The order of grouped values\n * is determined by the order they occur in `collection`. The corresponding\n * value of each key is an array of elements responsible for generating the\n * key. The iteratee is invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n * @returns {Object} Returns the composed aggregate object.\n * @example\n *\n * _.groupBy([6.1, 4.2, 6.3], Math.floor);\n * // => { '4': [4.2], '6': [6.1, 6.3] }\n *\n * // The `_.property` iteratee shorthand.\n * _.groupBy(['one', 'two', 'three'], 'length');\n * // => { '3': ['one', 'two'], '5': ['three'] }\n */\nvar groupBy = createAggregator(function(result, value, key) {\n  if (hasOwnProperty.call(result, key)) {\n    result[key].push(value);\n  } else {\n    baseAssignValue(result, key, [value]);\n  }\n});\n\nexport default groupBy;\n","import baseSlice from './_baseSlice.js';\nimport toInteger from './toInteger.js';\n\n/**\n * Creates a slice of `array` with `n` elements dropped from the end.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Array\n * @param {Array} array The array to query.\n * @param {number} [n=1] The number of elements to drop.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the slice of `array`.\n * @example\n *\n * _.dropRight([1, 2, 3]);\n * // => [1, 2]\n *\n * _.dropRight([1, 2, 3], 2);\n * // => [1]\n *\n * _.dropRight([1, 2, 3], 5);\n * // => []\n *\n * _.dropRight([1, 2, 3], 0);\n * // => [1, 2, 3]\n */\nfunction dropRight(array, n, guard) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return [];\n  }\n  n = (guard || n === undefined) ? 1 : toInteger(n);\n  n = length - n;\n  return baseSlice(array, 0, n < 0 ? 0 : n);\n}\n\nexport default dropRight;\n","import {\n  clone,\n  drop,\n  dropRight,\n  first as _first,\n  forEach,\n  isEmpty,\n  last,\n} from \"lodash-es\";\nimport { first } from \"./first.js\";\nimport { RestWalker } from \"./rest.js\";\nimport { TokenMatcher } from \"../parser/parser.js\";\nimport {\n  Alternation,\n  Alternative,\n  NonTerminal,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Rule,\n  Terminal,\n} from \"@chevrotain/gast\";\nimport {\n  IGrammarPath,\n  IProduction,\n  ISyntacticContentAssistPath,\n  IToken,\n  ITokenGrammarPath,\n  TokenType,\n} from \"@chevrotain/types\";\n\nexport abstract class AbstractNextPossibleTokensWalker extends RestWalker {\n  protected possibleTokTypes: TokenType[] = [];\n  protected ruleStack: string[];\n  protected occurrenceStack: number[];\n\n  protected nextProductionName = \"\";\n  protected nextProductionOccurrence = 0;\n  protected found = false;\n  protected isAtEndOfPath = false;\n\n  constructor(\n    protected topProd: Rule,\n    protected path: IGrammarPath,\n  ) {\n    super();\n  }\n\n  startWalking(): TokenType[] {\n    this.found = false;\n\n    if (this.path.ruleStack[0] !== this.topProd.name) {\n      throw Error(\"The path does not start with the walker's top Rule!\");\n    }\n\n    // immutable for the win\n    this.ruleStack = clone(this.path.ruleStack).reverse(); // intelij bug requires assertion\n    this.occurrenceStack = clone(this.path.occurrenceStack).reverse(); // intelij bug requires assertion\n\n    // already verified that the first production is valid, we now seek the 2nd production\n    this.ruleStack.pop();\n    this.occurrenceStack.pop();\n\n    this.updateExpectedNext();\n    this.walk(this.topProd);\n\n    return this.possibleTokTypes;\n  }\n\n  walk(\n    prod: { definition: IProduction[] },\n    prevRest: IProduction[] = [],\n  ): void {\n    // stop scanning once we found the path\n    if (!this.found) {\n      super.walk(prod, prevRest);\n    }\n  }\n\n  walkProdRef(\n    refProd: NonTerminal,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // found the next production, need to keep walking in it\n    if (\n      refProd.referencedRule.name === this.nextProductionName &&\n      refProd.idx === this.nextProductionOccurrence\n    ) {\n      const fullRest = currRest.concat(prevRest);\n      this.updateExpectedNext();\n      this.walk(refProd.referencedRule, <any>fullRest);\n    }\n  }\n\n  updateExpectedNext(): void {\n    // need to consume the Terminal\n    if (isEmpty(this.ruleStack)) {\n      // must reset nextProductionXXX to avoid walking down another Top Level production while what we are\n      // really seeking is the last Terminal...\n      this.nextProductionName = \"\";\n      this.nextProductionOccurrence = 0;\n      this.isAtEndOfPath = true;\n    } else {\n      this.nextProductionName = this.ruleStack.pop()!;\n      this.nextProductionOccurrence = this.occurrenceStack.pop()!;\n    }\n  }\n}\n\nexport class NextAfterTokenWalker extends AbstractNextPossibleTokensWalker {\n  private nextTerminalName = \"\";\n  private nextTerminalOccurrence = 0;\n\n  constructor(\n    topProd: Rule,\n    protected path: ITokenGrammarPath,\n  ) {\n    super(topProd, path);\n    this.nextTerminalName = this.path.lastTok.name;\n    this.nextTerminalOccurrence = this.path.lastTokOccurrence;\n  }\n\n  walkTerminal(\n    terminal: Terminal,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (\n      this.isAtEndOfPath &&\n      terminal.terminalType.name === this.nextTerminalName &&\n      terminal.idx === this.nextTerminalOccurrence &&\n      !this.found\n    ) {\n      const fullRest = currRest.concat(prevRest);\n      const restProd = new Alternative({ definition: fullRest });\n      this.possibleTokTypes = first(restProd);\n      this.found = true;\n    }\n  }\n}\n\nexport type AlternativesFirstTokens = TokenType[][];\n\nexport interface IFirstAfterRepetition {\n  token: TokenType | undefined;\n  occurrence: number | undefined;\n  isEndOfRule: boolean | undefined;\n}\n\n/**\n * This walker only \"walks\" a single \"TOP\" level in the Grammar Ast, this means\n * it never \"follows\" production refs\n */\nexport class AbstractNextTerminalAfterProductionWalker extends RestWalker {\n  protected result: IFirstAfterRepetition = {\n    token: undefined,\n    occurrence: undefined,\n    isEndOfRule: undefined,\n  };\n\n  constructor(\n    protected topRule: Rule,\n    protected occurrence: number,\n  ) {\n    super();\n  }\n\n  startWalking(): IFirstAfterRepetition {\n    this.walk(this.topRule);\n    return this.result;\n  }\n}\n\nexport class NextTerminalAfterManyWalker extends AbstractNextTerminalAfterProductionWalker {\n  walkMany(\n    manyProd: Repetition,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (manyProd.idx === this.occurrence) {\n      const firstAfterMany = _first(currRest.concat(prevRest));\n      this.result.isEndOfRule = firstAfterMany === undefined;\n      if (firstAfterMany instanceof Terminal) {\n        this.result.token = firstAfterMany.terminalType;\n        this.result.occurrence = firstAfterMany.idx;\n      }\n    } else {\n      super.walkMany(manyProd, currRest, prevRest);\n    }\n  }\n}\n\nexport class NextTerminalAfterManySepWalker extends AbstractNextTerminalAfterProductionWalker {\n  walkManySep(\n    manySepProd: RepetitionWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (manySepProd.idx === this.occurrence) {\n      const firstAfterManySep = _first(currRest.concat(prevRest));\n      this.result.isEndOfRule = firstAfterManySep === undefined;\n      if (firstAfterManySep instanceof Terminal) {\n        this.result.token = firstAfterManySep.terminalType;\n        this.result.occurrence = firstAfterManySep.idx;\n      }\n    } else {\n      super.walkManySep(manySepProd, currRest, prevRest);\n    }\n  }\n}\n\nexport class NextTerminalAfterAtLeastOneWalker extends AbstractNextTerminalAfterProductionWalker {\n  walkAtLeastOne(\n    atLeastOneProd: RepetitionMandatory,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (atLeastOneProd.idx === this.occurrence) {\n      const firstAfterAtLeastOne = _first(currRest.concat(prevRest));\n      this.result.isEndOfRule = firstAfterAtLeastOne === undefined;\n      if (firstAfterAtLeastOne instanceof Terminal) {\n        this.result.token = firstAfterAtLeastOne.terminalType;\n        this.result.occurrence = firstAfterAtLeastOne.idx;\n      }\n    } else {\n      super.walkAtLeastOne(atLeastOneProd, currRest, prevRest);\n    }\n  }\n}\n\n// TODO: reduce code duplication in the AfterWalkers\nexport class NextTerminalAfterAtLeastOneSepWalker extends AbstractNextTerminalAfterProductionWalker {\n  walkAtLeastOneSep(\n    atleastOneSepProd: RepetitionMandatoryWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (atleastOneSepProd.idx === this.occurrence) {\n      const firstAfterfirstAfterAtLeastOneSep = _first(\n        currRest.concat(prevRest),\n      );\n      this.result.isEndOfRule = firstAfterfirstAfterAtLeastOneSep === undefined;\n      if (firstAfterfirstAfterAtLeastOneSep instanceof Terminal) {\n        this.result.token = firstAfterfirstAfterAtLeastOneSep.terminalType;\n        this.result.occurrence = firstAfterfirstAfterAtLeastOneSep.idx;\n      }\n    } else {\n      super.walkAtLeastOneSep(atleastOneSepProd, currRest, prevRest);\n    }\n  }\n}\n\nexport interface PartialPathAndSuffixes {\n  partialPath: TokenType[];\n  suffixDef: IProduction[];\n}\n\nexport function possiblePathsFrom(\n  targetDef: IProduction[],\n  maxLength: number,\n  currPath: TokenType[] = [],\n): PartialPathAndSuffixes[] {\n  // avoid side effects\n  currPath = clone(currPath);\n  let result: PartialPathAndSuffixes[] = [];\n  let i = 0;\n\n  // TODO: avoid inner funcs\n  function remainingPathWith(nextDef: IProduction[]) {\n    return nextDef.concat(drop(targetDef, i + 1));\n  }\n\n  // TODO: avoid inner funcs\n  function getAlternativesForProd(definition: IProduction[]) {\n    const alternatives = possiblePathsFrom(\n      remainingPathWith(definition),\n      maxLength,\n      currPath,\n    );\n    return result.concat(alternatives);\n  }\n\n  /**\n   * Mandatory productions will halt the loop as the paths computed from their recursive calls will already contain the\n   * following (rest) of the targetDef.\n   *\n   * For optional productions (Option/Repetition/...) the loop will continue to represent the paths that do not include the\n   * the optional production.\n   */\n  while (currPath.length < maxLength && i < targetDef.length) {\n    const prod = targetDef[i];\n\n    /* istanbul ignore else */\n    if (prod instanceof Alternative) {\n      return getAlternativesForProd(prod.definition);\n    } else if (prod instanceof NonTerminal) {\n      return getAlternativesForProd(prod.definition);\n    } else if (prod instanceof Option) {\n      result = getAlternativesForProd(prod.definition);\n    } else if (prod instanceof RepetitionMandatory) {\n      const newDef = prod.definition.concat([\n        new Repetition({\n          definition: prod.definition,\n        }),\n      ]);\n      return getAlternativesForProd(newDef);\n    } else if (prod instanceof RepetitionMandatoryWithSeparator) {\n      const newDef = [\n        new Alternative({ definition: prod.definition }),\n        new Repetition({\n          definition: [new Terminal({ terminalType: prod.separator })].concat(\n            <any>prod.definition,\n          ),\n        }),\n      ];\n      return getAlternativesForProd(newDef);\n    } else if (prod instanceof RepetitionWithSeparator) {\n      const newDef = prod.definition.concat([\n        new Repetition({\n          definition: [new Terminal({ terminalType: prod.separator })].concat(\n            <any>prod.definition,\n          ),\n        }),\n      ]);\n      result = getAlternativesForProd(newDef);\n    } else if (prod instanceof Repetition) {\n      const newDef = prod.definition.concat([\n        new Repetition({\n          definition: prod.definition,\n        }),\n      ]);\n      result = getAlternativesForProd(newDef);\n    } else if (prod instanceof Alternation) {\n      forEach(prod.definition, (currAlt) => {\n        // TODO: this is a limited check for empty alternatives\n        //   It would prevent a common case of infinite loops during parser initialization.\n        //   However **in-directly** empty alternatives may still cause issues.\n        if (isEmpty(currAlt.definition) === false) {\n          result = getAlternativesForProd(currAlt.definition);\n        }\n      });\n      return result;\n    } else if (prod instanceof Terminal) {\n      currPath.push(prod.terminalType);\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n\n    i++;\n  }\n  result.push({\n    partialPath: currPath,\n    suffixDef: drop(targetDef, i),\n  });\n\n  return result;\n}\n\ninterface IPathToExamine {\n  idx: number;\n  def: IProduction[];\n  ruleStack: string[];\n  occurrenceStack: number[];\n}\n\nexport function nextPossibleTokensAfter(\n  initialDef: IProduction[],\n  tokenVector: IToken[],\n  tokMatcher: TokenMatcher,\n  maxLookAhead: number,\n): ISyntacticContentAssistPath[] {\n  const EXIT_NON_TERMINAL: any = \"EXIT_NONE_TERMINAL\";\n  // to avoid creating a new Array each time.\n  const EXIT_NON_TERMINAL_ARR = [EXIT_NON_TERMINAL];\n  const EXIT_ALTERNATIVE: any = \"EXIT_ALTERNATIVE\";\n  let foundCompletePath = false;\n\n  const tokenVectorLength = tokenVector.length;\n  const minimalAlternativesIndex = tokenVectorLength - maxLookAhead - 1;\n\n  const result: ISyntacticContentAssistPath[] = [];\n\n  const possiblePaths: IPathToExamine[] = [];\n  possiblePaths.push({\n    idx: -1,\n    def: initialDef,\n    ruleStack: [],\n    occurrenceStack: [],\n  });\n\n  while (!isEmpty(possiblePaths)) {\n    const currPath = possiblePaths.pop()!;\n\n    // skip alternatives if no more results can be found (assuming deterministic grammar with fixed lookahead)\n    if (currPath === EXIT_ALTERNATIVE) {\n      if (\n        foundCompletePath &&\n        last(possiblePaths)!.idx <= minimalAlternativesIndex\n      ) {\n        // remove irrelevant alternative\n        possiblePaths.pop();\n      }\n      continue;\n    }\n\n    const currDef = currPath.def;\n    const currIdx = currPath.idx;\n    const currRuleStack = currPath.ruleStack;\n    const currOccurrenceStack = currPath.occurrenceStack;\n\n    // For Example: an empty path could exist in a valid grammar in the case of an EMPTY_ALT\n    if (isEmpty(currDef)) {\n      continue;\n    }\n\n    const prod = currDef[0];\n    /* istanbul ignore else */\n    if (prod === EXIT_NON_TERMINAL) {\n      const nextPath = {\n        idx: currIdx,\n        def: drop(currDef),\n        ruleStack: dropRight(currRuleStack),\n        occurrenceStack: dropRight(currOccurrenceStack),\n      };\n      possiblePaths.push(nextPath);\n    } else if (prod instanceof Terminal) {\n      /* istanbul ignore else */\n      if (currIdx < tokenVectorLength - 1) {\n        const nextIdx = currIdx + 1;\n        const actualToken = tokenVector[nextIdx];\n        if (tokMatcher!(actualToken, prod.terminalType)) {\n          const nextPath = {\n            idx: nextIdx,\n            def: drop(currDef),\n            ruleStack: currRuleStack,\n            occurrenceStack: currOccurrenceStack,\n          };\n          possiblePaths.push(nextPath);\n        }\n        // end of the line\n      } else if (currIdx === tokenVectorLength - 1) {\n        // IGNORE ABOVE ELSE\n        result.push({\n          nextTokenType: prod.terminalType,\n          nextTokenOccurrence: prod.idx,\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack,\n        });\n        foundCompletePath = true;\n      } else {\n        throw Error(\"non exhaustive match\");\n      }\n    } else if (prod instanceof NonTerminal) {\n      const newRuleStack = clone(currRuleStack);\n      newRuleStack.push(prod.nonTerminalName);\n\n      const newOccurrenceStack = clone(currOccurrenceStack);\n      newOccurrenceStack.push(prod.idx);\n\n      const nextPath = {\n        idx: currIdx,\n        def: prod.definition.concat(EXIT_NON_TERMINAL_ARR, drop(currDef)),\n        ruleStack: newRuleStack,\n        occurrenceStack: newOccurrenceStack,\n      };\n      possiblePaths.push(nextPath);\n    } else if (prod instanceof Option) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      const nextPathWithout = {\n        idx: currIdx,\n        def: drop(currDef),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPathWithout);\n      // required marker to avoid backtracking paths whose higher priority alternatives already matched\n      possiblePaths.push(EXIT_ALTERNATIVE);\n\n      const nextPathWith = {\n        idx: currIdx,\n        def: prod.definition.concat(drop(currDef)),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPathWith);\n    } else if (prod instanceof RepetitionMandatory) {\n      // TODO:(THE NEW operators here take a while...) (convert once?)\n      const secondIteration = new Repetition({\n        definition: prod.definition,\n        idx: prod.idx,\n      });\n      const nextDef = prod.definition.concat([secondIteration], drop(currDef));\n      const nextPath = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPath);\n    } else if (prod instanceof RepetitionMandatoryWithSeparator) {\n      // TODO:(THE NEW operators here take a while...) (convert once?)\n      const separatorGast = new Terminal({\n        terminalType: prod.separator,\n      });\n      const secondIteration = new Repetition({\n        definition: [<any>separatorGast].concat(prod.definition),\n        idx: prod.idx,\n      });\n      const nextDef = prod.definition.concat([secondIteration], drop(currDef));\n      const nextPath = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPath);\n    } else if (prod instanceof RepetitionWithSeparator) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      const nextPathWithout = {\n        idx: currIdx,\n        def: drop(currDef),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPathWithout);\n      // required marker to avoid backtracking paths whose higher priority alternatives already matched\n      possiblePaths.push(EXIT_ALTERNATIVE);\n\n      const separatorGast = new Terminal({\n        terminalType: prod.separator,\n      });\n      const nthRepetition = new Repetition({\n        definition: [<any>separatorGast].concat(prod.definition),\n        idx: prod.idx,\n      });\n      const nextDef = prod.definition.concat([nthRepetition], drop(currDef));\n      const nextPathWith = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPathWith);\n    } else if (prod instanceof Repetition) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      const nextPathWithout = {\n        idx: currIdx,\n        def: drop(currDef),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPathWithout);\n      // required marker to avoid backtracking paths whose higher priority alternatives already matched\n      possiblePaths.push(EXIT_ALTERNATIVE);\n\n      // TODO: an empty repetition will cause infinite loops here, will the parser detect this in selfAnalysis?\n      const nthRepetition = new Repetition({\n        definition: prod.definition,\n        idx: prod.idx,\n      });\n      const nextDef = prod.definition.concat([nthRepetition], drop(currDef));\n      const nextPathWith = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPathWith);\n    } else if (prod instanceof Alternation) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      for (let i = prod.definition.length - 1; i >= 0; i--) {\n        const currAlt: any = prod.definition[i];\n        const currAltPath = {\n          idx: currIdx,\n          def: currAlt.definition.concat(drop(currDef)),\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack,\n        };\n        possiblePaths.push(currAltPath);\n        possiblePaths.push(EXIT_ALTERNATIVE);\n      }\n    } else if (prod instanceof Alternative) {\n      possiblePaths.push({\n        idx: currIdx,\n        def: prod.definition.concat(drop(currDef)),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      });\n    } else if (prod instanceof Rule) {\n      // last because we should only encounter at most a single one of these per invocation.\n      possiblePaths.push(\n        expandTopLevelRule(prod, currIdx, currRuleStack, currOccurrenceStack),\n      );\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n  }\n  return result;\n}\n\nfunction expandTopLevelRule(\n  topRule: Rule,\n  currIdx: number,\n  currRuleStack: string[],\n  currOccurrenceStack: number[],\n): IPathToExamine {\n  const newRuleStack = clone(currRuleStack);\n  newRuleStack.push(topRule.name);\n\n  const newCurrOccurrenceStack = clone(currOccurrenceStack);\n  // top rule is always assumed to have been called with occurrence index 1\n  newCurrOccurrenceStack.push(1);\n\n  return {\n    idx: currIdx,\n    def: topRule.definition,\n    ruleStack: newRuleStack,\n    occurrenceStack: newCurrOccurrenceStack,\n  };\n}\n","import { every, flatten, forEach, has, isEmpty, map, reduce } from \"lodash-es\";\nimport { possiblePathsFrom } from \"./interpreter.js\";\nimport { RestWalker } from \"./rest.js\";\nimport { Predicate, TokenMatcher } from \"../parser/parser.js\";\nimport {\n  tokenStructuredMatcher,\n  tokenStructuredMatcherNoCategories,\n} from \"../../scan/tokens.js\";\nimport {\n  Alternation,\n  Alternative as AlternativeGAST,\n  GAstVisitor,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n} from \"@chevrotain/gast\";\nimport {\n  BaseParser,\n  IOrAlt,\n  IProduction,\n  IProductionWithOccurrence,\n  LookaheadProductionType,\n  LookaheadSequence,\n  Rule,\n  TokenType,\n} from \"@chevrotain/types\";\n\nexport enum PROD_TYPE {\n  OPTION,\n  REPETITION,\n  REPETITION_MANDATORY,\n  REPETITION_MANDATORY_WITH_SEPARATOR,\n  REPETITION_WITH_SEPARATOR,\n  ALTERNATION,\n}\n\nexport function getProdType(\n  prod: IProduction | LookaheadProductionType,\n): PROD_TYPE {\n  /* istanbul ignore else */\n  if (prod instanceof Option || prod === \"Option\") {\n    return PROD_TYPE.OPTION;\n  } else if (prod instanceof Repetition || prod === \"Repetition\") {\n    return PROD_TYPE.REPETITION;\n  } else if (\n    prod instanceof RepetitionMandatory ||\n    prod === \"RepetitionMandatory\"\n  ) {\n    return PROD_TYPE.REPETITION_MANDATORY;\n  } else if (\n    prod instanceof RepetitionMandatoryWithSeparator ||\n    prod === \"RepetitionMandatoryWithSeparator\"\n  ) {\n    return PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR;\n  } else if (\n    prod instanceof RepetitionWithSeparator ||\n    prod === \"RepetitionWithSeparator\"\n  ) {\n    return PROD_TYPE.REPETITION_WITH_SEPARATOR;\n  } else if (prod instanceof Alternation || prod === \"Alternation\") {\n    return PROD_TYPE.ALTERNATION;\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n\nexport function getLookaheadPaths(options: {\n  occurrence: number;\n  rule: Rule;\n  prodType: LookaheadProductionType;\n  maxLookahead: number;\n}): LookaheadSequence[] {\n  const { occurrence, rule, prodType, maxLookahead } = options;\n  const type = getProdType(prodType);\n  if (type === PROD_TYPE.ALTERNATION) {\n    return getLookaheadPathsForOr(occurrence, rule, maxLookahead);\n  } else {\n    return getLookaheadPathsForOptionalProd(\n      occurrence,\n      rule,\n      type,\n      maxLookahead,\n    );\n  }\n}\n\nexport function buildLookaheadFuncForOr(\n  occurrence: number,\n  ruleGrammar: Rule,\n  maxLookahead: number,\n  hasPredicates: boolean,\n  dynamicTokensEnabled: boolean,\n  laFuncBuilder: Function,\n): (orAlts?: IOrAlt<any>[]) => number | undefined {\n  const lookAheadPaths = getLookaheadPathsForOr(\n    occurrence,\n    ruleGrammar,\n    maxLookahead,\n  );\n\n  const tokenMatcher = areTokenCategoriesNotUsed(lookAheadPaths)\n    ? tokenStructuredMatcherNoCategories\n    : tokenStructuredMatcher;\n\n  return laFuncBuilder(\n    lookAheadPaths,\n    hasPredicates,\n    tokenMatcher,\n    dynamicTokensEnabled,\n  );\n}\n\n/**\n *  When dealing with an Optional production (OPTION/MANY/2nd iteration of AT_LEAST_ONE/...) we need to compare\n *  the lookahead \"inside\" the production and the lookahead immediately \"after\" it in the same top level rule (context free).\n *\n *  Example: given a production:\n *  ABC(DE)?DF\n *\n *  The optional '(DE)?' should only be entered if we see 'DE'. a single Token 'D' is not sufficient to distinguish between the two\n *  alternatives.\n *\n *  @returns A Lookahead function which will return true IFF the parser should parse the Optional production.\n */\nexport function buildLookaheadFuncForOptionalProd(\n  occurrence: number,\n  ruleGrammar: Rule,\n  k: number,\n  dynamicTokensEnabled: boolean,\n  prodType: PROD_TYPE,\n  lookaheadBuilder: (\n    lookAheadSequence: LookaheadSequence,\n    tokenMatcher: TokenMatcher,\n    dynamicTokensEnabled: boolean,\n  ) => () => boolean,\n): () => boolean {\n  const lookAheadPaths = getLookaheadPathsForOptionalProd(\n    occurrence,\n    ruleGrammar,\n    prodType,\n    k,\n  );\n\n  const tokenMatcher = areTokenCategoriesNotUsed(lookAheadPaths)\n    ? tokenStructuredMatcherNoCategories\n    : tokenStructuredMatcher;\n\n  return lookaheadBuilder(\n    lookAheadPaths[0],\n    tokenMatcher,\n    dynamicTokensEnabled,\n  );\n}\n\nexport type Alternative = TokenType[][];\n\nexport function buildAlternativesLookAheadFunc(\n  alts: LookaheadSequence[],\n  hasPredicates: boolean,\n  tokenMatcher: TokenMatcher,\n  dynamicTokensEnabled: boolean,\n): (orAlts: IOrAlt<any>[]) => number | undefined {\n  const numOfAlts = alts.length;\n  const areAllOneTokenLookahead = every(alts, (currAlt) => {\n    return every(currAlt, (currPath) => {\n      return currPath.length === 1;\n    });\n  });\n\n  // This version takes into account the predicates as well.\n  if (hasPredicates) {\n    /**\n     * @returns {number} - The chosen alternative index\n     */\n    return function (\n      this: BaseParser,\n      orAlts: IOrAlt<any>[],\n    ): number | undefined {\n      // unfortunately the predicates must be extracted every single time\n      // as they cannot be cached due to references to parameters(vars) which are no longer valid.\n      // note that in the common case of no predicates, no cpu time will be wasted on this (see else block)\n      const predicates: (Predicate | undefined)[] = map(\n        orAlts,\n        (currAlt) => currAlt.GATE,\n      );\n\n      for (let t = 0; t < numOfAlts; t++) {\n        const currAlt = alts[t];\n        const currNumOfPaths = currAlt.length;\n\n        const currPredicate = predicates[t];\n        if (currPredicate !== undefined && currPredicate.call(this) === false) {\n          // if the predicate does not match there is no point in checking the paths\n          continue;\n        }\n        nextPath: for (let j = 0; j < currNumOfPaths; j++) {\n          const currPath = currAlt[j];\n          const currPathLength = currPath.length;\n          for (let i = 0; i < currPathLength; i++) {\n            const nextToken = this.LA(i + 1);\n            if (tokenMatcher(nextToken, currPath[i]) === false) {\n              // mismatch in current path\n              // try the next pth\n              continue nextPath;\n            }\n          }\n          // found a full path that matches.\n          // this will also work for an empty ALT as the loop will be skipped\n          return t;\n        }\n        // none of the paths for the current alternative matched\n        // try the next alternative\n      }\n      // none of the alternatives could be matched\n      return undefined;\n    };\n  } else if (areAllOneTokenLookahead && !dynamicTokensEnabled) {\n    // optimized (common) case of all the lookaheads paths requiring only\n    // a single token lookahead. These Optimizations cannot work if dynamically defined Tokens are used.\n    const singleTokenAlts = map(alts, (currAlt) => {\n      return flatten(currAlt);\n    });\n\n    const choiceToAlt = reduce(\n      singleTokenAlts,\n      (result, currAlt, idx) => {\n        forEach(currAlt, (currTokType) => {\n          if (!has(result, currTokType.tokenTypeIdx!)) {\n            result[currTokType.tokenTypeIdx!] = idx;\n          }\n          forEach(currTokType.categoryMatches!, (currExtendingType) => {\n            if (!has(result, currExtendingType)) {\n              result[currExtendingType] = idx;\n            }\n          });\n        });\n        return result;\n      },\n      {} as Record<number, number>,\n    );\n\n    /**\n     * @returns {number} - The chosen alternative index\n     */\n    return function (this: BaseParser): number {\n      const nextToken = this.LA(1);\n      return choiceToAlt[nextToken.tokenTypeIdx];\n    };\n  } else {\n    // optimized lookahead without needing to check the predicates at all.\n    // this causes code duplication which is intentional to improve performance.\n    /**\n     * @returns {number} - The chosen alternative index\n     */\n    return function (this: BaseParser): number | undefined {\n      for (let t = 0; t < numOfAlts; t++) {\n        const currAlt = alts[t];\n        const currNumOfPaths = currAlt.length;\n        nextPath: for (let j = 0; j < currNumOfPaths; j++) {\n          const currPath = currAlt[j];\n          const currPathLength = currPath.length;\n          for (let i = 0; i < currPathLength; i++) {\n            const nextToken = this.LA(i + 1);\n            if (tokenMatcher(nextToken, currPath[i]) === false) {\n              // mismatch in current path\n              // try the next pth\n              continue nextPath;\n            }\n          }\n          // found a full path that matches.\n          // this will also work for an empty ALT as the loop will be skipped\n          return t;\n        }\n        // none of the paths for the current alternative matched\n        // try the next alternative\n      }\n      // none of the alternatives could be matched\n      return undefined;\n    };\n  }\n}\n\nexport function buildSingleAlternativeLookaheadFunction(\n  alt: LookaheadSequence,\n  tokenMatcher: TokenMatcher,\n  dynamicTokensEnabled: boolean,\n): () => boolean {\n  const areAllOneTokenLookahead = every(alt, (currPath) => {\n    return currPath.length === 1;\n  });\n\n  const numOfPaths = alt.length;\n\n  // optimized (common) case of all the lookaheads paths requiring only\n  // a single token lookahead.\n  if (areAllOneTokenLookahead && !dynamicTokensEnabled) {\n    const singleTokensTypes = flatten(alt);\n\n    if (\n      singleTokensTypes.length === 1 &&\n      isEmpty((<any>singleTokensTypes[0]).categoryMatches)\n    ) {\n      const expectedTokenType = singleTokensTypes[0];\n      const expectedTokenUniqueKey = (<any>expectedTokenType).tokenTypeIdx;\n\n      return function (this: BaseParser): boolean {\n        return this.LA(1).tokenTypeIdx === expectedTokenUniqueKey;\n      };\n    } else {\n      const choiceToAlt = reduce(\n        singleTokensTypes,\n        (result, currTokType, idx) => {\n          result[currTokType.tokenTypeIdx!] = true;\n          forEach(currTokType.categoryMatches!, (currExtendingType) => {\n            result[currExtendingType] = true;\n          });\n          return result;\n        },\n        [] as boolean[],\n      );\n\n      return function (this: BaseParser): boolean {\n        const nextToken = this.LA(1);\n        return choiceToAlt[nextToken.tokenTypeIdx] === true;\n      };\n    }\n  } else {\n    return function (this: BaseParser): boolean {\n      nextPath: for (let j = 0; j < numOfPaths; j++) {\n        const currPath = alt[j];\n        const currPathLength = currPath.length;\n        for (let i = 0; i < currPathLength; i++) {\n          const nextToken = this.LA(i + 1);\n          if (tokenMatcher(nextToken, currPath[i]) === false) {\n            // mismatch in current path\n            // try the next pth\n            continue nextPath;\n          }\n        }\n        // found a full path that matches.\n        return true;\n      }\n\n      // none of the paths matched\n      return false;\n    };\n  }\n}\n\nclass RestDefinitionFinderWalker extends RestWalker {\n  private restDef: IProduction[];\n\n  constructor(\n    private topProd: Rule,\n    private targetOccurrence: number,\n    private targetProdType: PROD_TYPE,\n  ) {\n    super();\n  }\n\n  startWalking(): IProduction[] {\n    this.walk(this.topProd);\n    return this.restDef;\n  }\n\n  private checkIsTarget(\n    node: IProductionWithOccurrence,\n    expectedProdType: PROD_TYPE,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): boolean {\n    if (\n      node.idx === this.targetOccurrence &&\n      this.targetProdType === expectedProdType\n    ) {\n      this.restDef = currRest.concat(prevRest);\n      return true;\n    }\n    // performance optimization, do not iterate over the entire Grammar ast after we have found the target\n    return false;\n  }\n\n  walkOption(\n    optionProd: Option,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (!this.checkIsTarget(optionProd, PROD_TYPE.OPTION, currRest, prevRest)) {\n      super.walkOption(optionProd, currRest, prevRest);\n    }\n  }\n\n  walkAtLeastOne(\n    atLeastOneProd: RepetitionMandatory,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (\n      !this.checkIsTarget(\n        atLeastOneProd,\n        PROD_TYPE.REPETITION_MANDATORY,\n        currRest,\n        prevRest,\n      )\n    ) {\n      super.walkOption(atLeastOneProd, currRest, prevRest);\n    }\n  }\n\n  walkAtLeastOneSep(\n    atLeastOneSepProd: RepetitionMandatoryWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (\n      !this.checkIsTarget(\n        atLeastOneSepProd,\n        PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR,\n        currRest,\n        prevRest,\n      )\n    ) {\n      super.walkOption(atLeastOneSepProd, currRest, prevRest);\n    }\n  }\n\n  walkMany(\n    manyProd: Repetition,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (\n      !this.checkIsTarget(manyProd, PROD_TYPE.REPETITION, currRest, prevRest)\n    ) {\n      super.walkOption(manyProd, currRest, prevRest);\n    }\n  }\n\n  walkManySep(\n    manySepProd: RepetitionWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (\n      !this.checkIsTarget(\n        manySepProd,\n        PROD_TYPE.REPETITION_WITH_SEPARATOR,\n        currRest,\n        prevRest,\n      )\n    ) {\n      super.walkOption(manySepProd, currRest, prevRest);\n    }\n  }\n}\n\n/**\n * Returns the definition of a target production in a top level level rule.\n */\nclass InsideDefinitionFinderVisitor extends GAstVisitor {\n  public result: IProduction[] = [];\n\n  constructor(\n    private targetOccurrence: number,\n    private targetProdType: PROD_TYPE,\n    private targetRef?: any,\n  ) {\n    super();\n  }\n\n  private checkIsTarget(\n    node: { definition: IProduction[] } & IProductionWithOccurrence,\n    expectedProdName: PROD_TYPE,\n  ): void {\n    if (\n      node.idx === this.targetOccurrence &&\n      this.targetProdType === expectedProdName &&\n      (this.targetRef === undefined || node === this.targetRef)\n    ) {\n      this.result = node.definition;\n    }\n  }\n\n  public visitOption(node: Option): void {\n    this.checkIsTarget(node, PROD_TYPE.OPTION);\n  }\n\n  public visitRepetition(node: Repetition): void {\n    this.checkIsTarget(node, PROD_TYPE.REPETITION);\n  }\n\n  public visitRepetitionMandatory(node: RepetitionMandatory): void {\n    this.checkIsTarget(node, PROD_TYPE.REPETITION_MANDATORY);\n  }\n\n  public visitRepetitionMandatoryWithSeparator(\n    node: RepetitionMandatoryWithSeparator,\n  ): void {\n    this.checkIsTarget(node, PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR);\n  }\n\n  public visitRepetitionWithSeparator(node: RepetitionWithSeparator): void {\n    this.checkIsTarget(node, PROD_TYPE.REPETITION_WITH_SEPARATOR);\n  }\n\n  public visitAlternation(node: Alternation): void {\n    this.checkIsTarget(node, PROD_TYPE.ALTERNATION);\n  }\n}\n\nfunction initializeArrayOfArrays(size: number): any[][] {\n  const result = new Array(size);\n  for (let i = 0; i < size; i++) {\n    result[i] = [];\n  }\n  return result;\n}\n\n/**\n * A sort of hash function between a Path in the grammar and a string.\n * Note that this returns multiple \"hashes\" to support the scenario of token categories.\n * -  A single path with categories may match multiple **actual** paths.\n */\nfunction pathToHashKeys(path: TokenType[]): string[] {\n  let keys = [\"\"];\n  for (let i = 0; i < path.length; i++) {\n    const tokType = path[i];\n    const longerKeys = [];\n    for (let j = 0; j < keys.length; j++) {\n      const currShorterKey = keys[j];\n      longerKeys.push(currShorterKey + \"_\" + tokType.tokenTypeIdx);\n      for (let t = 0; t < tokType.categoryMatches!.length; t++) {\n        const categoriesKeySuffix = \"_\" + tokType.categoryMatches![t];\n        longerKeys.push(currShorterKey + categoriesKeySuffix);\n      }\n    }\n    keys = longerKeys;\n  }\n  return keys;\n}\n\n/**\n * Imperative style due to being called from a hot spot\n */\nfunction isUniquePrefixHash(\n  altKnownPathsKeys: Record<string, boolean>[],\n  searchPathKeys: string[],\n  idx: number,\n): boolean {\n  for (\n    let currAltIdx = 0;\n    currAltIdx < altKnownPathsKeys.length;\n    currAltIdx++\n  ) {\n    // We only want to test vs the other alternatives\n    if (currAltIdx === idx) {\n      continue;\n    }\n    const otherAltKnownPathsKeys = altKnownPathsKeys[currAltIdx];\n    for (let searchIdx = 0; searchIdx < searchPathKeys.length; searchIdx++) {\n      const searchKey = searchPathKeys[searchIdx];\n      if (otherAltKnownPathsKeys[searchKey] === true) {\n        return false;\n      }\n    }\n  }\n  // None of the SearchPathKeys were found in any of the other alternatives\n  return true;\n}\n\nexport function lookAheadSequenceFromAlternatives(\n  altsDefs: IProduction[],\n  k: number,\n): LookaheadSequence[] {\n  const partialAlts = map(altsDefs, (currAlt) =>\n    possiblePathsFrom([currAlt], 1),\n  );\n  const finalResult = initializeArrayOfArrays(partialAlts.length);\n  const altsHashes = map(partialAlts, (currAltPaths) => {\n    const dict: { [key: string]: boolean } = {};\n    forEach(currAltPaths, (item) => {\n      const keys = pathToHashKeys(item.partialPath);\n      forEach(keys, (currKey) => {\n        dict[currKey] = true;\n      });\n    });\n    return dict;\n  });\n  let newData = partialAlts;\n\n  // maxLookahead loop\n  for (let pathLength = 1; pathLength <= k; pathLength++) {\n    const currDataset = newData;\n    newData = initializeArrayOfArrays(currDataset.length);\n\n    // alternatives loop\n    for (let altIdx = 0; altIdx < currDataset.length; altIdx++) {\n      const currAltPathsAndSuffixes = currDataset[altIdx];\n      // paths in current alternative loop\n      for (\n        let currPathIdx = 0;\n        currPathIdx < currAltPathsAndSuffixes.length;\n        currPathIdx++\n      ) {\n        const currPathPrefix = currAltPathsAndSuffixes[currPathIdx].partialPath;\n        const suffixDef = currAltPathsAndSuffixes[currPathIdx].suffixDef;\n        const prefixKeys = pathToHashKeys(currPathPrefix);\n        const isUnique = isUniquePrefixHash(altsHashes, prefixKeys, altIdx);\n        // End of the line for this path.\n        if (isUnique || isEmpty(suffixDef) || currPathPrefix.length === k) {\n          const currAltResult = finalResult[altIdx];\n          // TODO: Can we implement a containsPath using Maps/Dictionaries?\n          if (containsPath(currAltResult, currPathPrefix) === false) {\n            currAltResult.push(currPathPrefix);\n            // Update all new  keys for the current path.\n            for (let j = 0; j < prefixKeys.length; j++) {\n              const currKey = prefixKeys[j];\n              altsHashes[altIdx][currKey] = true;\n            }\n          }\n        }\n        // Expand longer paths\n        else {\n          const newPartialPathsAndSuffixes = possiblePathsFrom(\n            suffixDef,\n            pathLength + 1,\n            currPathPrefix,\n          );\n          newData[altIdx] = newData[altIdx].concat(newPartialPathsAndSuffixes);\n\n          // Update keys for new known paths\n          forEach(newPartialPathsAndSuffixes, (item) => {\n            const prefixKeys = pathToHashKeys(item.partialPath);\n            forEach(prefixKeys, (key) => {\n              altsHashes[altIdx][key] = true;\n            });\n          });\n        }\n      }\n    }\n  }\n\n  return finalResult;\n}\n\nexport function getLookaheadPathsForOr(\n  occurrence: number,\n  ruleGrammar: Rule,\n  k: number,\n  orProd?: Alternation,\n): LookaheadSequence[] {\n  const visitor = new InsideDefinitionFinderVisitor(\n    occurrence,\n    PROD_TYPE.ALTERNATION,\n    orProd,\n  );\n  ruleGrammar.accept(visitor);\n  return lookAheadSequenceFromAlternatives(visitor.result, k);\n}\n\nexport function getLookaheadPathsForOptionalProd(\n  occurrence: number,\n  ruleGrammar: Rule,\n  prodType: PROD_TYPE,\n  k: number,\n): LookaheadSequence[] {\n  const insideDefVisitor = new InsideDefinitionFinderVisitor(\n    occurrence,\n    prodType,\n  );\n  ruleGrammar.accept(insideDefVisitor);\n  const insideDef = insideDefVisitor.result;\n\n  const afterDefWalker = new RestDefinitionFinderWalker(\n    ruleGrammar,\n    occurrence,\n    prodType,\n  );\n  const afterDef = afterDefWalker.startWalking();\n\n  const insideFlat = new AlternativeGAST({ definition: insideDef });\n  const afterFlat = new AlternativeGAST({ definition: afterDef });\n\n  return lookAheadSequenceFromAlternatives([insideFlat, afterFlat], k);\n}\n\nexport function containsPath(\n  alternative: Alternative,\n  searchPath: TokenType[],\n): boolean {\n  compareOtherPath: for (let i = 0; i < alternative.length; i++) {\n    const otherPath = alternative[i];\n    if (otherPath.length !== searchPath.length) {\n      continue;\n    }\n    for (let j = 0; j < otherPath.length; j++) {\n      const searchTok = searchPath[j];\n      const otherTok = otherPath[j];\n\n      const matchingTokens =\n        searchTok === otherTok ||\n        otherTok.categoryMatchesMap![searchTok.tokenTypeIdx!] !== undefined;\n      if (matchingTokens === false) {\n        continue compareOtherPath;\n      }\n    }\n    return true;\n  }\n\n  return false;\n}\n\nexport function isStrictPrefixOfPath(\n  prefix: TokenType[],\n  other: TokenType[],\n): boolean {\n  return (\n    prefix.length < other.length &&\n    every(prefix, (tokType, idx) => {\n      const otherTokType = other[idx];\n      return (\n        tokType === otherTokType ||\n        otherTokType.categoryMatchesMap![tokType.tokenTypeIdx!]\n      );\n    })\n  );\n}\n\nexport function areTokenCategoriesNotUsed(\n  lookAheadPaths: LookaheadSequence[],\n): boolean {\n  return every(lookAheadPaths, (singleAltPaths) =>\n    every(singleAltPaths, (singlePath) =>\n      every(singlePath, (token) => isEmpty(token.categoryMatches!)),\n    ),\n  );\n}\n","import {\n  clone,\n  compact,\n  difference,\n  drop,\n  dropRight,\n  filter,\n  first,\n  flatMap,\n  flatten,\n  forEach,\n  groupBy,\n  includes,\n  isEmpty,\n  map,\n  pickBy,\n  reduce,\n  reject,\n  values,\n} from \"lodash-es\";\nimport {\n  IParserAmbiguousAlternativesDefinitionError,\n  IParserDuplicatesDefinitionError,\n  IParserEmptyAlternativeDefinitionError,\n  ParserDefinitionErrorType,\n} from \"../parser/parser.js\";\nimport {\n  Alternation,\n  Alternative as AlternativeGAST,\n  GAstVisitor,\n  getProductionDslName,\n  isOptionalProd,\n  NonTerminal,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Terminal,\n} from \"@chevrotain/gast\";\nimport {\n  Alternative,\n  containsPath,\n  getLookaheadPathsForOptionalProd,\n  getLookaheadPathsForOr,\n  getProdType,\n  isStrictPrefixOfPath,\n} from \"./lookahead.js\";\nimport { nextPossibleTokensAfter } from \"./interpreter.js\";\nimport {\n  ILookaheadStrategy,\n  IProduction,\n  IProductionWithOccurrence,\n  Rule,\n  TokenType,\n} from \"@chevrotain/types\";\nimport {\n  IGrammarValidatorErrorMessageProvider,\n  IParserDefinitionError,\n} from \"./types.js\";\nimport { tokenStructuredMatcher } from \"../../scan/tokens.js\";\n\nexport function validateLookahead(options: {\n  lookaheadStrategy: ILookaheadStrategy;\n  rules: Rule[];\n  tokenTypes: TokenType[];\n  grammarName: string;\n}): IParserDefinitionError[] {\n  const lookaheadValidationErrorMessages = options.lookaheadStrategy.validate({\n    rules: options.rules,\n    tokenTypes: options.tokenTypes,\n    grammarName: options.grammarName,\n  });\n  return map(lookaheadValidationErrorMessages, (errorMessage) => ({\n    type: ParserDefinitionErrorType.CUSTOM_LOOKAHEAD_VALIDATION,\n    ...errorMessage,\n  }));\n}\n\nexport function validateGrammar(\n  topLevels: Rule[],\n  tokenTypes: TokenType[],\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n  grammarName: string,\n): IParserDefinitionError[] {\n  const duplicateErrors: IParserDefinitionError[] = flatMap(\n    topLevels,\n    (currTopLevel) =>\n      validateDuplicateProductions(currTopLevel, errMsgProvider),\n  );\n\n  const termsNamespaceConflictErrors = checkTerminalAndNoneTerminalsNameSpace(\n    topLevels,\n    tokenTypes,\n    errMsgProvider,\n  );\n\n  const tooManyAltsErrors = flatMap(topLevels, (curRule) =>\n    validateTooManyAlts(curRule, errMsgProvider),\n  );\n\n  const duplicateRulesError = flatMap(topLevels, (curRule) =>\n    validateRuleDoesNotAlreadyExist(\n      curRule,\n      topLevels,\n      grammarName,\n      errMsgProvider,\n    ),\n  );\n\n  return duplicateErrors.concat(\n    termsNamespaceConflictErrors,\n    tooManyAltsErrors,\n    duplicateRulesError,\n  );\n}\n\nfunction validateDuplicateProductions(\n  topLevelRule: Rule,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserDuplicatesDefinitionError[] {\n  const collectorVisitor = new OccurrenceValidationCollector();\n  topLevelRule.accept(collectorVisitor);\n  const allRuleProductions = collectorVisitor.allProductions;\n\n  const productionGroups = groupBy(\n    allRuleProductions,\n    identifyProductionForDuplicates,\n  );\n\n  const duplicates: any = pickBy(productionGroups, (currGroup) => {\n    return currGroup.length > 1;\n  });\n\n  const errors = map(values(duplicates), (currDuplicates: any) => {\n    const firstProd: any = first(currDuplicates);\n    const msg = errMsgProvider.buildDuplicateFoundError(\n      topLevelRule,\n      currDuplicates,\n    );\n    const dslName = getProductionDslName(firstProd);\n    const defError: IParserDuplicatesDefinitionError = {\n      message: msg,\n      type: ParserDefinitionErrorType.DUPLICATE_PRODUCTIONS,\n      ruleName: topLevelRule.name,\n      dslName: dslName,\n      occurrence: firstProd.idx,\n    };\n\n    const param = getExtraProductionArgument(firstProd);\n    if (param) {\n      defError.parameter = param;\n    }\n\n    return defError;\n  });\n  return errors;\n}\n\nexport function identifyProductionForDuplicates(\n  prod: IProductionWithOccurrence,\n): string {\n  return `${getProductionDslName(prod)}_#_${\n    prod.idx\n  }_#_${getExtraProductionArgument(prod)}`;\n}\n\nfunction getExtraProductionArgument(prod: IProductionWithOccurrence): string {\n  if (prod instanceof Terminal) {\n    return prod.terminalType.name;\n  } else if (prod instanceof NonTerminal) {\n    return prod.nonTerminalName;\n  } else {\n    return \"\";\n  }\n}\n\nexport class OccurrenceValidationCollector extends GAstVisitor {\n  public allProductions: IProductionWithOccurrence[] = [];\n\n  public visitNonTerminal(subrule: NonTerminal): void {\n    this.allProductions.push(subrule);\n  }\n\n  public visitOption(option: Option): void {\n    this.allProductions.push(option);\n  }\n\n  public visitRepetitionWithSeparator(manySep: RepetitionWithSeparator): void {\n    this.allProductions.push(manySep);\n  }\n\n  public visitRepetitionMandatory(atLeastOne: RepetitionMandatory): void {\n    this.allProductions.push(atLeastOne);\n  }\n\n  public visitRepetitionMandatoryWithSeparator(\n    atLeastOneSep: RepetitionMandatoryWithSeparator,\n  ): void {\n    this.allProductions.push(atLeastOneSep);\n  }\n\n  public visitRepetition(many: Repetition): void {\n    this.allProductions.push(many);\n  }\n\n  public visitAlternation(or: Alternation): void {\n    this.allProductions.push(or);\n  }\n\n  public visitTerminal(terminal: Terminal): void {\n    this.allProductions.push(terminal);\n  }\n}\n\nexport function validateRuleDoesNotAlreadyExist(\n  rule: Rule,\n  allRules: Rule[],\n  className: string,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserDefinitionError[] {\n  const errors = [];\n  const occurrences = reduce(\n    allRules,\n    (result, curRule) => {\n      if (curRule.name === rule.name) {\n        return result + 1;\n      }\n      return result;\n    },\n    0,\n  );\n  if (occurrences > 1) {\n    const errMsg = errMsgProvider.buildDuplicateRuleNameError({\n      topLevelRule: rule,\n      grammarName: className,\n    });\n    errors.push({\n      message: errMsg,\n      type: ParserDefinitionErrorType.DUPLICATE_RULE_NAME,\n      ruleName: rule.name,\n    });\n  }\n\n  return errors;\n}\n\n// TODO: is there anyway to get only the rule names of rules inherited from the super grammars?\n// This is not part of the IGrammarErrorProvider because the validation cannot be performed on\n// The grammar structure, only at runtime.\nexport function validateRuleIsOverridden(\n  ruleName: string,\n  definedRulesNames: string[],\n  className: string,\n): IParserDefinitionError[] {\n  const errors = [];\n  let errMsg;\n\n  if (!includes(definedRulesNames, ruleName)) {\n    errMsg =\n      `Invalid rule override, rule: ->${ruleName}<- cannot be overridden in the grammar: ->${className}<-` +\n      `as it is not defined in any of the super grammars `;\n    errors.push({\n      message: errMsg,\n      type: ParserDefinitionErrorType.INVALID_RULE_OVERRIDE,\n      ruleName: ruleName,\n    });\n  }\n\n  return errors;\n}\n\nexport function validateNoLeftRecursion(\n  topRule: Rule,\n  currRule: Rule,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n  path: Rule[] = [],\n): IParserDefinitionError[] {\n  const errors: IParserDefinitionError[] = [];\n  const nextNonTerminals = getFirstNoneTerminal(currRule.definition);\n  if (isEmpty(nextNonTerminals)) {\n    return [];\n  } else {\n    const ruleName = topRule.name;\n    const foundLeftRecursion = includes(nextNonTerminals, topRule);\n    if (foundLeftRecursion) {\n      errors.push({\n        message: errMsgProvider.buildLeftRecursionError({\n          topLevelRule: topRule,\n          leftRecursionPath: path,\n        }),\n        type: ParserDefinitionErrorType.LEFT_RECURSION,\n        ruleName: ruleName,\n      });\n    }\n\n    // we are only looking for cyclic paths leading back to the specific topRule\n    // other cyclic paths are ignored, we still need this difference to avoid infinite loops...\n    const validNextSteps = difference(nextNonTerminals, path.concat([topRule]));\n    const errorsFromNextSteps = flatMap(validNextSteps, (currRefRule) => {\n      const newPath = clone(path);\n      newPath.push(currRefRule);\n      return validateNoLeftRecursion(\n        topRule,\n        currRefRule,\n        errMsgProvider,\n        newPath,\n      );\n    });\n\n    return errors.concat(errorsFromNextSteps);\n  }\n}\n\nexport function getFirstNoneTerminal(definition: IProduction[]): Rule[] {\n  let result: Rule[] = [];\n  if (isEmpty(definition)) {\n    return result;\n  }\n  const firstProd = first(definition);\n\n  /* istanbul ignore else */\n  if (firstProd instanceof NonTerminal) {\n    result.push(firstProd.referencedRule);\n  } else if (\n    firstProd instanceof AlternativeGAST ||\n    firstProd instanceof Option ||\n    firstProd instanceof RepetitionMandatory ||\n    firstProd instanceof RepetitionMandatoryWithSeparator ||\n    firstProd instanceof RepetitionWithSeparator ||\n    firstProd instanceof Repetition\n  ) {\n    result = result.concat(\n      getFirstNoneTerminal(<IProduction[]>firstProd.definition),\n    );\n  } else if (firstProd instanceof Alternation) {\n    // each sub definition in alternation is a FLAT\n    result = flatten(\n      map(firstProd.definition, (currSubDef) =>\n        getFirstNoneTerminal((<AlternativeGAST>currSubDef).definition),\n      ),\n    );\n  } else if (firstProd instanceof Terminal) {\n    // nothing to see, move along\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n\n  const isFirstOptional = isOptionalProd(firstProd);\n  const hasMore = definition.length > 1;\n  if (isFirstOptional && hasMore) {\n    const rest = drop(definition);\n    return result.concat(getFirstNoneTerminal(rest));\n  } else {\n    return result;\n  }\n}\n\nclass OrCollector extends GAstVisitor {\n  public alternations: Alternation[] = [];\n\n  public visitAlternation(node: Alternation): void {\n    this.alternations.push(node);\n  }\n}\n\nexport function validateEmptyOrAlternative(\n  topLevelRule: Rule,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserEmptyAlternativeDefinitionError[] {\n  const orCollector = new OrCollector();\n  topLevelRule.accept(orCollector);\n  const ors = orCollector.alternations;\n\n  const errors = flatMap<Alternation, IParserEmptyAlternativeDefinitionError>(\n    ors,\n    (currOr) => {\n      const exceptLast = dropRight(currOr.definition);\n      return flatMap(exceptLast, (currAlternative, currAltIdx) => {\n        const possibleFirstInAlt = nextPossibleTokensAfter(\n          [currAlternative],\n          [],\n          tokenStructuredMatcher,\n          1,\n        );\n        if (isEmpty(possibleFirstInAlt)) {\n          return [\n            {\n              message: errMsgProvider.buildEmptyAlternationError({\n                topLevelRule: topLevelRule,\n                alternation: currOr,\n                emptyChoiceIdx: currAltIdx,\n              }),\n              type: ParserDefinitionErrorType.NONE_LAST_EMPTY_ALT,\n              ruleName: topLevelRule.name,\n              occurrence: currOr.idx,\n              alternative: currAltIdx + 1,\n            },\n          ];\n        } else {\n          return [];\n        }\n      });\n    },\n  );\n\n  return errors;\n}\n\nexport function validateAmbiguousAlternationAlternatives(\n  topLevelRule: Rule,\n  globalMaxLookahead: number,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserAmbiguousAlternativesDefinitionError[] {\n  const orCollector = new OrCollector();\n  topLevelRule.accept(orCollector);\n  let ors = orCollector.alternations;\n\n  // New Handling of ignoring ambiguities\n  // - https://github.com/chevrotain/chevrotain/issues/869\n  ors = reject(ors, (currOr) => currOr.ignoreAmbiguities === true);\n\n  const errors = flatMap(ors, (currOr: Alternation) => {\n    const currOccurrence = currOr.idx;\n    const actualMaxLookahead = currOr.maxLookahead || globalMaxLookahead;\n    const alternatives = getLookaheadPathsForOr(\n      currOccurrence,\n      topLevelRule,\n      actualMaxLookahead,\n      currOr,\n    );\n    const altsAmbiguityErrors = checkAlternativesAmbiguities(\n      alternatives,\n      currOr,\n      topLevelRule,\n      errMsgProvider,\n    );\n    const altsPrefixAmbiguityErrors = checkPrefixAlternativesAmbiguities(\n      alternatives,\n      currOr,\n      topLevelRule,\n      errMsgProvider,\n    );\n\n    return altsAmbiguityErrors.concat(altsPrefixAmbiguityErrors);\n  });\n\n  return errors;\n}\n\nexport class RepetitionCollector extends GAstVisitor {\n  public allProductions: (IProductionWithOccurrence & {\n    maxLookahead?: number;\n  })[] = [];\n\n  public visitRepetitionWithSeparator(manySep: RepetitionWithSeparator): void {\n    this.allProductions.push(manySep);\n  }\n\n  public visitRepetitionMandatory(atLeastOne: RepetitionMandatory): void {\n    this.allProductions.push(atLeastOne);\n  }\n\n  public visitRepetitionMandatoryWithSeparator(\n    atLeastOneSep: RepetitionMandatoryWithSeparator,\n  ): void {\n    this.allProductions.push(atLeastOneSep);\n  }\n\n  public visitRepetition(many: Repetition): void {\n    this.allProductions.push(many);\n  }\n}\n\nexport function validateTooManyAlts(\n  topLevelRule: Rule,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserDefinitionError[] {\n  const orCollector = new OrCollector();\n  topLevelRule.accept(orCollector);\n  const ors = orCollector.alternations;\n\n  const errors = flatMap(ors, (currOr) => {\n    if (currOr.definition.length > 255) {\n      return [\n        {\n          message: errMsgProvider.buildTooManyAlternativesError({\n            topLevelRule: topLevelRule,\n            alternation: currOr,\n          }),\n          type: ParserDefinitionErrorType.TOO_MANY_ALTS,\n          ruleName: topLevelRule.name,\n          occurrence: currOr.idx,\n        },\n      ];\n    } else {\n      return [];\n    }\n  });\n\n  return errors;\n}\n\nexport function validateSomeNonEmptyLookaheadPath(\n  topLevelRules: Rule[],\n  maxLookahead: number,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserDefinitionError[] {\n  const errors: IParserDefinitionError[] = [];\n  forEach(topLevelRules, (currTopRule) => {\n    const collectorVisitor = new RepetitionCollector();\n    currTopRule.accept(collectorVisitor);\n    const allRuleProductions = collectorVisitor.allProductions;\n    forEach(allRuleProductions, (currProd) => {\n      const prodType = getProdType(currProd);\n      const actualMaxLookahead = currProd.maxLookahead || maxLookahead;\n      const currOccurrence = currProd.idx;\n      const paths = getLookaheadPathsForOptionalProd(\n        currOccurrence,\n        currTopRule,\n        prodType,\n        actualMaxLookahead,\n      );\n      const pathsInsideProduction = paths[0];\n      if (isEmpty(flatten(pathsInsideProduction))) {\n        const errMsg = errMsgProvider.buildEmptyRepetitionError({\n          topLevelRule: currTopRule,\n          repetition: currProd,\n        });\n        errors.push({\n          message: errMsg,\n          type: ParserDefinitionErrorType.NO_NON_EMPTY_LOOKAHEAD,\n          ruleName: currTopRule.name,\n        });\n      }\n    });\n  });\n\n  return errors;\n}\n\nexport interface IAmbiguityDescriptor {\n  alts: number[];\n  path: TokenType[];\n}\n\nfunction checkAlternativesAmbiguities(\n  alternatives: Alternative[],\n  alternation: Alternation,\n  rule: Rule,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserAmbiguousAlternativesDefinitionError[] {\n  const foundAmbiguousPaths: Alternative = [];\n  const identicalAmbiguities = reduce(\n    alternatives,\n    (result, currAlt, currAltIdx) => {\n      // ignore (skip) ambiguities with this alternative\n      if (alternation.definition[currAltIdx].ignoreAmbiguities === true) {\n        return result;\n      }\n\n      forEach(currAlt, (currPath) => {\n        const altsCurrPathAppearsIn = [currAltIdx];\n        forEach(alternatives, (currOtherAlt, currOtherAltIdx) => {\n          if (\n            currAltIdx !== currOtherAltIdx &&\n            containsPath(currOtherAlt, currPath) &&\n            // ignore (skip) ambiguities with this \"other\" alternative\n            alternation.definition[currOtherAltIdx].ignoreAmbiguities !== true\n          ) {\n            altsCurrPathAppearsIn.push(currOtherAltIdx);\n          }\n        });\n\n        if (\n          altsCurrPathAppearsIn.length > 1 &&\n          !containsPath(foundAmbiguousPaths, currPath)\n        ) {\n          foundAmbiguousPaths.push(currPath);\n          result.push({\n            alts: altsCurrPathAppearsIn,\n            path: currPath,\n          });\n        }\n      });\n      return result;\n    },\n    [] as { alts: number[]; path: TokenType[] }[],\n  );\n\n  const currErrors = map(identicalAmbiguities, (currAmbDescriptor) => {\n    const ambgIndices = map(\n      currAmbDescriptor.alts,\n      (currAltIdx) => currAltIdx + 1,\n    );\n\n    const currMessage = errMsgProvider.buildAlternationAmbiguityError({\n      topLevelRule: rule,\n      alternation: alternation,\n      ambiguityIndices: ambgIndices,\n      prefixPath: currAmbDescriptor.path,\n    });\n\n    return {\n      message: currMessage,\n      type: ParserDefinitionErrorType.AMBIGUOUS_ALTS,\n      ruleName: rule.name,\n      occurrence: alternation.idx,\n      alternatives: currAmbDescriptor.alts,\n    };\n  });\n\n  return currErrors;\n}\n\nexport function checkPrefixAlternativesAmbiguities(\n  alternatives: Alternative[],\n  alternation: Alternation,\n  rule: Rule,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserAmbiguousAlternativesDefinitionError[] {\n  // flatten\n  const pathsAndIndices = reduce(\n    alternatives,\n    (result, currAlt, idx) => {\n      const currPathsAndIdx = map(currAlt, (currPath) => {\n        return { idx: idx, path: currPath };\n      });\n      return result.concat(currPathsAndIdx);\n    },\n    [] as { idx: number; path: TokenType[] }[],\n  );\n\n  const errors = compact(\n    flatMap(pathsAndIndices, (currPathAndIdx) => {\n      const alternativeGast = alternation.definition[currPathAndIdx.idx];\n      // ignore (skip) ambiguities with this alternative\n      if (alternativeGast.ignoreAmbiguities === true) {\n        return [];\n      }\n      const targetIdx = currPathAndIdx.idx;\n      const targetPath = currPathAndIdx.path;\n\n      const prefixAmbiguitiesPathsAndIndices = filter(\n        pathsAndIndices,\n        (searchPathAndIdx) => {\n          // prefix ambiguity can only be created from lower idx (higher priority) path\n          return (\n            // ignore (skip) ambiguities with this \"other\" alternative\n            alternation.definition[searchPathAndIdx.idx].ignoreAmbiguities !==\n              true &&\n            searchPathAndIdx.idx < targetIdx &&\n            // checking for strict prefix because identical lookaheads\n            // will be be detected using a different validation.\n            isStrictPrefixOfPath(searchPathAndIdx.path, targetPath)\n          );\n        },\n      );\n\n      const currPathPrefixErrors = map(\n        prefixAmbiguitiesPathsAndIndices,\n        (currAmbPathAndIdx): IParserAmbiguousAlternativesDefinitionError => {\n          const ambgIndices = [currAmbPathAndIdx.idx + 1, targetIdx + 1];\n          const occurrence = alternation.idx === 0 ? \"\" : alternation.idx;\n\n          const message = errMsgProvider.buildAlternationPrefixAmbiguityError({\n            topLevelRule: rule,\n            alternation: alternation,\n            ambiguityIndices: ambgIndices,\n            prefixPath: currAmbPathAndIdx.path,\n          });\n          return {\n            message: message,\n            type: ParserDefinitionErrorType.AMBIGUOUS_PREFIX_ALTS,\n            ruleName: rule.name,\n            occurrence: occurrence,\n            alternatives: ambgIndices,\n          };\n        },\n      );\n\n      return currPathPrefixErrors;\n    }),\n  );\n\n  return errors;\n}\n\nfunction checkTerminalAndNoneTerminalsNameSpace(\n  topLevels: Rule[],\n  tokenTypes: TokenType[],\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserDefinitionError[] {\n  const errors: IParserDefinitionError[] = [];\n\n  const tokenNames = map(tokenTypes, (currToken) => currToken.name);\n\n  forEach(topLevels, (currRule) => {\n    const currRuleName = currRule.name;\n    if (includes(tokenNames, currRuleName)) {\n      const errMsg = errMsgProvider.buildNamespaceConflictError(currRule);\n\n      errors.push({\n        message: errMsg,\n        type: ParserDefinitionErrorType.CONFLICT_TOKENS_RULES_NAMESPACE,\n        ruleName: currRuleName,\n      });\n    }\n  });\n\n  return errors;\n}\n","import { Rule } from \"@chevrotain/gast\";\nimport { defaults, forEach } from \"lodash-es\";\nimport { resolveGrammar as orgResolveGrammar } from \"../resolver.js\";\nimport { validateGrammar as orgValidateGrammar } from \"../checks.js\";\nimport {\n  defaultGrammarResolverErrorProvider,\n  defaultGrammarValidatorErrorProvider,\n} from \"../../errors_public.js\";\nimport { TokenType } from \"@chevrotain/types\";\nimport {\n  IGrammarResolverErrorMessageProvider,\n  IGrammarValidatorErrorMessageProvider,\n  IParserDefinitionError,\n} from \"../types.js\";\n\ntype ResolveGrammarOpts = {\n  rules: Rule[];\n  errMsgProvider?: IGrammarResolverErrorMessageProvider;\n};\nexport function resolveGrammar(\n  options: ResolveGrammarOpts,\n): IParserDefinitionError[] {\n  const actualOptions: Required<ResolveGrammarOpts> = defaults(options, {\n    errMsgProvider: defaultGrammarResolverErrorProvider,\n  });\n\n  const topRulesTable: { [ruleName: string]: Rule } = {};\n  forEach(options.rules, (rule) => {\n    topRulesTable[rule.name] = rule;\n  });\n  return orgResolveGrammar(topRulesTable, actualOptions.errMsgProvider);\n}\n\nexport function validateGrammar(options: {\n  rules: Rule[];\n  tokenTypes: TokenType[];\n  grammarName: string;\n  errMsgProvider: IGrammarValidatorErrorMessageProvider;\n}): IParserDefinitionError[] {\n  options = defaults(options, {\n    errMsgProvider: defaultGrammarValidatorErrorProvider,\n  });\n\n  return orgValidateGrammar(\n    options.rules,\n    options.tokenTypes,\n    options.errMsgProvider,\n    options.grammarName,\n  );\n}\n","import { includes } from \"lodash-es\";\nimport {\n  IRecognitionException,\n  IRecognizerContext,\n  IToken,\n} from \"@chevrotain/types\";\n\nconst MISMATCHED_TOKEN_EXCEPTION = \"MismatchedTokenException\";\nconst NO_VIABLE_ALT_EXCEPTION = \"NoViableAltException\";\nconst EARLY_EXIT_EXCEPTION = \"EarlyExitException\";\nconst NOT_ALL_INPUT_PARSED_EXCEPTION = \"NotAllInputParsedException\";\n\nconst RECOGNITION_EXCEPTION_NAMES = [\n  MISMATCHED_TOKEN_EXCEPTION,\n  NO_VIABLE_ALT_EXCEPTION,\n  EARLY_EXIT_EXCEPTION,\n  NOT_ALL_INPUT_PARSED_EXCEPTION,\n];\n\nObject.freeze(RECOGNITION_EXCEPTION_NAMES);\n\n// hacks to bypass no support for custom Errors in javascript/typescript\nexport function isRecognitionException(error: Error) {\n  // can't do instanceof on hacked custom js exceptions\n  return includes(RECOGNITION_EXCEPTION_NAMES, error.name);\n}\n\nabstract class RecognitionException\n  extends Error\n  implements IRecognitionException\n{\n  context: IRecognizerContext;\n  resyncedTokens: IToken[] = [];\n\n  protected constructor(\n    message: string,\n    public token: IToken,\n  ) {\n    super(message);\n\n    // fix prototype chain when typescript target is ES5\n    Object.setPrototypeOf(this, new.target.prototype);\n\n    /* istanbul ignore next - V8 workaround to remove constructor from stacktrace when typescript target is ES5 */\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n}\n\nexport class MismatchedTokenException extends RecognitionException {\n  constructor(\n    message: string,\n    token: IToken,\n    public previousToken: IToken,\n  ) {\n    super(message, token);\n    this.name = MISMATCHED_TOKEN_EXCEPTION;\n  }\n}\n\nexport class NoViableAltException extends RecognitionException {\n  constructor(\n    message: string,\n    token: IToken,\n    public previousToken: IToken,\n  ) {\n    super(message, token);\n    this.name = NO_VIABLE_ALT_EXCEPTION;\n  }\n}\n\nexport class NotAllInputParsedException extends RecognitionException {\n  constructor(message: string, token: IToken) {\n    super(message, token);\n    this.name = NOT_ALL_INPUT_PARSED_EXCEPTION;\n  }\n}\n\nexport class EarlyExitException extends RecognitionException {\n  constructor(\n    message: string,\n    token: IToken,\n    public previousToken: IToken,\n  ) {\n    super(message, token);\n    this.name = EARLY_EXIT_EXCEPTION;\n  }\n}\n","import {\n  createTokenInstance,\n  EOF,\n  tokenMatcher,\n} from \"../../../scan/tokens_public.js\";\nimport {\n  AbstractNextTerminalAfterProductionWalker,\n  IFirstAfterRepetition,\n} from \"../../grammar/interpreter.js\";\nimport {\n  clone,\n  dropRight,\n  find,\n  flatten,\n  has,\n  includes,\n  isEmpty,\n  map,\n} from \"lodash-es\";\nimport {\n  IParserConfig,\n  IToken,\n  ITokenGrammarPath,\n  TokenType,\n} from \"@chevrotain/types\";\nimport { MismatchedTokenException } from \"../../exceptions_public.js\";\nimport { IN } from \"../../constants.js\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser.js\";\n\nexport const EOF_FOLLOW_KEY: any = {};\n\nexport interface IFollowKey {\n  ruleName: string;\n  idxInCallingRule: number;\n  inRule: string;\n}\n\nexport const IN_RULE_RECOVERY_EXCEPTION = \"InRuleRecoveryException\";\n\nexport class InRuleRecoveryException extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = IN_RULE_RECOVERY_EXCEPTION;\n  }\n}\n\n/**\n * This trait is responsible for the error recovery and fault tolerant logic\n */\nexport class Recoverable {\n  recoveryEnabled: boolean;\n  firstAfterRepMap: Record<string, IFirstAfterRepetition>;\n  resyncFollows: Record<string, TokenType[]>;\n\n  initRecoverable(config: IParserConfig) {\n    this.firstAfterRepMap = {};\n    this.resyncFollows = {};\n\n    this.recoveryEnabled = has(config, \"recoveryEnabled\")\n      ? (config.recoveryEnabled as boolean) // assumes end user provides the correct config value/type\n      : DEFAULT_PARSER_CONFIG.recoveryEnabled;\n\n    // performance optimization, NOOP will be inlined which\n    // effectively means that this optional feature does not exist\n    // when not used.\n    if (this.recoveryEnabled) {\n      this.attemptInRepetitionRecovery = attemptInRepetitionRecovery;\n    }\n  }\n\n  public getTokenToInsert(tokType: TokenType): IToken {\n    const tokToInsert = createTokenInstance(\n      tokType,\n      \"\",\n      NaN,\n      NaN,\n      NaN,\n      NaN,\n      NaN,\n      NaN,\n    );\n    tokToInsert.isInsertedInRecovery = true;\n    return tokToInsert;\n  }\n\n  public canTokenTypeBeInsertedInRecovery(tokType: TokenType): boolean {\n    return true;\n  }\n\n  public canTokenTypeBeDeletedInRecovery(tokType: TokenType): boolean {\n    return true;\n  }\n\n  tryInRepetitionRecovery(\n    this: MixedInParser,\n    grammarRule: Function,\n    grammarRuleArgs: any[],\n    lookAheadFunc: () => boolean,\n    expectedTokType: TokenType,\n  ): void {\n    // TODO: can the resyncTokenType be cached?\n    const reSyncTokType = this.findReSyncTokenType();\n    const savedLexerState = this.exportLexerState();\n    const resyncedTokens: IToken[] = [];\n    let passedResyncPoint = false;\n\n    const nextTokenWithoutResync = this.LA(1);\n    let currToken = this.LA(1);\n\n    const generateErrorMessage = () => {\n      const previousToken = this.LA(0);\n      // we are preemptively re-syncing before an error has been detected, therefor we must reproduce\n      // the error that would have been thrown\n      const msg = this.errorMessageProvider.buildMismatchTokenMessage({\n        expected: expectedTokType,\n        actual: nextTokenWithoutResync,\n        previous: previousToken,\n        ruleName: this.getCurrRuleFullName(),\n      });\n      const error = new MismatchedTokenException(\n        msg,\n        nextTokenWithoutResync,\n        this.LA(0),\n      );\n      // the first token here will be the original cause of the error, this is not part of the resyncedTokens property.\n      error.resyncedTokens = dropRight(resyncedTokens);\n      this.SAVE_ERROR(error);\n    };\n\n    while (!passedResyncPoint) {\n      // re-synced to a point where we can safely exit the repetition/\n      if (this.tokenMatcher(currToken, expectedTokType)) {\n        generateErrorMessage();\n        return; // must return here to avoid reverting the inputIdx\n      } else if (lookAheadFunc.call(this)) {\n        // we skipped enough tokens so we can resync right back into another iteration of the repetition grammar rule\n        generateErrorMessage();\n        // recursive invocation in other to support multiple re-syncs in the same top level repetition grammar rule\n        grammarRule.apply(this, grammarRuleArgs);\n        return; // must return here to avoid reverting the inputIdx\n      } else if (this.tokenMatcher(currToken, reSyncTokType)) {\n        passedResyncPoint = true;\n      } else {\n        currToken = this.SKIP_TOKEN();\n        this.addToResyncTokens(currToken, resyncedTokens);\n      }\n    }\n\n    // we were unable to find a CLOSER point to resync inside the Repetition, reset the state.\n    // The parsing exception we were trying to prevent will happen in the NEXT parsing step. it may be handled by\n    // \"between rules\" resync recovery later in the flow.\n    this.importLexerState(savedLexerState);\n  }\n\n  shouldInRepetitionRecoveryBeTried(\n    this: MixedInParser,\n    expectTokAfterLastMatch: TokenType,\n    nextTokIdx: number,\n    notStuck: boolean | undefined,\n  ): boolean {\n    // Edge case of arriving from a MANY repetition which is stuck\n    // Attempting recovery in this case could cause an infinite loop\n    if (notStuck === false) {\n      return false;\n    }\n\n    // no need to recover, next token is what we expect...\n    if (this.tokenMatcher(this.LA(1), expectTokAfterLastMatch)) {\n      return false;\n    }\n\n    // error recovery is disabled during backtracking as it can make the parser ignore a valid grammar path\n    // and prefer some backtracking path that includes recovered errors.\n    if (this.isBackTracking()) {\n      return false;\n    }\n\n    // if we can perform inRule recovery (single token insertion or deletion) we always prefer that recovery algorithm\n    // because if it works, it makes the least amount of changes to the input stream (greedy algorithm)\n    //noinspection RedundantIfStatementJS\n    if (\n      this.canPerformInRuleRecovery(\n        expectTokAfterLastMatch,\n        this.getFollowsForInRuleRecovery(expectTokAfterLastMatch, nextTokIdx),\n      )\n    ) {\n      return false;\n    }\n\n    return true;\n  }\n\n  // Error Recovery functionality\n  getFollowsForInRuleRecovery(\n    this: MixedInParser,\n    tokType: TokenType,\n    tokIdxInRule: number,\n  ): TokenType[] {\n    const grammarPath = this.getCurrentGrammarPath(tokType, tokIdxInRule);\n    const follows = this.getNextPossibleTokenTypes(grammarPath);\n    return follows;\n  }\n\n  tryInRuleRecovery(\n    this: MixedInParser,\n    expectedTokType: TokenType,\n    follows: TokenType[],\n  ): IToken {\n    if (this.canRecoverWithSingleTokenInsertion(expectedTokType, follows)) {\n      const tokToInsert = this.getTokenToInsert(expectedTokType);\n      return tokToInsert;\n    }\n\n    if (this.canRecoverWithSingleTokenDeletion(expectedTokType)) {\n      const nextTok = this.SKIP_TOKEN();\n      this.consumeToken();\n      return nextTok;\n    }\n\n    throw new InRuleRecoveryException(\"sad sad panda\");\n  }\n\n  canPerformInRuleRecovery(\n    this: MixedInParser,\n    expectedToken: TokenType,\n    follows: TokenType[],\n  ): boolean {\n    return (\n      this.canRecoverWithSingleTokenInsertion(expectedToken, follows) ||\n      this.canRecoverWithSingleTokenDeletion(expectedToken)\n    );\n  }\n\n  canRecoverWithSingleTokenInsertion(\n    this: MixedInParser,\n    expectedTokType: TokenType,\n    follows: TokenType[],\n  ): boolean {\n    if (!this.canTokenTypeBeInsertedInRecovery(expectedTokType)) {\n      return false;\n    }\n\n    // must know the possible following tokens to perform single token insertion\n    if (isEmpty(follows)) {\n      return false;\n    }\n\n    const mismatchedTok = this.LA(1);\n    const isMisMatchedTokInFollows =\n      find(follows, (possibleFollowsTokType: TokenType) => {\n        return this.tokenMatcher(mismatchedTok, possibleFollowsTokType);\n      }) !== undefined;\n\n    return isMisMatchedTokInFollows;\n  }\n\n  canRecoverWithSingleTokenDeletion(\n    this: MixedInParser,\n    expectedTokType: TokenType,\n  ): boolean {\n    if (!this.canTokenTypeBeDeletedInRecovery(expectedTokType)) {\n      return false;\n    }\n\n    const isNextTokenWhatIsExpected = this.tokenMatcher(\n      this.LA(2),\n      expectedTokType,\n    );\n    return isNextTokenWhatIsExpected;\n  }\n\n  isInCurrentRuleReSyncSet(\n    this: MixedInParser,\n    tokenTypeIdx: TokenType,\n  ): boolean {\n    const followKey = this.getCurrFollowKey();\n    const currentRuleReSyncSet = this.getFollowSetFromFollowKey(followKey);\n    return includes(currentRuleReSyncSet, tokenTypeIdx);\n  }\n\n  findReSyncTokenType(this: MixedInParser): TokenType {\n    const allPossibleReSyncTokTypes = this.flattenFollowSet();\n    // this loop will always terminate as EOF is always in the follow stack and also always (virtually) in the input\n    let nextToken = this.LA(1);\n    let k = 2;\n    while (true) {\n      const foundMatch = find(allPossibleReSyncTokTypes, (resyncTokType) => {\n        const canMatch = tokenMatcher(nextToken, resyncTokType);\n        return canMatch;\n      });\n      if (foundMatch !== undefined) {\n        return foundMatch;\n      }\n      nextToken = this.LA(k);\n      k++;\n    }\n  }\n\n  getCurrFollowKey(this: MixedInParser): IFollowKey {\n    // the length is at least one as we always add the ruleName to the stack before invoking the rule.\n    if (this.RULE_STACK.length === 1) {\n      return EOF_FOLLOW_KEY;\n    }\n    const currRuleShortName = this.getLastExplicitRuleShortName();\n    const currRuleIdx = this.getLastExplicitRuleOccurrenceIndex();\n    const prevRuleShortName = this.getPreviousExplicitRuleShortName();\n\n    return {\n      ruleName: this.shortRuleNameToFullName(currRuleShortName),\n      idxInCallingRule: currRuleIdx,\n      inRule: this.shortRuleNameToFullName(prevRuleShortName),\n    };\n  }\n\n  buildFullFollowKeyStack(this: MixedInParser): IFollowKey[] {\n    const explicitRuleStack = this.RULE_STACK;\n    const explicitOccurrenceStack = this.RULE_OCCURRENCE_STACK;\n\n    return map(explicitRuleStack, (ruleName, idx) => {\n      if (idx === 0) {\n        return EOF_FOLLOW_KEY;\n      }\n      return {\n        ruleName: this.shortRuleNameToFullName(ruleName),\n        idxInCallingRule: explicitOccurrenceStack[idx],\n        inRule: this.shortRuleNameToFullName(explicitRuleStack[idx - 1]),\n      };\n    });\n  }\n\n  flattenFollowSet(this: MixedInParser): TokenType[] {\n    const followStack = map(this.buildFullFollowKeyStack(), (currKey) => {\n      return this.getFollowSetFromFollowKey(currKey);\n    });\n    return <any>flatten(followStack);\n  }\n\n  getFollowSetFromFollowKey(\n    this: MixedInParser,\n    followKey: IFollowKey,\n  ): TokenType[] {\n    if (followKey === EOF_FOLLOW_KEY) {\n      return [EOF];\n    }\n\n    const followName =\n      followKey.ruleName + followKey.idxInCallingRule + IN + followKey.inRule;\n\n    return this.resyncFollows[followName];\n  }\n\n  // It does not make any sense to include a virtual EOF token in the list of resynced tokens\n  // as EOF does not really exist and thus does not contain any useful information (line/column numbers)\n  addToResyncTokens(\n    this: MixedInParser,\n    token: IToken,\n    resyncTokens: IToken[],\n  ): IToken[] {\n    if (!this.tokenMatcher(token, EOF)) {\n      resyncTokens.push(token);\n    }\n    return resyncTokens;\n  }\n\n  reSyncTo(this: MixedInParser, tokType: TokenType): IToken[] {\n    const resyncedTokens: IToken[] = [];\n    let nextTok = this.LA(1);\n    while (this.tokenMatcher(nextTok, tokType) === false) {\n      nextTok = this.SKIP_TOKEN();\n      this.addToResyncTokens(nextTok, resyncedTokens);\n    }\n    // the last token is not part of the error.\n    return dropRight(resyncedTokens);\n  }\n\n  attemptInRepetitionRecovery(\n    this: MixedInParser,\n    prodFunc: Function,\n    args: any[],\n    lookaheadFunc: () => boolean,\n    dslMethodIdx: number,\n    prodOccurrence: number,\n    nextToksWalker: typeof AbstractNextTerminalAfterProductionWalker,\n    notStuck?: boolean,\n  ): void {\n    // by default this is a NO-OP\n    // The actual implementation is with the function(not method) below\n  }\n\n  getCurrentGrammarPath(\n    this: MixedInParser,\n    tokType: TokenType,\n    tokIdxInRule: number,\n  ): ITokenGrammarPath {\n    const pathRuleStack: string[] = this.getHumanReadableRuleStack();\n    const pathOccurrenceStack: number[] = clone(this.RULE_OCCURRENCE_STACK);\n    const grammarPath: any = {\n      ruleStack: pathRuleStack,\n      occurrenceStack: pathOccurrenceStack,\n      lastTok: tokType,\n      lastTokOccurrence: tokIdxInRule,\n    };\n\n    return grammarPath;\n  }\n  getHumanReadableRuleStack(this: MixedInParser): string[] {\n    return map(this.RULE_STACK, (currShortName) =>\n      this.shortRuleNameToFullName(currShortName),\n    );\n  }\n}\n\nexport function attemptInRepetitionRecovery(\n  this: MixedInParser,\n  prodFunc: Function,\n  args: any[],\n  lookaheadFunc: () => boolean,\n  dslMethodIdx: number,\n  prodOccurrence: number,\n  nextToksWalker: typeof AbstractNextTerminalAfterProductionWalker,\n  notStuck?: boolean,\n): void {\n  const key = this.getKeyForAutomaticLookahead(dslMethodIdx, prodOccurrence);\n  let firstAfterRepInfo = this.firstAfterRepMap[key];\n  if (firstAfterRepInfo === undefined) {\n    const currRuleName = this.getCurrRuleFullName();\n    const ruleGrammar = this.getGAstProductions()[currRuleName];\n    const walker: AbstractNextTerminalAfterProductionWalker =\n      new nextToksWalker(ruleGrammar, prodOccurrence);\n    firstAfterRepInfo = walker.startWalking();\n    this.firstAfterRepMap[key] = firstAfterRepInfo;\n  }\n\n  let expectTokAfterLastMatch = firstAfterRepInfo.token;\n  let nextTokIdx = firstAfterRepInfo.occurrence;\n  const isEndOfRule = firstAfterRepInfo.isEndOfRule;\n\n  // special edge case of a TOP most repetition after which the input should END.\n  // this will force an attempt for inRule recovery in that scenario.\n  if (\n    this.RULE_STACK.length === 1 &&\n    isEndOfRule &&\n    expectTokAfterLastMatch === undefined\n  ) {\n    expectTokAfterLastMatch = EOF;\n    nextTokIdx = 1;\n  }\n\n  // We don't have anything to re-sync to...\n  // this condition was extracted from `shouldInRepetitionRecoveryBeTried` to act as a type-guard\n  if (expectTokAfterLastMatch === undefined || nextTokIdx === undefined) {\n    return;\n  }\n\n  if (\n    this.shouldInRepetitionRecoveryBeTried(\n      expectTokAfterLastMatch,\n      nextTokIdx,\n      notStuck,\n    )\n  ) {\n    // TODO: performance optimization: instead of passing the original args here, we modify\n    // the args param (or create a new one) and make sure the lookahead func is explicitly provided\n    // to avoid searching the cache for it once more.\n    this.tryInRepetitionRecovery(\n      prodFunc,\n      args,\n      lookaheadFunc,\n      expectTokAfterLastMatch,\n    );\n  }\n}\n","// Lookahead keys are 32Bit integers in the form\n// TTTTTTTT-ZZZZZZZZZZZZ-YYYY-XXXXXXXX\n// XXXX -> Occurrence Index bitmap.\n// YYYY -> DSL Method Type bitmap.\n// ZZZZZZZZZZZZZZZ -> Rule short Index bitmap.\n// TTTTTTTTT -> alternation alternative index bitmap\n\nexport const BITS_FOR_METHOD_TYPE = 4;\nexport const BITS_FOR_OCCURRENCE_IDX = 8;\nexport const BITS_FOR_RULE_IDX = 12;\n// TODO: validation, this means that there may at most 2^8 --> 256 alternatives for an alternation.\nexport const BITS_FOR_ALT_IDX = 8;\n\n// short string used as part of mapping keys.\n// being short improves the performance when composing KEYS for maps out of these\n// The 5 - 8 bits (16 possible values, are reserved for the DSL method indices)\nexport const OR_IDX = 1 << BITS_FOR_OCCURRENCE_IDX;\nexport const OPTION_IDX = 2 << BITS_FOR_OCCURRENCE_IDX;\nexport const MANY_IDX = 3 << BITS_FOR_OCCURRENCE_IDX;\nexport const AT_LEAST_ONE_IDX = 4 << BITS_FOR_OCCURRENCE_IDX;\nexport const MANY_SEP_IDX = 5 << BITS_FOR_OCCURRENCE_IDX;\nexport const AT_LEAST_ONE_SEP_IDX = 6 << BITS_FOR_OCCURRENCE_IDX;\n\n// this actually returns a number, but it is always used as a string (object prop key)\nexport function getKeyForAutomaticLookahead(\n  ruleIdx: number,\n  dslMethodIdx: number,\n  occurrence: number,\n): number {\n  return occurrence | dslMethodIdx | ruleIdx;\n}\n\nconst BITS_START_FOR_ALT_IDX = 32 - BITS_FOR_ALT_IDX;\n","import {\n  ILookaheadStrategy,\n  ILookaheadValidationError,\n  IOrAlt,\n  OptionalProductionType,\n  Rule,\n  TokenType,\n} from \"@chevrotain/types\";\nimport { flatMap, isEmpty } from \"lodash-es\";\nimport { defaultGrammarValidatorErrorProvider } from \"../errors_public.js\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser/parser.js\";\nimport {\n  validateAmbiguousAlternationAlternatives,\n  validateEmptyOrAlternative,\n  validateNoLeftRecursion,\n  validateSomeNonEmptyLookaheadPath,\n} from \"./checks.js\";\nimport {\n  buildAlternativesLookAheadFunc,\n  buildLookaheadFuncForOptionalProd,\n  buildLookaheadFuncForOr,\n  buildSingleAlternativeLookaheadFunction,\n  getProdType,\n} from \"./lookahead.js\";\nimport { IParserDefinitionError } from \"./types.js\";\n\nexport class LLkLookaheadStrategy implements ILookaheadStrategy {\n  readonly maxLookahead: number;\n\n  constructor(options?: { maxLookahead?: number }) {\n    this.maxLookahead =\n      options?.maxLookahead ?? DEFAULT_PARSER_CONFIG.maxLookahead;\n  }\n\n  validate(options: {\n    rules: Rule[];\n    tokenTypes: TokenType[];\n    grammarName: string;\n  }): ILookaheadValidationError[] {\n    const leftRecursionErrors = this.validateNoLeftRecursion(options.rules);\n\n    if (isEmpty(leftRecursionErrors)) {\n      const emptyAltErrors = this.validateEmptyOrAlternatives(options.rules);\n      const ambiguousAltsErrors = this.validateAmbiguousAlternationAlternatives(\n        options.rules,\n        this.maxLookahead,\n      );\n      const emptyRepetitionErrors = this.validateSomeNonEmptyLookaheadPath(\n        options.rules,\n        this.maxLookahead,\n      );\n      const allErrors = [\n        ...leftRecursionErrors,\n        ...emptyAltErrors,\n        ...ambiguousAltsErrors,\n        ...emptyRepetitionErrors,\n      ];\n      return allErrors;\n    }\n    return leftRecursionErrors;\n  }\n\n  validateNoLeftRecursion(rules: Rule[]): IParserDefinitionError[] {\n    return flatMap(rules, (currTopRule) =>\n      validateNoLeftRecursion(\n        currTopRule,\n        currTopRule,\n        defaultGrammarValidatorErrorProvider,\n      ),\n    );\n  }\n\n  validateEmptyOrAlternatives(rules: Rule[]): IParserDefinitionError[] {\n    return flatMap(rules, (currTopRule) =>\n      validateEmptyOrAlternative(\n        currTopRule,\n        defaultGrammarValidatorErrorProvider,\n      ),\n    );\n  }\n\n  validateAmbiguousAlternationAlternatives(\n    rules: Rule[],\n    maxLookahead: number,\n  ): IParserDefinitionError[] {\n    return flatMap(rules, (currTopRule) =>\n      validateAmbiguousAlternationAlternatives(\n        currTopRule,\n        maxLookahead,\n        defaultGrammarValidatorErrorProvider,\n      ),\n    );\n  }\n\n  validateSomeNonEmptyLookaheadPath(\n    rules: Rule[],\n    maxLookahead: number,\n  ): IParserDefinitionError[] {\n    return validateSomeNonEmptyLookaheadPath(\n      rules,\n      maxLookahead,\n      defaultGrammarValidatorErrorProvider,\n    );\n  }\n\n  buildLookaheadForAlternation(options: {\n    prodOccurrence: number;\n    rule: Rule;\n    maxLookahead: number;\n    hasPredicates: boolean;\n    dynamicTokensEnabled: boolean;\n  }): (orAlts?: IOrAlt<any>[] | undefined) => number | undefined {\n    return buildLookaheadFuncForOr(\n      options.prodOccurrence,\n      options.rule,\n      options.maxLookahead,\n      options.hasPredicates,\n      options.dynamicTokensEnabled,\n      buildAlternativesLookAheadFunc,\n    );\n  }\n\n  buildLookaheadForOptional(options: {\n    prodOccurrence: number;\n    prodType: OptionalProductionType;\n    rule: Rule;\n    maxLookahead: number;\n    dynamicTokensEnabled: boolean;\n  }): () => boolean {\n    return buildLookaheadFuncForOptionalProd(\n      options.prodOccurrence,\n      options.rule,\n      options.maxLookahead,\n      options.dynamicTokensEnabled,\n      getProdType(options.prodType),\n      buildSingleAlternativeLookaheadFunction,\n    );\n  }\n}\n","import { forEach, has } from \"lodash-es\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser.js\";\nimport {\n  ILookaheadStrategy,\n  IParserConfig,\n  OptionalProductionType,\n} from \"@chevrotain/types\";\nimport {\n  AT_LEAST_ONE_IDX,\n  AT_LEAST_ONE_SEP_IDX,\n  getKeyForAutomaticLookahead,\n  MANY_IDX,\n  MANY_SEP_IDX,\n  OPTION_IDX,\n  OR_IDX,\n} from \"../../grammar/keys.js\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport {\n  Alternation,\n  GAstVisitor,\n  getProductionDslName,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Rule,\n} from \"@chevrotain/gast\";\nimport { LLkLookaheadStrategy } from \"../../grammar/llk_lookahead.js\";\n\n/**\n * Trait responsible for the lookahead related utilities and optimizations.\n */\nexport class LooksAhead {\n  maxLookahead: number;\n  lookAheadFuncsCache: any;\n  dynamicTokensEnabled: boolean;\n  lookaheadStrategy: ILookaheadStrategy;\n\n  initLooksAhead(config: IParserConfig) {\n    this.dynamicTokensEnabled = has(config, \"dynamicTokensEnabled\")\n      ? (config.dynamicTokensEnabled as boolean) // assumes end user provides the correct config value/type\n      : DEFAULT_PARSER_CONFIG.dynamicTokensEnabled;\n\n    this.maxLookahead = has(config, \"maxLookahead\")\n      ? (config.maxLookahead as number) // assumes end user provides the correct config value/type\n      : DEFAULT_PARSER_CONFIG.maxLookahead;\n\n    this.lookaheadStrategy = has(config, \"lookaheadStrategy\")\n      ? (config.lookaheadStrategy as ILookaheadStrategy) // assumes end user provides the correct config value/type\n      : new LLkLookaheadStrategy({ maxLookahead: this.maxLookahead });\n\n    this.lookAheadFuncsCache = new Map();\n  }\n\n  preComputeLookaheadFunctions(this: MixedInParser, rules: Rule[]): void {\n    forEach(rules, (currRule) => {\n      this.TRACE_INIT(`${currRule.name} Rule Lookahead`, () => {\n        const {\n          alternation,\n          repetition,\n          option,\n          repetitionMandatory,\n          repetitionMandatoryWithSeparator,\n          repetitionWithSeparator,\n        } = collectMethods(currRule);\n\n        forEach(alternation, (currProd) => {\n          const prodIdx = currProd.idx === 0 ? \"\" : currProd.idx;\n          this.TRACE_INIT(`${getProductionDslName(currProd)}${prodIdx}`, () => {\n            const laFunc = this.lookaheadStrategy.buildLookaheadForAlternation({\n              prodOccurrence: currProd.idx,\n              rule: currRule,\n              maxLookahead: currProd.maxLookahead || this.maxLookahead,\n              hasPredicates: currProd.hasPredicates,\n              dynamicTokensEnabled: this.dynamicTokensEnabled,\n            });\n\n            const key = getKeyForAutomaticLookahead(\n              this.fullRuleNameToShort[currRule.name],\n              OR_IDX,\n              currProd.idx,\n            );\n            this.setLaFuncCache(key, laFunc);\n          });\n        });\n\n        forEach(repetition, (currProd) => {\n          this.computeLookaheadFunc(\n            currRule,\n            currProd.idx,\n            MANY_IDX,\n            \"Repetition\",\n            currProd.maxLookahead,\n            getProductionDslName(currProd),\n          );\n        });\n\n        forEach(option, (currProd) => {\n          this.computeLookaheadFunc(\n            currRule,\n            currProd.idx,\n            OPTION_IDX,\n            \"Option\",\n            currProd.maxLookahead,\n            getProductionDslName(currProd),\n          );\n        });\n\n        forEach(repetitionMandatory, (currProd) => {\n          this.computeLookaheadFunc(\n            currRule,\n            currProd.idx,\n            AT_LEAST_ONE_IDX,\n            \"RepetitionMandatory\",\n            currProd.maxLookahead,\n            getProductionDslName(currProd),\n          );\n        });\n\n        forEach(repetitionMandatoryWithSeparator, (currProd) => {\n          this.computeLookaheadFunc(\n            currRule,\n            currProd.idx,\n            AT_LEAST_ONE_SEP_IDX,\n            \"RepetitionMandatoryWithSeparator\",\n            currProd.maxLookahead,\n            getProductionDslName(currProd),\n          );\n        });\n\n        forEach(repetitionWithSeparator, (currProd) => {\n          this.computeLookaheadFunc(\n            currRule,\n            currProd.idx,\n            MANY_SEP_IDX,\n            \"RepetitionWithSeparator\",\n            currProd.maxLookahead,\n            getProductionDslName(currProd),\n          );\n        });\n      });\n    });\n  }\n\n  computeLookaheadFunc(\n    this: MixedInParser,\n    rule: Rule,\n    prodOccurrence: number,\n    prodKey: number,\n    prodType: OptionalProductionType,\n    prodMaxLookahead: number | undefined,\n    dslMethodName: string,\n  ): void {\n    this.TRACE_INIT(\n      `${dslMethodName}${prodOccurrence === 0 ? \"\" : prodOccurrence}`,\n      () => {\n        const laFunc = this.lookaheadStrategy.buildLookaheadForOptional({\n          prodOccurrence,\n          rule,\n          maxLookahead: prodMaxLookahead || this.maxLookahead,\n          dynamicTokensEnabled: this.dynamicTokensEnabled,\n          prodType,\n        });\n        const key = getKeyForAutomaticLookahead(\n          this.fullRuleNameToShort[rule.name],\n          prodKey,\n          prodOccurrence,\n        );\n        this.setLaFuncCache(key, laFunc);\n      },\n    );\n  }\n\n  // this actually returns a number, but it is always used as a string (object prop key)\n  getKeyForAutomaticLookahead(\n    this: MixedInParser,\n    dslMethodIdx: number,\n    occurrence: number,\n  ): number {\n    const currRuleShortName: any = this.getLastExplicitRuleShortName();\n    return getKeyForAutomaticLookahead(\n      currRuleShortName,\n      dslMethodIdx,\n      occurrence,\n    );\n  }\n\n  getLaFuncFromCache(this: MixedInParser, key: number): Function {\n    return this.lookAheadFuncsCache.get(key);\n  }\n\n  /* istanbul ignore next */\n  setLaFuncCache(this: MixedInParser, key: number, value: Function): void {\n    this.lookAheadFuncsCache.set(key, value);\n  }\n}\n\nclass DslMethodsCollectorVisitor extends GAstVisitor {\n  public dslMethods: {\n    option: Option[];\n    alternation: Alternation[];\n    repetition: Repetition[];\n    repetitionWithSeparator: RepetitionWithSeparator[];\n    repetitionMandatory: RepetitionMandatory[];\n    repetitionMandatoryWithSeparator: RepetitionMandatoryWithSeparator[];\n  } = {\n    option: [],\n    alternation: [],\n    repetition: [],\n    repetitionWithSeparator: [],\n    repetitionMandatory: [],\n    repetitionMandatoryWithSeparator: [],\n  };\n\n  reset() {\n    this.dslMethods = {\n      option: [],\n      alternation: [],\n      repetition: [],\n      repetitionWithSeparator: [],\n      repetitionMandatory: [],\n      repetitionMandatoryWithSeparator: [],\n    };\n  }\n\n  public visitOption(option: Option): void {\n    this.dslMethods.option.push(option);\n  }\n\n  public visitRepetitionWithSeparator(manySep: RepetitionWithSeparator): void {\n    this.dslMethods.repetitionWithSeparator.push(manySep);\n  }\n\n  public visitRepetitionMandatory(atLeastOne: RepetitionMandatory): void {\n    this.dslMethods.repetitionMandatory.push(atLeastOne);\n  }\n\n  public visitRepetitionMandatoryWithSeparator(\n    atLeastOneSep: RepetitionMandatoryWithSeparator,\n  ): void {\n    this.dslMethods.repetitionMandatoryWithSeparator.push(atLeastOneSep);\n  }\n\n  public visitRepetition(many: Repetition): void {\n    this.dslMethods.repetition.push(many);\n  }\n\n  public visitAlternation(or: Alternation): void {\n    this.dslMethods.alternation.push(or);\n  }\n}\n\nconst collectorVisitor = new DslMethodsCollectorVisitor();\nexport function collectMethods(rule: Rule): {\n  option: Option[];\n  alternation: Alternation[];\n  repetition: Repetition[];\n  repetitionWithSeparator: RepetitionWithSeparator[];\n  repetitionMandatory: RepetitionMandatory[];\n  repetitionMandatoryWithSeparator: RepetitionMandatoryWithSeparator[];\n} {\n  collectorVisitor.reset();\n  rule.accept(collectorVisitor);\n  const dslMethods = collectorVisitor.dslMethods;\n  // avoid uncleaned references\n  collectorVisitor.reset();\n  return <any>dslMethods;\n}\n","import { CstNode, CstNodeLocation, IToken } from \"@chevrotain/types\";\n\n/**\n * This nodeLocation tracking is not efficient and should only be used\n * when error recovery is enabled or the Token Vector contains virtual Tokens\n * (e.g, Python Indent/Outdent)\n * As it executes the calculation for every single terminal/nonTerminal\n * and does not rely on the fact the token vector is **sorted**\n */\nexport function setNodeLocationOnlyOffset(\n  currNodeLocation: CstNodeLocation,\n  newLocationInfo: Required<Pick<IToken, \"startOffset\" | \"endOffset\">>,\n): void {\n  // First (valid) update for this cst node\n  if (isNaN(currNodeLocation.startOffset) === true) {\n    // assumption1: Token location information is either NaN or a valid number\n    // assumption2: Token location information is fully valid if it exist\n    // (both start/end offsets exist and are numbers).\n    currNodeLocation.startOffset = newLocationInfo.startOffset;\n    currNodeLocation.endOffset = newLocationInfo.endOffset;\n  }\n  // Once the startOffset has been updated with a valid number it should never receive\n  // any farther updates as the Token vector is sorted.\n  // We still have to check this this condition for every new possible location info\n  // because with error recovery enabled we may encounter invalid tokens (NaN location props)\n  else if (currNodeLocation.endOffset! < newLocationInfo.endOffset === true) {\n    currNodeLocation.endOffset = newLocationInfo.endOffset;\n  }\n}\n\n/**\n * This nodeLocation tracking is not efficient and should only be used\n * when error recovery is enabled or the Token Vector contains virtual Tokens\n * (e.g, Python Indent/Outdent)\n * As it executes the calculation for every single terminal/nonTerminal\n * and does not rely on the fact the token vector is **sorted**\n */\nexport function setNodeLocationFull(\n  currNodeLocation: CstNodeLocation,\n  newLocationInfo: CstNodeLocation,\n): void {\n  // First (valid) update for this cst node\n  if (isNaN(currNodeLocation.startOffset) === true) {\n    // assumption1: Token location information is either NaN or a valid number\n    // assumption2: Token location information is fully valid if it exist\n    // (all start/end props exist and are numbers).\n    currNodeLocation.startOffset = newLocationInfo.startOffset;\n    currNodeLocation.startColumn = newLocationInfo.startColumn;\n    currNodeLocation.startLine = newLocationInfo.startLine;\n    currNodeLocation.endOffset = newLocationInfo.endOffset;\n    currNodeLocation.endColumn = newLocationInfo.endColumn;\n    currNodeLocation.endLine = newLocationInfo.endLine;\n  }\n  // Once the start props has been updated with a valid number it should never receive\n  // any farther updates as the Token vector is sorted.\n  // We still have to check this this condition for every new possible location info\n  // because with error recovery enabled we may encounter invalid tokens (NaN location props)\n  else if (currNodeLocation.endOffset! < newLocationInfo.endOffset! === true) {\n    currNodeLocation.endOffset = newLocationInfo.endOffset;\n    currNodeLocation.endColumn = newLocationInfo.endColumn;\n    currNodeLocation.endLine = newLocationInfo.endLine;\n  }\n}\n\nexport function addTerminalToCst(\n  node: CstNode,\n  token: IToken,\n  tokenTypeName: string,\n): void {\n  if (node.children[tokenTypeName] === undefined) {\n    node.children[tokenTypeName] = [token];\n  } else {\n    node.children[tokenTypeName].push(token);\n  }\n}\n\nexport function addNoneTerminalToCst(\n  node: CstNode,\n  ruleName: string,\n  ruleResult: any,\n): void {\n  if (node.children[ruleName] === undefined) {\n    node.children[ruleName] = [ruleResult];\n  } else {\n    node.children[ruleName].push(ruleResult);\n  }\n}\n","const NAME = \"name\";\n\nexport function defineNameProp(obj: {}, nameValue: string): void {\n  Object.defineProperty(obj, NAME, {\n    enumerable: false,\n    configurable: true,\n    writable: false,\n    value: nameValue,\n  });\n}\n","import {\n  compact,\n  filter,\n  forEach,\n  isArray,\n  isEmpty,\n  isFunction,\n  isUndefined,\n  keys,\n  map,\n} from \"lodash-es\";\nimport { defineNameProp } from \"../../lang/lang_extensions.js\";\nimport { CstNode, ICstVisitor } from \"@chevrotain/types\";\n\nexport function defaultVisit<IN>(ctx: any, param: IN): void {\n  const childrenNames = keys(ctx);\n  const childrenNamesLength = childrenNames.length;\n  for (let i = 0; i < childrenNamesLength; i++) {\n    const currChildName = childrenNames[i];\n    const currChildArray = ctx[currChildName];\n    const currChildArrayLength = currChildArray.length;\n    for (let j = 0; j < currChildArrayLength; j++) {\n      const currChild: any = currChildArray[j];\n      // distinction between Tokens Children and CstNode children\n      if (currChild.tokenTypeIdx === undefined) {\n        this[currChild.name](currChild.children, param);\n      }\n    }\n  }\n  // defaultVisit does not support generic out param\n}\n\nexport function createBaseSemanticVisitorConstructor(\n  grammarName: string,\n  ruleNames: string[],\n): {\n  new (...args: any[]): ICstVisitor<any, any>;\n} {\n  const derivedConstructor: any = function () {};\n\n  // can be overwritten according to:\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n  // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n  defineNameProp(derivedConstructor, grammarName + \"BaseSemantics\");\n\n  const semanticProto = {\n    visit: function (cstNode: CstNode | CstNode[], param: any) {\n      // enables writing more concise visitor methods when CstNode has only a single child\n      if (isArray(cstNode)) {\n        // A CST Node's children dictionary can never have empty arrays as values\n        // If a key is defined there will be at least one element in the corresponding value array.\n        cstNode = cstNode[0];\n      }\n\n      // enables passing optional CstNodes concisely.\n      if (isUndefined(cstNode)) {\n        return undefined;\n      }\n\n      return this[cstNode.name](cstNode.children, param);\n    },\n\n    validateVisitor: function () {\n      const semanticDefinitionErrors = validateVisitor(this, ruleNames);\n      if (!isEmpty(semanticDefinitionErrors)) {\n        const errorMessages = map(\n          semanticDefinitionErrors,\n          (currDefError) => currDefError.msg,\n        );\n        throw Error(\n          `Errors Detected in CST Visitor <${this.constructor.name}>:\\n\\t` +\n            `${errorMessages.join(\"\\n\\n\").replace(/\\n/g, \"\\n\\t\")}`,\n        );\n      }\n    },\n  };\n\n  derivedConstructor.prototype = semanticProto;\n  derivedConstructor.prototype.constructor = derivedConstructor;\n\n  derivedConstructor._RULE_NAMES = ruleNames;\n\n  return derivedConstructor;\n}\n\nexport function createBaseVisitorConstructorWithDefaults(\n  grammarName: string,\n  ruleNames: string[],\n  baseConstructor: Function,\n): {\n  new (...args: any[]): ICstVisitor<any, any>;\n} {\n  const derivedConstructor: any = function () {};\n\n  // can be overwritten according to:\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n  // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n  defineNameProp(derivedConstructor, grammarName + \"BaseSemanticsWithDefaults\");\n\n  const withDefaultsProto = Object.create(baseConstructor.prototype);\n  forEach(ruleNames, (ruleName) => {\n    withDefaultsProto[ruleName] = defaultVisit;\n  });\n\n  derivedConstructor.prototype = withDefaultsProto;\n  derivedConstructor.prototype.constructor = derivedConstructor;\n\n  return derivedConstructor;\n}\n\nexport enum CstVisitorDefinitionError {\n  REDUNDANT_METHOD,\n  MISSING_METHOD,\n}\n\nexport interface IVisitorDefinitionError {\n  msg: string;\n  type: CstVisitorDefinitionError;\n  methodName: string;\n}\n\nexport function validateVisitor(\n  visitorInstance: ICstVisitor<unknown, unknown>,\n  ruleNames: string[],\n): IVisitorDefinitionError[] {\n  const missingErrors = validateMissingCstMethods(visitorInstance, ruleNames);\n\n  return missingErrors;\n}\n\nexport function validateMissingCstMethods(\n  visitorInstance: ICstVisitor<unknown, unknown>,\n  ruleNames: string[],\n): IVisitorDefinitionError[] {\n  const missingRuleNames = filter(ruleNames, (currRuleName) => {\n    return isFunction((visitorInstance as any)[currRuleName]) === false;\n  });\n\n  const errors: IVisitorDefinitionError[] = map(\n    missingRuleNames,\n    (currRuleName) => {\n      return {\n        msg: `Missing visitor method: <${currRuleName}> on ${<any>(\n          visitorInstance.constructor.name\n        )} CST Visitor.`,\n        type: CstVisitorDefinitionError.MISSING_METHOD,\n        methodName: currRuleName,\n      };\n    },\n  );\n\n  return compact<IVisitorDefinitionError>(errors);\n}\n","import {\n  AtLeastOneSepMethodOpts,\n  ConsumeMethodOpts,\n  CstNode,\n  DSLMethodOpts,\n  DSLMethodOptsWithErr,\n  GrammarAction,\n  IOrAlt,\n  IParserConfig,\n  IProduction,\n  IToken,\n  ManySepMethodOpts,\n  OrMethodOpts,\n  SubruleMethodOpts,\n  TokenType,\n} from \"@chevrotain/types\";\nimport {\n  forEach,\n  has,\n  isArray,\n  isFunction,\n  last as peek,\n  some,\n} from \"lodash-es\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport {\n  Alternation,\n  Alternative,\n  NonTerminal,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Rule,\n  Terminal,\n} from \"@chevrotain/gast\";\nimport { Lexer } from \"../../../scan/lexer_public.js\";\nimport {\n  augmentTokenTypes,\n  hasShortKeyProperty,\n} from \"../../../scan/tokens.js\";\nimport {\n  createToken,\n  createTokenInstance,\n} from \"../../../scan/tokens_public.js\";\nimport { END_OF_FILE } from \"../parser.js\";\nimport { BITS_FOR_OCCURRENCE_IDX } from \"../../grammar/keys.js\";\nimport { ParserMethodInternal } from \"../types.js\";\n\ntype ProdWithDef = IProduction & { definition?: IProduction[] };\nconst RECORDING_NULL_OBJECT = {\n  description: \"This Object indicates the Parser is during Recording Phase\",\n};\nObject.freeze(RECORDING_NULL_OBJECT);\n\nconst HANDLE_SEPARATOR = true;\nconst MAX_METHOD_IDX = Math.pow(2, BITS_FOR_OCCURRENCE_IDX) - 1;\n\nconst RFT = createToken({ name: \"RECORDING_PHASE_TOKEN\", pattern: Lexer.NA });\naugmentTokenTypes([RFT]);\nconst RECORDING_PHASE_TOKEN = createTokenInstance(\n  RFT,\n  \"This IToken indicates the Parser is in Recording Phase\\n\\t\" +\n    \"\" +\n    \"See: https://chevrotain.io/docs/guide/internals.html#grammar-recording for details\",\n  // Using \"-1\" instead of NaN (as in EOF) because an actual number is less likely to\n  // cause errors if the output of LA or CONSUME would be (incorrectly) used during the recording phase.\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n);\nObject.freeze(RECORDING_PHASE_TOKEN);\n\nconst RECORDING_PHASE_CSTNODE: CstNode = {\n  name:\n    \"This CSTNode indicates the Parser is in Recording Phase\\n\\t\" +\n    \"See: https://chevrotain.io/docs/guide/internals.html#grammar-recording for details\",\n  children: {},\n};\n\n/**\n * This trait handles the creation of the GAST structure for Chevrotain Grammars\n */\nexport class GastRecorder {\n  recordingProdStack: ProdWithDef[];\n  RECORDING_PHASE: boolean;\n\n  initGastRecorder(this: MixedInParser, config: IParserConfig): void {\n    this.recordingProdStack = [];\n    this.RECORDING_PHASE = false;\n  }\n\n  enableRecording(this: MixedInParser): void {\n    this.RECORDING_PHASE = true;\n\n    this.TRACE_INIT(\"Enable Recording\", () => {\n      /**\n       * Warning Dark Voodoo Magic upcoming!\n       * We are \"replacing\" the public parsing DSL methods API\n       * With **new** alternative implementations on the Parser **instance**\n       *\n       * So far this is the only way I've found to avoid performance regressions during parsing time.\n       * - Approx 30% performance regression was measured on Chrome 75 Canary when attempting to replace the \"internal\"\n       *   implementations directly instead.\n       */\n      for (let i = 0; i < 10; i++) {\n        const idx = i > 0 ? i : \"\";\n        this[`CONSUME${idx}` as \"CONSUME\"] = function (arg1, arg2) {\n          return this.consumeInternalRecord(arg1, i, arg2);\n        };\n        this[`SUBRULE${idx}` as \"SUBRULE\"] = function (arg1, arg2) {\n          return this.subruleInternalRecord(arg1, i, arg2) as any;\n        };\n        this[`OPTION${idx}` as \"OPTION\"] = function (arg1) {\n          return this.optionInternalRecord(arg1, i);\n        };\n        this[`OR${idx}` as \"OR\"] = function (arg1) {\n          return this.orInternalRecord(arg1, i);\n        };\n        this[`MANY${idx}` as \"MANY\"] = function (arg1) {\n          this.manyInternalRecord(i, arg1);\n        };\n        this[`MANY_SEP${idx}` as \"MANY_SEP\"] = function (arg1) {\n          this.manySepFirstInternalRecord(i, arg1);\n        };\n        this[`AT_LEAST_ONE${idx}` as \"AT_LEAST_ONE\"] = function (arg1) {\n          this.atLeastOneInternalRecord(i, arg1);\n        };\n        this[`AT_LEAST_ONE_SEP${idx}` as \"AT_LEAST_ONE_SEP\"] = function (arg1) {\n          this.atLeastOneSepFirstInternalRecord(i, arg1);\n        };\n      }\n\n      // DSL methods with the idx(suffix) as an argument\n      this[`consume`] = function (idx, arg1, arg2) {\n        return this.consumeInternalRecord(arg1, idx, arg2);\n      };\n      this[`subrule`] = function (idx, arg1, arg2) {\n        return this.subruleInternalRecord(arg1, idx, arg2) as any;\n      };\n      this[`option`] = function (idx, arg1) {\n        return this.optionInternalRecord(arg1, idx);\n      };\n      this[`or`] = function (idx, arg1) {\n        return this.orInternalRecord(arg1, idx);\n      };\n      this[`many`] = function (idx, arg1) {\n        this.manyInternalRecord(idx, arg1);\n      };\n      this[`atLeastOne`] = function (idx, arg1) {\n        this.atLeastOneInternalRecord(idx, arg1);\n      };\n\n      this.ACTION = this.ACTION_RECORD;\n      this.BACKTRACK = this.BACKTRACK_RECORD;\n      this.LA = this.LA_RECORD;\n    });\n  }\n\n  disableRecording(this: MixedInParser) {\n    this.RECORDING_PHASE = false;\n    // By deleting these **instance** properties, any future invocation\n    // will be deferred to the original methods on the **prototype** object\n    // This seems to get rid of any incorrect optimizations that V8 may\n    // do during the recording phase.\n    this.TRACE_INIT(\"Deleting Recording methods\", () => {\n      const that: any = this;\n\n      for (let i = 0; i < 10; i++) {\n        const idx = i > 0 ? i : \"\";\n        delete that[`CONSUME${idx}`];\n        delete that[`SUBRULE${idx}`];\n        delete that[`OPTION${idx}`];\n        delete that[`OR${idx}`];\n        delete that[`MANY${idx}`];\n        delete that[`MANY_SEP${idx}`];\n        delete that[`AT_LEAST_ONE${idx}`];\n        delete that[`AT_LEAST_ONE_SEP${idx}`];\n      }\n\n      delete that[`consume`];\n      delete that[`subrule`];\n      delete that[`option`];\n      delete that[`or`];\n      delete that[`many`];\n      delete that[`atLeastOne`];\n\n      delete that.ACTION;\n      delete that.BACKTRACK;\n      delete that.LA;\n    });\n  }\n\n  //   Parser methods are called inside an ACTION?\n  //   Maybe try/catch/finally on ACTIONS while disabling the recorders state changes?\n  // @ts-expect-error -- noop place holder\n  ACTION_RECORD<T>(this: MixedInParser, impl: () => T): T {\n    // NO-OP during recording\n  }\n\n  // Executing backtracking logic will break our recording logic assumptions\n  BACKTRACK_RECORD<T>(\n    grammarRule: (...args: any[]) => T,\n    args?: any[],\n  ): () => boolean {\n    return () => true;\n  }\n\n  // LA is part of the official API and may be used for custom lookahead logic\n  // by end users who may forget to wrap it in ACTION or inside a GATE\n  LA_RECORD(howMuch: number): IToken {\n    // We cannot use the RECORD_PHASE_TOKEN here because someone may depend\n    // On LA return EOF at the end of the input so an infinite loop may occur.\n    return END_OF_FILE;\n  }\n\n  topLevelRuleRecord(name: string, def: Function): Rule {\n    try {\n      const newTopLevelRule = new Rule({ definition: [], name: name });\n      newTopLevelRule.name = name;\n      this.recordingProdStack.push(newTopLevelRule);\n      def.call(this);\n      this.recordingProdStack.pop();\n      return newTopLevelRule;\n    } catch (originalError) {\n      if (originalError.KNOWN_RECORDER_ERROR !== true) {\n        try {\n          originalError.message =\n            originalError.message +\n            '\\n\\t This error was thrown during the \"grammar recording phase\" For more info see:\\n\\t' +\n            \"https://chevrotain.io/docs/guide/internals.html#grammar-recording\";\n        } catch (mutabilityError) {\n          // We may not be able to modify the original error object\n          throw originalError;\n        }\n      }\n      throw originalError;\n    }\n  }\n\n  // Implementation of parsing DSL\n  optionInternalRecord<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n    occurrence: number,\n  ): OUT {\n    return recordProd.call(this, Option, actionORMethodDef, occurrence);\n  }\n\n  atLeastOneInternalRecord<OUT>(\n    this: MixedInParser,\n    occurrence: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    recordProd.call(this, RepetitionMandatory, actionORMethodDef, occurrence);\n  }\n\n  atLeastOneSepFirstInternalRecord<OUT>(\n    this: MixedInParser,\n    occurrence: number,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    recordProd.call(\n      this,\n      RepetitionMandatoryWithSeparator,\n      options,\n      occurrence,\n      HANDLE_SEPARATOR,\n    );\n  }\n\n  manyInternalRecord<OUT>(\n    this: MixedInParser,\n    occurrence: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    recordProd.call(this, Repetition, actionORMethodDef, occurrence);\n  }\n\n  manySepFirstInternalRecord<OUT>(\n    this: MixedInParser,\n    occurrence: number,\n    options: ManySepMethodOpts<OUT>,\n  ): void {\n    recordProd.call(\n      this,\n      RepetitionWithSeparator,\n      options,\n      occurrence,\n      HANDLE_SEPARATOR,\n    );\n  }\n\n  orInternalRecord<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n    occurrence: number,\n  ): T {\n    return recordOrProd.call(this, altsOrOpts, occurrence);\n  }\n\n  subruleInternalRecord<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    occurrence: number,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R | CstNode {\n    assertMethodIdxIsValid(occurrence);\n    if (!ruleToCall || has(ruleToCall, \"ruleName\") === false) {\n      const error: any = new Error(\n        `<SUBRULE${getIdxSuffix(occurrence)}> argument is invalid` +\n          ` expecting a Parser method reference but got: <${JSON.stringify(\n            ruleToCall,\n          )}>` +\n          `\\n inside top level rule: <${\n            (<Rule>this.recordingProdStack[0]).name\n          }>`,\n      );\n      error.KNOWN_RECORDER_ERROR = true;\n      throw error;\n    }\n\n    const prevProd: any = peek(this.recordingProdStack);\n    const ruleName = ruleToCall.ruleName;\n    const newNoneTerminal = new NonTerminal({\n      idx: occurrence,\n      nonTerminalName: ruleName,\n      label: options?.LABEL,\n      // The resolving of the `referencedRule` property will be done once all the Rule's GASTs have been created\n      referencedRule: undefined,\n    });\n    prevProd.definition.push(newNoneTerminal);\n\n    return this.outputCst\n      ? RECORDING_PHASE_CSTNODE\n      : <any>RECORDING_NULL_OBJECT;\n  }\n\n  consumeInternalRecord(\n    this: MixedInParser,\n    tokType: TokenType,\n    occurrence: number,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    assertMethodIdxIsValid(occurrence);\n    if (!hasShortKeyProperty(tokType)) {\n      const error: any = new Error(\n        `<CONSUME${getIdxSuffix(occurrence)}> argument is invalid` +\n          ` expecting a TokenType reference but got: <${JSON.stringify(\n            tokType,\n          )}>` +\n          `\\n inside top level rule: <${\n            (<Rule>this.recordingProdStack[0]).name\n          }>`,\n      );\n      error.KNOWN_RECORDER_ERROR = true;\n      throw error;\n    }\n    const prevProd: any = peek(this.recordingProdStack);\n    const newNoneTerminal = new Terminal({\n      idx: occurrence,\n      terminalType: tokType,\n      label: options?.LABEL,\n    });\n    prevProd.definition.push(newNoneTerminal);\n\n    return RECORDING_PHASE_TOKEN;\n  }\n}\n\nfunction recordProd(\n  prodConstructor: any,\n  mainProdArg: any,\n  occurrence: number,\n  handleSep: boolean = false,\n): any {\n  assertMethodIdxIsValid(occurrence);\n  const prevProd: any = peek(this.recordingProdStack);\n  const grammarAction = isFunction(mainProdArg) ? mainProdArg : mainProdArg.DEF;\n\n  const newProd = new prodConstructor({ definition: [], idx: occurrence });\n  if (handleSep) {\n    newProd.separator = mainProdArg.SEP;\n  }\n  if (has(mainProdArg, \"MAX_LOOKAHEAD\")) {\n    newProd.maxLookahead = mainProdArg.MAX_LOOKAHEAD;\n  }\n\n  this.recordingProdStack.push(newProd);\n  grammarAction.call(this);\n  prevProd.definition.push(newProd);\n  this.recordingProdStack.pop();\n\n  return RECORDING_NULL_OBJECT;\n}\n\nfunction recordOrProd(mainProdArg: any, occurrence: number): any {\n  assertMethodIdxIsValid(occurrence);\n  const prevProd: any = peek(this.recordingProdStack);\n  // Only an array of alternatives\n  const hasOptions = isArray(mainProdArg) === false;\n  const alts: IOrAlt<unknown>[] =\n    hasOptions === false ? mainProdArg : mainProdArg.DEF;\n\n  const newOrProd = new Alternation({\n    definition: [],\n    idx: occurrence,\n    ignoreAmbiguities: hasOptions && mainProdArg.IGNORE_AMBIGUITIES === true,\n  });\n  if (has(mainProdArg, \"MAX_LOOKAHEAD\")) {\n    newOrProd.maxLookahead = mainProdArg.MAX_LOOKAHEAD;\n  }\n\n  const hasPredicates = some(alts, (currAlt: any) => isFunction(currAlt.GATE));\n  newOrProd.hasPredicates = hasPredicates;\n\n  prevProd.definition.push(newOrProd);\n\n  forEach(alts, (currAlt) => {\n    const currAltFlat = new Alternative({ definition: [] });\n    newOrProd.definition.push(currAltFlat);\n    if (has(currAlt, \"IGNORE_AMBIGUITIES\")) {\n      currAltFlat.ignoreAmbiguities = currAlt.IGNORE_AMBIGUITIES as boolean; // assumes end user provides the correct config value/type\n    }\n    // **implicit** ignoreAmbiguities due to usage of gate\n    else if (has(currAlt, \"GATE\")) {\n      currAltFlat.ignoreAmbiguities = true;\n    }\n    this.recordingProdStack.push(currAltFlat);\n    currAlt.ALT.call(this);\n    this.recordingProdStack.pop();\n  });\n  return RECORDING_NULL_OBJECT;\n}\n\nfunction getIdxSuffix(idx: number): string {\n  return idx === 0 ? \"\" : `${idx}`;\n}\n\nfunction assertMethodIdxIsValid(idx: number): void {\n  if (idx < 0 || idx > MAX_METHOD_IDX) {\n    const error: any = new Error(\n      // The stack trace will contain all the needed details\n      `Invalid DSL Method idx value: <${idx}>\\n\\t` +\n        `Idx value must be a none negative value smaller than ${\n          MAX_METHOD_IDX + 1\n        }`,\n    );\n    error.KNOWN_RECORDER_ERROR = true;\n    throw error;\n  }\n}\n","import { clone, forEach, has, isEmpty, map, values } from \"lodash-es\";\nimport { toFastProperties } from \"@chevrotain/utils\";\nimport { computeAllProdsFollows } from \"../grammar/follow.js\";\nimport { createTokenInstance, EOF } from \"../../scan/tokens_public.js\";\nimport {\n  defaultGrammarValidatorErrorProvider,\n  defaultParserErrorProvider,\n} from \"../errors_public.js\";\nimport {\n  resolveGrammar,\n  validateGrammar,\n} from \"../grammar/gast/gast_resolver_public.js\";\nimport {\n  CstNode,\n  IParserConfig,\n  IRecognitionException,\n  IRuleConfig,\n  IToken,\n  TokenType,\n  TokenVocabulary,\n} from \"@chevrotain/types\";\nimport { Recoverable } from \"./traits/recoverable.js\";\nimport { LooksAhead } from \"./traits/looksahead.js\";\nimport { TreeBuilder } from \"./traits/tree_builder.js\";\nimport { LexerAdapter } from \"./traits/lexer_adapter.js\";\nimport { RecognizerApi } from \"./traits/recognizer_api.js\";\nimport { RecognizerEngine } from \"./traits/recognizer_engine.js\";\n\nimport { ErrorHandler } from \"./traits/error_handler.js\";\nimport { MixedInParser } from \"./traits/parser_traits.js\";\nimport { ContentAssist } from \"./traits/context_assist.js\";\nimport { GastRecorder } from \"./traits/gast_recorder.js\";\nimport { PerformanceTracer } from \"./traits/perf_tracer.js\";\nimport { applyMixins } from \"./utils/apply_mixins.js\";\nimport { IParserDefinitionError } from \"../grammar/types.js\";\nimport { Rule } from \"@chevrotain/gast\";\nimport { IParserConfigInternal, ParserMethodInternal } from \"./types.js\";\nimport { validateLookahead } from \"../grammar/checks.js\";\n\nexport const END_OF_FILE = createTokenInstance(\n  EOF,\n  \"\",\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n);\nObject.freeze(END_OF_FILE);\n\nexport type TokenMatcher = (token: IToken, tokType: TokenType) => boolean;\n\nexport const DEFAULT_PARSER_CONFIG: Required<\n  Omit<IParserConfigInternal, \"lookaheadStrategy\">\n> = Object.freeze({\n  recoveryEnabled: false,\n  maxLookahead: 3,\n  dynamicTokensEnabled: false,\n  outputCst: true,\n  errorMessageProvider: defaultParserErrorProvider,\n  nodeLocationTracking: \"none\",\n  traceInitPerf: false,\n  skipValidations: false,\n});\n\nexport const DEFAULT_RULE_CONFIG: Required<IRuleConfig<any>> = Object.freeze({\n  recoveryValueFunc: () => undefined,\n  resyncEnabled: true,\n});\n\nexport enum ParserDefinitionErrorType {\n  INVALID_RULE_NAME = 0,\n  DUPLICATE_RULE_NAME = 1,\n  INVALID_RULE_OVERRIDE = 2,\n  DUPLICATE_PRODUCTIONS = 3,\n  UNRESOLVED_SUBRULE_REF = 4,\n  LEFT_RECURSION = 5,\n  NONE_LAST_EMPTY_ALT = 6,\n  AMBIGUOUS_ALTS = 7,\n  CONFLICT_TOKENS_RULES_NAMESPACE = 8,\n  INVALID_TOKEN_NAME = 9,\n  NO_NON_EMPTY_LOOKAHEAD = 10,\n  AMBIGUOUS_PREFIX_ALTS = 11,\n  TOO_MANY_ALTS = 12,\n  CUSTOM_LOOKAHEAD_VALIDATION = 13,\n}\n\nexport interface IParserDuplicatesDefinitionError\n  extends IParserDefinitionError {\n  dslName: string;\n  occurrence: number;\n  parameter?: string;\n}\n\nexport interface IParserEmptyAlternativeDefinitionError\n  extends IParserDefinitionError {\n  occurrence: number;\n  alternative: number;\n}\n\nexport interface IParserAmbiguousAlternativesDefinitionError\n  extends IParserDefinitionError {\n  occurrence: number | string;\n  alternatives: number[];\n}\n\nexport interface IParserUnresolvedRefDefinitionError\n  extends IParserDefinitionError {\n  unresolvedRefName: string;\n}\n\nexport interface IParserState {\n  errors: IRecognitionException[];\n  lexerState: any;\n  RULE_STACK: number[];\n  CST_STACK: CstNode[];\n}\n\nexport type Predicate = () => boolean;\n\nexport function EMPTY_ALT(): () => undefined;\nexport function EMPTY_ALT<T>(value: T): () => T;\nexport function EMPTY_ALT(value: any = undefined) {\n  return function () {\n    return value;\n  };\n}\n\nexport class Parser {\n  // Set this flag to true if you don't want the Parser to throw error when problems in it's definition are detected.\n  // (normally during the parser's constructor).\n  // This is a design time flag, it will not affect the runtime error handling of the parser, just design time errors,\n  // for example: duplicate rule names, referencing an unresolved subrule, ect...\n  // This flag should not be enabled during normal usage, it is used in special situations, for example when\n  // needing to display the parser definition errors in some GUI(online playground).\n  static DEFER_DEFINITION_ERRORS_HANDLING: boolean = false;\n\n  /**\n   *  @deprecated use the **instance** method with the same name instead\n   */\n  static performSelfAnalysis(parserInstance: Parser): void {\n    throw Error(\n      \"The **static** `performSelfAnalysis` method has been deprecated.\" +\n        \"\\t\\nUse the **instance** method with the same name instead.\",\n    );\n  }\n\n  public performSelfAnalysis(this: MixedInParser): void {\n    this.TRACE_INIT(\"performSelfAnalysis\", () => {\n      let defErrorsMsgs;\n\n      this.selfAnalysisDone = true;\n      const className = this.className;\n\n      this.TRACE_INIT(\"toFastProps\", () => {\n        // Without this voodoo magic the parser would be x3-x4 slower\n        // It seems it is better to invoke `toFastProperties` **before**\n        // Any manipulations of the `this` object done during the recording phase.\n        toFastProperties(this);\n      });\n\n      this.TRACE_INIT(\"Grammar Recording\", () => {\n        try {\n          this.enableRecording();\n          // Building the GAST\n          forEach(this.definedRulesNames, (currRuleName) => {\n            const wrappedRule = (this as any)[\n              currRuleName\n            ] as ParserMethodInternal<unknown[], unknown>;\n            const originalGrammarAction = wrappedRule[\"originalGrammarAction\"];\n            let recordedRuleGast!: Rule;\n            this.TRACE_INIT(`${currRuleName} Rule`, () => {\n              recordedRuleGast = this.topLevelRuleRecord(\n                currRuleName,\n                originalGrammarAction,\n              );\n            });\n            this.gastProductionsCache[currRuleName] = recordedRuleGast;\n          });\n        } finally {\n          this.disableRecording();\n        }\n      });\n\n      let resolverErrors: IParserDefinitionError[] = [];\n      this.TRACE_INIT(\"Grammar Resolving\", () => {\n        resolverErrors = resolveGrammar({\n          rules: values(this.gastProductionsCache),\n        });\n        this.definitionErrors = this.definitionErrors.concat(resolverErrors);\n      });\n\n      this.TRACE_INIT(\"Grammar Validations\", () => {\n        // only perform additional grammar validations IFF no resolving errors have occurred.\n        // as unresolved grammar may lead to unhandled runtime exceptions in the follow up validations.\n        if (isEmpty(resolverErrors) && this.skipValidations === false) {\n          const validationErrors = validateGrammar({\n            rules: values(this.gastProductionsCache),\n            tokenTypes: values(this.tokensMap),\n            errMsgProvider: defaultGrammarValidatorErrorProvider,\n            grammarName: className,\n          });\n          const lookaheadValidationErrors = validateLookahead({\n            lookaheadStrategy: this.lookaheadStrategy,\n            rules: values(this.gastProductionsCache),\n            tokenTypes: values(this.tokensMap),\n            grammarName: className,\n          });\n          this.definitionErrors = this.definitionErrors.concat(\n            validationErrors,\n            lookaheadValidationErrors,\n          );\n        }\n      });\n\n      // this analysis may fail if the grammar is not perfectly valid\n      if (isEmpty(this.definitionErrors)) {\n        // The results of these computations are not needed unless error recovery is enabled.\n        if (this.recoveryEnabled) {\n          this.TRACE_INIT(\"computeAllProdsFollows\", () => {\n            const allFollows = computeAllProdsFollows(\n              values(this.gastProductionsCache),\n            );\n            this.resyncFollows = allFollows;\n          });\n        }\n\n        this.TRACE_INIT(\"ComputeLookaheadFunctions\", () => {\n          this.lookaheadStrategy.initialize?.({\n            rules: values(this.gastProductionsCache),\n          });\n          this.preComputeLookaheadFunctions(values(this.gastProductionsCache));\n        });\n      }\n\n      if (\n        !Parser.DEFER_DEFINITION_ERRORS_HANDLING &&\n        !isEmpty(this.definitionErrors)\n      ) {\n        defErrorsMsgs = map(\n          this.definitionErrors,\n          (defError) => defError.message,\n        );\n        throw new Error(\n          `Parser Definition Errors detected:\\n ${defErrorsMsgs.join(\n            \"\\n-------------------------------\\n\",\n          )}`,\n        );\n      }\n    });\n  }\n\n  definitionErrors: IParserDefinitionError[] = [];\n  selfAnalysisDone = false;\n  protected skipValidations: boolean;\n\n  constructor(tokenVocabulary: TokenVocabulary, config: IParserConfig) {\n    const that: MixedInParser = this as any;\n    that.initErrorHandler(config);\n    that.initLexerAdapter();\n    that.initLooksAhead(config);\n    that.initRecognizerEngine(tokenVocabulary, config);\n    that.initRecoverable(config);\n    that.initTreeBuilder(config);\n    that.initContentAssist();\n    that.initGastRecorder(config);\n    that.initPerformanceTracer(config);\n\n    if (has(config, \"ignoredIssues\")) {\n      throw new Error(\n        \"The <ignoredIssues> IParserConfig property has been deprecated.\\n\\t\" +\n          \"Please use the <IGNORE_AMBIGUITIES> flag on the relevant DSL method instead.\\n\\t\" +\n          \"See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#IGNORING_AMBIGUITIES\\n\\t\" +\n          \"For further details.\",\n      );\n    }\n\n    this.skipValidations = has(config, \"skipValidations\")\n      ? (config.skipValidations as boolean) // casting assumes the end user passing the correct type\n      : DEFAULT_PARSER_CONFIG.skipValidations;\n  }\n}\n\napplyMixins(Parser, [\n  Recoverable,\n  LooksAhead,\n  TreeBuilder,\n  LexerAdapter,\n  RecognizerEngine,\n  RecognizerApi,\n  ErrorHandler,\n  ContentAssist,\n  GastRecorder,\n  PerformanceTracer,\n]);\n\nexport class CstParser extends Parser {\n  constructor(\n    tokenVocabulary: TokenVocabulary,\n    config: IParserConfigInternal = DEFAULT_PARSER_CONFIG,\n  ) {\n    const configClone = clone(config);\n    configClone.outputCst = true;\n    super(tokenVocabulary, configClone);\n  }\n}\n\nexport class EmbeddedActionsParser extends Parser {\n  constructor(\n    tokenVocabulary: TokenVocabulary,\n    config: IParserConfigInternal = DEFAULT_PARSER_CONFIG,\n  ) {\n    const configClone = clone(config);\n    configClone.outputCst = false;\n    super(tokenVocabulary, configClone);\n  }\n}\n","export function applyMixins(derivedCtor: any, baseCtors: any[]) {\n  baseCtors.forEach((baseCtor) => {\n    const baseProto = baseCtor.prototype;\n    Object.getOwnPropertyNames(baseProto).forEach((propName) => {\n      if (propName === \"constructor\") {\n        return;\n      }\n\n      const basePropDescriptor = Object.getOwnPropertyDescriptor(\n        baseProto,\n        propName,\n      );\n      // Handle Accessors\n      if (\n        basePropDescriptor &&\n        (basePropDescriptor.get || basePropDescriptor.set)\n      ) {\n        Object.defineProperty(\n          derivedCtor.prototype,\n          propName,\n          basePropDescriptor,\n        );\n      } else {\n        derivedCtor.prototype[propName] = baseCtor.prototype[propName];\n      }\n    });\n  });\n}\n","import {\n  addNoneTerminalToCst,\n  addTerminalToCst,\n  setNodeLocationFull,\n  setNodeLocationOnlyOffset,\n} from \"../../cst/cst.js\";\nimport { has, isUndefined, keys, noop } from \"lodash-es\";\nimport {\n  createBaseSemanticVisitorConstructor,\n  createBaseVisitorConstructorWithDefaults,\n} from \"../../cst/cst_visitor.js\";\nimport {\n  CstNode,\n  CstNodeLocation,\n  ICstVisitor,\n  IParserConfig,\n  IToken,\n  nodeLocationTrackingOptions,\n} from \"@chevrotain/types\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser.js\";\n\n/**\n * This trait is responsible for the CST building logic.\n */\nexport class TreeBuilder {\n  outputCst: boolean;\n  CST_STACK: CstNode[];\n  baseCstVisitorConstructor: Function;\n  baseCstVisitorWithDefaultsConstructor: Function;\n\n  // dynamically assigned Methods\n  setNodeLocationFromNode: (\n    nodeLocation: CstNodeLocation,\n    locationInformation: CstNodeLocation,\n  ) => void;\n  setNodeLocationFromToken: (\n    nodeLocation: CstNodeLocation,\n    locationInformation: CstNodeLocation,\n  ) => void;\n  cstPostRule: (this: MixedInParser, ruleCstNode: CstNode) => void;\n\n  setInitialNodeLocation: (cstNode: CstNode) => void;\n  nodeLocationTracking: nodeLocationTrackingOptions;\n\n  initTreeBuilder(this: MixedInParser, config: IParserConfig) {\n    this.CST_STACK = [];\n\n    // outputCst is no longer exposed/defined in the pubic API\n    this.outputCst = (config as any).outputCst;\n\n    this.nodeLocationTracking = has(config, \"nodeLocationTracking\")\n      ? (config.nodeLocationTracking as nodeLocationTrackingOptions) // assumes end user provides the correct config value/type\n      : DEFAULT_PARSER_CONFIG.nodeLocationTracking;\n\n    if (!this.outputCst) {\n      this.cstInvocationStateUpdate = noop;\n      this.cstFinallyStateUpdate = noop;\n      this.cstPostTerminal = noop;\n      this.cstPostNonTerminal = noop;\n      this.cstPostRule = noop;\n    } else {\n      if (/full/i.test(this.nodeLocationTracking)) {\n        if (this.recoveryEnabled) {\n          this.setNodeLocationFromToken = setNodeLocationFull;\n          this.setNodeLocationFromNode = setNodeLocationFull;\n          this.cstPostRule = noop;\n          this.setInitialNodeLocation = this.setInitialNodeLocationFullRecovery;\n        } else {\n          this.setNodeLocationFromToken = noop;\n          this.setNodeLocationFromNode = noop;\n          this.cstPostRule = this.cstPostRuleFull;\n          this.setInitialNodeLocation = this.setInitialNodeLocationFullRegular;\n        }\n      } else if (/onlyOffset/i.test(this.nodeLocationTracking)) {\n        if (this.recoveryEnabled) {\n          this.setNodeLocationFromToken = <any>setNodeLocationOnlyOffset;\n          this.setNodeLocationFromNode = <any>setNodeLocationOnlyOffset;\n          this.cstPostRule = noop;\n          this.setInitialNodeLocation =\n            this.setInitialNodeLocationOnlyOffsetRecovery;\n        } else {\n          this.setNodeLocationFromToken = noop;\n          this.setNodeLocationFromNode = noop;\n          this.cstPostRule = this.cstPostRuleOnlyOffset;\n          this.setInitialNodeLocation =\n            this.setInitialNodeLocationOnlyOffsetRegular;\n        }\n      } else if (/none/i.test(this.nodeLocationTracking)) {\n        this.setNodeLocationFromToken = noop;\n        this.setNodeLocationFromNode = noop;\n        this.cstPostRule = noop;\n        this.setInitialNodeLocation = noop;\n      } else {\n        throw Error(\n          `Invalid <nodeLocationTracking> config option: \"${config.nodeLocationTracking}\"`,\n        );\n      }\n    }\n  }\n\n  setInitialNodeLocationOnlyOffsetRecovery(\n    this: MixedInParser,\n    cstNode: any,\n  ): void {\n    cstNode.location = {\n      startOffset: NaN,\n      endOffset: NaN,\n    };\n  }\n\n  setInitialNodeLocationOnlyOffsetRegular(\n    this: MixedInParser,\n    cstNode: any,\n  ): void {\n    cstNode.location = {\n      // without error recovery the starting Location of a new CstNode is guaranteed\n      // To be the next Token's startOffset (for valid inputs).\n      // For invalid inputs there won't be any CSTOutput so this potential\n      // inaccuracy does not matter\n      startOffset: this.LA(1).startOffset,\n      endOffset: NaN,\n    };\n  }\n\n  setInitialNodeLocationFullRecovery(this: MixedInParser, cstNode: any): void {\n    cstNode.location = {\n      startOffset: NaN,\n      startLine: NaN,\n      startColumn: NaN,\n      endOffset: NaN,\n      endLine: NaN,\n      endColumn: NaN,\n    };\n  }\n\n  /**\n     *  @see setInitialNodeLocationOnlyOffsetRegular for explanation why this work\n\n     * @param cstNode\n     */\n  setInitialNodeLocationFullRegular(this: MixedInParser, cstNode: any): void {\n    const nextToken = this.LA(1);\n    cstNode.location = {\n      startOffset: nextToken.startOffset,\n      startLine: nextToken.startLine,\n      startColumn: nextToken.startColumn,\n      endOffset: NaN,\n      endLine: NaN,\n      endColumn: NaN,\n    };\n  }\n\n  cstInvocationStateUpdate(this: MixedInParser, fullRuleName: string): void {\n    const cstNode: CstNode = {\n      name: fullRuleName,\n      children: Object.create(null),\n    };\n\n    this.setInitialNodeLocation(cstNode);\n    this.CST_STACK.push(cstNode);\n  }\n\n  cstFinallyStateUpdate(this: MixedInParser): void {\n    this.CST_STACK.pop();\n  }\n\n  cstPostRuleFull(this: MixedInParser, ruleCstNode: CstNode): void {\n    // casts to `required<CstNodeLocation>` are safe because `cstPostRuleFull` should only be invoked when full location is enabled\n    const prevToken = this.LA(0) as Required<CstNodeLocation>;\n    const loc = ruleCstNode.location as Required<CstNodeLocation>;\n\n    // If this condition is true it means we consumed at least one Token\n    // In this CstNode.\n    if (loc.startOffset <= prevToken.startOffset === true) {\n      loc.endOffset = prevToken.endOffset;\n      loc.endLine = prevToken.endLine;\n      loc.endColumn = prevToken.endColumn;\n    }\n    // \"empty\" CstNode edge case\n    else {\n      loc.startOffset = NaN;\n      loc.startLine = NaN;\n      loc.startColumn = NaN;\n    }\n  }\n\n  cstPostRuleOnlyOffset(this: MixedInParser, ruleCstNode: CstNode): void {\n    const prevToken = this.LA(0);\n    // `location' is not null because `cstPostRuleOnlyOffset` will only be invoked when location tracking is enabled.\n    const loc = ruleCstNode.location!;\n\n    // If this condition is true it means we consumed at least one Token\n    // In this CstNode.\n    if (loc.startOffset <= prevToken.startOffset === true) {\n      loc.endOffset = prevToken.endOffset;\n    }\n    // \"empty\" CstNode edge case\n    else {\n      loc.startOffset = NaN;\n    }\n  }\n\n  cstPostTerminal(\n    this: MixedInParser,\n    key: string,\n    consumedToken: IToken,\n  ): void {\n    const rootCst = this.CST_STACK[this.CST_STACK.length - 1];\n    addTerminalToCst(rootCst, consumedToken, key);\n    // This is only used when **both** error recovery and CST Output are enabled.\n    this.setNodeLocationFromToken(rootCst.location!, <any>consumedToken);\n  }\n\n  cstPostNonTerminal(\n    this: MixedInParser,\n    ruleCstResult: CstNode,\n    ruleName: string,\n  ): void {\n    const preCstNode = this.CST_STACK[this.CST_STACK.length - 1];\n    addNoneTerminalToCst(preCstNode, ruleName, ruleCstResult);\n    // This is only used when **both** error recovery and CST Output are enabled.\n    this.setNodeLocationFromNode(preCstNode.location!, ruleCstResult.location!);\n  }\n\n  getBaseCstVisitorConstructor<IN = any, OUT = any>(\n    this: MixedInParser,\n  ): {\n    new (...args: any[]): ICstVisitor<IN, OUT>;\n  } {\n    if (isUndefined(this.baseCstVisitorConstructor)) {\n      const newBaseCstVisitorConstructor = createBaseSemanticVisitorConstructor(\n        this.className,\n        keys(this.gastProductionsCache),\n      );\n      this.baseCstVisitorConstructor = newBaseCstVisitorConstructor;\n      return newBaseCstVisitorConstructor;\n    }\n\n    return <any>this.baseCstVisitorConstructor;\n  }\n\n  getBaseCstVisitorConstructorWithDefaults<IN = any, OUT = any>(\n    this: MixedInParser,\n  ): {\n    new (...args: any[]): ICstVisitor<IN, OUT>;\n  } {\n    if (isUndefined(this.baseCstVisitorWithDefaultsConstructor)) {\n      const newConstructor = createBaseVisitorConstructorWithDefaults(\n        this.className,\n        keys(this.gastProductionsCache),\n        this.getBaseCstVisitorConstructor(),\n      );\n      this.baseCstVisitorWithDefaultsConstructor = newConstructor;\n      return newConstructor;\n    }\n\n    return <any>this.baseCstVisitorWithDefaultsConstructor;\n  }\n\n  getLastExplicitRuleShortName(this: MixedInParser): number {\n    const ruleStack = this.RULE_STACK;\n    return ruleStack[ruleStack.length - 1];\n  }\n\n  getPreviousExplicitRuleShortName(this: MixedInParser): number {\n    const ruleStack = this.RULE_STACK;\n    return ruleStack[ruleStack.length - 2];\n  }\n\n  getLastExplicitRuleOccurrenceIndex(this: MixedInParser): number {\n    const occurrenceStack = this.RULE_OCCURRENCE_STACK;\n    return occurrenceStack[occurrenceStack.length - 1];\n  }\n}\n","import { END_OF_FILE } from \"../parser.js\";\nimport { IToken } from \"@chevrotain/types\";\nimport { MixedInParser } from \"./parser_traits.js\";\n\n/**\n * Trait responsible abstracting over the interaction with Lexer output (Token vector).\n *\n * This could be generalized to support other kinds of lexers, e.g.\n * - Just in Time Lexing / Lexer-Less parsing.\n * - Streaming Lexer.\n */\nexport class LexerAdapter {\n  tokVector: IToken[];\n  tokVectorLength: number;\n  currIdx: number;\n\n  initLexerAdapter() {\n    this.tokVector = [];\n    this.tokVectorLength = 0;\n    this.currIdx = -1;\n  }\n\n  set input(newInput: IToken[]) {\n    // @ts-ignore - `this parameter` not supported in setters/getters\n    //   - https://www.typescriptlang.org/docs/handbook/functions.html#this-parameters\n    if (this.selfAnalysisDone !== true) {\n      throw Error(\n        `Missing <performSelfAnalysis> invocation at the end of the Parser's constructor.`,\n      );\n    }\n    // @ts-ignore - `this parameter` not supported in setters/getters\n    //   - https://www.typescriptlang.org/docs/handbook/functions.html#this-parameters\n    this.reset();\n    this.tokVector = newInput;\n    this.tokVectorLength = newInput.length;\n  }\n\n  get input(): IToken[] {\n    return this.tokVector;\n  }\n\n  // skips a token and returns the next token\n  SKIP_TOKEN(this: MixedInParser): IToken {\n    if (this.currIdx <= this.tokVector.length - 2) {\n      this.consumeToken();\n      return this.LA(1);\n    } else {\n      return END_OF_FILE;\n    }\n  }\n\n  // Lexer (accessing Token vector) related methods which can be overridden to implement lazy lexers\n  // or lexers dependent on parser context.\n  LA(this: MixedInParser, howMuch: number): IToken {\n    const soughtIdx = this.currIdx + howMuch;\n    if (soughtIdx < 0 || this.tokVectorLength <= soughtIdx) {\n      return END_OF_FILE;\n    } else {\n      return this.tokVector[soughtIdx];\n    }\n  }\n\n  consumeToken(this: MixedInParser) {\n    this.currIdx++;\n  }\n\n  exportLexerState(this: MixedInParser): number {\n    return this.currIdx;\n  }\n\n  importLexerState(this: MixedInParser, newState: number) {\n    this.currIdx = newState;\n  }\n\n  resetLexerState(this: MixedInParser): void {\n    this.currIdx = -1;\n  }\n\n  moveToTerminatedState(this: MixedInParser): void {\n    this.currIdx = this.tokVector.length - 1;\n  }\n\n  getLexerPosition(this: MixedInParser): number {\n    return this.exportLexerState();\n  }\n}\n","import {\n  AtLeastOneSepMethodOpts,\n  ConsumeMethodOpts,\n  DSLMethodOpts,\n  DSLMethodOptsWithErr,\n  GrammarAction,\n  IOrAlt,\n  IParserConfig,\n  IRuleConfig,\n  IToken,\n  ManySepMethodOpts,\n  OrMethodOpts,\n  ParserMethod,\n  SubruleMethodOpts,\n  TokenType,\n  TokenTypeDictionary,\n  TokenVocabulary,\n} from \"@chevrotain/types\";\nimport {\n  clone,\n  every,\n  flatten,\n  has,\n  isArray,\n  isEmpty,\n  isObject,\n  reduce,\n  uniq,\n  values,\n} from \"lodash-es\";\nimport {\n  AT_LEAST_ONE_IDX,\n  AT_LEAST_ONE_SEP_IDX,\n  BITS_FOR_METHOD_TYPE,\n  BITS_FOR_OCCURRENCE_IDX,\n  MANY_IDX,\n  MANY_SEP_IDX,\n  OPTION_IDX,\n  OR_IDX,\n} from \"../../grammar/keys.js\";\nimport {\n  isRecognitionException,\n  MismatchedTokenException,\n  NotAllInputParsedException,\n} from \"../../exceptions_public.js\";\nimport { PROD_TYPE } from \"../../grammar/lookahead.js\";\nimport {\n  AbstractNextTerminalAfterProductionWalker,\n  NextTerminalAfterAtLeastOneSepWalker,\n  NextTerminalAfterAtLeastOneWalker,\n  NextTerminalAfterManySepWalker,\n  NextTerminalAfterManyWalker,\n} from \"../../grammar/interpreter.js\";\nimport { DEFAULT_RULE_CONFIG, IParserState, TokenMatcher } from \"../parser.js\";\nimport { IN_RULE_RECOVERY_EXCEPTION } from \"./recoverable.js\";\nimport { EOF } from \"../../../scan/tokens_public.js\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport {\n  augmentTokenTypes,\n  isTokenType,\n  tokenStructuredMatcher,\n  tokenStructuredMatcherNoCategories,\n} from \"../../../scan/tokens.js\";\nimport { Rule } from \"@chevrotain/gast\";\nimport { ParserMethodInternal } from \"../types.js\";\n\n/**\n * This trait is responsible for the runtime parsing engine\n * Used by the official API (recognizer_api.ts)\n */\nexport class RecognizerEngine {\n  isBackTrackingStack: boolean[];\n  className: string;\n  RULE_STACK: number[];\n  RULE_OCCURRENCE_STACK: number[];\n  definedRulesNames: string[];\n  tokensMap: { [fqn: string]: TokenType };\n  gastProductionsCache: Record<string, Rule>;\n  shortRuleNameToFull: Record<string, string>;\n  fullRuleNameToShort: Record<string, number>;\n  // The shortName Index must be coded \"after\" the first 8bits to enable building unique lookahead keys\n  ruleShortNameIdx: number;\n  tokenMatcher: TokenMatcher;\n  subruleIdx: number;\n\n  initRecognizerEngine(\n    tokenVocabulary: TokenVocabulary,\n    config: IParserConfig,\n  ) {\n    this.className = this.constructor.name;\n    // TODO: would using an ES6 Map or plain object be faster (CST building scenario)\n    this.shortRuleNameToFull = {};\n    this.fullRuleNameToShort = {};\n    this.ruleShortNameIdx = 256;\n    this.tokenMatcher = tokenStructuredMatcherNoCategories;\n    this.subruleIdx = 0;\n\n    this.definedRulesNames = [];\n    this.tokensMap = {};\n    this.isBackTrackingStack = [];\n    this.RULE_STACK = [];\n    this.RULE_OCCURRENCE_STACK = [];\n    this.gastProductionsCache = {};\n\n    if (has(config, \"serializedGrammar\")) {\n      throw Error(\n        \"The Parser's configuration can no longer contain a <serializedGrammar> property.\\n\" +\n          \"\\tSee: https://chevrotain.io/docs/changes/BREAKING_CHANGES.html#_6-0-0\\n\" +\n          \"\\tFor Further details.\",\n      );\n    }\n\n    if (isArray(tokenVocabulary)) {\n      // This only checks for Token vocabularies provided as arrays.\n      // That is good enough because the main objective is to detect users of pre-V4.0 APIs\n      // rather than all edge cases of empty Token vocabularies.\n      if (isEmpty(tokenVocabulary as any[])) {\n        throw Error(\n          \"A Token Vocabulary cannot be empty.\\n\" +\n            \"\\tNote that the first argument for the parser constructor\\n\" +\n            \"\\tis no longer a Token vector (since v4.0).\",\n        );\n      }\n\n      if (typeof (tokenVocabulary as any[])[0].startOffset === \"number\") {\n        throw Error(\n          \"The Parser constructor no longer accepts a token vector as the first argument.\\n\" +\n            \"\\tSee: https://chevrotain.io/docs/changes/BREAKING_CHANGES.html#_4-0-0\\n\" +\n            \"\\tFor Further details.\",\n        );\n      }\n    }\n\n    if (isArray(tokenVocabulary)) {\n      this.tokensMap = reduce(\n        tokenVocabulary,\n        (acc, tokType: TokenType) => {\n          acc[tokType.name] = tokType;\n          return acc;\n        },\n        {} as { [tokenName: string]: TokenType },\n      );\n    } else if (\n      has(tokenVocabulary, \"modes\") &&\n      every(flatten(values((<any>tokenVocabulary).modes)), isTokenType)\n    ) {\n      const allTokenTypes = flatten(values((<any>tokenVocabulary).modes));\n      const uniqueTokens = uniq(allTokenTypes);\n      this.tokensMap = <any>reduce(\n        uniqueTokens,\n        (acc, tokType: TokenType) => {\n          acc[tokType.name] = tokType;\n          return acc;\n        },\n        {} as { [tokenName: string]: TokenType },\n      );\n    } else if (isObject(tokenVocabulary)) {\n      this.tokensMap = clone(tokenVocabulary as TokenTypeDictionary);\n    } else {\n      throw new Error(\n        \"<tokensDictionary> argument must be An Array of Token constructors,\" +\n          \" A dictionary of Token constructors or an IMultiModeLexerDefinition\",\n      );\n    }\n\n    // always add EOF to the tokenNames -> constructors map. it is useful to assure all the input has been\n    // parsed with a clear error message (\"expecting EOF but found ...\")\n    this.tokensMap[\"EOF\"] = EOF;\n\n    const allTokenTypes = has(tokenVocabulary, \"modes\")\n      ? flatten(values((<any>tokenVocabulary).modes))\n      : values(tokenVocabulary);\n    const noTokenCategoriesUsed = every(allTokenTypes, (tokenConstructor) =>\n      isEmpty(tokenConstructor.categoryMatches),\n    );\n\n    this.tokenMatcher = noTokenCategoriesUsed\n      ? tokenStructuredMatcherNoCategories\n      : tokenStructuredMatcher;\n\n    // Because ES2015+ syntax should be supported for creating Token classes\n    // We cannot assume that the Token classes were created using the \"extendToken\" utilities\n    // Therefore we must augment the Token classes both on Lexer initialization and on Parser initialization\n    augmentTokenTypes(values(this.tokensMap));\n  }\n\n  defineRule<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleName: string,\n    impl: (...args: ARGS) => R,\n    config: IRuleConfig<R>,\n  ): ParserMethodInternal<ARGS, R> {\n    if (this.selfAnalysisDone) {\n      throw Error(\n        `Grammar rule <${ruleName}> may not be defined after the 'performSelfAnalysis' method has been called'\\n` +\n          `Make sure that all grammar rule definitions are done before 'performSelfAnalysis' is called.`,\n      );\n    }\n    const resyncEnabled: boolean = has(config, \"resyncEnabled\")\n      ? (config.resyncEnabled as boolean) // assumes end user provides the correct config value/type\n      : DEFAULT_RULE_CONFIG.resyncEnabled;\n    const recoveryValueFunc = has(config, \"recoveryValueFunc\")\n      ? (config.recoveryValueFunc as () => R) // assumes end user provides the correct config value/type\n      : DEFAULT_RULE_CONFIG.recoveryValueFunc;\n\n    // performance optimization: Use small integers as keys for the longer human readable \"full\" rule names.\n    // this greatly improves Map access time (as much as 8% for some performance benchmarks).\n    const shortName =\n      this.ruleShortNameIdx << (BITS_FOR_METHOD_TYPE + BITS_FOR_OCCURRENCE_IDX);\n\n    this.ruleShortNameIdx++;\n    this.shortRuleNameToFull[shortName] = ruleName;\n    this.fullRuleNameToShort[ruleName] = shortName;\n\n    let invokeRuleWithTry: ParserMethod<ARGS, R>;\n\n    // Micro optimization, only check the condition **once** on rule definition\n    // instead of **every single** rule invocation.\n    if (this.outputCst === true) {\n      invokeRuleWithTry = function invokeRuleWithTry(\n        this: MixedInParser,\n        ...args: ARGS\n      ): R {\n        try {\n          this.ruleInvocationStateUpdate(shortName, ruleName, this.subruleIdx);\n          impl.apply(this, args);\n          const cst = this.CST_STACK[this.CST_STACK.length - 1];\n          this.cstPostRule(cst);\n          return cst as unknown as R;\n        } catch (e) {\n          return this.invokeRuleCatch(e, resyncEnabled, recoveryValueFunc) as R;\n        } finally {\n          this.ruleFinallyStateUpdate();\n        }\n      };\n    } else {\n      invokeRuleWithTry = function invokeRuleWithTryCst(\n        this: MixedInParser,\n        ...args: ARGS\n      ): R {\n        try {\n          this.ruleInvocationStateUpdate(shortName, ruleName, this.subruleIdx);\n          return impl.apply(this, args);\n        } catch (e) {\n          return this.invokeRuleCatch(e, resyncEnabled, recoveryValueFunc) as R;\n        } finally {\n          this.ruleFinallyStateUpdate();\n        }\n      };\n    }\n\n    const wrappedGrammarRule: ParserMethodInternal<ARGS, R> = Object.assign(\n      invokeRuleWithTry as any,\n      { ruleName, originalGrammarAction: impl },\n    );\n\n    return wrappedGrammarRule;\n  }\n\n  invokeRuleCatch(\n    this: MixedInParser,\n    e: Error,\n    resyncEnabledConfig: boolean,\n    recoveryValueFunc: Function,\n  ): unknown {\n    const isFirstInvokedRule = this.RULE_STACK.length === 1;\n    // note the reSync is always enabled for the first rule invocation, because we must always be able to\n    // reSync with EOF and just output some INVALID ParseTree\n    // during backtracking reSync recovery is disabled, otherwise we can't be certain the backtracking\n    // path is really the most valid one\n    const reSyncEnabled =\n      resyncEnabledConfig && !this.isBackTracking() && this.recoveryEnabled;\n\n    if (isRecognitionException(e)) {\n      const recogError: any = e;\n      if (reSyncEnabled) {\n        const reSyncTokType = this.findReSyncTokenType();\n        if (this.isInCurrentRuleReSyncSet(reSyncTokType)) {\n          recogError.resyncedTokens = this.reSyncTo(reSyncTokType);\n          if (this.outputCst) {\n            const partialCstResult: any =\n              this.CST_STACK[this.CST_STACK.length - 1];\n            partialCstResult.recoveredNode = true;\n            return partialCstResult;\n          } else {\n            return recoveryValueFunc(e);\n          }\n        } else {\n          if (this.outputCst) {\n            const partialCstResult: any =\n              this.CST_STACK[this.CST_STACK.length - 1];\n            partialCstResult.recoveredNode = true;\n            recogError.partialCstResult = partialCstResult;\n          }\n          // to be handled Further up the call stack\n          throw recogError;\n        }\n      } else if (isFirstInvokedRule) {\n        // otherwise a Redundant input error will be created as well and we cannot guarantee that this is indeed the case\n        this.moveToTerminatedState();\n        // the parser should never throw one of its own errors outside its flow.\n        // even if error recovery is disabled\n        return recoveryValueFunc(e);\n      } else {\n        // to be recovered Further up the call stack\n        throw recogError;\n      }\n    } else {\n      // some other Error type which we don't know how to handle (for example a built in JavaScript Error)\n      throw e;\n    }\n  }\n\n  // Implementation of parsing DSL\n  optionInternal<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n    occurrence: number,\n  ): OUT | undefined {\n    const key = this.getKeyForAutomaticLookahead(OPTION_IDX, occurrence);\n    return this.optionInternalLogic(actionORMethodDef, occurrence, key);\n  }\n\n  optionInternalLogic<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n    occurrence: number,\n    key: number,\n  ): OUT | undefined {\n    let lookAheadFunc = this.getLaFuncFromCache(key);\n    let action: GrammarAction<OUT>;\n    if (typeof actionORMethodDef !== \"function\") {\n      action = actionORMethodDef.DEF;\n      const predicate = actionORMethodDef.GATE;\n      // predicate present\n      if (predicate !== undefined) {\n        const orgLookaheadFunction = lookAheadFunc;\n        lookAheadFunc = () => {\n          return predicate.call(this) && orgLookaheadFunction.call(this);\n        };\n      }\n    } else {\n      action = actionORMethodDef;\n    }\n\n    if (lookAheadFunc.call(this) === true) {\n      return action.call(this);\n    }\n    return undefined;\n  }\n\n  atLeastOneInternal<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    const laKey = this.getKeyForAutomaticLookahead(\n      AT_LEAST_ONE_IDX,\n      prodOccurrence,\n    );\n    return this.atLeastOneInternalLogic(\n      prodOccurrence,\n      actionORMethodDef,\n      laKey,\n    );\n  }\n\n  atLeastOneInternalLogic<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n    key: number,\n  ): void {\n    let lookAheadFunc = this.getLaFuncFromCache(key);\n    let action;\n    if (typeof actionORMethodDef !== \"function\") {\n      action = actionORMethodDef.DEF;\n      const predicate = actionORMethodDef.GATE;\n      // predicate present\n      if (predicate !== undefined) {\n        const orgLookaheadFunction = lookAheadFunc;\n        lookAheadFunc = () => {\n          return predicate.call(this) && orgLookaheadFunction.call(this);\n        };\n      }\n    } else {\n      action = actionORMethodDef;\n    }\n\n    if ((<Function>lookAheadFunc).call(this) === true) {\n      let notStuck = this.doSingleRepetition(action);\n      while (\n        (<Function>lookAheadFunc).call(this) === true &&\n        notStuck === true\n      ) {\n        notStuck = this.doSingleRepetition(action);\n      }\n    } else {\n      throw this.raiseEarlyExitException(\n        prodOccurrence,\n        PROD_TYPE.REPETITION_MANDATORY,\n        (<DSLMethodOptsWithErr<OUT>>actionORMethodDef).ERR_MSG,\n      );\n    }\n\n    // note that while it may seem that this can cause an error because by using a recursive call to\n    // AT_LEAST_ONE we change the grammar to AT_LEAST_TWO, AT_LEAST_THREE ... , the possible recursive call\n    // from the tryInRepetitionRecovery(...) will only happen IFF there really are TWO/THREE/.... items.\n\n    // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n    this.attemptInRepetitionRecovery(\n      this.atLeastOneInternal,\n      [prodOccurrence, actionORMethodDef],\n      <any>lookAheadFunc,\n      AT_LEAST_ONE_IDX,\n      prodOccurrence,\n      NextTerminalAfterAtLeastOneWalker,\n    );\n  }\n\n  atLeastOneSepFirstInternal<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    const laKey = this.getKeyForAutomaticLookahead(\n      AT_LEAST_ONE_SEP_IDX,\n      prodOccurrence,\n    );\n    this.atLeastOneSepFirstInternalLogic(prodOccurrence, options, laKey);\n  }\n\n  atLeastOneSepFirstInternalLogic<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    options: AtLeastOneSepMethodOpts<OUT>,\n    key: number,\n  ): void {\n    const action = options.DEF;\n    const separator = options.SEP;\n\n    const firstIterationLookaheadFunc = this.getLaFuncFromCache(key);\n\n    // 1st iteration\n    if (firstIterationLookaheadFunc.call(this) === true) {\n      (<GrammarAction<OUT>>action).call(this);\n\n      //  TODO: Optimization can move this function construction into \"attemptInRepetitionRecovery\"\n      //  because it is only needed in error recovery scenarios.\n      const separatorLookAheadFunc = () => {\n        return this.tokenMatcher(this.LA(1), separator);\n      };\n\n      // 2nd..nth iterations\n      while (this.tokenMatcher(this.LA(1), separator) === true) {\n        // note that this CONSUME will never enter recovery because\n        // the separatorLookAheadFunc checks that the separator really does exist.\n        this.CONSUME(separator);\n        // No need for checking infinite loop here due to consuming the separator.\n        (<GrammarAction<OUT>>action).call(this);\n      }\n\n      // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n      this.attemptInRepetitionRecovery(\n        this.repetitionSepSecondInternal,\n        [\n          prodOccurrence,\n          separator,\n          separatorLookAheadFunc,\n          action,\n          NextTerminalAfterAtLeastOneSepWalker,\n        ],\n        separatorLookAheadFunc,\n        AT_LEAST_ONE_SEP_IDX,\n        prodOccurrence,\n        NextTerminalAfterAtLeastOneSepWalker,\n      );\n    } else {\n      throw this.raiseEarlyExitException(\n        prodOccurrence,\n        PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR,\n        options.ERR_MSG,\n      );\n    }\n  }\n\n  manyInternal<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    const laKey = this.getKeyForAutomaticLookahead(MANY_IDX, prodOccurrence);\n    return this.manyInternalLogic(prodOccurrence, actionORMethodDef, laKey);\n  }\n\n  manyInternalLogic<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n    key: number,\n  ) {\n    let lookaheadFunction = this.getLaFuncFromCache(key);\n    let action;\n    if (typeof actionORMethodDef !== \"function\") {\n      action = actionORMethodDef.DEF;\n      const predicate = actionORMethodDef.GATE;\n      // predicate present\n      if (predicate !== undefined) {\n        const orgLookaheadFunction = lookaheadFunction;\n        lookaheadFunction = () => {\n          return predicate.call(this) && orgLookaheadFunction.call(this);\n        };\n      }\n    } else {\n      action = actionORMethodDef;\n    }\n\n    let notStuck = true;\n    while (lookaheadFunction.call(this) === true && notStuck === true) {\n      notStuck = this.doSingleRepetition(action);\n    }\n\n    // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n    this.attemptInRepetitionRecovery(\n      this.manyInternal,\n      [prodOccurrence, actionORMethodDef],\n      <any>lookaheadFunction,\n      MANY_IDX,\n      prodOccurrence,\n      NextTerminalAfterManyWalker,\n      // The notStuck parameter is only relevant when \"attemptInRepetitionRecovery\"\n      // is invoked from manyInternal, in the MANY_SEP case and AT_LEAST_ONE[_SEP]\n      // An infinite loop cannot occur as:\n      // - Either the lookahead is guaranteed to consume something (Single Token Separator)\n      // - AT_LEAST_ONE by definition is guaranteed to consume something (or error out).\n      notStuck,\n    );\n  }\n\n  manySepFirstInternal<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    options: ManySepMethodOpts<OUT>,\n  ): void {\n    const laKey = this.getKeyForAutomaticLookahead(\n      MANY_SEP_IDX,\n      prodOccurrence,\n    );\n    this.manySepFirstInternalLogic(prodOccurrence, options, laKey);\n  }\n\n  manySepFirstInternalLogic<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    options: ManySepMethodOpts<OUT>,\n    key: number,\n  ): void {\n    const action = options.DEF;\n    const separator = options.SEP;\n    const firstIterationLaFunc = this.getLaFuncFromCache(key);\n\n    // 1st iteration\n    if (firstIterationLaFunc.call(this) === true) {\n      action.call(this);\n\n      const separatorLookAheadFunc = () => {\n        return this.tokenMatcher(this.LA(1), separator);\n      };\n      // 2nd..nth iterations\n      while (this.tokenMatcher(this.LA(1), separator) === true) {\n        // note that this CONSUME will never enter recovery because\n        // the separatorLookAheadFunc checks that the separator really does exist.\n        this.CONSUME(separator);\n        // No need for checking infinite loop here due to consuming the separator.\n        action.call(this);\n      }\n\n      // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n      this.attemptInRepetitionRecovery(\n        this.repetitionSepSecondInternal,\n        [\n          prodOccurrence,\n          separator,\n          separatorLookAheadFunc,\n          action,\n          NextTerminalAfterManySepWalker,\n        ],\n        separatorLookAheadFunc,\n        MANY_SEP_IDX,\n        prodOccurrence,\n        NextTerminalAfterManySepWalker,\n      );\n    }\n  }\n\n  repetitionSepSecondInternal<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    separator: TokenType,\n    separatorLookAheadFunc: () => boolean,\n    action: GrammarAction<OUT>,\n    nextTerminalAfterWalker: typeof AbstractNextTerminalAfterProductionWalker,\n  ): void {\n    while (separatorLookAheadFunc()) {\n      // note that this CONSUME will never enter recovery because\n      // the separatorLookAheadFunc checks that the separator really does exist.\n      this.CONSUME(separator);\n      action.call(this);\n    }\n\n    // we can only arrive to this function after an error\n    // has occurred (hence the name 'second') so the following\n    // IF will always be entered, its possible to remove it...\n    // however it is kept to avoid confusion and be consistent.\n    // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n    /* istanbul ignore else */\n    this.attemptInRepetitionRecovery(\n      this.repetitionSepSecondInternal,\n      [\n        prodOccurrence,\n        separator,\n        separatorLookAheadFunc,\n        action,\n        nextTerminalAfterWalker,\n      ],\n      separatorLookAheadFunc,\n      AT_LEAST_ONE_SEP_IDX,\n      prodOccurrence,\n      nextTerminalAfterWalker,\n    );\n  }\n\n  doSingleRepetition(this: MixedInParser, action: Function): any {\n    const beforeIteration = this.getLexerPosition();\n    action.call(this);\n    const afterIteration = this.getLexerPosition();\n\n    // This boolean will indicate if this repetition progressed\n    // or if we are \"stuck\" (potential infinite loop in the repetition).\n    return afterIteration > beforeIteration;\n  }\n\n  orInternal<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n    occurrence: number,\n  ): T {\n    const laKey = this.getKeyForAutomaticLookahead(OR_IDX, occurrence);\n    const alts = isArray(altsOrOpts) ? altsOrOpts : altsOrOpts.DEF;\n\n    const laFunc = this.getLaFuncFromCache(laKey);\n    const altIdxToTake = laFunc.call(this, alts);\n    if (altIdxToTake !== undefined) {\n      const chosenAlternative: any = alts[altIdxToTake];\n      return chosenAlternative.ALT.call(this);\n    }\n    this.raiseNoAltException(\n      occurrence,\n      (altsOrOpts as OrMethodOpts<unknown>).ERR_MSG,\n    );\n  }\n\n  ruleFinallyStateUpdate(this: MixedInParser): void {\n    this.RULE_STACK.pop();\n    this.RULE_OCCURRENCE_STACK.pop();\n\n    // NOOP when cst is disabled\n    this.cstFinallyStateUpdate();\n\n    if (this.RULE_STACK.length === 0 && this.isAtEndOfInput() === false) {\n      const firstRedundantTok = this.LA(1);\n      const errMsg = this.errorMessageProvider.buildNotAllInputParsedMessage({\n        firstRedundant: firstRedundantTok,\n        ruleName: this.getCurrRuleFullName(),\n      });\n      this.SAVE_ERROR(\n        new NotAllInputParsedException(errMsg, firstRedundantTok),\n      );\n    }\n  }\n\n  subruleInternal<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    idx: number,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    let ruleResult;\n    try {\n      const args = options !== undefined ? options.ARGS : undefined;\n      this.subruleIdx = idx;\n      ruleResult = ruleToCall.apply(this, args);\n      this.cstPostNonTerminal(\n        ruleResult,\n        options !== undefined && options.LABEL !== undefined\n          ? options.LABEL\n          : ruleToCall.ruleName,\n      );\n      return ruleResult;\n    } catch (e) {\n      throw this.subruleInternalError(e, options, ruleToCall.ruleName);\n    }\n  }\n\n  subruleInternalError(\n    this: MixedInParser,\n    e: any,\n    options: SubruleMethodOpts<unknown[]> | undefined,\n    ruleName: string,\n  ): void {\n    if (isRecognitionException(e) && e.partialCstResult !== undefined) {\n      this.cstPostNonTerminal(\n        e.partialCstResult,\n        options !== undefined && options.LABEL !== undefined\n          ? options.LABEL\n          : ruleName,\n      );\n\n      delete e.partialCstResult;\n    }\n    throw e;\n  }\n\n  consumeInternal(\n    this: MixedInParser,\n    tokType: TokenType,\n    idx: number,\n    options: ConsumeMethodOpts | undefined,\n  ): IToken {\n    let consumedToken!: IToken;\n    try {\n      const nextToken = this.LA(1);\n      if (this.tokenMatcher(nextToken, tokType) === true) {\n        this.consumeToken();\n        consumedToken = nextToken;\n      } else {\n        this.consumeInternalError(tokType, nextToken, options);\n      }\n    } catch (eFromConsumption) {\n      consumedToken = this.consumeInternalRecovery(\n        tokType,\n        idx,\n        eFromConsumption,\n      );\n    }\n\n    this.cstPostTerminal(\n      options !== undefined && options.LABEL !== undefined\n        ? options.LABEL\n        : tokType.name,\n      consumedToken,\n    );\n    return consumedToken;\n  }\n\n  consumeInternalError(\n    this: MixedInParser,\n    tokType: TokenType,\n    nextToken: IToken,\n    options: ConsumeMethodOpts | undefined,\n  ): void {\n    let msg;\n    const previousToken = this.LA(0);\n    if (options !== undefined && options.ERR_MSG) {\n      msg = options.ERR_MSG;\n    } else {\n      msg = this.errorMessageProvider.buildMismatchTokenMessage({\n        expected: tokType,\n        actual: nextToken,\n        previous: previousToken,\n        ruleName: this.getCurrRuleFullName(),\n      });\n    }\n    throw this.SAVE_ERROR(\n      new MismatchedTokenException(msg, nextToken, previousToken),\n    );\n  }\n\n  consumeInternalRecovery(\n    this: MixedInParser,\n    tokType: TokenType,\n    idx: number,\n    eFromConsumption: Error,\n  ): IToken {\n    // no recovery allowed during backtracking, otherwise backtracking may recover invalid syntax and accept it\n    // but the original syntax could have been parsed successfully without any backtracking + recovery\n    if (\n      this.recoveryEnabled &&\n      // TODO: more robust checking of the exception type. Perhaps Typescript extending expressions?\n      eFromConsumption.name === \"MismatchedTokenException\" &&\n      !this.isBackTracking()\n    ) {\n      const follows = this.getFollowsForInRuleRecovery(<any>tokType, idx);\n      try {\n        return this.tryInRuleRecovery(<any>tokType, follows);\n      } catch (eFromInRuleRecovery) {\n        if (eFromInRuleRecovery.name === IN_RULE_RECOVERY_EXCEPTION) {\n          // failed in RuleRecovery.\n          // throw the original error in order to trigger reSync error recovery\n          throw eFromConsumption;\n        } else {\n          throw eFromInRuleRecovery;\n        }\n      }\n    } else {\n      throw eFromConsumption;\n    }\n  }\n\n  saveRecogState(this: MixedInParser): IParserState {\n    // errors is a getter which will clone the errors array\n    const savedErrors = this.errors;\n    const savedRuleStack = clone(this.RULE_STACK);\n    return {\n      errors: savedErrors,\n      lexerState: this.exportLexerState(),\n      RULE_STACK: savedRuleStack,\n      CST_STACK: this.CST_STACK,\n    };\n  }\n\n  reloadRecogState(this: MixedInParser, newState: IParserState) {\n    this.errors = newState.errors;\n    this.importLexerState(newState.lexerState);\n    this.RULE_STACK = newState.RULE_STACK;\n  }\n\n  ruleInvocationStateUpdate(\n    this: MixedInParser,\n    shortName: number,\n    fullName: string,\n    idxInCallingRule: number,\n  ): void {\n    this.RULE_OCCURRENCE_STACK.push(idxInCallingRule);\n    this.RULE_STACK.push(shortName);\n    // NOOP when cst is disabled\n    this.cstInvocationStateUpdate(fullName);\n  }\n\n  isBackTracking(this: MixedInParser): boolean {\n    return this.isBackTrackingStack.length !== 0;\n  }\n\n  getCurrRuleFullName(this: MixedInParser): string {\n    const shortName = this.getLastExplicitRuleShortName();\n    return this.shortRuleNameToFull[shortName];\n  }\n\n  shortRuleNameToFullName(this: MixedInParser, shortName: number) {\n    return this.shortRuleNameToFull[shortName];\n  }\n\n  public isAtEndOfInput(this: MixedInParser): boolean {\n    return this.tokenMatcher(this.LA(1), EOF);\n  }\n\n  public reset(this: MixedInParser): void {\n    this.resetLexerState();\n    this.subruleIdx = 0;\n    this.isBackTrackingStack = [];\n    this.errors = [];\n    this.RULE_STACK = [];\n    // TODO: extract a specific reset for TreeBuilder trait\n    this.CST_STACK = [];\n    this.RULE_OCCURRENCE_STACK = [];\n  }\n}\n","import {\n  AtLeastOneSepMethodOpts,\n  ConsumeMethodOpts,\n  DSLMethodOpts,\n  DSLMethodOptsWithErr,\n  GrammarAction,\n  IOrAlt,\n  IRuleConfig,\n  ISerializedGast,\n  IToken,\n  ManySepMethodOpts,\n  OrMethodOpts,\n  SubruleMethodOpts,\n  TokenType,\n} from \"@chevrotain/types\";\nimport { includes, values } from \"lodash-es\";\nimport { isRecognitionException } from \"../../exceptions_public.js\";\nimport { DEFAULT_RULE_CONFIG, ParserDefinitionErrorType } from \"../parser.js\";\nimport { defaultGrammarValidatorErrorProvider } from \"../../errors_public.js\";\nimport { validateRuleIsOverridden } from \"../../grammar/checks.js\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport { Rule, serializeGrammar } from \"@chevrotain/gast\";\nimport { IParserDefinitionError } from \"../../grammar/types.js\";\nimport { ParserMethodInternal } from \"../types.js\";\n\n/**\n * This trait is responsible for implementing the public API\n * for defining Chevrotain parsers, i.e:\n * - CONSUME\n * - RULE\n * - OPTION\n * - ...\n */\nexport class RecognizerApi {\n  ACTION<T>(this: MixedInParser, impl: () => T): T {\n    return impl.call(this);\n  }\n\n  consume(\n    this: MixedInParser,\n    idx: number,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, idx, options);\n  }\n\n  subrule<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    idx: number,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, idx, options);\n  }\n\n  option<OUT>(\n    this: MixedInParser,\n    idx: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, idx);\n  }\n\n  or(\n    this: MixedInParser,\n    idx: number,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<any>,\n  ): any {\n    return this.orInternal(altsOrOpts, idx);\n  }\n\n  many(\n    this: MixedInParser,\n    idx: number,\n    actionORMethodDef: GrammarAction<any> | DSLMethodOpts<any>,\n  ): void {\n    return this.manyInternal(idx, actionORMethodDef);\n  }\n\n  atLeastOne(\n    this: MixedInParser,\n    idx: number,\n    actionORMethodDef: GrammarAction<any> | DSLMethodOptsWithErr<any>,\n  ): void {\n    return this.atLeastOneInternal(idx, actionORMethodDef);\n  }\n\n  CONSUME(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 0, options);\n  }\n\n  CONSUME1(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 1, options);\n  }\n\n  CONSUME2(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 2, options);\n  }\n\n  CONSUME3(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 3, options);\n  }\n\n  CONSUME4(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 4, options);\n  }\n\n  CONSUME5(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 5, options);\n  }\n\n  CONSUME6(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 6, options);\n  }\n\n  CONSUME7(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 7, options);\n  }\n\n  CONSUME8(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 8, options);\n  }\n\n  CONSUME9(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 9, options);\n  }\n\n  SUBRULE<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 0, options);\n  }\n\n  SUBRULE1<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 1, options);\n  }\n\n  SUBRULE2<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 2, options);\n  }\n\n  SUBRULE3<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 3, options);\n  }\n\n  SUBRULE4<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 4, options);\n  }\n\n  SUBRULE5<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 5, options);\n  }\n\n  SUBRULE6<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 6, options);\n  }\n\n  SUBRULE7<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 7, options);\n  }\n\n  SUBRULE8<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 8, options);\n  }\n\n  SUBRULE9<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 9, options);\n  }\n\n  OPTION<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 0);\n  }\n\n  OPTION1<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 1);\n  }\n\n  OPTION2<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 2);\n  }\n\n  OPTION3<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 3);\n  }\n\n  OPTION4<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 4);\n  }\n\n  OPTION5<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 5);\n  }\n\n  OPTION6<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 6);\n  }\n\n  OPTION7<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 7);\n  }\n\n  OPTION8<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 8);\n  }\n\n  OPTION9<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 9);\n  }\n\n  OR<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 0);\n  }\n\n  OR1<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 1);\n  }\n\n  OR2<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 2);\n  }\n\n  OR3<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 3);\n  }\n\n  OR4<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 4);\n  }\n\n  OR5<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 5);\n  }\n\n  OR6<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 6);\n  }\n\n  OR7<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 7);\n  }\n\n  OR8<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 8);\n  }\n\n  OR9<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 9);\n  }\n\n  MANY<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(0, actionORMethodDef);\n  }\n\n  MANY1<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(1, actionORMethodDef);\n  }\n\n  MANY2<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(2, actionORMethodDef);\n  }\n\n  MANY3<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(3, actionORMethodDef);\n  }\n\n  MANY4<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(4, actionORMethodDef);\n  }\n\n  MANY5<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(5, actionORMethodDef);\n  }\n\n  MANY6<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(6, actionORMethodDef);\n  }\n\n  MANY7<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(7, actionORMethodDef);\n  }\n\n  MANY8<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(8, actionORMethodDef);\n  }\n\n  MANY9<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(9, actionORMethodDef);\n  }\n\n  MANY_SEP<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(0, options);\n  }\n\n  MANY_SEP1<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(1, options);\n  }\n\n  MANY_SEP2<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(2, options);\n  }\n\n  MANY_SEP3<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(3, options);\n  }\n\n  MANY_SEP4<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(4, options);\n  }\n\n  MANY_SEP5<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(5, options);\n  }\n\n  MANY_SEP6<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(6, options);\n  }\n\n  MANY_SEP7<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(7, options);\n  }\n\n  MANY_SEP8<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(8, options);\n  }\n\n  MANY_SEP9<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(9, options);\n  }\n\n  AT_LEAST_ONE<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(0, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE1<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    return this.atLeastOneInternal(1, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE2<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(2, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE3<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(3, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE4<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(4, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE5<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(5, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE6<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(6, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE7<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(7, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE8<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(8, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE9<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(9, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE_SEP<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(0, options);\n  }\n\n  AT_LEAST_ONE_SEP1<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(1, options);\n  }\n\n  AT_LEAST_ONE_SEP2<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(2, options);\n  }\n\n  AT_LEAST_ONE_SEP3<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(3, options);\n  }\n\n  AT_LEAST_ONE_SEP4<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(4, options);\n  }\n\n  AT_LEAST_ONE_SEP5<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(5, options);\n  }\n\n  AT_LEAST_ONE_SEP6<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(6, options);\n  }\n\n  AT_LEAST_ONE_SEP7<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(7, options);\n  }\n\n  AT_LEAST_ONE_SEP8<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(8, options);\n  }\n\n  AT_LEAST_ONE_SEP9<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(9, options);\n  }\n\n  RULE<T>(\n    this: MixedInParser,\n    name: string,\n    implementation: (...implArgs: any[]) => T,\n    config: IRuleConfig<T> = DEFAULT_RULE_CONFIG,\n  ): (idxInCallingRule?: number, ...args: any[]) => T | any {\n    if (includes(this.definedRulesNames, name)) {\n      const errMsg =\n        defaultGrammarValidatorErrorProvider.buildDuplicateRuleNameError({\n          topLevelRule: name,\n          grammarName: this.className,\n        });\n\n      const error = {\n        message: errMsg,\n        type: ParserDefinitionErrorType.DUPLICATE_RULE_NAME,\n        ruleName: name,\n      };\n      this.definitionErrors.push(error);\n    }\n\n    this.definedRulesNames.push(name);\n\n    const ruleImplementation = this.defineRule(name, implementation, config);\n    (this as any)[name] = ruleImplementation;\n    return ruleImplementation;\n  }\n\n  OVERRIDE_RULE<T>(\n    this: MixedInParser,\n    name: string,\n    impl: (...implArgs: any[]) => T,\n    config: IRuleConfig<T> = DEFAULT_RULE_CONFIG,\n  ): (idxInCallingRule?: number, ...args: any[]) => T {\n    const ruleErrors: IParserDefinitionError[] = validateRuleIsOverridden(\n      name,\n      this.definedRulesNames,\n      this.className,\n    );\n    this.definitionErrors = this.definitionErrors.concat(ruleErrors);\n\n    const ruleImplementation = this.defineRule(name, impl, config);\n    (this as any)[name] = ruleImplementation;\n    return ruleImplementation;\n  }\n\n  BACKTRACK<T>(\n    this: MixedInParser,\n    grammarRule: (...args: any[]) => T,\n    args?: any[],\n  ): () => boolean {\n    return function () {\n      // save org state\n      this.isBackTrackingStack.push(1);\n      const orgState = this.saveRecogState();\n      try {\n        grammarRule.apply(this, args);\n        // if no exception was thrown we have succeed parsing the rule.\n        return true;\n      } catch (e) {\n        if (isRecognitionException(e)) {\n          return false;\n        } else {\n          throw e;\n        }\n      } finally {\n        this.reloadRecogState(orgState);\n        this.isBackTrackingStack.pop();\n      }\n    };\n  }\n\n  // GAST export APIs\n  public getGAstProductions(this: MixedInParser): Record<string, Rule> {\n    return this.gastProductionsCache;\n  }\n\n  public getSerializedGastProductions(this: MixedInParser): ISerializedGast[] {\n    return serializeGrammar(values(this.gastProductionsCache));\n  }\n}\n","import {\n  IParserConfig,\n  IParserErrorMessageProvider,\n  IRecognitionException,\n} from \"@chevrotain/types\";\nimport {\n  EarlyExitException,\n  isRecognitionException,\n  NoViableAltException,\n} from \"../../exceptions_public.js\";\nimport { clone, has } from \"lodash-es\";\nimport {\n  getLookaheadPathsForOptionalProd,\n  getLookaheadPathsForOr,\n  PROD_TYPE,\n} from \"../../grammar/lookahead.js\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser.js\";\n\n/**\n * Trait responsible for runtime parsing errors.\n */\nexport class ErrorHandler {\n  _errors: IRecognitionException[];\n  errorMessageProvider: IParserErrorMessageProvider;\n\n  initErrorHandler(config: IParserConfig) {\n    this._errors = [];\n    this.errorMessageProvider = has(config, \"errorMessageProvider\")\n      ? (config.errorMessageProvider as IParserErrorMessageProvider) // assumes end user provides the correct config value/type\n      : DEFAULT_PARSER_CONFIG.errorMessageProvider;\n  }\n\n  SAVE_ERROR(\n    this: MixedInParser,\n    error: IRecognitionException,\n  ): IRecognitionException {\n    if (isRecognitionException(error)) {\n      error.context = {\n        ruleStack: this.getHumanReadableRuleStack(),\n        ruleOccurrenceStack: clone(this.RULE_OCCURRENCE_STACK),\n      };\n      this._errors.push(error);\n      return error;\n    } else {\n      throw Error(\n        \"Trying to save an Error which is not a RecognitionException\",\n      );\n    }\n  }\n\n  get errors(): IRecognitionException[] {\n    return clone(this._errors);\n  }\n\n  set errors(newErrors: IRecognitionException[]) {\n    this._errors = newErrors;\n  }\n\n  // TODO: consider caching the error message computed information\n  raiseEarlyExitException(\n    this: MixedInParser,\n    occurrence: number,\n    prodType: PROD_TYPE,\n    userDefinedErrMsg: string | undefined,\n  ): never {\n    const ruleName = this.getCurrRuleFullName();\n    const ruleGrammar = this.getGAstProductions()[ruleName];\n    const lookAheadPathsPerAlternative = getLookaheadPathsForOptionalProd(\n      occurrence,\n      ruleGrammar,\n      prodType,\n      this.maxLookahead,\n    );\n    const insideProdPaths = lookAheadPathsPerAlternative[0];\n    const actualTokens = [];\n    for (let i = 1; i <= this.maxLookahead; i++) {\n      actualTokens.push(this.LA(i));\n    }\n    const msg = this.errorMessageProvider.buildEarlyExitMessage({\n      expectedIterationPaths: insideProdPaths,\n      actual: actualTokens,\n      previous: this.LA(0),\n      customUserDescription: userDefinedErrMsg,\n      ruleName: ruleName,\n    });\n\n    throw this.SAVE_ERROR(new EarlyExitException(msg, this.LA(1), this.LA(0)));\n  }\n\n  // TODO: consider caching the error message computed information\n  raiseNoAltException(\n    this: MixedInParser,\n    occurrence: number,\n    errMsgTypes: string | undefined,\n  ): never {\n    const ruleName = this.getCurrRuleFullName();\n    const ruleGrammar = this.getGAstProductions()[ruleName];\n    // TODO: getLookaheadPathsForOr can be slow for large enough maxLookahead and certain grammars, consider caching ?\n    const lookAheadPathsPerAlternative = getLookaheadPathsForOr(\n      occurrence,\n      ruleGrammar,\n      this.maxLookahead,\n    );\n\n    const actualTokens = [];\n    for (let i = 1; i <= this.maxLookahead; i++) {\n      actualTokens.push(this.LA(i));\n    }\n    const previousToken = this.LA(0);\n\n    const errMsg = this.errorMessageProvider.buildNoViableAltMessage({\n      expectedPathsPerAlt: lookAheadPathsPerAlternative,\n      actual: actualTokens,\n      previous: previousToken,\n      customUserDescription: errMsgTypes,\n      ruleName: this.getCurrRuleFullName(),\n    });\n\n    throw this.SAVE_ERROR(\n      new NoViableAltException(errMsg, this.LA(1), previousToken),\n    );\n  }\n}\n","import {\n  ISyntacticContentAssistPath,\n  IToken,\n  ITokenGrammarPath,\n  TokenType,\n} from \"@chevrotain/types\";\nimport {\n  NextAfterTokenWalker,\n  nextPossibleTokensAfter,\n} from \"../../grammar/interpreter.js\";\nimport { first, isUndefined } from \"lodash-es\";\nimport { MixedInParser } from \"./parser_traits.js\";\n\nexport class ContentAssist {\n  initContentAssist() {}\n\n  public computeContentAssist(\n    this: MixedInParser,\n    startRuleName: string,\n    precedingInput: IToken[],\n  ): ISyntacticContentAssistPath[] {\n    const startRuleGast = this.gastProductionsCache[startRuleName];\n\n    if (isUndefined(startRuleGast)) {\n      throw Error(`Rule ->${startRuleName}<- does not exist in this grammar.`);\n    }\n\n    return nextPossibleTokensAfter(\n      [startRuleGast],\n      precedingInput,\n      this.tokenMatcher,\n      this.maxLookahead,\n    );\n  }\n\n  // TODO: should this be a member method or a utility? it does not have any state or usage of 'this'...\n  // TODO: should this be more explicitly part of the public API?\n  public getNextPossibleTokenTypes(\n    this: MixedInParser,\n    grammarPath: ITokenGrammarPath,\n  ): TokenType[] {\n    const topRuleName = first(grammarPath.ruleStack)!;\n    const gastProductions = this.getGAstProductions();\n    const topProduction = gastProductions[topRuleName];\n    const nextPossibleTokenTypes = new NextAfterTokenWalker(\n      topProduction,\n      grammarPath,\n    ).startWalking();\n    return nextPossibleTokenTypes;\n  }\n}\n","import { IParserConfig } from \"@chevrotain/types\";\nimport { has } from \"lodash-es\";\nimport { timer } from \"@chevrotain/utils\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser.js\";\n\n/**\n * Trait responsible for runtime parsing errors.\n */\nexport class PerformanceTracer {\n  traceInitPerf: boolean | number;\n  traceInitMaxIdent: number;\n  traceInitIndent: number;\n\n  initPerformanceTracer(config: IParserConfig) {\n    if (has(config, \"traceInitPerf\")) {\n      const userTraceInitPerf = config.traceInitPerf;\n      const traceIsNumber = typeof userTraceInitPerf === \"number\";\n      this.traceInitMaxIdent = traceIsNumber\n        ? <number>userTraceInitPerf\n        : Infinity;\n      this.traceInitPerf = traceIsNumber\n        ? userTraceInitPerf > 0\n        : (userTraceInitPerf as boolean); // assumes end user provides the correct config value/type\n    } else {\n      this.traceInitMaxIdent = 0;\n      this.traceInitPerf = DEFAULT_PARSER_CONFIG.traceInitPerf;\n    }\n\n    this.traceInitIndent = -1;\n  }\n\n  TRACE_INIT<T>(this: MixedInParser, phaseDesc: string, phaseImpl: () => T): T {\n    // No need to optimize this using NOOP pattern because\n    // It is not called in a hot spot...\n    if (this.traceInitPerf === true) {\n      this.traceInitIndent++;\n      const indent = new Array(this.traceInitIndent + 1).join(\"\\t\");\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        console.log(`${indent}--> <${phaseDesc}>`);\n      }\n      const { time, value } = timer(phaseImpl);\n      /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */\n      const traceMethod = time > 10 ? console.warn : console.log;\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        traceMethod(`${indent}<-- <${phaseDesc}> time: ${time}ms`);\n      }\n      this.traceInitIndent--;\n      return value;\n    } else {\n      return phaseImpl();\n    }\n  }\n}\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport map from \"lodash-es/map.js\"\r\nimport filter from \"lodash-es/filter.js\"\r\nimport {\r\n    IProduction,\r\n    IProductionWithOccurrence,\r\n    TokenType,\r\n    Alternation,\r\n    NonTerminal,\r\n    Rule,\r\n    Option,\r\n    RepetitionMandatory,\r\n    Repetition,\r\n    Terminal,\r\n    Alternative,\r\n    RepetitionWithSeparator,\r\n    RepetitionMandatoryWithSeparator,\r\n    LookaheadProductionType\r\n} from \"chevrotain\"\r\n\r\nexport function buildATNKey(rule: Rule, type: LookaheadProductionType, occurrence: number): string {\r\n    return `${rule.name}_${type}_${occurrence}`;\r\n}\r\n\r\nexport interface ATN {\r\n    decisionMap: Record<string, DecisionState>\r\n    states: ATNState[]\r\n    decisionStates: DecisionState[]\r\n    ruleToStartState: Map<Rule, RuleStartState>\r\n    ruleToStopState: Map<Rule, RuleStopState>\r\n}\r\n\r\nexport const ATN_INVALID_TYPE = 0\r\nexport const ATN_BASIC = 1\r\nexport const ATN_RULE_START = 2\r\nexport const ATN_PLUS_BLOCK_START = 4\r\nexport const ATN_STAR_BLOCK_START = 5\r\n// Currently unused as the ATN is not used for lexing\r\nexport const ATN_TOKEN_START = 6\r\nexport const ATN_RULE_STOP = 7\r\nexport const ATN_BLOCK_END = 8\r\nexport const ATN_STAR_LOOP_BACK = 9\r\nexport const ATN_STAR_LOOP_ENTRY = 10\r\nexport const ATN_PLUS_LOOP_BACK = 11\r\nexport const ATN_LOOP_END = 12\r\n\r\nexport type ATNState =\r\n    | BasicState\r\n    | BasicBlockStartState\r\n    | PlusBlockStartState\r\n    | PlusLoopbackState\r\n    | StarBlockStartState\r\n    | StarLoopbackState\r\n    | StarLoopEntryState\r\n    | BlockEndState\r\n    | RuleStartState\r\n    | RuleStopState\r\n    | LoopEndState\r\n\r\nexport interface ATNBaseState {\r\n    atn: ATN\r\n    production: IProductionWithOccurrence\r\n    stateNumber: number\r\n    rule: Rule\r\n    epsilonOnlyTransitions: boolean\r\n    transitions: Transition[]\r\n    nextTokenWithinRule: number[]\r\n}\r\n\r\nexport interface BasicState extends ATNBaseState {\r\n    type: typeof ATN_BASIC\r\n}\r\n\r\nexport interface BlockStartState extends DecisionState {\r\n    end: BlockEndState\r\n}\r\n\r\nexport interface BasicBlockStartState extends BlockStartState {\r\n    type: typeof ATN_BASIC\r\n}\r\n\r\nexport interface PlusBlockStartState extends BlockStartState {\r\n    loopback: PlusLoopbackState\r\n    type: typeof ATN_PLUS_BLOCK_START\r\n}\r\n\r\nexport interface PlusLoopbackState extends DecisionState {\r\n    type: typeof ATN_PLUS_LOOP_BACK\r\n}\r\n\r\nexport interface StarBlockStartState extends BlockStartState {\r\n    type: typeof ATN_STAR_BLOCK_START\r\n}\r\n\r\nexport interface StarLoopbackState extends ATNBaseState {\r\n    type: typeof ATN_STAR_LOOP_BACK\r\n}\r\n\r\nexport interface StarLoopEntryState extends DecisionState {\r\n    loopback: StarLoopbackState\r\n    type: typeof ATN_STAR_LOOP_ENTRY\r\n}\r\n\r\nexport interface BlockEndState extends ATNBaseState {\r\n    start: BlockStartState\r\n    type: typeof ATN_BLOCK_END\r\n}\r\n\r\nexport interface DecisionState extends ATNBaseState {\r\n    decision: number\r\n}\r\n\r\nexport interface LoopEndState extends ATNBaseState {\r\n    loopback: ATNState\r\n    type: typeof ATN_LOOP_END\r\n}\r\n\r\nexport interface RuleStartState extends ATNBaseState {\r\n    stop: RuleStopState\r\n    type: typeof ATN_RULE_START\r\n}\r\n\r\nexport interface RuleStopState extends ATNBaseState {\r\n    type: typeof ATN_RULE_STOP\r\n}\r\n\r\nexport interface Transition {\r\n    target: ATNState\r\n    isEpsilon(): boolean\r\n}\r\n\r\nexport abstract class AbstractTransition implements Transition {\r\n    target: ATNState\r\n\r\n    constructor(target: ATNState) {\r\n        this.target = target\r\n    }\r\n\r\n    isEpsilon() {\r\n        return false\r\n    }\r\n}\r\n\r\nexport class AtomTransition extends AbstractTransition {\r\n    tokenType: TokenType\r\n\r\n    constructor(target: ATNState, tokenType: TokenType) {\r\n        super(target)\r\n        this.tokenType = tokenType\r\n    }\r\n}\r\n\r\nexport class EpsilonTransition extends AbstractTransition {\r\n    constructor(target: ATNState) {\r\n        super(target)\r\n    }\r\n\r\n    isEpsilon() {\r\n        return true\r\n    }\r\n}\r\n\r\nexport class RuleTransition extends AbstractTransition {\r\n    rule: Rule\r\n    followState: ATNState\r\n\r\n    constructor(ruleStart: RuleStartState, rule: Rule, followState: ATNState) {\r\n        super(ruleStart)\r\n        this.rule = rule\r\n        this.followState = followState\r\n    }\r\n\r\n    isEpsilon() {\r\n        return true\r\n    }\r\n}\r\n\r\ninterface ATNHandle {\r\n    left: ATNState\r\n    right: ATNState\r\n}\r\n\r\nexport function createATN(rules: Rule[]): ATN {\r\n    const atn: ATN = {\r\n        decisionMap: {},\r\n        decisionStates: [],\r\n        ruleToStartState: new Map(),\r\n        ruleToStopState: new Map(),\r\n        states: []\r\n    }\r\n    createRuleStartAndStopATNStates(atn, rules)\r\n    const ruleLength = rules.length\r\n    for (let i = 0; i < ruleLength; i++) {\r\n        const rule = rules[i]\r\n        const ruleBlock = block(atn, rule, rule)\r\n        if (ruleBlock === undefined) {\r\n            continue\r\n        }\r\n        buildRuleHandle(atn, rule, ruleBlock)\r\n    }\r\n    return atn\r\n}\r\n\r\nfunction createRuleStartAndStopATNStates(atn: ATN, rules: Rule[]): void {\r\n    const ruleLength = rules.length\r\n    for (let i = 0; i < ruleLength; i++) {\r\n        const rule = rules[i]\r\n        const start = newState<RuleStartState>(atn, rule, undefined, {\r\n            type: ATN_RULE_START\r\n        })\r\n        const stop = newState<RuleStopState>(atn, rule, undefined, {\r\n            type: ATN_RULE_STOP\r\n        })\r\n        start.stop = stop\r\n        atn.ruleToStartState.set(rule, start)\r\n        atn.ruleToStopState.set(rule, stop)\r\n    }\r\n}\r\n\r\nfunction atom(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    production: IProduction\r\n): ATNHandle | undefined {\r\n    if (production instanceof Terminal) {\r\n        return tokenRef(atn, rule, production.terminalType, production)\r\n    } else if (production instanceof NonTerminal) {\r\n        return ruleRef(atn, rule, production)\r\n    } else if (production instanceof Alternation) {\r\n        return alternation(atn, rule, production)\r\n    } else if (production instanceof Option) {\r\n        return option(atn, rule, production)\r\n    } else if (production instanceof Repetition) {\r\n        return repetition(atn, rule, production)\r\n    } else if (production instanceof RepetitionWithSeparator) {\r\n        return repetitionSep(atn, rule, production)\r\n    } else if (production instanceof RepetitionMandatory) {\r\n        return repetitionMandatory(atn, rule, production)\r\n    } else if (production instanceof RepetitionMandatoryWithSeparator) {\r\n        return repetitionMandatorySep(atn, rule, production)\r\n    } else {\r\n        return block(atn, rule, production as Alternative)\r\n    }\r\n}\r\n\r\nfunction repetition(atn: ATN, rule: Rule, repetition: Repetition): ATNHandle {\r\n    const starState = newState<StarBlockStartState>(atn, rule, repetition, {\r\n        type: ATN_STAR_BLOCK_START\r\n    })\r\n    defineDecisionState(atn, starState)\r\n    const handle = makeAlts(\r\n        atn,\r\n        rule,\r\n        starState,\r\n        repetition,\r\n        block(atn, rule, repetition)\r\n    )\r\n    return star(atn, rule, repetition, handle)\r\n}\r\n\r\nfunction repetitionSep(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    repetition: RepetitionWithSeparator\r\n): ATNHandle {\r\n    const starState = newState<StarBlockStartState>(atn, rule, repetition, {\r\n        type: ATN_STAR_BLOCK_START\r\n    })\r\n    defineDecisionState(atn, starState)\r\n    const handle = makeAlts(\r\n        atn,\r\n        rule,\r\n        starState,\r\n        repetition,\r\n        block(atn, rule, repetition)\r\n    )\r\n    const sep = tokenRef(atn, rule, repetition.separator, repetition)\r\n    return star(atn, rule, repetition, handle, sep)\r\n}\r\n\r\nfunction repetitionMandatory(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    repetition: RepetitionMandatory\r\n): ATNHandle {\r\n    const plusState = newState<PlusBlockStartState>(atn, rule, repetition, {\r\n        type: ATN_PLUS_BLOCK_START\r\n    })\r\n    defineDecisionState(atn, plusState)\r\n    const handle = makeAlts(\r\n        atn,\r\n        rule,\r\n        plusState,\r\n        repetition,\r\n        block(atn, rule, repetition)\r\n    )\r\n    return plus(atn, rule, repetition, handle)\r\n}\r\n\r\nfunction repetitionMandatorySep(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    repetition: RepetitionMandatoryWithSeparator\r\n): ATNHandle {\r\n    const plusState = newState<PlusBlockStartState>(atn, rule, repetition, {\r\n        type: ATN_PLUS_BLOCK_START\r\n    })\r\n    defineDecisionState(atn, plusState)\r\n    const handle = makeAlts(\r\n        atn,\r\n        rule,\r\n        plusState,\r\n        repetition,\r\n        block(atn, rule, repetition)\r\n    )\r\n    const sep = tokenRef(atn, rule, repetition.separator, repetition)\r\n    return plus(atn, rule, repetition, handle, sep)\r\n}\r\n\r\nfunction alternation(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    alternation: Alternation\r\n): ATNHandle {\r\n    const start = newState<BasicBlockStartState>(atn, rule, alternation, {\r\n        type: ATN_BASIC\r\n    })\r\n    defineDecisionState(atn, start)\r\n    const alts = map(alternation.definition, (e) => atom(atn, rule, e))\r\n    const handle = makeAlts(atn, rule, start, alternation, ...alts)\r\n    return handle\r\n}\r\n\r\nfunction option(atn: ATN, rule: Rule, option: Option): ATNHandle {\r\n    const start = newState<BasicBlockStartState>(atn, rule, option, {\r\n        type: ATN_BASIC\r\n    })\r\n    defineDecisionState(atn, start)\r\n    const handle = makeAlts(atn, rule, start, option, block(atn, rule, option))\r\n    return optional(atn, rule, option, handle)\r\n}\r\n\r\nfunction block(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    block: { definition: IProduction[] }\r\n): ATNHandle | undefined {\r\n    const handles = filter(\r\n        map(block.definition, (e) => atom(atn, rule, e)),\r\n        (e) => e !== undefined\r\n    ) as ATNHandle[]\r\n    if (handles.length === 1) {\r\n        return handles[0]\r\n    } else if (handles.length === 0) {\r\n        return undefined\r\n    } else {\r\n        return makeBlock(atn, handles)\r\n    }\r\n}\r\n\r\nfunction plus(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    plus: IProductionWithOccurrence,\r\n    handle: ATNHandle,\r\n    sep?: ATNHandle\r\n): ATNHandle {\r\n    const blkStart = handle.left as PlusBlockStartState\r\n    const blkEnd = handle.right\r\n\r\n    const loop = newState<PlusLoopbackState>(atn, rule, plus, {\r\n        type: ATN_PLUS_LOOP_BACK\r\n    })\r\n    defineDecisionState(atn, loop)\r\n    const end = newState<LoopEndState>(atn, rule, plus, {\r\n        type: ATN_LOOP_END\r\n    })\r\n    blkStart.loopback = loop\r\n    end.loopback = loop\r\n    atn.decisionMap[buildATNKey(rule, sep ? 'RepetitionMandatoryWithSeparator' : 'RepetitionMandatory', plus.idx)] = loop;\r\n    epsilon(blkEnd, loop) // block can see loop back\r\n\r\n    // Depending on whether we have a separator we put the exit transition at index 1 or 0\r\n    // This influences the chosen option in the lookahead DFA\r\n    if (sep === undefined) {\r\n        epsilon(loop, blkStart) // loop back to start\r\n        epsilon(loop, end) // exit\r\n    } else {\r\n        epsilon(loop, end) // exit\r\n        // loop back to start with separator\r\n        epsilon(loop, sep.left)\r\n        epsilon(sep.right, blkStart)\r\n    }\r\n\r\n    return {\r\n        left: blkStart,\r\n        right: end\r\n    }\r\n}\r\n\r\nfunction star(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    star: IProductionWithOccurrence,\r\n    handle: ATNHandle,\r\n    sep?: ATNHandle\r\n): ATNHandle {\r\n    const start = handle.left\r\n    const end = handle.right\r\n\r\n    const entry = newState<StarLoopEntryState>(atn, rule, star, {\r\n        type: ATN_STAR_LOOP_ENTRY\r\n    })\r\n    defineDecisionState(atn, entry)\r\n    const loopEnd = newState<LoopEndState>(atn, rule, star, {\r\n        type: ATN_LOOP_END\r\n    })\r\n    const loop = newState<StarLoopbackState>(atn, rule, star, {\r\n        type: ATN_STAR_LOOP_BACK\r\n    })\r\n    entry.loopback = loop\r\n    loopEnd.loopback = loop\r\n\r\n    epsilon(entry, start) // loop enter edge (alt 2)\r\n    epsilon(entry, loopEnd) // bypass loop edge (alt 1)\r\n    epsilon(end, loop) // block end hits loop back\r\n\r\n    if (sep !== undefined) {\r\n        epsilon(loop, loopEnd) // end loop\r\n        // loop back to start of handle using separator\r\n        epsilon(loop, sep.left)\r\n        epsilon(sep.right, start)\r\n    } else {\r\n        epsilon(loop, entry) // loop back to entry/exit decision\r\n    }\r\n\r\n    atn.decisionMap[buildATNKey(rule, sep ? 'RepetitionWithSeparator' : 'Repetition', star.idx)] = entry;\r\n    return {\r\n        left: entry,\r\n        right: loopEnd\r\n    }\r\n}\r\n\r\nfunction optional(atn: ATN, rule: Rule, optional: Option, handle: ATNHandle): ATNHandle {\r\n    const start = handle.left as DecisionState\r\n    const end = handle.right\r\n\r\n    epsilon(start, end)\r\n\r\n    atn.decisionMap[buildATNKey(rule, 'Option', optional.idx)] = start;\r\n    return handle\r\n}\r\n\r\nfunction defineDecisionState(atn: ATN, state: DecisionState): number {\r\n    atn.decisionStates.push(state)\r\n    state.decision = atn.decisionStates.length - 1\r\n    return state.decision\r\n}\r\n\r\nfunction makeAlts(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    start: BlockStartState,\r\n    production: IProductionWithOccurrence,\r\n    ...alts: (ATNHandle | undefined)[]\r\n): ATNHandle {\r\n    const end = newState<BlockEndState>(atn, rule, production, {\r\n        type: ATN_BLOCK_END,\r\n        start\r\n    })\r\n    start.end = end\r\n    for (const alt of alts) {\r\n        if (alt !== undefined) {\r\n            // hook alts up to decision block\r\n            epsilon(start, alt.left)\r\n            epsilon(alt.right, end)\r\n        } else {\r\n            epsilon(start, end)\r\n        }\r\n    }\r\n\r\n    const handle: ATNHandle = {\r\n        left: start as ATNState,\r\n        right: end\r\n    }\r\n    atn.decisionMap[buildATNKey(rule, getProdType(production), production.idx)] = start\r\n    return handle\r\n}\r\n\r\nfunction getProdType(production: IProduction): LookaheadProductionType {\r\n    if (production instanceof Alternation) {\r\n        return 'Alternation';\r\n    } else if (production instanceof Option) {\r\n        return 'Option';\r\n    } else if (production instanceof Repetition) {\r\n        return 'Repetition';\r\n    } else if (production instanceof RepetitionWithSeparator) {\r\n        return 'RepetitionWithSeparator';\r\n    } else if (production instanceof RepetitionMandatory) {\r\n        return 'RepetitionMandatory';\r\n    } else if (production instanceof RepetitionMandatoryWithSeparator) {\r\n        return 'RepetitionMandatoryWithSeparator';\r\n    } else {\r\n        throw new Error('Invalid production type encountered');\r\n    }\r\n}\r\n\r\nfunction makeBlock(atn: ATN, alts: ATNHandle[]): ATNHandle {\r\n    const altsLength = alts.length\r\n    for (let i = 0; i < altsLength - 1; i++) {\r\n        const handle = alts[i]\r\n        let transition: Transition | undefined\r\n        if (handle.left.transitions.length === 1) {\r\n            transition = handle.left.transitions[0]\r\n        }\r\n        const isRuleTransition = transition instanceof RuleTransition\r\n        const ruleTransition = transition as RuleTransition\r\n        const next = alts[i + 1].left\r\n        if (\r\n            handle.left.type === ATN_BASIC &&\r\n            handle.right.type === ATN_BASIC &&\r\n            transition !== undefined &&\r\n            ((isRuleTransition && ruleTransition.followState === handle.right) ||\r\n                transition.target === handle.right)\r\n        ) {\r\n            // we can avoid epsilon edge to next element\r\n            if (isRuleTransition) {\r\n                ruleTransition.followState = next\r\n            } else {\r\n                transition.target = next\r\n            }\r\n            removeState(atn, handle.right) // we skipped over this state\r\n        } else {\r\n            // need epsilon if previous block's right end node is complex\r\n            epsilon(handle.right, next)\r\n        }\r\n    }\r\n\r\n    const first = alts[0]\r\n    const last = alts[altsLength - 1]\r\n    return {\r\n        left: first.left,\r\n        right: last.right\r\n    }\r\n}\r\n\r\nfunction tokenRef(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    tokenType: TokenType,\r\n    production: IProductionWithOccurrence\r\n): ATNHandle {\r\n    const left = newState<BasicState>(atn, rule, production, {\r\n        type: ATN_BASIC\r\n    })\r\n    const right = newState<BasicState>(atn, rule, production, {\r\n        type: ATN_BASIC\r\n    })\r\n    addTransition(left, new AtomTransition(right, tokenType))\r\n    return {\r\n        left,\r\n        right\r\n    }\r\n}\r\n\r\nfunction ruleRef(\r\n    atn: ATN,\r\n    currentRule: Rule,\r\n    nonTerminal: NonTerminal\r\n): ATNHandle {\r\n    const rule = nonTerminal.referencedRule\r\n    const start = atn.ruleToStartState.get(rule)!\r\n    const left = newState<BasicBlockStartState>(atn, currentRule, nonTerminal, {\r\n        type: ATN_BASIC\r\n    })\r\n    const right = newState<BasicBlockStartState>(atn, currentRule, nonTerminal, {\r\n        type: ATN_BASIC\r\n    })\r\n\r\n    const call = new RuleTransition(start, rule, right)\r\n    addTransition(left, call)\r\n\r\n    return {\r\n        left,\r\n        right\r\n    }\r\n}\r\n\r\nfunction buildRuleHandle(atn: ATN, rule: Rule, block: ATNHandle): ATNHandle {\r\n    const start = atn.ruleToStartState.get(rule)!\r\n    epsilon(start, block.left)\r\n    const stop = atn.ruleToStopState.get(rule)!\r\n    epsilon(block.right, stop)\r\n    const handle: ATNHandle = {\r\n        left: start,\r\n        right: stop\r\n    }\r\n    return handle\r\n}\r\n\r\nfunction epsilon(a: ATNBaseState, b: ATNBaseState): void {\r\n    const transition = new EpsilonTransition(b as ATNState)\r\n    addTransition(a, transition)\r\n}\r\n\r\nfunction newState<T extends ATNState>(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    production: IProductionWithOccurrence | undefined,\r\n    partial: Partial<T>\r\n): T {\r\n    const t: T = {\r\n        atn,\r\n        production,\r\n        epsilonOnlyTransitions: false,\r\n        rule,\r\n        transitions: [],\r\n        nextTokenWithinRule: [],\r\n        stateNumber: atn.states.length,\r\n        ...partial\r\n    } as unknown as T\r\n    atn.states.push(t)\r\n    return t\r\n}\r\n\r\nfunction addTransition(state: ATNBaseState, transition: Transition) {\r\n    // A single ATN state can only contain epsilon transitions or non-epsilon transitions\r\n    // Because they are never mixed, only setting the property for the first transition is fine\r\n    if (state.transitions.length === 0) {\r\n        state.epsilonOnlyTransitions = transition.isEpsilon()\r\n    }\r\n    state.transitions.push(transition)\r\n}\r\n\r\nfunction removeState(atn: ATN, state: ATNState): void {\r\n    atn.states.splice(atn.states.indexOf(state), 1)\r\n}\r\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport map from \"lodash-es/map.js\"\r\nimport { ATNState, DecisionState } from \"./atn.js\"\r\n\r\nexport interface DFA {\r\n  start?: DFAState\r\n  states: Record<string, DFAState>\r\n  decision: number\r\n  atnStartState: DecisionState\r\n}\r\n\r\nexport interface DFAState {\r\n  configs: ATNConfigSet\r\n  edges: Record<number, DFAState>\r\n  isAcceptState: boolean\r\n  prediction: number\r\n}\r\n\r\nexport const DFA_ERROR = {} as DFAState\r\n\r\nexport interface ATNConfig {\r\n  state: ATNState\r\n  alt: number\r\n  stack: ATNState[]\r\n}\r\n\r\nexport class ATNConfigSet {\r\n  private map: Record<string, number> = {}\r\n  private configs: ATNConfig[] = []\r\n\r\n  uniqueAlt: number | undefined\r\n\r\n  get size(): number {\r\n    return this.configs.length\r\n  }\r\n\r\n  finalize(): void {\r\n    // Empties the map to free up memory\r\n    this.map = {}\r\n  }\r\n\r\n  add(config: ATNConfig): void {\r\n    const key = getATNConfigKey(config)\r\n    // Only add configs which don't exist in our map already\r\n    // While this does not influence the actual algorithm, adding them anyway would massively increase memory consumption\r\n    if (!(key in this.map)) {\r\n      this.map[key] = this.configs.length\r\n      this.configs.push(config)\r\n    }\r\n  }\r\n\r\n  get elements(): readonly ATNConfig[] {\r\n    return this.configs\r\n  }\r\n\r\n  get alts(): number[] {\r\n    return map(this.configs, (e) => e.alt)\r\n  }\r\n\r\n  get key(): string {\r\n    let value = \"\"\r\n    for (const k in this.map) {\r\n      value += k + \":\"\r\n    }\r\n    return value\r\n  }\r\n}\r\n\r\nexport function getATNConfigKey(config: ATNConfig, alt = true) {\r\n  return `${alt ? `a${config.alt}` : \"\"}s${\r\n    config.state.stateNumber\r\n  }:${config.stack.map((e) => e.stateNumber.toString()).join(\"_\")}`\r\n}\r\n","import baseIteratee from './_baseIteratee.js';\nimport baseUniq from './_baseUniq.js';\n\n/**\n * This method is like `_.uniq` except that it accepts `iteratee` which is\n * invoked for each element in `array` to generate the criterion by which\n * uniqueness is computed. The order of result values is determined by the\n * order they occur in the array. The iteratee is invoked with one argument:\n * (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n * @returns {Array} Returns the new duplicate free array.\n * @example\n *\n * _.uniqBy([2.1, 1.2, 2.3], Math.floor);\n * // => [2.1, 1.2]\n *\n * // The `_.property` iteratee shorthand.\n * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n * // => [{ 'x': 1 }, { 'x': 2 }]\n */\nfunction uniqBy(array, iteratee) {\n  return (array && array.length) ? baseUniq(array, baseIteratee(iteratee, 2)) : [];\n}\n\nexport default uniqBy;\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport {\r\n    IToken,\r\n    TokenType,\r\n    tokenMatcher,\r\n    tokenLabel,\r\n    Rule,\r\n    IProductionWithOccurrence,\r\n    NonTerminal,\r\n    Alternation,\r\n    Option,\r\n    RepetitionMandatory,\r\n    RepetitionMandatoryWithSeparator,\r\n    RepetitionWithSeparator,\r\n    Repetition,\r\n    Terminal,\r\n    BaseParser,\r\n    LLkLookaheadStrategy,\r\n    ILookaheadValidationError,\r\n    IOrAlt,\r\n    getLookaheadPaths,\r\n    OptionalProductionType\r\n} from \"chevrotain\";\r\nimport {\r\n    ATN,\r\n    ATNState,\r\n    ATN_RULE_STOP,\r\n    AtomTransition,\r\n    buildATNKey,\r\n    createATN,\r\n    DecisionState,\r\n    EpsilonTransition,\r\n    RuleTransition,\r\n    Transition\r\n} from \"./atn.js\";\r\nimport {\r\n    ATNConfig,\r\n    ATNConfigSet,\r\n    DFA,\r\n    DFAState,\r\n    DFA_ERROR,\r\n    getATNConfigKey\r\n} from \"./dfa.js\";\r\nimport min from \"lodash-es/min.js\";\r\nimport flatMap from \"lodash-es/flatMap.js\";\r\nimport uniqBy from \"lodash-es/uniqBy.js\";\r\nimport map from \"lodash-es/map.js\";\r\nimport flatten from \"lodash-es/flatten.js\";\r\nimport forEach from \"lodash-es/forEach.js\";\r\nimport isEmpty from \"lodash-es/isEmpty.js\";\r\nimport reduce from \"lodash-es/reduce.js\";\r\n\r\ntype DFACache = (predicateSet: PredicateSet) => DFA\r\n\r\nexport type AmbiguityReport = (message: string) => void;\r\n\r\nfunction createDFACache(startState: DecisionState, decision: number): DFACache {\r\n    const map: Record<string, DFA | undefined> = {}\r\n    return (predicateSet) => {\r\n        const key = predicateSet.toString()\r\n        let existing = map[key]\r\n        if (existing !== undefined) {\r\n            return existing\r\n        } else {\r\n            existing = {\r\n                atnStartState: startState,\r\n                decision,\r\n                states: {}\r\n            }\r\n            map[key] = existing\r\n            return existing\r\n        }\r\n    }\r\n}\r\n\r\nclass PredicateSet {\r\n    private predicates: boolean[] = []\r\n\r\n    is(index: number): boolean {\r\n        return index >= this.predicates.length || this.predicates[index]\r\n    }\r\n\r\n    set(index: number, value: boolean) {\r\n        this.predicates[index] = value\r\n    }\r\n\r\n    toString(): string {\r\n        let value = \"\"\r\n        const size = this.predicates.length\r\n        for (let i = 0; i < size; i++) {\r\n            value += this.predicates[i] === true ? \"1\" : \"0\"\r\n        }\r\n        return value\r\n    }\r\n}\r\n\r\ninterface AdaptivePredictError {\r\n    tokenPath: IToken[]\r\n    possibleTokenTypes: TokenType[]\r\n    actualToken: IToken\r\n}\r\n\r\nconst EMPTY_PREDICATES = new PredicateSet()\r\n\r\nexport interface LLStarLookaheadOptions {\r\n    logging?: AmbiguityReport\r\n}\r\n\r\nexport class LLStarLookaheadStrategy extends LLkLookaheadStrategy {\r\n\r\n    private atn: ATN;\r\n    private dfas: DFACache[];\r\n    private logging: AmbiguityReport;\r\n\r\n    constructor(options?: LLStarLookaheadOptions) {\r\n        super();\r\n        this.logging = options?.logging ?? ((message) => console.log(message));\r\n    }\r\n\r\n    override initialize(options: { rules: Rule[] }): void {\r\n        this.atn = createATN(options.rules);\r\n        this.dfas = initATNSimulator(this.atn);\r\n    }\r\n\r\n    override validateAmbiguousAlternationAlternatives(): ILookaheadValidationError[] {\r\n        return [];\r\n    }\r\n\r\n    override validateEmptyOrAlternatives(): ILookaheadValidationError[] {\r\n        return [];\r\n    }\r\n\r\n    override buildLookaheadForAlternation(options: {\r\n        prodOccurrence: number;\r\n        rule: Rule;\r\n        maxLookahead: number;\r\n        hasPredicates: boolean;\r\n        dynamicTokensEnabled: boolean\r\n    }): (this: BaseParser, orAlts?: IOrAlt<any>[] | undefined) => number | undefined {\r\n        const { prodOccurrence, rule, hasPredicates, dynamicTokensEnabled } = options;\r\n        const dfas = this.dfas;\r\n        const logging = this.logging;\r\n        const key = buildATNKey(rule, 'Alternation', prodOccurrence);\r\n        const decisionState = this.atn.decisionMap[key];\r\n        const decisionIndex = decisionState.decision;\r\n        const partialAlts: (TokenType | undefined)[][] = map(\r\n            getLookaheadPaths({\r\n                maxLookahead: 1,\r\n                occurrence: prodOccurrence,\r\n                prodType: \"Alternation\",\r\n                rule: rule\r\n            }),\r\n            (currAlt) => map(currAlt, (path) => path[0])\r\n        )\r\n\r\n        if (isLL1Sequence(partialAlts, false) && !dynamicTokensEnabled) {\r\n            const choiceToAlt = reduce(\r\n                partialAlts,\r\n                (result, currAlt, idx) => {\r\n                    forEach(currAlt, (currTokType) => {\r\n                        if (currTokType) {\r\n                            result[currTokType.tokenTypeIdx!] = idx\r\n                            forEach(currTokType.categoryMatches!, (currExtendingType) => {\r\n                                result[currExtendingType] = idx\r\n                            })\r\n                        }\r\n                    })\r\n                    return result\r\n                },\r\n                {} as Record<number, number>\r\n            )\r\n\r\n            if (hasPredicates) {\r\n                return function (this: BaseParser, orAlts) {\r\n                    const nextToken = this.LA(1)\r\n                    const prediction: number | undefined = choiceToAlt[nextToken.tokenTypeIdx]\r\n                    if (orAlts !== undefined && prediction !== undefined) {\r\n                        const gate = orAlts[prediction]?.GATE\r\n                        if (gate !== undefined && gate.call(this) === false) {\r\n                            return undefined;\r\n                        }\r\n                    }\r\n                    return prediction\r\n                }\r\n            } else {\r\n                return function (this: BaseParser): number | undefined {\r\n                    const nextToken = this.LA(1)\r\n                    return choiceToAlt[nextToken.tokenTypeIdx];\r\n                }\r\n            }\r\n        } else if (hasPredicates) {\r\n            return function (this: BaseParser, orAlts) {\r\n                const predicates = new PredicateSet()\r\n                const length = orAlts === undefined ? 0 : orAlts.length\r\n                for (let i = 0; i < length; i++) {\r\n                    const gate = orAlts?.[i].GATE\r\n                    predicates.set(i, gate === undefined || gate.call(this))\r\n                }\r\n                const result = adaptivePredict.call(this, dfas, decisionIndex, predicates, logging);\r\n                return typeof result === 'number' ? result : undefined;\r\n            }\r\n        } else {\r\n            return function (this: BaseParser) {\r\n                const result = adaptivePredict.call(this, dfas, decisionIndex, EMPTY_PREDICATES, logging);\r\n                return typeof result === 'number' ? result : undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    override buildLookaheadForOptional(options: {\r\n        prodOccurrence: number;\r\n        prodType: OptionalProductionType;\r\n        rule: Rule;\r\n        maxLookahead: number;\r\n        dynamicTokensEnabled: boolean\r\n    }): (this: BaseParser) => boolean {\r\n        const { prodOccurrence, rule, prodType, dynamicTokensEnabled } = options;\r\n        const dfas = this.dfas;\r\n        const logging = this.logging;\r\n        const key = buildATNKey(rule, prodType, prodOccurrence);\r\n        const decisionState = this.atn.decisionMap[key];\r\n        const decisionIndex = decisionState.decision;\r\n        const alts = map(\r\n            getLookaheadPaths({\r\n                maxLookahead: 1,\r\n                occurrence: prodOccurrence,\r\n                prodType,\r\n                rule\r\n            }),\r\n            (e) => {\r\n              return map(e, (g) => g[0])\r\n            }\r\n          )\r\n        \r\n          if (isLL1Sequence(alts) && alts[0][0] && !dynamicTokensEnabled) {\r\n            const alt = alts[0]\r\n            const singleTokensTypes = flatten(alt)\r\n        \r\n            if (\r\n              singleTokensTypes.length === 1 &&\r\n              isEmpty(singleTokensTypes[0].categoryMatches)\r\n            ) {\r\n              const expectedTokenType = singleTokensTypes[0]\r\n              const expectedTokenUniqueKey = expectedTokenType.tokenTypeIdx\r\n        \r\n              return function (this: BaseParser): boolean {\r\n                return this.LA(1).tokenTypeIdx === expectedTokenUniqueKey\r\n              }\r\n            } else {\r\n              const choiceToAlt = reduce(\r\n                singleTokensTypes,\r\n                (result, currTokType) => {\r\n                  if (currTokType !== undefined) {\r\n                    result[currTokType.tokenTypeIdx!] = true\r\n                    forEach(currTokType.categoryMatches, (currExtendingType) => {\r\n                      result[currExtendingType] = true\r\n                    })\r\n                  }\r\n                  return result\r\n                },\r\n                {} as Record<number, boolean>\r\n              )\r\n        \r\n              return function (this: BaseParser): boolean {\r\n                const nextToken = this.LA(1)\r\n                return choiceToAlt[nextToken.tokenTypeIdx] === true\r\n              }\r\n            }\r\n          }\r\n          return function (this: BaseParser) {\r\n            const result = adaptivePredict.call(this, dfas, decisionIndex, EMPTY_PREDICATES, logging)\r\n              return typeof result === \"object\" ? false : result === 0;\r\n          }\r\n    }\r\n\r\n}\r\n\r\nfunction isLL1Sequence(sequences: (TokenType | undefined)[][], allowEmpty = true): boolean {\r\n    const fullSet = new Set<number>()\r\n\r\n    for (const alt of sequences) {\r\n        const altSet = new Set<number>()\r\n        for (const tokType of alt) {\r\n            if (tokType === undefined) {\r\n                if (allowEmpty) {\r\n                    // Epsilon production encountered\r\n                    break\r\n                } else {\r\n                    return false;\r\n                }\r\n            }\r\n            const indices = [tokType.tokenTypeIdx!].concat(tokType.categoryMatches!)\r\n            for (const index of indices) {\r\n                if (fullSet.has(index)) {\r\n                    if (!altSet.has(index)) {\r\n                        return false\r\n                    }\r\n                } else {\r\n                    fullSet.add(index)\r\n                    altSet.add(index)\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\nfunction initATNSimulator(atn: ATN): DFACache[] {\r\n    const decisionLength = atn.decisionStates.length\r\n    const decisionToDFA: DFACache[] = Array(decisionLength)\r\n    for (let i = 0; i < decisionLength; i++) {\r\n        decisionToDFA[i] = createDFACache(atn.decisionStates[i], i)\r\n    }\r\n    return decisionToDFA;\r\n}\r\n\r\nfunction adaptivePredict(\r\n    this: BaseParser,\r\n    dfaCaches: DFACache[],\r\n    decision: number,\r\n    predicateSet: PredicateSet,\r\n    logging: AmbiguityReport\r\n): number | AdaptivePredictError {\r\n    const dfa = dfaCaches[decision](predicateSet)\r\n    let start = dfa.start\r\n    if (start === undefined) {\r\n        const closure = computeStartState(dfa.atnStartState as ATNState)\r\n        start = addDFAState(dfa, newDFAState(closure))\r\n        dfa.start = start\r\n    }\r\n\r\n    const alt = performLookahead.apply(this, [dfa, start, predicateSet, logging])\r\n    return alt\r\n}\r\n\r\nfunction performLookahead(\r\n    this: BaseParser,\r\n    dfa: DFA,\r\n    s0: DFAState,\r\n    predicateSet: PredicateSet,\r\n    logging: AmbiguityReport\r\n): number | AdaptivePredictError {\r\n    let previousD = s0\r\n\r\n    let i = 1\r\n    const path: IToken[] = []\r\n    let t = this.LA(i++)\r\n\r\n    while (true) {\r\n        let d = getExistingTargetState(previousD, t)\r\n        if (d === undefined) {\r\n            d = computeLookaheadTarget.apply(this, [dfa, previousD, t, i, predicateSet, logging])\r\n        }\r\n\r\n        if (d === DFA_ERROR) {\r\n            return buildAdaptivePredictError(path, previousD, t)\r\n        }\r\n\r\n        if (d.isAcceptState === true) {\r\n            return d.prediction\r\n        }\r\n\r\n        previousD = d\r\n        path.push(t)\r\n        t = this.LA(i++)\r\n    }\r\n}\r\n\r\nfunction computeLookaheadTarget(\r\n    this: BaseParser,\r\n    dfa: DFA,\r\n    previousD: DFAState,\r\n    token: IToken,\r\n    lookahead: number,\r\n    predicateSet: PredicateSet,\r\n    logging: AmbiguityReport\r\n): DFAState {\r\n    const reach = computeReachSet(previousD.configs, token, predicateSet)\r\n    if (reach.size === 0) {\r\n        addDFAEdge(dfa, previousD, token, DFA_ERROR)\r\n        return DFA_ERROR\r\n    }\r\n\r\n    let newState = newDFAState(reach)\r\n    const predictedAlt = getUniqueAlt(reach, predicateSet)\r\n\r\n    if (predictedAlt !== undefined) {\r\n        newState.isAcceptState = true\r\n        newState.prediction = predictedAlt\r\n        newState.configs.uniqueAlt = predictedAlt\r\n    } else if (hasConflictTerminatingPrediction(reach)) {\r\n        const prediction = min(reach.alts)!\r\n        newState.isAcceptState = true\r\n        newState.prediction = prediction\r\n        newState.configs.uniqueAlt = prediction\r\n        reportLookaheadAmbiguity.apply(this, [dfa, lookahead, reach.alts, logging])\r\n    }\r\n\r\n    newState = addDFAEdge(dfa, previousD, token, newState)\r\n    return newState\r\n}\r\n\r\nfunction reportLookaheadAmbiguity(\r\n    this: BaseParser,\r\n    dfa: DFA,\r\n    lookahead: number,\r\n    ambiguityIndices: number[],\r\n    logging: AmbiguityReport\r\n) {\r\n    const prefixPath: TokenType[] = []\r\n    for (let i = 1; i <= lookahead; i++) {\r\n        prefixPath.push(this.LA(i).tokenType)\r\n    }\r\n    const atnState = dfa.atnStartState\r\n    const topLevelRule = atnState.rule\r\n    const production = atnState.production\r\n    const message = buildAmbiguityError({\r\n        topLevelRule,\r\n        ambiguityIndices,\r\n        production,\r\n        prefixPath\r\n    })\r\n    logging(message)\r\n}\r\n\r\nfunction buildAmbiguityError(options: {\r\n    topLevelRule: Rule\r\n    prefixPath: TokenType[]\r\n    ambiguityIndices: number[]\r\n    production: IProductionWithOccurrence\r\n}): string {\r\n    const pathMsg = map(options.prefixPath, (currtok) =>\r\n        tokenLabel(currtok)\r\n    ).join(\", \")\r\n    const occurrence =\r\n        options.production.idx === 0 ? \"\" : options.production.idx\r\n    let currMessage =\r\n        `Ambiguous Alternatives Detected: <${options.ambiguityIndices.join(\r\n            \", \"\r\n        )}> in <${getProductionDslName(options.production)}${occurrence}>` +\r\n        ` inside <${options.topLevelRule.name}> Rule,\\n` +\r\n        `<${pathMsg}> may appears as a prefix path in all these alternatives.\\n`\r\n\r\n    currMessage =\r\n        currMessage +\r\n        `See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#AMBIGUOUS_ALTERNATIVES\\n` +\r\n        `For Further details.`\r\n    return currMessage\r\n}\r\n\r\nfunction getProductionDslName(prod: IProductionWithOccurrence): string {\r\n    if (prod instanceof NonTerminal) {\r\n        return \"SUBRULE\"\r\n    } else if (prod instanceof Option) {\r\n        return \"OPTION\"\r\n    } else if (prod instanceof Alternation) {\r\n        return \"OR\"\r\n    } else if (prod instanceof RepetitionMandatory) {\r\n        return \"AT_LEAST_ONE\"\r\n    } else if (prod instanceof RepetitionMandatoryWithSeparator) {\r\n        return \"AT_LEAST_ONE_SEP\"\r\n    } else if (prod instanceof RepetitionWithSeparator) {\r\n        return \"MANY_SEP\"\r\n    } else if (prod instanceof Repetition) {\r\n        return \"MANY\"\r\n    } else if (prod instanceof Terminal) {\r\n        return \"CONSUME\"\r\n    } else {\r\n        throw Error(\"non exhaustive match\")\r\n    }\r\n}\r\n\r\nfunction buildAdaptivePredictError(\r\n    path: IToken[],\r\n    previous: DFAState,\r\n    current: IToken\r\n): AdaptivePredictError {\r\n    const nextTransitions = flatMap(\r\n        previous.configs.elements,\r\n        (e) => e.state.transitions\r\n    )\r\n    const nextTokenTypes = uniqBy(\r\n        nextTransitions\r\n            .filter((e): e is AtomTransition => e instanceof AtomTransition)\r\n            .map((e) => e.tokenType),\r\n        (e) => e.tokenTypeIdx\r\n    )\r\n    return {\r\n        actualToken: current,\r\n        possibleTokenTypes: nextTokenTypes,\r\n        tokenPath: path\r\n    }\r\n}\r\n\r\nfunction getExistingTargetState(\r\n    state: DFAState,\r\n    token: IToken\r\n): DFAState | undefined {\r\n    return state.edges[token.tokenTypeIdx]\r\n}\r\n\r\nfunction computeReachSet(\r\n    configs: ATNConfigSet,\r\n    token: IToken,\r\n    predicateSet: PredicateSet\r\n): ATNConfigSet {\r\n    const intermediate = new ATNConfigSet()\r\n    const skippedStopStates: ATNConfig[] = []\r\n\r\n    for (const c of configs.elements) {\r\n        if (predicateSet.is(c.alt) === false) {\r\n            continue\r\n        }\r\n        if (c.state.type === ATN_RULE_STOP) {\r\n            skippedStopStates.push(c)\r\n            continue\r\n        }\r\n        const transitionLength = c.state.transitions.length\r\n        for (let i = 0; i < transitionLength; i++) {\r\n            const transition = c.state.transitions[i]\r\n            const target = getReachableTarget(transition, token)\r\n            if (target !== undefined) {\r\n                intermediate.add({\r\n                    state: target,\r\n                    alt: c.alt,\r\n                    stack: c.stack\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    let reach: ATNConfigSet | undefined\r\n\r\n    if (skippedStopStates.length === 0 && intermediate.size === 1) {\r\n        reach = intermediate\r\n    }\r\n\r\n    if (reach === undefined) {\r\n        reach = new ATNConfigSet()\r\n        for (const c of intermediate.elements) {\r\n            closure(c, reach)\r\n        }\r\n    }\r\n\r\n    if (skippedStopStates.length > 0 && !hasConfigInRuleStopState(reach)) {\r\n        for (const c of skippedStopStates) {\r\n            reach.add(c)\r\n        }\r\n    }\r\n\r\n    return reach\r\n}\r\n\r\nfunction getReachableTarget(\r\n    transition: Transition,\r\n    token: IToken\r\n): ATNState | undefined {\r\n    if (\r\n        transition instanceof AtomTransition &&\r\n        tokenMatcher(token, transition.tokenType)\r\n    ) {\r\n        return transition.target\r\n    }\r\n    return undefined\r\n}\r\n\r\nfunction getUniqueAlt(\r\n    configs: ATNConfigSet,\r\n    predicateSet: PredicateSet\r\n): number | undefined {\r\n    let alt: number | undefined\r\n    for (const c of configs.elements) {\r\n        if (predicateSet.is(c.alt) === true) {\r\n            if (alt === undefined) {\r\n                alt = c.alt\r\n            } else if (alt !== c.alt) {\r\n                return undefined\r\n            }\r\n        }\r\n    }\r\n    return alt\r\n}\r\n\r\nfunction newDFAState(closure: ATNConfigSet): DFAState {\r\n    return {\r\n        configs: closure,\r\n        edges: {},\r\n        isAcceptState: false,\r\n        prediction: -1\r\n    }\r\n}\r\n\r\nfunction addDFAEdge(\r\n    dfa: DFA,\r\n    from: DFAState,\r\n    token: IToken,\r\n    to: DFAState\r\n): DFAState {\r\n    to = addDFAState(dfa, to)\r\n    from.edges[token.tokenTypeIdx] = to\r\n    return to\r\n}\r\n\r\nfunction addDFAState(dfa: DFA, state: DFAState): DFAState {\r\n    if (state === DFA_ERROR) {\r\n        return state\r\n    }\r\n    // Repetitions have the same config set\r\n    // Therefore, storing the key of the config in a map allows us to create a loop in our DFA\r\n    const mapKey = state.configs.key\r\n    const existing = dfa.states[mapKey]\r\n    if (existing !== undefined) {\r\n        return existing\r\n    }\r\n    state.configs.finalize()\r\n    dfa.states[mapKey] = state\r\n    return state\r\n}\r\n\r\nfunction computeStartState(atnState: ATNState): ATNConfigSet {\r\n    const configs = new ATNConfigSet()\r\n\r\n    const numberOfTransitions = atnState.transitions.length\r\n    for (let i = 0; i < numberOfTransitions; i++) {\r\n        const target = atnState.transitions[i].target\r\n        const config: ATNConfig = {\r\n            state: target,\r\n            alt: i,\r\n            stack: []\r\n        }\r\n        closure(config, configs)\r\n    }\r\n\r\n    return configs\r\n}\r\n\r\nfunction closure(config: ATNConfig, configs: ATNConfigSet): void {\r\n    const p = config.state\r\n\r\n    if (p.type === ATN_RULE_STOP) {\r\n        if (config.stack.length > 0) {\r\n            const atnStack = [...config.stack]\r\n            const followState = atnStack.pop()!\r\n            const followConfig: ATNConfig = {\r\n                state: followState,\r\n                alt: config.alt,\r\n                stack: atnStack\r\n            }\r\n            closure(followConfig, configs)\r\n        } else {\r\n            // Dipping into outer context, simply add the config\r\n            // This will stop computation once every config is at the rule stop state\r\n            configs.add(config)\r\n        }\r\n        return\r\n    }\r\n\r\n    if (!p.epsilonOnlyTransitions) {\r\n        configs.add(config)\r\n    }\r\n\r\n    const transitionLength = p.transitions.length\r\n    for (let i = 0; i < transitionLength; i++) {\r\n        const transition = p.transitions[i]\r\n        const c = getEpsilonTarget(config, transition)\r\n\r\n        if (c !== undefined) {\r\n            closure(c, configs)\r\n        }\r\n    }\r\n}\r\n\r\nfunction getEpsilonTarget(\r\n    config: ATNConfig,\r\n    transition: Transition\r\n): ATNConfig | undefined {\r\n    if (transition instanceof EpsilonTransition) {\r\n        return {\r\n            state: transition.target,\r\n            alt: config.alt,\r\n            stack: config.stack\r\n        }\r\n    } else if (transition instanceof RuleTransition) {\r\n        const stack = [...config.stack, transition.followState]\r\n        return {\r\n            state: transition.target,\r\n            alt: config.alt,\r\n            stack\r\n        }\r\n    }\r\n    return undefined\r\n}\r\n\r\nfunction hasConfigInRuleStopState(configs: ATNConfigSet): boolean {\r\n    for (const c of configs.elements) {\r\n        if (c.state.type === ATN_RULE_STOP) {\r\n            return true\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\nfunction allConfigsInRuleStopStates(configs: ATNConfigSet): boolean {\r\n    for (const c of configs.elements) {\r\n        if (c.state.type !== ATN_RULE_STOP) {\r\n            return false\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\nfunction hasConflictTerminatingPrediction(configs: ATNConfigSet): boolean {\r\n    if (allConfigsInRuleStopStates(configs)) {\r\n        return true\r\n    }\r\n    const altSets = getConflictingAltSets(configs.elements)\r\n    const heuristic =\r\n        hasConflictingAltSet(altSets) && !hasStateAssociatedWithOneAlt(altSets)\r\n    return heuristic\r\n}\r\n\r\nfunction getConflictingAltSets(\r\n    configs: readonly ATNConfig[]\r\n): Map<string, Record<number, boolean>> {\r\n    const configToAlts = new Map<string, Record<number, boolean>>()\r\n    for (const c of configs) {\r\n        const key = getATNConfigKey(c, false)\r\n        let alts = configToAlts.get(key)\r\n        if (alts === undefined) {\r\n            alts = {}\r\n            configToAlts.set(key, alts)\r\n        }\r\n        alts[c.alt] = true\r\n    }\r\n    return configToAlts\r\n}\r\n\r\nfunction hasConflictingAltSet(\r\n    altSets: Map<string, Record<number, boolean>>\r\n): boolean {\r\n    for (const value of Array.from(altSets.values())) {\r\n        if (Object.keys(value).length > 1) {\r\n            return true\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\nfunction hasStateAssociatedWithOneAlt(\r\n    altSets: Map<string, Record<number, boolean>>\r\n): boolean {\r\n    for (const value of Array.from(altSets.values())) {\r\n        if (Object.keys(value).length === 1) {\r\n            return true\r\n        }\r\n    }\r\n    return false\r\n}\r\n","/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n'use strict';\nexport var DocumentUri;\n(function (DocumentUri) {\n    function is(value) {\n        return typeof value === 'string';\n    }\n    DocumentUri.is = is;\n})(DocumentUri || (DocumentUri = {}));\nexport var URI;\n(function (URI) {\n    function is(value) {\n        return typeof value === 'string';\n    }\n    URI.is = is;\n})(URI || (URI = {}));\nexport var integer;\n(function (integer) {\n    integer.MIN_VALUE = -2147483648;\n    integer.MAX_VALUE = 2147483647;\n    function is(value) {\n        return typeof value === 'number' && integer.MIN_VALUE <= value && value <= integer.MAX_VALUE;\n    }\n    integer.is = is;\n})(integer || (integer = {}));\nexport var uinteger;\n(function (uinteger) {\n    uinteger.MIN_VALUE = 0;\n    uinteger.MAX_VALUE = 2147483647;\n    function is(value) {\n        return typeof value === 'number' && uinteger.MIN_VALUE <= value && value <= uinteger.MAX_VALUE;\n    }\n    uinteger.is = is;\n})(uinteger || (uinteger = {}));\n/**\n * The Position namespace provides helper functions to work with\n * {@link Position} literals.\n */\nexport var Position;\n(function (Position) {\n    /**\n     * Creates a new Position literal from the given line and character.\n     * @param line The position's line.\n     * @param character The position's character.\n     */\n    function create(line, character) {\n        if (line === Number.MAX_VALUE) {\n            line = uinteger.MAX_VALUE;\n        }\n        if (character === Number.MAX_VALUE) {\n            character = uinteger.MAX_VALUE;\n        }\n        return { line, character };\n    }\n    Position.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Position} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.objectLiteral(candidate) && Is.uinteger(candidate.line) && Is.uinteger(candidate.character);\n    }\n    Position.is = is;\n})(Position || (Position = {}));\n/**\n * The Range namespace provides helper functions to work with\n * {@link Range} literals.\n */\nexport var Range;\n(function (Range) {\n    function create(one, two, three, four) {\n        if (Is.uinteger(one) && Is.uinteger(two) && Is.uinteger(three) && Is.uinteger(four)) {\n            return { start: Position.create(one, two), end: Position.create(three, four) };\n        }\n        else if (Position.is(one) && Position.is(two)) {\n            return { start: one, end: two };\n        }\n        else {\n            throw new Error(`Range#create called with invalid arguments[${one}, ${two}, ${three}, ${four}]`);\n        }\n    }\n    Range.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Range} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.objectLiteral(candidate) && Position.is(candidate.start) && Position.is(candidate.end);\n    }\n    Range.is = is;\n})(Range || (Range = {}));\n/**\n * The Location namespace provides helper functions to work with\n * {@link Location} literals.\n */\nexport var Location;\n(function (Location) {\n    /**\n     * Creates a Location literal.\n     * @param uri The location's uri.\n     * @param range The location's range.\n     */\n    function create(uri, range) {\n        return { uri, range };\n    }\n    Location.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Location} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.objectLiteral(candidate) && Range.is(candidate.range) && (Is.string(candidate.uri) || Is.undefined(candidate.uri));\n    }\n    Location.is = is;\n})(Location || (Location = {}));\n/**\n * The LocationLink namespace provides helper functions to work with\n * {@link LocationLink} literals.\n */\nexport var LocationLink;\n(function (LocationLink) {\n    /**\n     * Creates a LocationLink literal.\n     * @param targetUri The definition's uri.\n     * @param targetRange The full range of the definition.\n     * @param targetSelectionRange The span of the symbol definition at the target.\n     * @param originSelectionRange The span of the symbol being defined in the originating source file.\n     */\n    function create(targetUri, targetRange, targetSelectionRange, originSelectionRange) {\n        return { targetUri, targetRange, targetSelectionRange, originSelectionRange };\n    }\n    LocationLink.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link LocationLink} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.objectLiteral(candidate) && Range.is(candidate.targetRange) && Is.string(candidate.targetUri)\n            && Range.is(candidate.targetSelectionRange)\n            && (Range.is(candidate.originSelectionRange) || Is.undefined(candidate.originSelectionRange));\n    }\n    LocationLink.is = is;\n})(LocationLink || (LocationLink = {}));\n/**\n * The Color namespace provides helper functions to work with\n * {@link Color} literals.\n */\nexport var Color;\n(function (Color) {\n    /**\n     * Creates a new Color literal.\n     */\n    function create(red, green, blue, alpha) {\n        return {\n            red,\n            green,\n            blue,\n            alpha,\n        };\n    }\n    Color.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Color} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Is.numberRange(candidate.red, 0, 1)\n            && Is.numberRange(candidate.green, 0, 1)\n            && Is.numberRange(candidate.blue, 0, 1)\n            && Is.numberRange(candidate.alpha, 0, 1);\n    }\n    Color.is = is;\n})(Color || (Color = {}));\n/**\n * The ColorInformation namespace provides helper functions to work with\n * {@link ColorInformation} literals.\n */\nexport var ColorInformation;\n(function (ColorInformation) {\n    /**\n     * Creates a new ColorInformation literal.\n     */\n    function create(range, color) {\n        return {\n            range,\n            color,\n        };\n    }\n    ColorInformation.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link ColorInformation} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Range.is(candidate.range) && Color.is(candidate.color);\n    }\n    ColorInformation.is = is;\n})(ColorInformation || (ColorInformation = {}));\n/**\n * The Color namespace provides helper functions to work with\n * {@link ColorPresentation} literals.\n */\nexport var ColorPresentation;\n(function (ColorPresentation) {\n    /**\n     * Creates a new ColorInformation literal.\n     */\n    function create(label, textEdit, additionalTextEdits) {\n        return {\n            label,\n            textEdit,\n            additionalTextEdits,\n        };\n    }\n    ColorPresentation.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link ColorInformation} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Is.string(candidate.label)\n            && (Is.undefined(candidate.textEdit) || TextEdit.is(candidate))\n            && (Is.undefined(candidate.additionalTextEdits) || Is.typedArray(candidate.additionalTextEdits, TextEdit.is));\n    }\n    ColorPresentation.is = is;\n})(ColorPresentation || (ColorPresentation = {}));\n/**\n * A set of predefined range kinds.\n */\nexport var FoldingRangeKind;\n(function (FoldingRangeKind) {\n    /**\n     * Folding range for a comment\n     */\n    FoldingRangeKind.Comment = 'comment';\n    /**\n     * Folding range for an import or include\n     */\n    FoldingRangeKind.Imports = 'imports';\n    /**\n     * Folding range for a region (e.g. `#region`)\n     */\n    FoldingRangeKind.Region = 'region';\n})(FoldingRangeKind || (FoldingRangeKind = {}));\n/**\n * The folding range namespace provides helper functions to work with\n * {@link FoldingRange} literals.\n */\nexport var FoldingRange;\n(function (FoldingRange) {\n    /**\n     * Creates a new FoldingRange literal.\n     */\n    function create(startLine, endLine, startCharacter, endCharacter, kind, collapsedText) {\n        const result = {\n            startLine,\n            endLine\n        };\n        if (Is.defined(startCharacter)) {\n            result.startCharacter = startCharacter;\n        }\n        if (Is.defined(endCharacter)) {\n            result.endCharacter = endCharacter;\n        }\n        if (Is.defined(kind)) {\n            result.kind = kind;\n        }\n        if (Is.defined(collapsedText)) {\n            result.collapsedText = collapsedText;\n        }\n        return result;\n    }\n    FoldingRange.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link FoldingRange} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Is.uinteger(candidate.startLine) && Is.uinteger(candidate.startLine)\n            && (Is.undefined(candidate.startCharacter) || Is.uinteger(candidate.startCharacter))\n            && (Is.undefined(candidate.endCharacter) || Is.uinteger(candidate.endCharacter))\n            && (Is.undefined(candidate.kind) || Is.string(candidate.kind));\n    }\n    FoldingRange.is = is;\n})(FoldingRange || (FoldingRange = {}));\n/**\n * The DiagnosticRelatedInformation namespace provides helper functions to work with\n * {@link DiagnosticRelatedInformation} literals.\n */\nexport var DiagnosticRelatedInformation;\n(function (DiagnosticRelatedInformation) {\n    /**\n     * Creates a new DiagnosticRelatedInformation literal.\n     */\n    function create(location, message) {\n        return {\n            location,\n            message\n        };\n    }\n    DiagnosticRelatedInformation.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link DiagnosticRelatedInformation} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Location.is(candidate.location) && Is.string(candidate.message);\n    }\n    DiagnosticRelatedInformation.is = is;\n})(DiagnosticRelatedInformation || (DiagnosticRelatedInformation = {}));\n/**\n * The diagnostic's severity.\n */\nexport var DiagnosticSeverity;\n(function (DiagnosticSeverity) {\n    /**\n     * Reports an error.\n     */\n    DiagnosticSeverity.Error = 1;\n    /**\n     * Reports a warning.\n     */\n    DiagnosticSeverity.Warning = 2;\n    /**\n     * Reports an information.\n     */\n    DiagnosticSeverity.Information = 3;\n    /**\n     * Reports a hint.\n     */\n    DiagnosticSeverity.Hint = 4;\n})(DiagnosticSeverity || (DiagnosticSeverity = {}));\n/**\n * The diagnostic tags.\n *\n * @since 3.15.0\n */\nexport var DiagnosticTag;\n(function (DiagnosticTag) {\n    /**\n     * Unused or unnecessary code.\n     *\n     * Clients are allowed to render diagnostics with this tag faded out instead of having\n     * an error squiggle.\n     */\n    DiagnosticTag.Unnecessary = 1;\n    /**\n     * Deprecated or obsolete code.\n     *\n     * Clients are allowed to rendered diagnostics with this tag strike through.\n     */\n    DiagnosticTag.Deprecated = 2;\n})(DiagnosticTag || (DiagnosticTag = {}));\n/**\n * The CodeDescription namespace provides functions to deal with descriptions for diagnostic codes.\n *\n * @since 3.16.0\n */\nexport var CodeDescription;\n(function (CodeDescription) {\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Is.string(candidate.href);\n    }\n    CodeDescription.is = is;\n})(CodeDescription || (CodeDescription = {}));\n/**\n * The Diagnostic namespace provides helper functions to work with\n * {@link Diagnostic} literals.\n */\nexport var Diagnostic;\n(function (Diagnostic) {\n    /**\n     * Creates a new Diagnostic literal.\n     */\n    function create(range, message, severity, code, source, relatedInformation) {\n        let result = { range, message };\n        if (Is.defined(severity)) {\n            result.severity = severity;\n        }\n        if (Is.defined(code)) {\n            result.code = code;\n        }\n        if (Is.defined(source)) {\n            result.source = source;\n        }\n        if (Is.defined(relatedInformation)) {\n            result.relatedInformation = relatedInformation;\n        }\n        return result;\n    }\n    Diagnostic.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Diagnostic} interface.\n     */\n    function is(value) {\n        var _a;\n        let candidate = value;\n        return Is.defined(candidate)\n            && Range.is(candidate.range)\n            && Is.string(candidate.message)\n            && (Is.number(candidate.severity) || Is.undefined(candidate.severity))\n            && (Is.integer(candidate.code) || Is.string(candidate.code) || Is.undefined(candidate.code))\n            && (Is.undefined(candidate.codeDescription) || (Is.string((_a = candidate.codeDescription) === null || _a === void 0 ? void 0 : _a.href)))\n            && (Is.string(candidate.source) || Is.undefined(candidate.source))\n            && (Is.undefined(candidate.relatedInformation) || Is.typedArray(candidate.relatedInformation, DiagnosticRelatedInformation.is));\n    }\n    Diagnostic.is = is;\n})(Diagnostic || (Diagnostic = {}));\n/**\n * The Command namespace provides helper functions to work with\n * {@link Command} literals.\n */\nexport var Command;\n(function (Command) {\n    /**\n     * Creates a new Command literal.\n     */\n    function create(title, command, ...args) {\n        let result = { title, command };\n        if (Is.defined(args) && args.length > 0) {\n            result.arguments = args;\n        }\n        return result;\n    }\n    Command.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Command} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.title) && Is.string(candidate.command);\n    }\n    Command.is = is;\n})(Command || (Command = {}));\n/**\n * The TextEdit namespace provides helper function to create replace,\n * insert and delete edits more easily.\n */\nexport var TextEdit;\n(function (TextEdit) {\n    /**\n     * Creates a replace text edit.\n     * @param range The range of text to be replaced.\n     * @param newText The new text.\n     */\n    function replace(range, newText) {\n        return { range, newText };\n    }\n    TextEdit.replace = replace;\n    /**\n     * Creates an insert text edit.\n     * @param position The position to insert the text at.\n     * @param newText The text to be inserted.\n     */\n    function insert(position, newText) {\n        return { range: { start: position, end: position }, newText };\n    }\n    TextEdit.insert = insert;\n    /**\n     * Creates a delete text edit.\n     * @param range The range of text to be deleted.\n     */\n    function del(range) {\n        return { range, newText: '' };\n    }\n    TextEdit.del = del;\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate)\n            && Is.string(candidate.newText)\n            && Range.is(candidate.range);\n    }\n    TextEdit.is = is;\n})(TextEdit || (TextEdit = {}));\nexport var ChangeAnnotation;\n(function (ChangeAnnotation) {\n    function create(label, needsConfirmation, description) {\n        const result = { label };\n        if (needsConfirmation !== undefined) {\n            result.needsConfirmation = needsConfirmation;\n        }\n        if (description !== undefined) {\n            result.description = description;\n        }\n        return result;\n    }\n    ChangeAnnotation.create = create;\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Is.string(candidate.label) &&\n            (Is.boolean(candidate.needsConfirmation) || candidate.needsConfirmation === undefined) &&\n            (Is.string(candidate.description) || candidate.description === undefined);\n    }\n    ChangeAnnotation.is = is;\n})(ChangeAnnotation || (ChangeAnnotation = {}));\nexport var ChangeAnnotationIdentifier;\n(function (ChangeAnnotationIdentifier) {\n    function is(value) {\n        const candidate = value;\n        return Is.string(candidate);\n    }\n    ChangeAnnotationIdentifier.is = is;\n})(ChangeAnnotationIdentifier || (ChangeAnnotationIdentifier = {}));\nexport var AnnotatedTextEdit;\n(function (AnnotatedTextEdit) {\n    /**\n     * Creates an annotated replace text edit.\n     *\n     * @param range The range of text to be replaced.\n     * @param newText The new text.\n     * @param annotation The annotation.\n     */\n    function replace(range, newText, annotation) {\n        return { range, newText, annotationId: annotation };\n    }\n    AnnotatedTextEdit.replace = replace;\n    /**\n     * Creates an annotated insert text edit.\n     *\n     * @param position The position to insert the text at.\n     * @param newText The text to be inserted.\n     * @param annotation The annotation.\n     */\n    function insert(position, newText, annotation) {\n        return { range: { start: position, end: position }, newText, annotationId: annotation };\n    }\n    AnnotatedTextEdit.insert = insert;\n    /**\n     * Creates an annotated delete text edit.\n     *\n     * @param range The range of text to be deleted.\n     * @param annotation The annotation.\n     */\n    function del(range, annotation) {\n        return { range, newText: '', annotationId: annotation };\n    }\n    AnnotatedTextEdit.del = del;\n    function is(value) {\n        const candidate = value;\n        return TextEdit.is(candidate) && (ChangeAnnotation.is(candidate.annotationId) || ChangeAnnotationIdentifier.is(candidate.annotationId));\n    }\n    AnnotatedTextEdit.is = is;\n})(AnnotatedTextEdit || (AnnotatedTextEdit = {}));\n/**\n * The TextDocumentEdit namespace provides helper function to create\n * an edit that manipulates a text document.\n */\nexport var TextDocumentEdit;\n(function (TextDocumentEdit) {\n    /**\n     * Creates a new `TextDocumentEdit`\n     */\n    function create(textDocument, edits) {\n        return { textDocument, edits };\n    }\n    TextDocumentEdit.create = create;\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate)\n            && OptionalVersionedTextDocumentIdentifier.is(candidate.textDocument)\n            && Array.isArray(candidate.edits);\n    }\n    TextDocumentEdit.is = is;\n})(TextDocumentEdit || (TextDocumentEdit = {}));\nexport var CreateFile;\n(function (CreateFile) {\n    function create(uri, options, annotation) {\n        let result = {\n            kind: 'create',\n            uri\n        };\n        if (options !== undefined && (options.overwrite !== undefined || options.ignoreIfExists !== undefined)) {\n            result.options = options;\n        }\n        if (annotation !== undefined) {\n            result.annotationId = annotation;\n        }\n        return result;\n    }\n    CreateFile.create = create;\n    function is(value) {\n        let candidate = value;\n        return candidate && candidate.kind === 'create' && Is.string(candidate.uri) && (candidate.options === undefined ||\n            ((candidate.options.overwrite === undefined || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === undefined || Is.boolean(candidate.options.ignoreIfExists)))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));\n    }\n    CreateFile.is = is;\n})(CreateFile || (CreateFile = {}));\nexport var RenameFile;\n(function (RenameFile) {\n    function create(oldUri, newUri, options, annotation) {\n        let result = {\n            kind: 'rename',\n            oldUri,\n            newUri\n        };\n        if (options !== undefined && (options.overwrite !== undefined || options.ignoreIfExists !== undefined)) {\n            result.options = options;\n        }\n        if (annotation !== undefined) {\n            result.annotationId = annotation;\n        }\n        return result;\n    }\n    RenameFile.create = create;\n    function is(value) {\n        let candidate = value;\n        return candidate && candidate.kind === 'rename' && Is.string(candidate.oldUri) && Is.string(candidate.newUri) && (candidate.options === undefined ||\n            ((candidate.options.overwrite === undefined || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === undefined || Is.boolean(candidate.options.ignoreIfExists)))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));\n    }\n    RenameFile.is = is;\n})(RenameFile || (RenameFile = {}));\nexport var DeleteFile;\n(function (DeleteFile) {\n    function create(uri, options, annotation) {\n        let result = {\n            kind: 'delete',\n            uri\n        };\n        if (options !== undefined && (options.recursive !== undefined || options.ignoreIfNotExists !== undefined)) {\n            result.options = options;\n        }\n        if (annotation !== undefined) {\n            result.annotationId = annotation;\n        }\n        return result;\n    }\n    DeleteFile.create = create;\n    function is(value) {\n        let candidate = value;\n        return candidate && candidate.kind === 'delete' && Is.string(candidate.uri) && (candidate.options === undefined ||\n            ((candidate.options.recursive === undefined || Is.boolean(candidate.options.recursive)) && (candidate.options.ignoreIfNotExists === undefined || Is.boolean(candidate.options.ignoreIfNotExists)))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));\n    }\n    DeleteFile.is = is;\n})(DeleteFile || (DeleteFile = {}));\nexport var WorkspaceEdit;\n(function (WorkspaceEdit) {\n    function is(value) {\n        let candidate = value;\n        return candidate &&\n            (candidate.changes !== undefined || candidate.documentChanges !== undefined) &&\n            (candidate.documentChanges === undefined || candidate.documentChanges.every((change) => {\n                if (Is.string(change.kind)) {\n                    return CreateFile.is(change) || RenameFile.is(change) || DeleteFile.is(change);\n                }\n                else {\n                    return TextDocumentEdit.is(change);\n                }\n            }));\n    }\n    WorkspaceEdit.is = is;\n})(WorkspaceEdit || (WorkspaceEdit = {}));\nclass TextEditChangeImpl {\n    constructor(edits, changeAnnotations) {\n        this.edits = edits;\n        this.changeAnnotations = changeAnnotations;\n    }\n    insert(position, newText, annotation) {\n        let edit;\n        let id;\n        if (annotation === undefined) {\n            edit = TextEdit.insert(position, newText);\n        }\n        else if (ChangeAnnotationIdentifier.is(annotation)) {\n            id = annotation;\n            edit = AnnotatedTextEdit.insert(position, newText, annotation);\n        }\n        else {\n            this.assertChangeAnnotations(this.changeAnnotations);\n            id = this.changeAnnotations.manage(annotation);\n            edit = AnnotatedTextEdit.insert(position, newText, id);\n        }\n        this.edits.push(edit);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n    replace(range, newText, annotation) {\n        let edit;\n        let id;\n        if (annotation === undefined) {\n            edit = TextEdit.replace(range, newText);\n        }\n        else if (ChangeAnnotationIdentifier.is(annotation)) {\n            id = annotation;\n            edit = AnnotatedTextEdit.replace(range, newText, annotation);\n        }\n        else {\n            this.assertChangeAnnotations(this.changeAnnotations);\n            id = this.changeAnnotations.manage(annotation);\n            edit = AnnotatedTextEdit.replace(range, newText, id);\n        }\n        this.edits.push(edit);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n    delete(range, annotation) {\n        let edit;\n        let id;\n        if (annotation === undefined) {\n            edit = TextEdit.del(range);\n        }\n        else if (ChangeAnnotationIdentifier.is(annotation)) {\n            id = annotation;\n            edit = AnnotatedTextEdit.del(range, annotation);\n        }\n        else {\n            this.assertChangeAnnotations(this.changeAnnotations);\n            id = this.changeAnnotations.manage(annotation);\n            edit = AnnotatedTextEdit.del(range, id);\n        }\n        this.edits.push(edit);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n    add(edit) {\n        this.edits.push(edit);\n    }\n    all() {\n        return this.edits;\n    }\n    clear() {\n        this.edits.splice(0, this.edits.length);\n    }\n    assertChangeAnnotations(value) {\n        if (value === undefined) {\n            throw new Error(`Text edit change is not configured to manage change annotations.`);\n        }\n    }\n}\n/**\n * A helper class\n */\nclass ChangeAnnotations {\n    constructor(annotations) {\n        this._annotations = annotations === undefined ? Object.create(null) : annotations;\n        this._counter = 0;\n        this._size = 0;\n    }\n    all() {\n        return this._annotations;\n    }\n    get size() {\n        return this._size;\n    }\n    manage(idOrAnnotation, annotation) {\n        let id;\n        if (ChangeAnnotationIdentifier.is(idOrAnnotation)) {\n            id = idOrAnnotation;\n        }\n        else {\n            id = this.nextId();\n            annotation = idOrAnnotation;\n        }\n        if (this._annotations[id] !== undefined) {\n            throw new Error(`Id ${id} is already in use.`);\n        }\n        if (annotation === undefined) {\n            throw new Error(`No annotation provided for id ${id}`);\n        }\n        this._annotations[id] = annotation;\n        this._size++;\n        return id;\n    }\n    nextId() {\n        this._counter++;\n        return this._counter.toString();\n    }\n}\n/**\n * A workspace change helps constructing changes to a workspace.\n */\nexport class WorkspaceChange {\n    constructor(workspaceEdit) {\n        this._textEditChanges = Object.create(null);\n        if (workspaceEdit !== undefined) {\n            this._workspaceEdit = workspaceEdit;\n            if (workspaceEdit.documentChanges) {\n                this._changeAnnotations = new ChangeAnnotations(workspaceEdit.changeAnnotations);\n                workspaceEdit.changeAnnotations = this._changeAnnotations.all();\n                workspaceEdit.documentChanges.forEach((change) => {\n                    if (TextDocumentEdit.is(change)) {\n                        const textEditChange = new TextEditChangeImpl(change.edits, this._changeAnnotations);\n                        this._textEditChanges[change.textDocument.uri] = textEditChange;\n                    }\n                });\n            }\n            else if (workspaceEdit.changes) {\n                Object.keys(workspaceEdit.changes).forEach((key) => {\n                    const textEditChange = new TextEditChangeImpl(workspaceEdit.changes[key]);\n                    this._textEditChanges[key] = textEditChange;\n                });\n            }\n        }\n        else {\n            this._workspaceEdit = {};\n        }\n    }\n    /**\n     * Returns the underlying {@link WorkspaceEdit} literal\n     * use to be returned from a workspace edit operation like rename.\n     */\n    get edit() {\n        this.initDocumentChanges();\n        if (this._changeAnnotations !== undefined) {\n            if (this._changeAnnotations.size === 0) {\n                this._workspaceEdit.changeAnnotations = undefined;\n            }\n            else {\n                this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();\n            }\n        }\n        return this._workspaceEdit;\n    }\n    getTextEditChange(key) {\n        if (OptionalVersionedTextDocumentIdentifier.is(key)) {\n            this.initDocumentChanges();\n            if (this._workspaceEdit.documentChanges === undefined) {\n                throw new Error('Workspace edit is not configured for document changes.');\n            }\n            const textDocument = { uri: key.uri, version: key.version };\n            let result = this._textEditChanges[textDocument.uri];\n            if (!result) {\n                const edits = [];\n                const textDocumentEdit = {\n                    textDocument,\n                    edits\n                };\n                this._workspaceEdit.documentChanges.push(textDocumentEdit);\n                result = new TextEditChangeImpl(edits, this._changeAnnotations);\n                this._textEditChanges[textDocument.uri] = result;\n            }\n            return result;\n        }\n        else {\n            this.initChanges();\n            if (this._workspaceEdit.changes === undefined) {\n                throw new Error('Workspace edit is not configured for normal text edit changes.');\n            }\n            let result = this._textEditChanges[key];\n            if (!result) {\n                let edits = [];\n                this._workspaceEdit.changes[key] = edits;\n                result = new TextEditChangeImpl(edits);\n                this._textEditChanges[key] = result;\n            }\n            return result;\n        }\n    }\n    initDocumentChanges() {\n        if (this._workspaceEdit.documentChanges === undefined && this._workspaceEdit.changes === undefined) {\n            this._changeAnnotations = new ChangeAnnotations();\n            this._workspaceEdit.documentChanges = [];\n            this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();\n        }\n    }\n    initChanges() {\n        if (this._workspaceEdit.documentChanges === undefined && this._workspaceEdit.changes === undefined) {\n            this._workspaceEdit.changes = Object.create(null);\n        }\n    }\n    createFile(uri, optionsOrAnnotation, options) {\n        this.initDocumentChanges();\n        if (this._workspaceEdit.documentChanges === undefined) {\n            throw new Error('Workspace edit is not configured for document changes.');\n        }\n        let annotation;\n        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {\n            annotation = optionsOrAnnotation;\n        }\n        else {\n            options = optionsOrAnnotation;\n        }\n        let operation;\n        let id;\n        if (annotation === undefined) {\n            operation = CreateFile.create(uri, options);\n        }\n        else {\n            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);\n            operation = CreateFile.create(uri, options, id);\n        }\n        this._workspaceEdit.documentChanges.push(operation);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n    renameFile(oldUri, newUri, optionsOrAnnotation, options) {\n        this.initDocumentChanges();\n        if (this._workspaceEdit.documentChanges === undefined) {\n            throw new Error('Workspace edit is not configured for document changes.');\n        }\n        let annotation;\n        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {\n            annotation = optionsOrAnnotation;\n        }\n        else {\n            options = optionsOrAnnotation;\n        }\n        let operation;\n        let id;\n        if (annotation === undefined) {\n            operation = RenameFile.create(oldUri, newUri, options);\n        }\n        else {\n            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);\n            operation = RenameFile.create(oldUri, newUri, options, id);\n        }\n        this._workspaceEdit.documentChanges.push(operation);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n    deleteFile(uri, optionsOrAnnotation, options) {\n        this.initDocumentChanges();\n        if (this._workspaceEdit.documentChanges === undefined) {\n            throw new Error('Workspace edit is not configured for document changes.');\n        }\n        let annotation;\n        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {\n            annotation = optionsOrAnnotation;\n        }\n        else {\n            options = optionsOrAnnotation;\n        }\n        let operation;\n        let id;\n        if (annotation === undefined) {\n            operation = DeleteFile.create(uri, options);\n        }\n        else {\n            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);\n            operation = DeleteFile.create(uri, options, id);\n        }\n        this._workspaceEdit.documentChanges.push(operation);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n}\n/**\n * The TextDocumentIdentifier namespace provides helper functions to work with\n * {@link TextDocumentIdentifier} literals.\n */\nexport var TextDocumentIdentifier;\n(function (TextDocumentIdentifier) {\n    /**\n     * Creates a new TextDocumentIdentifier literal.\n     * @param uri The document's uri.\n     */\n    function create(uri) {\n        return { uri };\n    }\n    TextDocumentIdentifier.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link TextDocumentIdentifier} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri);\n    }\n    TextDocumentIdentifier.is = is;\n})(TextDocumentIdentifier || (TextDocumentIdentifier = {}));\n/**\n * The VersionedTextDocumentIdentifier namespace provides helper functions to work with\n * {@link VersionedTextDocumentIdentifier} literals.\n */\nexport var VersionedTextDocumentIdentifier;\n(function (VersionedTextDocumentIdentifier) {\n    /**\n     * Creates a new VersionedTextDocumentIdentifier literal.\n     * @param uri The document's uri.\n     * @param version The document's version.\n     */\n    function create(uri, version) {\n        return { uri, version };\n    }\n    VersionedTextDocumentIdentifier.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link VersionedTextDocumentIdentifier} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && Is.integer(candidate.version);\n    }\n    VersionedTextDocumentIdentifier.is = is;\n})(VersionedTextDocumentIdentifier || (VersionedTextDocumentIdentifier = {}));\n/**\n * The OptionalVersionedTextDocumentIdentifier namespace provides helper functions to work with\n * {@link OptionalVersionedTextDocumentIdentifier} literals.\n */\nexport var OptionalVersionedTextDocumentIdentifier;\n(function (OptionalVersionedTextDocumentIdentifier) {\n    /**\n     * Creates a new OptionalVersionedTextDocumentIdentifier literal.\n     * @param uri The document's uri.\n     * @param version The document's version.\n     */\n    function create(uri, version) {\n        return { uri, version };\n    }\n    OptionalVersionedTextDocumentIdentifier.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link OptionalVersionedTextDocumentIdentifier} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && (candidate.version === null || Is.integer(candidate.version));\n    }\n    OptionalVersionedTextDocumentIdentifier.is = is;\n})(OptionalVersionedTextDocumentIdentifier || (OptionalVersionedTextDocumentIdentifier = {}));\n/**\n * The TextDocumentItem namespace provides helper functions to work with\n * {@link TextDocumentItem} literals.\n */\nexport var TextDocumentItem;\n(function (TextDocumentItem) {\n    /**\n     * Creates a new TextDocumentItem literal.\n     * @param uri The document's uri.\n     * @param languageId The document's language identifier.\n     * @param version The document's version number.\n     * @param text The document's text.\n     */\n    function create(uri, languageId, version, text) {\n        return { uri, languageId, version, text };\n    }\n    TextDocumentItem.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link TextDocumentItem} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && Is.string(candidate.languageId) && Is.integer(candidate.version) && Is.string(candidate.text);\n    }\n    TextDocumentItem.is = is;\n})(TextDocumentItem || (TextDocumentItem = {}));\n/**\n * Describes the content type that a client supports in various\n * result literals like `Hover`, `ParameterInfo` or `CompletionItem`.\n *\n * Please note that `MarkupKinds` must not start with a `$`. This kinds\n * are reserved for internal usage.\n */\nexport var MarkupKind;\n(function (MarkupKind) {\n    /**\n     * Plain text is supported as a content format\n     */\n    MarkupKind.PlainText = 'plaintext';\n    /**\n     * Markdown is supported as a content format\n     */\n    MarkupKind.Markdown = 'markdown';\n    /**\n     * Checks whether the given value is a value of the {@link MarkupKind} type.\n     */\n    function is(value) {\n        const candidate = value;\n        return candidate === MarkupKind.PlainText || candidate === MarkupKind.Markdown;\n    }\n    MarkupKind.is = is;\n})(MarkupKind || (MarkupKind = {}));\nexport var MarkupContent;\n(function (MarkupContent) {\n    /**\n     * Checks whether the given value conforms to the {@link MarkupContent} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(value) && MarkupKind.is(candidate.kind) && Is.string(candidate.value);\n    }\n    MarkupContent.is = is;\n})(MarkupContent || (MarkupContent = {}));\n/**\n * The kind of a completion entry.\n */\nexport var CompletionItemKind;\n(function (CompletionItemKind) {\n    CompletionItemKind.Text = 1;\n    CompletionItemKind.Method = 2;\n    CompletionItemKind.Function = 3;\n    CompletionItemKind.Constructor = 4;\n    CompletionItemKind.Field = 5;\n    CompletionItemKind.Variable = 6;\n    CompletionItemKind.Class = 7;\n    CompletionItemKind.Interface = 8;\n    CompletionItemKind.Module = 9;\n    CompletionItemKind.Property = 10;\n    CompletionItemKind.Unit = 11;\n    CompletionItemKind.Value = 12;\n    CompletionItemKind.Enum = 13;\n    CompletionItemKind.Keyword = 14;\n    CompletionItemKind.Snippet = 15;\n    CompletionItemKind.Color = 16;\n    CompletionItemKind.File = 17;\n    CompletionItemKind.Reference = 18;\n    CompletionItemKind.Folder = 19;\n    CompletionItemKind.EnumMember = 20;\n    CompletionItemKind.Constant = 21;\n    CompletionItemKind.Struct = 22;\n    CompletionItemKind.Event = 23;\n    CompletionItemKind.Operator = 24;\n    CompletionItemKind.TypeParameter = 25;\n})(CompletionItemKind || (CompletionItemKind = {}));\n/**\n * Defines whether the insert text in a completion item should be interpreted as\n * plain text or a snippet.\n */\nexport var InsertTextFormat;\n(function (InsertTextFormat) {\n    /**\n     * The primary text to be inserted is treated as a plain string.\n     */\n    InsertTextFormat.PlainText = 1;\n    /**\n     * The primary text to be inserted is treated as a snippet.\n     *\n     * A snippet can define tab stops and placeholders with `$1`, `$2`\n     * and `${3:foo}`. `$0` defines the final tab stop, it defaults to\n     * the end of the snippet. Placeholders with equal identifiers are linked,\n     * that is typing in one will update others too.\n     *\n     * See also: https://microsoft.github.io/language-server-protocol/specifications/specification-current/#snippet_syntax\n     */\n    InsertTextFormat.Snippet = 2;\n})(InsertTextFormat || (InsertTextFormat = {}));\n/**\n * Completion item tags are extra annotations that tweak the rendering of a completion\n * item.\n *\n * @since 3.15.0\n */\nexport var CompletionItemTag;\n(function (CompletionItemTag) {\n    /**\n     * Render a completion as obsolete, usually using a strike-out.\n     */\n    CompletionItemTag.Deprecated = 1;\n})(CompletionItemTag || (CompletionItemTag = {}));\n/**\n * The InsertReplaceEdit namespace provides functions to deal with insert / replace edits.\n *\n * @since 3.16.0\n */\nexport var InsertReplaceEdit;\n(function (InsertReplaceEdit) {\n    /**\n     * Creates a new insert / replace edit\n     */\n    function create(newText, insert, replace) {\n        return { newText, insert, replace };\n    }\n    InsertReplaceEdit.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link InsertReplaceEdit} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return candidate && Is.string(candidate.newText) && Range.is(candidate.insert) && Range.is(candidate.replace);\n    }\n    InsertReplaceEdit.is = is;\n})(InsertReplaceEdit || (InsertReplaceEdit = {}));\n/**\n * How whitespace and indentation is handled during completion\n * item insertion.\n *\n * @since 3.16.0\n */\nexport var InsertTextMode;\n(function (InsertTextMode) {\n    /**\n     * The insertion or replace strings is taken as it is. If the\n     * value is multi line the lines below the cursor will be\n     * inserted using the indentation defined in the string value.\n     * The client will not apply any kind of adjustments to the\n     * string.\n     */\n    InsertTextMode.asIs = 1;\n    /**\n     * The editor adjusts leading whitespace of new lines so that\n     * they match the indentation up to the cursor of the line for\n     * which the item is accepted.\n     *\n     * Consider a line like this: <2tabs><cursor><3tabs>foo. Accepting a\n     * multi line completion item is indented using 2 tabs and all\n     * following lines inserted will be indented using 2 tabs as well.\n     */\n    InsertTextMode.adjustIndentation = 2;\n})(InsertTextMode || (InsertTextMode = {}));\nexport var CompletionItemLabelDetails;\n(function (CompletionItemLabelDetails) {\n    function is(value) {\n        const candidate = value;\n        return candidate && (Is.string(candidate.detail) || candidate.detail === undefined) &&\n            (Is.string(candidate.description) || candidate.description === undefined);\n    }\n    CompletionItemLabelDetails.is = is;\n})(CompletionItemLabelDetails || (CompletionItemLabelDetails = {}));\n/**\n * The CompletionItem namespace provides functions to deal with\n * completion items.\n */\nexport var CompletionItem;\n(function (CompletionItem) {\n    /**\n     * Create a completion item and seed it with a label.\n     * @param label The completion item's label\n     */\n    function create(label) {\n        return { label };\n    }\n    CompletionItem.create = create;\n})(CompletionItem || (CompletionItem = {}));\n/**\n * The CompletionList namespace provides functions to deal with\n * completion lists.\n */\nexport var CompletionList;\n(function (CompletionList) {\n    /**\n     * Creates a new completion list.\n     *\n     * @param items The completion items.\n     * @param isIncomplete The list is not complete.\n     */\n    function create(items, isIncomplete) {\n        return { items: items ? items : [], isIncomplete: !!isIncomplete };\n    }\n    CompletionList.create = create;\n})(CompletionList || (CompletionList = {}));\nexport var MarkedString;\n(function (MarkedString) {\n    /**\n     * Creates a marked string from plain text.\n     *\n     * @param plainText The plain text.\n     */\n    function fromPlainText(plainText) {\n        return plainText.replace(/[\\\\`*_{}[\\]()#+\\-.!]/g, '\\\\$&'); // escape markdown syntax tokens: http://daringfireball.net/projects/markdown/syntax#backslash\n    }\n    MarkedString.fromPlainText = fromPlainText;\n    /**\n     * Checks whether the given value conforms to the {@link MarkedString} type.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.string(candidate) || (Is.objectLiteral(candidate) && Is.string(candidate.language) && Is.string(candidate.value));\n    }\n    MarkedString.is = is;\n})(MarkedString || (MarkedString = {}));\nexport var Hover;\n(function (Hover) {\n    /**\n     * Checks whether the given value conforms to the {@link Hover} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return !!candidate && Is.objectLiteral(candidate) && (MarkupContent.is(candidate.contents) ||\n            MarkedString.is(candidate.contents) ||\n            Is.typedArray(candidate.contents, MarkedString.is)) && (value.range === undefined || Range.is(value.range));\n    }\n    Hover.is = is;\n})(Hover || (Hover = {}));\n/**\n * The ParameterInformation namespace provides helper functions to work with\n * {@link ParameterInformation} literals.\n */\nexport var ParameterInformation;\n(function (ParameterInformation) {\n    /**\n     * Creates a new parameter information literal.\n     *\n     * @param label A label string.\n     * @param documentation A doc string.\n     */\n    function create(label, documentation) {\n        return documentation ? { label, documentation } : { label };\n    }\n    ParameterInformation.create = create;\n})(ParameterInformation || (ParameterInformation = {}));\n/**\n * The SignatureInformation namespace provides helper functions to work with\n * {@link SignatureInformation} literals.\n */\nexport var SignatureInformation;\n(function (SignatureInformation) {\n    function create(label, documentation, ...parameters) {\n        let result = { label };\n        if (Is.defined(documentation)) {\n            result.documentation = documentation;\n        }\n        if (Is.defined(parameters)) {\n            result.parameters = parameters;\n        }\n        else {\n            result.parameters = [];\n        }\n        return result;\n    }\n    SignatureInformation.create = create;\n})(SignatureInformation || (SignatureInformation = {}));\n/**\n * A document highlight kind.\n */\nexport var DocumentHighlightKind;\n(function (DocumentHighlightKind) {\n    /**\n     * A textual occurrence.\n     */\n    DocumentHighlightKind.Text = 1;\n    /**\n     * Read-access of a symbol, like reading a variable.\n     */\n    DocumentHighlightKind.Read = 2;\n    /**\n     * Write-access of a symbol, like writing to a variable.\n     */\n    DocumentHighlightKind.Write = 3;\n})(DocumentHighlightKind || (DocumentHighlightKind = {}));\n/**\n * DocumentHighlight namespace to provide helper functions to work with\n * {@link DocumentHighlight} literals.\n */\nexport var DocumentHighlight;\n(function (DocumentHighlight) {\n    /**\n     * Create a DocumentHighlight object.\n     * @param range The range the highlight applies to.\n     * @param kind The highlight kind\n     */\n    function create(range, kind) {\n        let result = { range };\n        if (Is.number(kind)) {\n            result.kind = kind;\n        }\n        return result;\n    }\n    DocumentHighlight.create = create;\n})(DocumentHighlight || (DocumentHighlight = {}));\n/**\n * A symbol kind.\n */\nexport var SymbolKind;\n(function (SymbolKind) {\n    SymbolKind.File = 1;\n    SymbolKind.Module = 2;\n    SymbolKind.Namespace = 3;\n    SymbolKind.Package = 4;\n    SymbolKind.Class = 5;\n    SymbolKind.Method = 6;\n    SymbolKind.Property = 7;\n    SymbolKind.Field = 8;\n    SymbolKind.Constructor = 9;\n    SymbolKind.Enum = 10;\n    SymbolKind.Interface = 11;\n    SymbolKind.Function = 12;\n    SymbolKind.Variable = 13;\n    SymbolKind.Constant = 14;\n    SymbolKind.String = 15;\n    SymbolKind.Number = 16;\n    SymbolKind.Boolean = 17;\n    SymbolKind.Array = 18;\n    SymbolKind.Object = 19;\n    SymbolKind.Key = 20;\n    SymbolKind.Null = 21;\n    SymbolKind.EnumMember = 22;\n    SymbolKind.Struct = 23;\n    SymbolKind.Event = 24;\n    SymbolKind.Operator = 25;\n    SymbolKind.TypeParameter = 26;\n})(SymbolKind || (SymbolKind = {}));\n/**\n * Symbol tags are extra annotations that tweak the rendering of a symbol.\n *\n * @since 3.16\n */\nexport var SymbolTag;\n(function (SymbolTag) {\n    /**\n     * Render a symbol as obsolete, usually using a strike-out.\n     */\n    SymbolTag.Deprecated = 1;\n})(SymbolTag || (SymbolTag = {}));\nexport var SymbolInformation;\n(function (SymbolInformation) {\n    /**\n     * Creates a new symbol information literal.\n     *\n     * @param name The name of the symbol.\n     * @param kind The kind of the symbol.\n     * @param range The range of the location of the symbol.\n     * @param uri The resource of the location of symbol.\n     * @param containerName The name of the symbol containing the symbol.\n     */\n    function create(name, kind, range, uri, containerName) {\n        let result = {\n            name,\n            kind,\n            location: { uri, range }\n        };\n        if (containerName) {\n            result.containerName = containerName;\n        }\n        return result;\n    }\n    SymbolInformation.create = create;\n})(SymbolInformation || (SymbolInformation = {}));\nexport var WorkspaceSymbol;\n(function (WorkspaceSymbol) {\n    /**\n     * Create a new workspace symbol.\n     *\n     * @param name The name of the symbol.\n     * @param kind The kind of the symbol.\n     * @param uri The resource of the location of the symbol.\n     * @param range An options range of the location.\n     * @returns A WorkspaceSymbol.\n     */\n    function create(name, kind, uri, range) {\n        return range !== undefined\n            ? { name, kind, location: { uri, range } }\n            : { name, kind, location: { uri } };\n    }\n    WorkspaceSymbol.create = create;\n})(WorkspaceSymbol || (WorkspaceSymbol = {}));\nexport var DocumentSymbol;\n(function (DocumentSymbol) {\n    /**\n     * Creates a new symbol information literal.\n     *\n     * @param name The name of the symbol.\n     * @param detail The detail of the symbol.\n     * @param kind The kind of the symbol.\n     * @param range The range of the symbol.\n     * @param selectionRange The selectionRange of the symbol.\n     * @param children Children of the symbol.\n     */\n    function create(name, detail, kind, range, selectionRange, children) {\n        let result = {\n            name,\n            detail,\n            kind,\n            range,\n            selectionRange\n        };\n        if (children !== undefined) {\n            result.children = children;\n        }\n        return result;\n    }\n    DocumentSymbol.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link DocumentSymbol} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return candidate &&\n            Is.string(candidate.name) && Is.number(candidate.kind) &&\n            Range.is(candidate.range) && Range.is(candidate.selectionRange) &&\n            (candidate.detail === undefined || Is.string(candidate.detail)) &&\n            (candidate.deprecated === undefined || Is.boolean(candidate.deprecated)) &&\n            (candidate.children === undefined || Array.isArray(candidate.children)) &&\n            (candidate.tags === undefined || Array.isArray(candidate.tags));\n    }\n    DocumentSymbol.is = is;\n})(DocumentSymbol || (DocumentSymbol = {}));\n/**\n * A set of predefined code action kinds\n */\nexport var CodeActionKind;\n(function (CodeActionKind) {\n    /**\n     * Empty kind.\n     */\n    CodeActionKind.Empty = '';\n    /**\n     * Base kind for quickfix actions: 'quickfix'\n     */\n    CodeActionKind.QuickFix = 'quickfix';\n    /**\n     * Base kind for refactoring actions: 'refactor'\n     */\n    CodeActionKind.Refactor = 'refactor';\n    /**\n     * Base kind for refactoring extraction actions: 'refactor.extract'\n     *\n     * Example extract actions:\n     *\n     * - Extract method\n     * - Extract function\n     * - Extract variable\n     * - Extract interface from class\n     * - ...\n     */\n    CodeActionKind.RefactorExtract = 'refactor.extract';\n    /**\n     * Base kind for refactoring inline actions: 'refactor.inline'\n     *\n     * Example inline actions:\n     *\n     * - Inline function\n     * - Inline variable\n     * - Inline constant\n     * - ...\n     */\n    CodeActionKind.RefactorInline = 'refactor.inline';\n    /**\n     * Base kind for refactoring rewrite actions: 'refactor.rewrite'\n     *\n     * Example rewrite actions:\n     *\n     * - Convert JavaScript function to class\n     * - Add or remove parameter\n     * - Encapsulate field\n     * - Make method static\n     * - Move method to base class\n     * - ...\n     */\n    CodeActionKind.RefactorRewrite = 'refactor.rewrite';\n    /**\n     * Base kind for source actions: `source`\n     *\n     * Source code actions apply to the entire file.\n     */\n    CodeActionKind.Source = 'source';\n    /**\n     * Base kind for an organize imports source action: `source.organizeImports`\n     */\n    CodeActionKind.SourceOrganizeImports = 'source.organizeImports';\n    /**\n     * Base kind for auto-fix source actions: `source.fixAll`.\n     *\n     * Fix all actions automatically fix errors that have a clear fix that do not require user input.\n     * They should not suppress errors or perform unsafe fixes such as generating new types or classes.\n     *\n     * @since 3.15.0\n     */\n    CodeActionKind.SourceFixAll = 'source.fixAll';\n})(CodeActionKind || (CodeActionKind = {}));\n/**\n * The reason why code actions were requested.\n *\n * @since 3.17.0\n */\nexport var CodeActionTriggerKind;\n(function (CodeActionTriggerKind) {\n    /**\n     * Code actions were explicitly requested by the user or by an extension.\n     */\n    CodeActionTriggerKind.Invoked = 1;\n    /**\n     * Code actions were requested automatically.\n     *\n     * This typically happens when current selection in a file changes, but can\n     * also be triggered when file content changes.\n     */\n    CodeActionTriggerKind.Automatic = 2;\n})(CodeActionTriggerKind || (CodeActionTriggerKind = {}));\n/**\n * The CodeActionContext namespace provides helper functions to work with\n * {@link CodeActionContext} literals.\n */\nexport var CodeActionContext;\n(function (CodeActionContext) {\n    /**\n     * Creates a new CodeActionContext literal.\n     */\n    function create(diagnostics, only, triggerKind) {\n        let result = { diagnostics };\n        if (only !== undefined && only !== null) {\n            result.only = only;\n        }\n        if (triggerKind !== undefined && triggerKind !== null) {\n            result.triggerKind = triggerKind;\n        }\n        return result;\n    }\n    CodeActionContext.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link CodeActionContext} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.typedArray(candidate.diagnostics, Diagnostic.is)\n            && (candidate.only === undefined || Is.typedArray(candidate.only, Is.string))\n            && (candidate.triggerKind === undefined || candidate.triggerKind === CodeActionTriggerKind.Invoked || candidate.triggerKind === CodeActionTriggerKind.Automatic);\n    }\n    CodeActionContext.is = is;\n})(CodeActionContext || (CodeActionContext = {}));\nexport var CodeAction;\n(function (CodeAction) {\n    function create(title, kindOrCommandOrEdit, kind) {\n        let result = { title };\n        let checkKind = true;\n        if (typeof kindOrCommandOrEdit === 'string') {\n            checkKind = false;\n            result.kind = kindOrCommandOrEdit;\n        }\n        else if (Command.is(kindOrCommandOrEdit)) {\n            result.command = kindOrCommandOrEdit;\n        }\n        else {\n            result.edit = kindOrCommandOrEdit;\n        }\n        if (checkKind && kind !== undefined) {\n            result.kind = kind;\n        }\n        return result;\n    }\n    CodeAction.create = create;\n    function is(value) {\n        let candidate = value;\n        return candidate && Is.string(candidate.title) &&\n            (candidate.diagnostics === undefined || Is.typedArray(candidate.diagnostics, Diagnostic.is)) &&\n            (candidate.kind === undefined || Is.string(candidate.kind)) &&\n            (candidate.edit !== undefined || candidate.command !== undefined) &&\n            (candidate.command === undefined || Command.is(candidate.command)) &&\n            (candidate.isPreferred === undefined || Is.boolean(candidate.isPreferred)) &&\n            (candidate.edit === undefined || WorkspaceEdit.is(candidate.edit));\n    }\n    CodeAction.is = is;\n})(CodeAction || (CodeAction = {}));\n/**\n * The CodeLens namespace provides helper functions to work with\n * {@link CodeLens} literals.\n */\nexport var CodeLens;\n(function (CodeLens) {\n    /**\n     * Creates a new CodeLens literal.\n     */\n    function create(range, data) {\n        let result = { range };\n        if (Is.defined(data)) {\n            result.data = data;\n        }\n        return result;\n    }\n    CodeLens.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link CodeLens} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.command) || Command.is(candidate.command));\n    }\n    CodeLens.is = is;\n})(CodeLens || (CodeLens = {}));\n/**\n * The FormattingOptions namespace provides helper functions to work with\n * {@link FormattingOptions} literals.\n */\nexport var FormattingOptions;\n(function (FormattingOptions) {\n    /**\n     * Creates a new FormattingOptions literal.\n     */\n    function create(tabSize, insertSpaces) {\n        return { tabSize, insertSpaces };\n    }\n    FormattingOptions.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link FormattingOptions} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.uinteger(candidate.tabSize) && Is.boolean(candidate.insertSpaces);\n    }\n    FormattingOptions.is = is;\n})(FormattingOptions || (FormattingOptions = {}));\n/**\n * The DocumentLink namespace provides helper functions to work with\n * {@link DocumentLink} literals.\n */\nexport var DocumentLink;\n(function (DocumentLink) {\n    /**\n     * Creates a new DocumentLink literal.\n     */\n    function create(range, target, data) {\n        return { range, target, data };\n    }\n    DocumentLink.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link DocumentLink} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.target) || Is.string(candidate.target));\n    }\n    DocumentLink.is = is;\n})(DocumentLink || (DocumentLink = {}));\n/**\n * The SelectionRange namespace provides helper function to work with\n * SelectionRange literals.\n */\nexport var SelectionRange;\n(function (SelectionRange) {\n    /**\n     * Creates a new SelectionRange\n     * @param range the range.\n     * @param parent an optional parent.\n     */\n    function create(range, parent) {\n        return { range, parent };\n    }\n    SelectionRange.create = create;\n    function is(value) {\n        let candidate = value;\n        return Is.objectLiteral(candidate) && Range.is(candidate.range) && (candidate.parent === undefined || SelectionRange.is(candidate.parent));\n    }\n    SelectionRange.is = is;\n})(SelectionRange || (SelectionRange = {}));\n/**\n * A set of predefined token types. This set is not fixed\n * an clients can specify additional token types via the\n * corresponding client capabilities.\n *\n * @since 3.16.0\n */\nexport var SemanticTokenTypes;\n(function (SemanticTokenTypes) {\n    SemanticTokenTypes[\"namespace\"] = \"namespace\";\n    /**\n     * Represents a generic type. Acts as a fallback for types which can't be mapped to\n     * a specific type like class or enum.\n     */\n    SemanticTokenTypes[\"type\"] = \"type\";\n    SemanticTokenTypes[\"class\"] = \"class\";\n    SemanticTokenTypes[\"enum\"] = \"enum\";\n    SemanticTokenTypes[\"interface\"] = \"interface\";\n    SemanticTokenTypes[\"struct\"] = \"struct\";\n    SemanticTokenTypes[\"typeParameter\"] = \"typeParameter\";\n    SemanticTokenTypes[\"parameter\"] = \"parameter\";\n    SemanticTokenTypes[\"variable\"] = \"variable\";\n    SemanticTokenTypes[\"property\"] = \"property\";\n    SemanticTokenTypes[\"enumMember\"] = \"enumMember\";\n    SemanticTokenTypes[\"event\"] = \"event\";\n    SemanticTokenTypes[\"function\"] = \"function\";\n    SemanticTokenTypes[\"method\"] = \"method\";\n    SemanticTokenTypes[\"macro\"] = \"macro\";\n    SemanticTokenTypes[\"keyword\"] = \"keyword\";\n    SemanticTokenTypes[\"modifier\"] = \"modifier\";\n    SemanticTokenTypes[\"comment\"] = \"comment\";\n    SemanticTokenTypes[\"string\"] = \"string\";\n    SemanticTokenTypes[\"number\"] = \"number\";\n    SemanticTokenTypes[\"regexp\"] = \"regexp\";\n    SemanticTokenTypes[\"operator\"] = \"operator\";\n    /**\n     * @since 3.17.0\n     */\n    SemanticTokenTypes[\"decorator\"] = \"decorator\";\n})(SemanticTokenTypes || (SemanticTokenTypes = {}));\n/**\n * A set of predefined token modifiers. This set is not fixed\n * an clients can specify additional token types via the\n * corresponding client capabilities.\n *\n * @since 3.16.0\n */\nexport var SemanticTokenModifiers;\n(function (SemanticTokenModifiers) {\n    SemanticTokenModifiers[\"declaration\"] = \"declaration\";\n    SemanticTokenModifiers[\"definition\"] = \"definition\";\n    SemanticTokenModifiers[\"readonly\"] = \"readonly\";\n    SemanticTokenModifiers[\"static\"] = \"static\";\n    SemanticTokenModifiers[\"deprecated\"] = \"deprecated\";\n    SemanticTokenModifiers[\"abstract\"] = \"abstract\";\n    SemanticTokenModifiers[\"async\"] = \"async\";\n    SemanticTokenModifiers[\"modification\"] = \"modification\";\n    SemanticTokenModifiers[\"documentation\"] = \"documentation\";\n    SemanticTokenModifiers[\"defaultLibrary\"] = \"defaultLibrary\";\n})(SemanticTokenModifiers || (SemanticTokenModifiers = {}));\n/**\n * @since 3.16.0\n */\nexport var SemanticTokens;\n(function (SemanticTokens) {\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && (candidate.resultId === undefined || typeof candidate.resultId === 'string') &&\n            Array.isArray(candidate.data) && (candidate.data.length === 0 || typeof candidate.data[0] === 'number');\n    }\n    SemanticTokens.is = is;\n})(SemanticTokens || (SemanticTokens = {}));\n/**\n * The InlineValueText namespace provides functions to deal with InlineValueTexts.\n *\n * @since 3.17.0\n */\nexport var InlineValueText;\n(function (InlineValueText) {\n    /**\n     * Creates a new InlineValueText literal.\n     */\n    function create(range, text) {\n        return { range, text };\n    }\n    InlineValueText.create = create;\n    function is(value) {\n        const candidate = value;\n        return candidate !== undefined && candidate !== null && Range.is(candidate.range) && Is.string(candidate.text);\n    }\n    InlineValueText.is = is;\n})(InlineValueText || (InlineValueText = {}));\n/**\n * The InlineValueVariableLookup namespace provides functions to deal with InlineValueVariableLookups.\n *\n * @since 3.17.0\n */\nexport var InlineValueVariableLookup;\n(function (InlineValueVariableLookup) {\n    /**\n     * Creates a new InlineValueText literal.\n     */\n    function create(range, variableName, caseSensitiveLookup) {\n        return { range, variableName, caseSensitiveLookup };\n    }\n    InlineValueVariableLookup.create = create;\n    function is(value) {\n        const candidate = value;\n        return candidate !== undefined && candidate !== null && Range.is(candidate.range) && Is.boolean(candidate.caseSensitiveLookup)\n            && (Is.string(candidate.variableName) || candidate.variableName === undefined);\n    }\n    InlineValueVariableLookup.is = is;\n})(InlineValueVariableLookup || (InlineValueVariableLookup = {}));\n/**\n * The InlineValueEvaluatableExpression namespace provides functions to deal with InlineValueEvaluatableExpression.\n *\n * @since 3.17.0\n */\nexport var InlineValueEvaluatableExpression;\n(function (InlineValueEvaluatableExpression) {\n    /**\n     * Creates a new InlineValueEvaluatableExpression literal.\n     */\n    function create(range, expression) {\n        return { range, expression };\n    }\n    InlineValueEvaluatableExpression.create = create;\n    function is(value) {\n        const candidate = value;\n        return candidate !== undefined && candidate !== null && Range.is(candidate.range)\n            && (Is.string(candidate.expression) || candidate.expression === undefined);\n    }\n    InlineValueEvaluatableExpression.is = is;\n})(InlineValueEvaluatableExpression || (InlineValueEvaluatableExpression = {}));\n/**\n * The InlineValueContext namespace provides helper functions to work with\n * {@link InlineValueContext} literals.\n *\n * @since 3.17.0\n */\nexport var InlineValueContext;\n(function (InlineValueContext) {\n    /**\n     * Creates a new InlineValueContext literal.\n     */\n    function create(frameId, stoppedLocation) {\n        return { frameId, stoppedLocation };\n    }\n    InlineValueContext.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link InlineValueContext} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.defined(candidate) && Range.is(value.stoppedLocation);\n    }\n    InlineValueContext.is = is;\n})(InlineValueContext || (InlineValueContext = {}));\n/**\n * Inlay hint kinds.\n *\n * @since 3.17.0\n */\nexport var InlayHintKind;\n(function (InlayHintKind) {\n    /**\n     * An inlay hint that for a type annotation.\n     */\n    InlayHintKind.Type = 1;\n    /**\n     * An inlay hint that is for a parameter.\n     */\n    InlayHintKind.Parameter = 2;\n    function is(value) {\n        return value === 1 || value === 2;\n    }\n    InlayHintKind.is = is;\n})(InlayHintKind || (InlayHintKind = {}));\nexport var InlayHintLabelPart;\n(function (InlayHintLabelPart) {\n    function create(value) {\n        return { value };\n    }\n    InlayHintLabelPart.create = create;\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate)\n            && (candidate.tooltip === undefined || Is.string(candidate.tooltip) || MarkupContent.is(candidate.tooltip))\n            && (candidate.location === undefined || Location.is(candidate.location))\n            && (candidate.command === undefined || Command.is(candidate.command));\n    }\n    InlayHintLabelPart.is = is;\n})(InlayHintLabelPart || (InlayHintLabelPart = {}));\nexport var InlayHint;\n(function (InlayHint) {\n    function create(position, label, kind) {\n        const result = { position, label };\n        if (kind !== undefined) {\n            result.kind = kind;\n        }\n        return result;\n    }\n    InlayHint.create = create;\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Position.is(candidate.position)\n            && (Is.string(candidate.label) || Is.typedArray(candidate.label, InlayHintLabelPart.is))\n            && (candidate.kind === undefined || InlayHintKind.is(candidate.kind))\n            && (candidate.textEdits === undefined) || Is.typedArray(candidate.textEdits, TextEdit.is)\n            && (candidate.tooltip === undefined || Is.string(candidate.tooltip) || MarkupContent.is(candidate.tooltip))\n            && (candidate.paddingLeft === undefined || Is.boolean(candidate.paddingLeft))\n            && (candidate.paddingRight === undefined || Is.boolean(candidate.paddingRight));\n    }\n    InlayHint.is = is;\n})(InlayHint || (InlayHint = {}));\nexport var StringValue;\n(function (StringValue) {\n    function createSnippet(value) {\n        return { kind: 'snippet', value };\n    }\n    StringValue.createSnippet = createSnippet;\n})(StringValue || (StringValue = {}));\nexport var InlineCompletionItem;\n(function (InlineCompletionItem) {\n    function create(insertText, filterText, range, command) {\n        return { insertText, filterText, range, command };\n    }\n    InlineCompletionItem.create = create;\n})(InlineCompletionItem || (InlineCompletionItem = {}));\nexport var InlineCompletionList;\n(function (InlineCompletionList) {\n    function create(items) {\n        return { items };\n    }\n    InlineCompletionList.create = create;\n})(InlineCompletionList || (InlineCompletionList = {}));\n/**\n * Describes how an {@link InlineCompletionItemProvider inline completion provider} was triggered.\n *\n * @since 3.18.0\n * @proposed\n */\nexport var InlineCompletionTriggerKind;\n(function (InlineCompletionTriggerKind) {\n    /**\n     * Completion was triggered explicitly by a user gesture.\n     */\n    InlineCompletionTriggerKind.Invoked = 0;\n    /**\n     * Completion was triggered automatically while editing.\n     */\n    InlineCompletionTriggerKind.Automatic = 1;\n})(InlineCompletionTriggerKind || (InlineCompletionTriggerKind = {}));\nexport var SelectedCompletionInfo;\n(function (SelectedCompletionInfo) {\n    function create(range, text) {\n        return { range, text };\n    }\n    SelectedCompletionInfo.create = create;\n})(SelectedCompletionInfo || (SelectedCompletionInfo = {}));\nexport var InlineCompletionContext;\n(function (InlineCompletionContext) {\n    function create(triggerKind, selectedCompletionInfo) {\n        return { triggerKind, selectedCompletionInfo };\n    }\n    InlineCompletionContext.create = create;\n})(InlineCompletionContext || (InlineCompletionContext = {}));\nexport var WorkspaceFolder;\n(function (WorkspaceFolder) {\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && URI.is(candidate.uri) && Is.string(candidate.name);\n    }\n    WorkspaceFolder.is = is;\n})(WorkspaceFolder || (WorkspaceFolder = {}));\nexport const EOL = ['\\n', '\\r\\n', '\\r'];\n/**\n * @deprecated Use the text document from the new vscode-languageserver-textdocument package.\n */\nexport var TextDocument;\n(function (TextDocument) {\n    /**\n     * Creates a new ITextDocument literal from the given uri and content.\n     * @param uri The document's uri.\n     * @param languageId The document's language Id.\n     * @param version The document's version.\n     * @param content The document's content.\n     */\n    function create(uri, languageId, version, content) {\n        return new FullTextDocument(uri, languageId, version, content);\n    }\n    TextDocument.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link ITextDocument} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && (Is.undefined(candidate.languageId) || Is.string(candidate.languageId)) && Is.uinteger(candidate.lineCount)\n            && Is.func(candidate.getText) && Is.func(candidate.positionAt) && Is.func(candidate.offsetAt) ? true : false;\n    }\n    TextDocument.is = is;\n    function applyEdits(document, edits) {\n        let text = document.getText();\n        let sortedEdits = mergeSort(edits, (a, b) => {\n            let diff = a.range.start.line - b.range.start.line;\n            if (diff === 0) {\n                return a.range.start.character - b.range.start.character;\n            }\n            return diff;\n        });\n        let lastModifiedOffset = text.length;\n        for (let i = sortedEdits.length - 1; i >= 0; i--) {\n            let e = sortedEdits[i];\n            let startOffset = document.offsetAt(e.range.start);\n            let endOffset = document.offsetAt(e.range.end);\n            if (endOffset <= lastModifiedOffset) {\n                text = text.substring(0, startOffset) + e.newText + text.substring(endOffset, text.length);\n            }\n            else {\n                throw new Error('Overlapping edit');\n            }\n            lastModifiedOffset = startOffset;\n        }\n        return text;\n    }\n    TextDocument.applyEdits = applyEdits;\n    function mergeSort(data, compare) {\n        if (data.length <= 1) {\n            // sorted\n            return data;\n        }\n        const p = (data.length / 2) | 0;\n        const left = data.slice(0, p);\n        const right = data.slice(p);\n        mergeSort(left, compare);\n        mergeSort(right, compare);\n        let leftIdx = 0;\n        let rightIdx = 0;\n        let i = 0;\n        while (leftIdx < left.length && rightIdx < right.length) {\n            let ret = compare(left[leftIdx], right[rightIdx]);\n            if (ret <= 0) {\n                // smaller_equal -> take left to preserve order\n                data[i++] = left[leftIdx++];\n            }\n            else {\n                // greater -> take right\n                data[i++] = right[rightIdx++];\n            }\n        }\n        while (leftIdx < left.length) {\n            data[i++] = left[leftIdx++];\n        }\n        while (rightIdx < right.length) {\n            data[i++] = right[rightIdx++];\n        }\n        return data;\n    }\n})(TextDocument || (TextDocument = {}));\n/**\n * @deprecated Use the text document from the new vscode-languageserver-textdocument package.\n */\nclass FullTextDocument {\n    constructor(uri, languageId, version, content) {\n        this._uri = uri;\n        this._languageId = languageId;\n        this._version = version;\n        this._content = content;\n        this._lineOffsets = undefined;\n    }\n    get uri() {\n        return this._uri;\n    }\n    get languageId() {\n        return this._languageId;\n    }\n    get version() {\n        return this._version;\n    }\n    getText(range) {\n        if (range) {\n            let start = this.offsetAt(range.start);\n            let end = this.offsetAt(range.end);\n            return this._content.substring(start, end);\n        }\n        return this._content;\n    }\n    update(event, version) {\n        this._content = event.text;\n        this._version = version;\n        this._lineOffsets = undefined;\n    }\n    getLineOffsets() {\n        if (this._lineOffsets === undefined) {\n            let lineOffsets = [];\n            let text = this._content;\n            let isLineStart = true;\n            for (let i = 0; i < text.length; i++) {\n                if (isLineStart) {\n                    lineOffsets.push(i);\n                    isLineStart = false;\n                }\n                let ch = text.charAt(i);\n                isLineStart = (ch === '\\r' || ch === '\\n');\n                if (ch === '\\r' && i + 1 < text.length && text.charAt(i + 1) === '\\n') {\n                    i++;\n                }\n            }\n            if (isLineStart && text.length > 0) {\n                lineOffsets.push(text.length);\n            }\n            this._lineOffsets = lineOffsets;\n        }\n        return this._lineOffsets;\n    }\n    positionAt(offset) {\n        offset = Math.max(Math.min(offset, this._content.length), 0);\n        let lineOffsets = this.getLineOffsets();\n        let low = 0, high = lineOffsets.length;\n        if (high === 0) {\n            return Position.create(0, offset);\n        }\n        while (low < high) {\n            let mid = Math.floor((low + high) / 2);\n            if (lineOffsets[mid] > offset) {\n                high = mid;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        // low is the least x for which the line offset is larger than the current offset\n        // or array.length if no line offset is larger than the current offset\n        let line = low - 1;\n        return Position.create(line, offset - lineOffsets[line]);\n    }\n    offsetAt(position) {\n        let lineOffsets = this.getLineOffsets();\n        if (position.line >= lineOffsets.length) {\n            return this._content.length;\n        }\n        else if (position.line < 0) {\n            return 0;\n        }\n        let lineOffset = lineOffsets[position.line];\n        let nextLineOffset = (position.line + 1 < lineOffsets.length) ? lineOffsets[position.line + 1] : this._content.length;\n        return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);\n    }\n    get lineCount() {\n        return this.getLineOffsets().length;\n    }\n}\nvar Is;\n(function (Is) {\n    const toString = Object.prototype.toString;\n    function defined(value) {\n        return typeof value !== 'undefined';\n    }\n    Is.defined = defined;\n    function undefined(value) {\n        return typeof value === 'undefined';\n    }\n    Is.undefined = undefined;\n    function boolean(value) {\n        return value === true || value === false;\n    }\n    Is.boolean = boolean;\n    function string(value) {\n        return toString.call(value) === '[object String]';\n    }\n    Is.string = string;\n    function number(value) {\n        return toString.call(value) === '[object Number]';\n    }\n    Is.number = number;\n    function numberRange(value, min, max) {\n        return toString.call(value) === '[object Number]' && min <= value && value <= max;\n    }\n    Is.numberRange = numberRange;\n    function integer(value) {\n        return toString.call(value) === '[object Number]' && -2147483648 <= value && value <= 2147483647;\n    }\n    Is.integer = integer;\n    function uinteger(value) {\n        return toString.call(value) === '[object Number]' && 0 <= value && value <= 2147483647;\n    }\n    Is.uinteger = uinteger;\n    function func(value) {\n        return toString.call(value) === '[object Function]';\n    }\n    Is.func = func;\n    function objectLiteral(value) {\n        // Strictly speaking class instances pass this check as well. Since the LSP\n        // doesn't use classes we ignore this for now. If we do we need to add something\n        // like this: `Object.getPrototypeOf(Object.getPrototypeOf(x)) === null`\n        return value !== null && typeof value === 'object';\n    }\n    Is.objectLiteral = objectLiteral;\n    function typedArray(value, check) {\n        return Array.isArray(value) && value.every(check);\n    }\n    Is.typedArray = typedArray;\n})(Is || (Is = {}));\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { IToken, TokenType } from 'chevrotain';\nimport type { Range } from 'vscode-languageserver-types';\nimport type { AbstractElement } from '../languages/generated/ast.js';\nimport type { AstNode, CompositeCstNode, CstNode, LeafCstNode, RootCstNode } from '../syntax-tree.js';\nimport { Position } from 'vscode-languageserver-types';\nimport { isCompositeCstNode } from '../syntax-tree.js';\nimport { tokenToRange } from '../utils/cst-utils.js';\n\nexport class CstNodeBuilder {\n\n    private rootNode!: RootCstNodeImpl;\n    private nodeStack: CompositeCstNodeImpl[] = [];\n\n    private get current(): CompositeCstNodeImpl {\n        return this.nodeStack[this.nodeStack.length - 1];\n    }\n\n    buildRootNode(input: string): RootCstNode {\n        this.rootNode = new RootCstNodeImpl(input);\n        this.rootNode.root = this.rootNode;\n        this.nodeStack = [this.rootNode];\n        return this.rootNode;\n    }\n\n    buildCompositeNode(feature: AbstractElement): CompositeCstNode {\n        const compositeNode = new CompositeCstNodeImpl();\n        compositeNode.grammarSource = feature;\n        compositeNode.root = this.rootNode;\n        this.current.content.push(compositeNode);\n        this.nodeStack.push(compositeNode);\n        return compositeNode;\n    }\n\n    buildLeafNode(token: IToken, feature: AbstractElement): LeafCstNode {\n        const leafNode = new LeafCstNodeImpl(token.startOffset, token.image.length, tokenToRange(token), token.tokenType, false);\n        leafNode.grammarSource = feature;\n        leafNode.root = this.rootNode;\n        this.current.content.push(leafNode);\n        return leafNode;\n    }\n\n    removeNode(node: CstNode): void {\n        const parent = node.container;\n        if (parent) {\n            const index = parent.content.indexOf(node);\n            if (index >= 0) {\n                parent.content.splice(index, 1);\n            }\n        }\n    }\n\n    construct(item: { $type: string | symbol | undefined, $cstNode: CstNode }): void {\n        const current: CstNode = this.current;\n        // The specified item could be a datatype ($type is symbol) or a fragment ($type is undefined)\n        // Only if the $type is a string, we actually assign the element\n        if (typeof item.$type === 'string') {\n            this.current.astNode = <AstNode>item;\n        }\n        item.$cstNode = current;\n        const node = this.nodeStack.pop();\n        // Empty composite nodes are not valid\n        // Simply remove the node from the tree\n        if (node?.content.length === 0) {\n            this.removeNode(node);\n        }\n    }\n\n    addHiddenTokens(hiddenTokens: IToken[]): void {\n        for (const token of hiddenTokens) {\n            const hiddenNode = new LeafCstNodeImpl(token.startOffset, token.image.length, tokenToRange(token), token.tokenType, true);\n            hiddenNode.root = this.rootNode;\n            this.addHiddenToken(this.rootNode, hiddenNode);\n        }\n    }\n\n    private addHiddenToken(node: CompositeCstNode, token: LeafCstNode): void {\n        const { offset: tokenStart, end: tokenEnd } = token;\n\n        for (let i = 0; i < node.content.length; i++) {\n            const child = node.content[i];\n            const { offset: childStart, end: childEnd } = child;\n            if (isCompositeCstNode(child) && tokenStart > childStart && tokenEnd < childEnd) {\n                this.addHiddenToken(child, token);\n                return;\n            } else if (tokenEnd <= childStart) {\n                node.content.splice(i, 0, token);\n                return;\n            }\n        }\n\n        // We know that we haven't found a suited position for the token\n        // So we simply add it to the end of the current node\n        node.content.push(token);\n    }\n}\n\nexport abstract class AbstractCstNode implements CstNode {\n    abstract get offset(): number;\n    abstract get length(): number;\n    abstract get end(): number;\n    abstract get range(): Range;\n\n    container?: CompositeCstNode;\n    grammarSource: AbstractElement;\n    root: RootCstNode;\n    private _astNode?: AstNode;\n\n    /** @deprecated use `container` instead. */\n    get parent(): CompositeCstNode | undefined {\n        return this.container;\n    }\n\n    /** @deprecated use `grammarSource` instead. */\n    get feature(): AbstractElement {\n        return this.grammarSource;\n    }\n\n    get hidden(): boolean {\n        return false;\n    }\n\n    get astNode(): AstNode {\n        const node = typeof this._astNode?.$type === 'string' ? this._astNode : this.container?.astNode;\n        if (!node) {\n            throw new Error('This node has no associated AST element');\n        }\n        return node;\n    }\n\n    set astNode(value: AstNode) {\n        this._astNode = value;\n    }\n\n    /** @deprecated use `astNode` instead. */\n    get element(): AstNode {\n        return this.astNode;\n    }\n\n    get text(): string {\n        return this.root.fullText.substring(this.offset, this.end);\n    }\n}\n\nexport class LeafCstNodeImpl extends AbstractCstNode implements LeafCstNode {\n    get offset(): number {\n        return this._offset;\n    }\n\n    get length(): number {\n        return this._length;\n    }\n\n    get end(): number {\n        return this._offset + this._length;\n    }\n\n    override get hidden(): boolean {\n        return this._hidden;\n    }\n\n    get tokenType(): TokenType {\n        return this._tokenType;\n    }\n\n    get range(): Range {\n        return this._range;\n    }\n\n    private _hidden: boolean;\n    private _offset: number;\n    private _length: number;\n    private _range: Range;\n    private _tokenType: TokenType;\n\n    constructor(offset: number, length: number, range: Range, tokenType: TokenType, hidden = false) {\n        super();\n        this._hidden = hidden;\n        this._offset = offset;\n        this._tokenType = tokenType;\n        this._length = length;\n        this._range = range;\n    }\n}\n\nexport class CompositeCstNodeImpl extends AbstractCstNode implements CompositeCstNode {\n    readonly content: CstNode[] = new CstNodeContainer(this);\n    private _rangeCache?: Range;\n\n    /** @deprecated use `content` instead. */\n    get children(): CstNode[] {\n        return this.content;\n    }\n\n    get offset(): number {\n        return this.firstNonHiddenNode?.offset ?? 0;\n    }\n\n    get length(): number {\n        return this.end - this.offset;\n    }\n\n    get end(): number {\n        return this.lastNonHiddenNode?.end ?? 0;\n    }\n\n    get range(): Range {\n        const firstNode = this.firstNonHiddenNode;\n        const lastNode = this.lastNonHiddenNode;\n        if (firstNode && lastNode) {\n            if (this._rangeCache === undefined) {\n                const { range: firstRange } = firstNode;\n                const { range: lastRange } = lastNode;\n                this._rangeCache = { start: firstRange.start, end: lastRange.end.line < firstRange.start.line ? firstRange.start : lastRange.end };\n            }\n            return this._rangeCache;\n        } else {\n            return { start: Position.create(0, 0), end: Position.create(0, 0) };\n        }\n    }\n\n    private get firstNonHiddenNode(): CstNode | undefined {\n        for (const child of this.content) {\n            if (!child.hidden) {\n                return child;\n            }\n        }\n        return this.content[0];\n    }\n\n    private get lastNonHiddenNode(): CstNode | undefined {\n        for (let i = this.content.length - 1; i >= 0; i--) {\n            const child = this.content[i];\n            if (!child.hidden) {\n                return child;\n            }\n        }\n        return this.content[this.content.length - 1];\n    }\n}\n\nclass CstNodeContainer extends Array<CstNode> {\n    readonly parent: CompositeCstNode;\n\n    constructor(parent: CompositeCstNode) {\n        super();\n        this.parent = parent;\n        Object.setPrototypeOf(this, CstNodeContainer.prototype);\n    }\n\n    override push(...items: CstNode[]): number {\n        this.addParents(items);\n        return super.push(...items);\n    }\n\n    override unshift(...items: CstNode[]): number {\n        this.addParents(items);\n        return super.unshift(...items);\n    }\n\n    override splice(start: number, count: number, ...items: CstNode[]): CstNode[] {\n        this.addParents(items);\n        return super.splice(start, count, ...items);\n    }\n\n    private addParents(items: CstNode[]): void {\n        for (const item of items) {\n            (<AbstractCstNode>item).container = this.parent;\n        }\n    }\n}\n\nexport class RootCstNodeImpl extends CompositeCstNodeImpl implements RootCstNode {\n    private _text = '';\n\n    override get text(): string {\n        return this._text.substring(this.offset, this.end);\n    }\n\n    get fullText(): string {\n        return this._text;\n    }\n\n    constructor(input?: string) {\n        super();\n        this._text = input ?? '';\n    }\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type { DSLMethodOpts, ILexingError, IOrAlt, IParserErrorMessageProvider, IRecognitionException, IToken, TokenType, TokenVocabulary } from 'chevrotain';\nimport type { AbstractElement, Action, Assignment, ParserRule } from '../languages/generated/ast.js';\nimport type { Linker } from '../references/linker.js';\nimport type { LangiumCoreServices } from '../services.js';\nimport type { AstNode, AstReflection, CompositeCstNode, CstNode } from '../syntax-tree.js';\nimport type { Lexer } from './lexer.js';\nimport type { IParserConfig } from './parser-config.js';\nimport type { ValueConverter } from './value-converter.js';\nimport { defaultParserErrorProvider, EmbeddedActionsParser, LLkLookaheadStrategy } from 'chevrotain';\nimport { LLStarLookaheadStrategy } from 'chevrotain-allstar';\nimport { isAssignment, isCrossReference, isKeyword } from '../languages/generated/ast.js';\nimport { getTypeName, isDataTypeRule } from '../utils/grammar-utils.js';\nimport { assignMandatoryProperties, getContainerOfType, linkContentToContainer } from '../utils/ast-utils.js';\nimport { CstNodeBuilder } from './cst-node-builder.js';\n\nexport type ParseResult<T = AstNode> = {\n    value: T,\n    parserErrors: IRecognitionException[],\n    lexerErrors: ILexingError[]\n}\n\nexport const DatatypeSymbol = Symbol('Datatype');\n\ninterface DataTypeNode {\n    $cstNode: CompositeCstNode\n    /** Instead of a string, this node is uniquely identified by the `Datatype` symbol */\n    $type: symbol\n    /** Used as a storage for all parsed terminals, keywords and sub-datatype rules */\n    value: string\n}\n\nfunction isDataTypeNode(node: { $type: string | symbol | undefined }): node is DataTypeNode {\n    return node.$type === DatatypeSymbol;\n}\n\ntype RuleResult = (args: Args) => any;\n\ntype Args = Record<string, boolean>;\n\ntype RuleImpl = (args: Args) => any;\n\ninterface AssignmentElement {\n    assignment?: Assignment\n    isCrossRef: boolean\n}\n\nexport interface BaseParser {\n    rule(rule: ParserRule, impl: RuleImpl): RuleResult;\n    alternatives(idx: number, choices: Array<IOrAlt<any>>): void;\n    optional(idx: number, callback: DSLMethodOpts<unknown>): void;\n    many(idx: number, callback: DSLMethodOpts<unknown>): void;\n    atLeastOne(idx: number, callback: DSLMethodOpts<unknown>): void;\n    consume(idx: number, tokenType: TokenType, feature: AbstractElement): void;\n    subrule(idx: number, rule: RuleResult, feature: AbstractElement, args: Args): void;\n    action($type: string, action: Action): void;\n    construct(): unknown;\n    isRecording(): boolean;\n    get unorderedGroups(): Map<string, boolean[]>;\n    getRuleStack(): number[];\n}\n\nconst ruleSuffix = '\\u200B';\nconst withRuleSuffix = (name: string): string => name.endsWith(ruleSuffix) ? name : name + ruleSuffix;\n\nexport abstract class AbstractLangiumParser implements BaseParser {\n\n    protected readonly lexer: Lexer;\n    protected readonly wrapper: ChevrotainWrapper;\n    protected _unorderedGroups: Map<string, boolean[]> = new Map<string, boolean[]>();\n\n    constructor(services: LangiumCoreServices) {\n        this.lexer = services.parser.Lexer;\n        const tokens = this.lexer.definition;\n        this.wrapper = new ChevrotainWrapper(tokens, {\n            ...services.parser.ParserConfig,\n            errorMessageProvider: services.parser.ParserErrorMessageProvider\n        });\n    }\n\n    alternatives(idx: number, choices: Array<IOrAlt<any>>): void {\n        this.wrapper.wrapOr(idx, choices);\n    }\n\n    optional(idx: number, callback: DSLMethodOpts<unknown>): void {\n        this.wrapper.wrapOption(idx, callback);\n    }\n\n    many(idx: number, callback: DSLMethodOpts<unknown>): void {\n        this.wrapper.wrapMany(idx, callback);\n    }\n\n    atLeastOne(idx: number, callback: DSLMethodOpts<unknown>): void {\n        this.wrapper.wrapAtLeastOne(idx, callback);\n    }\n\n    abstract rule(rule: ParserRule, impl: RuleImpl): RuleResult;\n    abstract consume(idx: number, tokenType: TokenType, feature: AbstractElement): void;\n    abstract subrule(idx: number, rule: RuleResult, feature: AbstractElement, args: Args): void;\n    abstract action($type: string, action: Action): void;\n    abstract construct(): unknown;\n\n    isRecording(): boolean {\n        return this.wrapper.IS_RECORDING;\n    }\n\n    get unorderedGroups(): Map<string, boolean[]> {\n        return this._unorderedGroups;\n    }\n\n    getRuleStack(): number[] {\n        return (this.wrapper as any).RULE_STACK;\n    }\n\n    finalize(): void {\n        this.wrapper.wrapSelfAnalysis();\n    }\n}\n\nexport class LangiumParser extends AbstractLangiumParser {\n    private readonly linker: Linker;\n    private readonly converter: ValueConverter;\n    private readonly astReflection: AstReflection;\n    private readonly nodeBuilder = new CstNodeBuilder();\n    private stack: any[] = [];\n    private mainRule!: RuleResult;\n    private assignmentMap = new Map<AbstractElement, AssignmentElement | undefined>();\n\n    private get current(): any {\n        return this.stack[this.stack.length - 1];\n    }\n\n    constructor(services: LangiumCoreServices) {\n        super(services);\n        this.linker = services.references.Linker;\n        this.converter = services.parser.ValueConverter;\n        this.astReflection = services.shared.AstReflection;\n    }\n\n    rule(rule: ParserRule, impl: RuleImpl): RuleResult {\n        const type = rule.fragment ? undefined : isDataTypeRule(rule) ? DatatypeSymbol : getTypeName(rule);\n        const ruleMethod = this.wrapper.DEFINE_RULE(withRuleSuffix(rule.name), this.startImplementation(type, impl).bind(this));\n        if (rule.entry) {\n            this.mainRule = ruleMethod;\n        }\n        return ruleMethod;\n    }\n\n    parse<T extends AstNode = AstNode>(input: string): ParseResult<T> {\n        this.nodeBuilder.buildRootNode(input);\n        const lexerResult = this.lexer.tokenize(input);\n        this.wrapper.input = lexerResult.tokens;\n        const result = this.mainRule.call(this.wrapper, {});\n        this.nodeBuilder.addHiddenTokens(lexerResult.hidden);\n        this.unorderedGroups.clear();\n        return {\n            value: result,\n            lexerErrors: lexerResult.errors,\n            parserErrors: this.wrapper.errors\n        };\n    }\n\n    private startImplementation($type: string | symbol | undefined, implementation: RuleImpl): RuleImpl {\n        return (args) => {\n            if (!this.isRecording()) {\n                const node: any = { $type };\n                this.stack.push(node);\n                if ($type === DatatypeSymbol) {\n                    node.value = '';\n                }\n            }\n            let result: unknown;\n            try {\n                result = implementation(args);\n            } catch (err) {\n                result = undefined;\n            }\n            if (!this.isRecording() && result === undefined) {\n                result = this.construct();\n            }\n            return result;\n        };\n    }\n\n    consume(idx: number, tokenType: TokenType, feature: AbstractElement): void {\n        const token = this.wrapper.wrapConsume(idx, tokenType);\n        if (!this.isRecording() && this.isValidToken(token)) {\n            const leafNode = this.nodeBuilder.buildLeafNode(token, feature);\n            const { assignment, isCrossRef } = this.getAssignment(feature);\n            const current = this.current;\n            if (assignment) {\n                const convertedValue = isKeyword(feature) ? token.image : this.converter.convert(token.image, leafNode);\n                this.assign(assignment.operator, assignment.feature, convertedValue, leafNode, isCrossRef);\n            } else if (isDataTypeNode(current)) {\n                let text = token.image;\n                if (!isKeyword(feature)) {\n                    text = this.converter.convert(text, leafNode).toString();\n                }\n                current.value += text;\n            }\n        }\n    }\n\n    /**\n     * Most consumed parser tokens are valid. However there are two cases in which they are not valid:\n     *\n     * 1. They were inserted during error recovery by the parser. These tokens don't really exist and should not be further processed\n     * 2. They contain invalid token ranges. This might include the special EOF token, or other tokens produced by invalid token builders.\n     */\n    private isValidToken(token: IToken): boolean {\n        return !token.isInsertedInRecovery && !isNaN(token.startOffset) && typeof token.endOffset === 'number' && !isNaN(token.endOffset);\n    }\n\n    subrule(idx: number, rule: RuleResult, feature: AbstractElement, args: Args): void {\n        let cstNode: CompositeCstNode | undefined;\n        if (!this.isRecording()) {\n            cstNode = this.nodeBuilder.buildCompositeNode(feature);\n        }\n        const subruleResult = this.wrapper.wrapSubrule(idx, rule, args) as any;\n        if (!this.isRecording() && cstNode && cstNode.length > 0) {\n            this.performSubruleAssignment(subruleResult, feature, cstNode);\n        }\n    }\n\n    private performSubruleAssignment(result: any, feature: AbstractElement, cstNode: CompositeCstNode): void {\n        const { assignment, isCrossRef } = this.getAssignment(feature);\n        if (assignment) {\n            this.assign(assignment.operator, assignment.feature, result, cstNode, isCrossRef);\n        } else if (!assignment) {\n            // If we call a subrule without an assignment we either:\n            // 1. append the result of the subrule (data type rule)\n            // 2. override the current object with the newly parsed object\n            // If the current element is an AST node and the result of the subrule\n            // is a data type rule, we can safely discard the results.\n            const current = this.current;\n            if (isDataTypeNode(current)) {\n                current.value += result.toString();\n            } else if (typeof result === 'object' && result) {\n                const resultKind = result.$type;\n                const object = this.assignWithoutOverride(result, current);\n                if (resultKind) {\n                    object.$type = resultKind;\n                }\n                const newItem = object;\n                this.stack.pop();\n                this.stack.push(newItem);\n            }\n        }\n    }\n\n    action($type: string, action: Action): void {\n        if (!this.isRecording()) {\n            let last = this.current;\n            // This branch is used for left recursive grammar rules.\n            // Those don't call `construct` before another action.\n            // Therefore, we need to call it here.\n            if (!last.$cstNode && action.feature && action.operator) {\n                last = this.construct(false);\n                const feature = last.$cstNode.feature;\n                this.nodeBuilder.buildCompositeNode(feature);\n            }\n            const newItem = { $type };\n            this.stack.pop();\n            this.stack.push(newItem);\n            if (action.feature && action.operator) {\n                this.assign(action.operator, action.feature, last, last.$cstNode, false);\n            }\n        }\n    }\n\n    construct(pop = true): unknown {\n        if (this.isRecording()) {\n            return undefined;\n        }\n        const obj = this.current;\n        linkContentToContainer(obj);\n        this.nodeBuilder.construct(obj);\n        if (pop) {\n            this.stack.pop();\n        }\n        if (isDataTypeNode(obj)) {\n            return this.converter.convert(obj.value, obj.$cstNode);\n        } else {\n            assignMandatoryProperties(this.astReflection, obj);\n        }\n        return obj;\n    }\n\n    private getAssignment(feature: AbstractElement): AssignmentElement {\n        if (!this.assignmentMap.has(feature)) {\n            const assignment = getContainerOfType(feature, isAssignment);\n            this.assignmentMap.set(feature, {\n                assignment: assignment,\n                isCrossRef: assignment ? isCrossReference(assignment.terminal) : false\n            });\n        }\n        return this.assignmentMap.get(feature)!;\n    }\n\n    private assign(operator: string, feature: string, value: unknown, cstNode: CstNode, isCrossRef: boolean): void {\n        const obj = this.current;\n        let item: unknown;\n        if (isCrossRef && typeof value === 'string') {\n            item = this.linker.buildReference(obj, feature, cstNode, value);\n        } else {\n            item = value;\n        }\n        switch (operator) {\n            case '=': {\n                obj[feature] = item;\n                break;\n            }\n            case '?=': {\n                obj[feature] = true;\n                break;\n            }\n            case '+=': {\n                if (!Array.isArray(obj[feature])) {\n                    obj[feature] = [];\n                }\n                obj[feature].push(item);\n            }\n        }\n    }\n\n    private assignWithoutOverride(target: any, source: any): any {\n        for (const [name, existingValue] of Object.entries(source)) {\n            const newValue = target[name];\n            if (newValue === undefined) {\n                target[name] = existingValue;\n            } else if (Array.isArray(newValue) && Array.isArray(existingValue)) {\n                existingValue.push(...newValue);\n                target[name] = existingValue;\n            }\n        }\n        return target;\n    }\n\n    get definitionErrors(): IParserDefinitionError[] {\n        return this.wrapper.definitionErrors;\n    }\n}\n\nexport interface IParserDefinitionError {\n    message: string\n    type: number\n    ruleName?: string\n}\n\nexport abstract class AbstractParserErrorMessageProvider implements IParserErrorMessageProvider {\n\n    buildMismatchTokenMessage(options: {\n        expected: TokenType\n        actual: IToken\n        previous: IToken\n        ruleName: string\n    }): string {\n        return defaultParserErrorProvider.buildMismatchTokenMessage(options);\n    }\n\n    buildNotAllInputParsedMessage(options: {\n        firstRedundant: IToken\n        ruleName: string\n    }): string {\n        return defaultParserErrorProvider.buildNotAllInputParsedMessage(options);\n    }\n\n    buildNoViableAltMessage(options: {\n        expectedPathsPerAlt: TokenType[][][]\n        actual: IToken[]\n        previous: IToken\n        customUserDescription: string\n        ruleName: string\n    }): string {\n        return defaultParserErrorProvider.buildNoViableAltMessage(options);\n    }\n\n    buildEarlyExitMessage(options: {\n        expectedIterationPaths: TokenType[][]\n        actual: IToken[]\n        previous: IToken\n        customUserDescription: string\n        ruleName: string\n    }): string {\n        return defaultParserErrorProvider.buildEarlyExitMessage(options);\n    }\n\n}\n\nexport class LangiumParserErrorMessageProvider extends AbstractParserErrorMessageProvider {\n\n    override buildMismatchTokenMessage({ expected, actual }: {\n        expected: TokenType\n        actual: IToken\n        previous: IToken\n        ruleName: string\n    }): string {\n        const expectedMsg = expected.LABEL\n            ? '`' + expected.LABEL + '`'\n            : expected.name.endsWith(':KW')\n                ? `keyword '${expected.name.substring(0, expected.name.length - 3)}'`\n                : `token of type '${expected.name}'`;\n        return `Expecting ${expectedMsg} but found \\`${actual.image}\\`.`;\n    }\n\n    override buildNotAllInputParsedMessage({ firstRedundant }: {\n        firstRedundant: IToken\n        ruleName: string\n    }): string {\n        return `Expecting end of file but found \\`${firstRedundant.image}\\`.`;\n    }\n}\n\nexport interface CompletionParserResult {\n    tokens: IToken[]\n    elementStack: AbstractElement[]\n    tokenIndex: number\n}\n\nexport class LangiumCompletionParser extends AbstractLangiumParser {\n    private mainRule!: RuleResult;\n    private tokens: IToken[] = [];\n\n    private elementStack: AbstractElement[] = [];\n    private lastElementStack: AbstractElement[] = [];\n    private nextTokenIndex = 0;\n    private stackSize = 0;\n\n    action(): void {\n        // NOOP\n    }\n\n    construct(): unknown {\n        // NOOP\n        return undefined;\n    }\n\n    parse(input: string): CompletionParserResult {\n        this.resetState();\n        const tokens = this.lexer.tokenize(input);\n        this.tokens = tokens.tokens;\n        this.wrapper.input = [...this.tokens];\n        this.mainRule.call(this.wrapper, {});\n        this.unorderedGroups.clear();\n        return {\n            tokens: this.tokens,\n            elementStack: [...this.lastElementStack],\n            tokenIndex: this.nextTokenIndex\n        };\n    }\n\n    rule(rule: ParserRule, impl: RuleImpl): RuleResult {\n        const ruleMethod = this.wrapper.DEFINE_RULE(withRuleSuffix(rule.name), this.startImplementation(impl).bind(this));\n        if (rule.entry) {\n            this.mainRule = ruleMethod;\n        }\n        return ruleMethod;\n    }\n\n    private resetState(): void {\n        this.elementStack = [];\n        this.lastElementStack = [];\n        this.nextTokenIndex = 0;\n        this.stackSize = 0;\n    }\n\n    private startImplementation(implementation: RuleImpl): RuleImpl {\n        return (args) => {\n            const size = this.keepStackSize();\n            try {\n                implementation(args);\n            } finally {\n                this.resetStackSize(size);\n            }\n        };\n    }\n\n    private removeUnexpectedElements(): void {\n        this.elementStack.splice(this.stackSize);\n    }\n\n    keepStackSize(): number {\n        const size = this.elementStack.length;\n        this.stackSize = size;\n        return size;\n    }\n\n    resetStackSize(size: number): void {\n        this.removeUnexpectedElements();\n        this.stackSize = size;\n    }\n\n    consume(idx: number, tokenType: TokenType, feature: AbstractElement): void {\n        this.wrapper.wrapConsume(idx, tokenType);\n        if (!this.isRecording()) {\n            this.lastElementStack = [...this.elementStack, feature];\n            this.nextTokenIndex = this.currIdx + 1;\n        }\n    }\n\n    subrule(idx: number, rule: RuleResult, feature: AbstractElement, args: Args): void {\n        this.before(feature);\n        this.wrapper.wrapSubrule(idx, rule, args);\n        this.after(feature);\n    }\n\n    before(element: AbstractElement): void {\n        if (!this.isRecording()) {\n            this.elementStack.push(element);\n        }\n    }\n\n    after(element: AbstractElement): void {\n        if (!this.isRecording()) {\n            const index = this.elementStack.lastIndexOf(element);\n            if (index >= 0) {\n                this.elementStack.splice(index);\n            }\n        }\n    }\n\n    get currIdx(): number {\n        return (this.wrapper as any).currIdx;\n    }\n}\n\nconst defaultConfig: IParserConfig = {\n    recoveryEnabled: true,\n    nodeLocationTracking: 'full',\n    skipValidations: true,\n    errorMessageProvider: new LangiumParserErrorMessageProvider()\n};\n\n/**\n * This class wraps the embedded actions parser of chevrotain and exposes protected methods.\n * This way, we can build the `LangiumParser` as a composition.\n */\nclass ChevrotainWrapper extends EmbeddedActionsParser {\n\n    // This array is set in the base implementation of Chevrotain.\n    definitionErrors: IParserDefinitionError[];\n\n    constructor(tokens: TokenVocabulary, config?: IParserConfig) {\n        const useDefaultLookahead = config && 'maxLookahead' in config;\n        super(tokens, {\n            ...defaultConfig,\n            lookaheadStrategy: useDefaultLookahead\n                ? new LLkLookaheadStrategy({ maxLookahead: config.maxLookahead })\n                : new LLStarLookaheadStrategy(),\n            ...config,\n        });\n    }\n\n    get IS_RECORDING(): boolean {\n        return this.RECORDING_PHASE;\n    }\n\n    DEFINE_RULE(name: string, impl: RuleImpl): RuleResult {\n        return this.RULE(name, impl);\n    }\n\n    wrapSelfAnalysis(): void {\n        this.performSelfAnalysis();\n    }\n\n    wrapConsume(idx: number, tokenType: TokenType): IToken {\n        return this.consume(idx, tokenType);\n    }\n\n    wrapSubrule(idx: number, rule: RuleResult, args: Args): unknown {\n        return this.subrule(idx, rule, {\n            ARGS: [args]\n        });\n    }\n\n    wrapOr(idx: number, choices: Array<IOrAlt<any>>): void {\n        this.or(idx, choices);\n    }\n\n    wrapOption(idx: number, callback: DSLMethodOpts<unknown>): void {\n        this.option(idx, callback);\n    }\n\n    wrapMany(idx: number, callback: DSLMethodOpts<unknown>): void {\n        this.many(idx, callback);\n    }\n\n    wrapAtLeastOne(idx: number, callback: DSLMethodOpts<unknown>): void {\n        this.atLeastOne(idx, callback);\n    }\n}\n","/******************************************************************************\n * Copyright 2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { IOrAlt, TokenType, TokenTypeDictionary } from 'chevrotain';\nimport type { AbstractElement, Action, Alternatives, Condition, CrossReference, Grammar, Group, Keyword, NamedArgument, ParserRule, RuleCall, UnorderedGroup } from '../languages/generated/ast.js';\nimport type { BaseParser } from './langium-parser.js';\nimport type { AstNode } from '../syntax-tree.js';\nimport type { Cardinality } from '../utils/grammar-utils.js';\nimport { EMPTY_ALT, EOF } from 'chevrotain';\nimport { isAction, isAlternatives, isEndOfFile, isAssignment, isConjunction, isCrossReference, isDisjunction, isGroup, isKeyword, isNegation, isParameterReference, isParserRule, isRuleCall, isTerminalRule, isUnorderedGroup, isBooleanLiteral } from '../languages/generated/ast.js';\nimport { assertUnreachable, ErrorWithLocation } from '../utils/errors.js';\nimport { stream } from '../utils/stream.js';\nimport { findNameAssignment, getAllReachableRules, getTypeName } from '../utils/grammar-utils.js';\n\ntype RuleContext = {\n    optional: number,\n    consume: number,\n    subrule: number,\n    many: number,\n    or: number\n} & ParserContext;\n\ntype ParserContext = {\n    parser: BaseParser\n    tokens: TokenTypeDictionary\n    rules: Map<string, Rule>\n    ruleNames: Map<AstNode, string>\n}\n\ntype Rule = (args: Args) => unknown;\n\ntype Args = Record<string, boolean>;\n\ntype Predicate = (args: Args) => boolean;\n\ntype Method = (args: Args) => void;\n\nexport function createParser<T extends BaseParser>(grammar: Grammar, parser: T, tokens: TokenTypeDictionary): T {\n    const rules = new Map<string, Rule>();\n    const parserContext: ParserContext = {\n        parser,\n        tokens,\n        rules,\n        ruleNames: new Map()\n    };\n    buildRules(parserContext, grammar);\n    return parser;\n}\n\nfunction buildRules(parserContext: ParserContext, grammar: Grammar): void {\n    const reachable = getAllReachableRules(grammar, false);\n    const parserRules = stream(grammar.rules).filter(isParserRule).filter(rule => reachable.has(rule));\n    for (const rule of parserRules) {\n        const ctx: RuleContext = {\n            ...parserContext,\n            consume: 1,\n            optional: 1,\n            subrule: 1,\n            many: 1,\n            or: 1\n        };\n        ctx.rules.set(\n            rule.name,\n            parserContext.parser.rule(rule, buildElement(ctx, rule.definition))\n        );\n    }\n}\n\nfunction buildElement(ctx: RuleContext, element: AbstractElement, ignoreGuard = false): Method {\n    let method: Method;\n    if (isKeyword(element)) {\n        method = buildKeyword(ctx, element);\n    } else if (isAction(element)) {\n        method = buildAction(ctx, element);\n    } else if (isAssignment(element)) {\n        method = buildElement(ctx, element.terminal);\n    } else if (isCrossReference(element)) {\n        method = buildCrossReference(ctx, element);\n    } else if (isRuleCall(element)) {\n        method = buildRuleCall(ctx, element);\n    } else if (isAlternatives(element)) {\n        method = buildAlternatives(ctx, element);\n    } else if (isUnorderedGroup(element)) {\n        method = buildUnorderedGroup(ctx, element);\n    } else if (isGroup(element)) {\n        method = buildGroup(ctx, element);\n    } else if(isEndOfFile(element)) {\n        const idx = ctx.consume++;\n        method = () => ctx.parser.consume(idx, EOF, element);\n    } else {\n        throw new ErrorWithLocation(element.$cstNode, `Unexpected element type: ${element.$type}`);\n    }\n    return wrap(ctx, ignoreGuard ? undefined : getGuardCondition(element), method, element.cardinality);\n}\n\nfunction buildAction(ctx: RuleContext, action: Action): Method {\n    const actionType = getTypeName(action);\n    return () => ctx.parser.action(actionType, action);\n}\n\nfunction buildRuleCall(ctx: RuleContext, ruleCall: RuleCall): Method {\n    const rule = ruleCall.rule.ref;\n    if (isParserRule(rule)) {\n        const idx = ctx.subrule++;\n        const predicate = ruleCall.arguments.length > 0 ? buildRuleCallPredicate(rule, ruleCall.arguments) : () => ({});\n        return (args) => ctx.parser.subrule(idx, getRule(ctx, rule), ruleCall, predicate(args));\n    } else if (isTerminalRule(rule)) {\n        const idx = ctx.consume++;\n        const method = getToken(ctx, rule.name);\n        return () => ctx.parser.consume(idx, method, ruleCall);\n    } else if (!rule) {\n        throw new ErrorWithLocation(ruleCall.$cstNode, `Undefined rule type: ${ruleCall.$type}`);\n    } else {\n        assertUnreachable(rule);\n    }\n}\n\nfunction buildRuleCallPredicate(rule: ParserRule, namedArgs: NamedArgument[]): (args: Args) => Args {\n    const predicates = namedArgs.map(e => buildPredicate(e.value));\n    return (args) => {\n        const ruleArgs: Args = {};\n        for (let i = 0; i < predicates.length; i++) {\n            const ruleTarget = rule.parameters[i];\n            const predicate = predicates[i];\n            ruleArgs[ruleTarget.name] = predicate(args);\n        }\n        return ruleArgs;\n    };\n}\n\ninterface PredicatedMethod {\n    ALT: Method,\n    GATE?: Predicate\n}\n\nfunction buildPredicate(condition: Condition): Predicate {\n    if (isDisjunction(condition)) {\n        const left = buildPredicate(condition.left);\n        const right = buildPredicate(condition.right);\n        return (args) => (left(args) || right(args));\n    } else if (isConjunction(condition)) {\n        const left = buildPredicate(condition.left);\n        const right = buildPredicate(condition.right);\n        return (args) => (left(args) && right(args));\n    } else if (isNegation(condition)) {\n        const value = buildPredicate(condition.value);\n        return (args) => !value(args);\n    } else if (isParameterReference(condition)) {\n        const name = condition.parameter.ref!.name;\n        return (args) => args !== undefined && args[name] === true;\n    } else if (isBooleanLiteral(condition)) {\n        const value = Boolean(condition.true);\n        return () => value;\n    }\n    assertUnreachable(condition);\n}\n\nfunction buildAlternatives(ctx: RuleContext, alternatives: Alternatives): Method {\n    if (alternatives.elements.length === 1) {\n        return buildElement(ctx, alternatives.elements[0]);\n    } else {\n        const methods: PredicatedMethod[] = [];\n\n        for (const element of alternatives.elements) {\n            const predicatedMethod: PredicatedMethod = {\n                // Since we handle the guard condition in the alternative already\n                // We can ignore the group guard condition inside\n                ALT: buildElement(ctx, element, true)\n            };\n            const guard = getGuardCondition(element);\n            if (guard) {\n                predicatedMethod.GATE = buildPredicate(guard);\n            }\n            methods.push(predicatedMethod);\n        }\n\n        const idx = ctx.or++;\n        return (args) => ctx.parser.alternatives(idx, methods.map(method => {\n            const alt: IOrAlt<unknown> = {\n                ALT: () => method.ALT(args)\n            };\n            const gate = method.GATE;\n            if (gate) {\n                alt.GATE = () => gate(args);\n            }\n            return alt;\n        }));\n    }\n}\n\nfunction buildUnorderedGroup(ctx: RuleContext, group: UnorderedGroup): Method {\n    if (group.elements.length === 1) {\n        return buildElement(ctx, group.elements[0]);\n    }\n    const methods: PredicatedMethod[] = [];\n\n    for (const element of group.elements) {\n        const predicatedMethod: PredicatedMethod = {\n            // Since we handle the guard condition in the alternative already\n            // We can ignore the group guard condition inside\n            ALT: buildElement(ctx, element, true)\n        };\n        const guard = getGuardCondition(element);\n        if (guard) {\n            predicatedMethod.GATE = buildPredicate(guard);\n        }\n        methods.push(predicatedMethod);\n    }\n\n    const orIdx = ctx.or++;\n\n    const idFunc = (groupIdx: number, lParser: BaseParser) => {\n        const stackId = lParser.getRuleStack().join('-');\n        return `uGroup_${groupIdx}_${stackId}`;\n    };\n    const alternatives: Method = (args) => ctx.parser.alternatives(orIdx, methods.map((method, idx) => {\n        const alt: IOrAlt<unknown> = { ALT: () => true };\n        const parser = ctx.parser;\n        alt.ALT = () => {\n            method.ALT(args);\n            if (!parser.isRecording()) {\n                const key = idFunc(orIdx, parser);\n                if (!parser.unorderedGroups.get(key)) {\n                    // init after clear state\n                    parser.unorderedGroups.set(key, []);\n                }\n                const groupState = parser.unorderedGroups.get(key)!;\n                if (typeof groupState?.[idx] === 'undefined') {\n                    // Not accessed yet\n                    groupState[idx] = true;\n                }\n            }\n        };\n        const gate = method.GATE;\n        if (gate) {\n            alt.GATE = () => gate(args);\n        } else {\n            alt.GATE = () => {\n                const trackedAlternatives = parser.unorderedGroups.get(idFunc(orIdx, parser));\n                const allow = !trackedAlternatives?.[idx];\n                return allow;\n            };\n        }\n        return alt;\n    }));\n    const wrapped = wrap(ctx, getGuardCondition(group), alternatives, '*');\n    return (args) => {\n        wrapped(args);\n        if (!ctx.parser.isRecording()) {\n            ctx.parser.unorderedGroups.delete(idFunc(orIdx, ctx.parser));\n        }\n    };\n}\n\nfunction buildGroup(ctx: RuleContext, group: Group): Method {\n    const methods = group.elements.map(e => buildElement(ctx, e));\n    return (args) => methods.forEach(method => method(args));\n}\n\nfunction getGuardCondition(element: AbstractElement): Condition | undefined {\n    if (isGroup(element)) {\n        return element.guardCondition;\n    }\n    return undefined;\n}\n\nfunction buildCrossReference(ctx: RuleContext, crossRef: CrossReference, terminal = crossRef.terminal): Method {\n    if (!terminal) {\n        if (!crossRef.type.ref) {\n            throw new Error('Could not resolve reference to type: ' + crossRef.type.$refText);\n        }\n        const assignment = findNameAssignment(crossRef.type.ref);\n        const assignTerminal = assignment?.terminal;\n        if (!assignTerminal) {\n            throw new Error('Could not find name assignment for type: ' + getTypeName(crossRef.type.ref));\n        }\n        return buildCrossReference(ctx, crossRef, assignTerminal);\n    } else if (isRuleCall(terminal) && isParserRule(terminal.rule.ref)) {\n        const idx = ctx.subrule++;\n        return (args) => ctx.parser.subrule(idx, getRule(ctx, terminal.rule.ref as ParserRule), crossRef, args);\n    } else if (isRuleCall(terminal) && isTerminalRule(terminal.rule.ref)) {\n        const idx = ctx.consume++;\n        const terminalRule = getToken(ctx, terminal.rule.ref.name);\n        return () => ctx.parser.consume(idx, terminalRule, crossRef);\n    } else if (isKeyword(terminal)) {\n        const idx = ctx.consume++;\n        const keyword = getToken(ctx, terminal.value);\n        return () => ctx.parser.consume(idx, keyword, crossRef);\n    }\n    else {\n        throw new Error('Could not build cross reference parser');\n    }\n}\n\nfunction buildKeyword(ctx: RuleContext, keyword: Keyword): Method {\n    const idx = ctx.consume++;\n    const token = ctx.tokens[keyword.value];\n    if (!token) {\n        throw new Error('Could not find token for keyword: ' + keyword.value);\n    }\n    return () => ctx.parser.consume(idx, token, keyword);\n}\n\nfunction wrap(ctx: RuleContext, guard: Condition | undefined, method: Method, cardinality: Cardinality): Method {\n    const gate = guard && buildPredicate(guard);\n\n    if (!cardinality) {\n        if (gate) {\n            const idx = ctx.or++;\n            return (args) => ctx.parser.alternatives(idx, [\n                {\n                    ALT: () => method(args),\n                    GATE: () => gate(args)\n                },\n                {\n                    ALT: EMPTY_ALT(),\n                    GATE: () => !gate(args)\n                }\n            ]);\n        } else {\n            return method;\n        }\n    }\n\n    if (cardinality === '*') {\n        const idx = ctx.many++;\n        return (args) => ctx.parser.many(idx, {\n            DEF: () => method(args),\n            GATE: gate ? () => gate(args) : undefined\n        });\n    } else if (cardinality === '+') {\n        const idx = ctx.many++;\n        if (gate) {\n            const orIdx = ctx.or++;\n            // In the case of a guard condition for the `+` group\n            // We combine it with an empty alternative\n            // If the condition returns true, it needs to parse at least a single iteration\n            // If its false, it is not allowed to parse anything\n            return (args) => ctx.parser.alternatives(orIdx, [\n                {\n                    ALT: () => ctx.parser.atLeastOne(idx, {\n                        DEF: () => method(args)\n                    }),\n                    GATE: () => gate(args)\n                },\n                {\n                    ALT: EMPTY_ALT(),\n                    GATE: () => !gate(args)\n                }\n            ]);\n        } else {\n            return (args) => ctx.parser.atLeastOne(idx, {\n                DEF: () => method(args),\n            });\n        }\n    } else if (cardinality === '?') {\n        const idx = ctx.optional++;\n        return (args) => ctx.parser.optional(idx, {\n            DEF: () => method(args),\n            GATE: gate ? () => gate(args) : undefined\n        });\n    } else {\n        assertUnreachable(cardinality);\n    }\n}\n\nfunction getRule(ctx: ParserContext, element: ParserRule | AbstractElement): Rule {\n    const name = getRuleName(ctx, element);\n    const rule = ctx.rules.get(name);\n    if (!rule) throw new Error(`Rule \"${name}\" not found.\"`);\n    return rule;\n}\n\nfunction getRuleName(ctx: ParserContext, element: ParserRule | AbstractElement): string {\n    if (isParserRule(element)) {\n        return element.name;\n    } else if (ctx.ruleNames.has(element)) {\n        return ctx.ruleNames.get(element)!;\n    } else {\n        let item: AstNode = element;\n        let parent: AstNode = item.$container!;\n        let ruleName: string = element.$type;\n        while (!isParserRule(parent)) {\n            if (isGroup(parent) || isAlternatives(parent) || isUnorderedGroup(parent)) {\n                const index = parent.elements.indexOf(item as AbstractElement);\n                ruleName = index.toString() + ':' + ruleName;\n            }\n            item = parent;\n            parent = parent.$container!;\n        }\n        const rule = parent as ParserRule;\n        ruleName = rule.name + ':' + ruleName;\n        ctx.ruleNames.set(element, ruleName);\n        return ruleName;\n    }\n}\n\nfunction getToken(ctx: ParserContext, name: string): TokenType {\n    const token = ctx.tokens[name];\n    if (!token) throw new Error(`Token \"${name}\" not found.\"`);\n    return token;\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { LangiumCoreServices } from '../services.js';\nimport { LangiumParser } from './langium-parser.js';\nimport { createParser } from './parser-builder-base.js';\n\n/**\n * Create and finalize a Langium parser. The parser rules are derived from the grammar, which is\n * available at `services.Grammar`.\n */\nexport function createLangiumParser(services: LangiumCoreServices): LangiumParser {\n    const parser = prepareLangiumParser(services);\n    parser.finalize();\n    return parser;\n}\n\n/**\n * Create a Langium parser without finalizing it. This is used to extract more detailed error\n * information when the parser is initially validated.\n */\nexport function prepareLangiumParser(services: LangiumCoreServices): LangiumParser {\n    const grammar = services.Grammar;\n    const lexer = services.parser.Lexer;\n    const parser = new LangiumParser(services);\n    return createParser(grammar, parser, lexer.definition);\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { CustomPatternMatcherFunc, TokenPattern, TokenType, TokenVocabulary } from 'chevrotain';\nimport type { AbstractRule, Grammar, Keyword, TerminalRule } from '../languages/generated/ast.js';\nimport type { Stream } from '../utils/stream.js';\nimport { Lexer } from 'chevrotain';\nimport { isKeyword, isParserRule, isTerminalRule } from '../languages/generated/ast.js';\nimport { streamAllContents } from '../utils/ast-utils.js';\nimport { getAllReachableRules, terminalRegex } from '../utils/grammar-utils.js';\nimport { getCaseInsensitivePattern, isWhitespace, partialMatches } from '../utils/regexp-utils.js';\nimport { stream } from '../utils/stream.js';\n\nexport interface TokenBuilderOptions {\n    caseInsensitive?: boolean\n}\n\nexport interface TokenBuilder {\n    buildTokens(grammar: Grammar, options?: TokenBuilderOptions): TokenVocabulary;\n}\n\nexport class DefaultTokenBuilder implements TokenBuilder {\n\n    buildTokens(grammar: Grammar, options?: TokenBuilderOptions): TokenVocabulary {\n        const reachableRules = stream(getAllReachableRules(grammar, false));\n        const terminalTokens: TokenType[] = this.buildTerminalTokens(reachableRules);\n        const tokens: TokenType[] = this.buildKeywordTokens(reachableRules, terminalTokens, options);\n\n        terminalTokens.forEach(terminalToken => {\n            const pattern = terminalToken.PATTERN;\n            if (typeof pattern === 'object' && pattern && 'test' in pattern && isWhitespace(pattern)) {\n                tokens.unshift(terminalToken);\n            } else {\n                tokens.push(terminalToken);\n            }\n        });\n        // We don't need to add the EOF token explicitly.\n        // It is automatically available at the end of the token stream.\n        return tokens;\n    }\n\n    protected buildTerminalTokens(rules: Stream<AbstractRule>): TokenType[] {\n        return rules.filter(isTerminalRule).filter(e => !e.fragment)\n            .map(terminal => this.buildTerminalToken(terminal)).toArray();\n    }\n\n    protected buildTerminalToken(terminal: TerminalRule): TokenType {\n        const regex = terminalRegex(terminal);\n        const pattern = this.requiresCustomPattern(regex) ? this.regexPatternFunction(regex) : regex;\n        const tokenType: TokenType = {\n            name: terminal.name,\n            PATTERN: pattern,\n            LINE_BREAKS: true\n        };\n        if (terminal.hidden) {\n            // Only skip tokens that are able to accept whitespace\n            tokenType.GROUP = isWhitespace(regex) ? Lexer.SKIPPED : 'hidden';\n        }\n        return tokenType;\n    }\n\n    protected requiresCustomPattern(regex: RegExp): boolean {\n        if (regex.flags.includes('u')) {\n            // Unicode regexes are not supported by Chevrotain.\n            return true;\n        } else if (regex.source.includes('?<=') || regex.source.includes('?<!')) {\n            // Negative and positive lookbehind are not supported by Chevrotain yet.\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    protected regexPatternFunction(regex: RegExp): CustomPatternMatcherFunc {\n        const stickyRegex = new RegExp(regex, regex.flags + 'y');\n        return (text, offset) => {\n            stickyRegex.lastIndex = offset;\n            const execResult = stickyRegex.exec(text);\n            return execResult;\n        };\n    }\n\n    protected buildKeywordTokens(rules: Stream<AbstractRule>, terminalTokens: TokenType[], options?: TokenBuilderOptions): TokenType[] {\n        return rules\n            // We filter by parser rules, since keywords in terminal rules get transformed into regex and are not actual tokens\n            .filter(isParserRule)\n            .flatMap(rule => streamAllContents(rule).filter(isKeyword))\n            .distinct(e => e.value).toArray()\n            // Sort keywords by descending length\n            .sort((a, b) => b.value.length - a.value.length)\n            .map(keyword => this.buildKeywordToken(keyword, terminalTokens, Boolean(options?.caseInsensitive)));\n    }\n\n    protected buildKeywordToken(keyword: Keyword, terminalTokens: TokenType[], caseInsensitive: boolean): TokenType {\n        return {\n            name: keyword.value,\n            PATTERN: this.buildKeywordPattern(keyword, caseInsensitive),\n            LONGER_ALT: this.findLongerAlt(keyword, terminalTokens)\n        };\n    }\n\n    protected buildKeywordPattern(keyword: Keyword, caseInsensitive: boolean): TokenPattern {\n        return caseInsensitive ?\n            new RegExp(getCaseInsensitivePattern(keyword.value)) :\n            keyword.value;\n    }\n\n    protected findLongerAlt(keyword: Keyword, terminalTokens: TokenType[]): TokenType[] {\n        return terminalTokens.reduce((longerAlts: TokenType[], token) => {\n            const pattern = token?.PATTERN as RegExp;\n            if (pattern?.source && partialMatches('^' + pattern.source + '$', keyword.value)) {\n                longerAlts.push(token);\n            }\n            return longerAlts;\n        }, []);\n    }\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { AbstractElement, AbstractRule } from '../languages/generated/ast.js';\nimport type { CstNode } from '../syntax-tree.js';\nimport { isCrossReference, isRuleCall } from '../languages/generated/ast.js';\nimport { getCrossReferenceTerminal, getRuleType } from '../utils/grammar-utils.js';\n\n/**\n * Language-specific service for converting string values from the source text format into a value to be held in the AST.\n */\nexport interface ValueConverter {\n    /**\n     * Converts a string value from the source text format into a value to be held in the AST.\n     */\n    convert(input: string, cstNode: CstNode): ValueType;\n}\n\nexport type ValueType = string | number | boolean | bigint | Date;\n\nexport class DefaultValueConverter implements ValueConverter {\n\n    convert(input: string, cstNode: CstNode): ValueType {\n        let feature: AbstractElement | undefined = cstNode.grammarSource;\n        if (isCrossReference(feature)) {\n            feature = getCrossReferenceTerminal(feature);\n        }\n        if (isRuleCall(feature)) {\n            const rule = feature.rule.ref;\n            if (!rule) {\n                throw new Error('This cst node was not parsed by a rule.');\n            }\n            return this.runConverter(rule, input, cstNode);\n        }\n        return input;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    protected runConverter(rule: AbstractRule, input: string, cstNode: CstNode): ValueType {\n        switch (rule.name.toUpperCase()) {\n            case 'INT': return ValueConverter.convertInt(input);\n            case 'STRING': return ValueConverter.convertString(input);\n            case 'ID': return ValueConverter.convertID(input);\n        }\n        switch (getRuleType(rule)?.toLowerCase()) {\n            case 'number': return ValueConverter.convertNumber(input);\n            case 'boolean': return ValueConverter.convertBoolean(input);\n            case 'bigint': return ValueConverter.convertBigint(input);\n            case 'date': return ValueConverter.convertDate(input);\n            default: return input;\n        }\n    }\n}\n\nexport namespace ValueConverter {\n\n    export function convertString(input: string): string {\n        let result = '';\n        for (let i = 1; i < input.length - 1; i++) {\n            const c = input.charAt(i);\n            if (c === '\\\\') {\n                const c1 = input.charAt(++i);\n                result += convertEscapeCharacter(c1);\n            } else {\n                result += c;\n            }\n        }\n        return result;\n    }\n\n    function convertEscapeCharacter(char: string): string {\n        switch (char) {\n            case 'b': return '\\b';\n            case 'f': return '\\f';\n            case 'n': return '\\n';\n            case 'r': return '\\r';\n            case 't': return '\\t';\n            case 'v': return '\\v';\n            case '0': return '\\0';\n            default: return char;\n        }\n    }\n\n    export function convertID(input: string): string {\n        if (input.charAt(0) === '^') {\n            return input.substring(1);\n        } else {\n            return input;\n        }\n    }\n\n    export function convertInt(input: string): number {\n        return parseInt(input);\n    }\n\n    export function convertBigint(input: string): bigint {\n        return BigInt(input);\n    }\n\n    export function convertDate(input: string): Date {\n        return new Date(input);\n    }\n\n    export function convertNumber(input: string): number {\n        return Number(input);\n    }\n\n    export function convertBoolean(input: string): boolean {\n        return input.toLowerCase() === 'true';\n    }\n\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport { CancellationToken, CancellationTokenSource, type AbstractCancellationTokenSource } from '../utils/cancellation.js';\n\nexport type MaybePromise<T> = T | Promise<T>\n\n/**\n * Delays the execution of the current code to the next tick of the event loop.\n * Don't call this method directly in a tight loop to prevent too many promises from being created.\n */\nexport function delayNextTick(): Promise<void> {\n    return new Promise(resolve => {\n        // In case we are running in a non-node environment, `setImmediate` isn't available.\n        // Using `setTimeout` of the browser API accomplishes the same result.\n        if (typeof setImmediate === 'undefined') {\n            setTimeout(resolve, 0);\n        } else {\n            setImmediate(resolve);\n        }\n    });\n}\n\nlet lastTick = 0;\nlet globalInterruptionPeriod = 10;\n\n/**\n * Reset the global interruption period and create a cancellation token source.\n */\nexport function startCancelableOperation(): AbstractCancellationTokenSource {\n    lastTick = Date.now();\n    return new CancellationTokenSource();\n}\n\n/**\n * Change the period duration for `interruptAndCheck` to the given number of milliseconds.\n * The default value is 10ms.\n */\nexport function setInterruptionPeriod(period: number): void {\n    globalInterruptionPeriod = period;\n}\n\n/**\n * This symbol may be thrown in an asynchronous context by any Langium service that receives\n * a `CancellationToken`. This means that the promise returned by such a service is rejected with\n * this symbol as rejection reason.\n */\nexport const OperationCancelled = Symbol('OperationCancelled');\n\n/**\n * Use this in a `catch` block to check whether the thrown object indicates that the operation\n * has been cancelled.\n */\nexport function isOperationCancelled(err: unknown): err is typeof OperationCancelled {\n    return err === OperationCancelled;\n}\n\n/**\n * This function does two things:\n *  1. Check the elapsed time since the last call to this function or to `startCancelableOperation`. If the predefined\n *     period (configured with `setInterruptionPeriod`) is exceeded, execution is delayed with `delayNextTick`.\n *  2. If the predefined period is not met yet or execution is resumed after an interruption, the given cancellation\n *     token is checked, and if cancellation is requested, `OperationCanceled` is thrown.\n *\n * All services in Langium that receive a `CancellationToken` may potentially call this function, so the\n * `CancellationToken` must be caught (with an `async` try-catch block or a `catch` callback attached to\n * the promise) to avoid that event being exposed as an error.\n */\nexport async function interruptAndCheck(token: CancellationToken): Promise<void> {\n    if (token === CancellationToken.None) {\n        // Early exit in case cancellation was disabled by the caller\n        return;\n    }\n    const current = Date.now();\n    if (current - lastTick >= globalInterruptionPeriod) {\n        lastTick = current;\n        await delayNextTick();\n    }\n    if (token.isCancellationRequested) {\n        throw OperationCancelled;\n    }\n}\n\n/**\n * Simple implementation of the deferred pattern.\n * An object that exposes a promise and functions to resolve and reject it.\n */\nexport class Deferred<T = void> {\n    resolve: (value: T) => this;\n    reject: (err?: unknown) => this;\n\n    promise = new Promise<T>((resolve, reject) => {\n        this.resolve = (arg) => {\n            resolve(arg);\n            return this;\n        };\n        this.reject = (err) => {\n            reject(err);\n            return this;\n        };\n    });\n}\n","/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n'use strict';\nclass FullTextDocument {\n    constructor(uri, languageId, version, content) {\n        this._uri = uri;\n        this._languageId = languageId;\n        this._version = version;\n        this._content = content;\n        this._lineOffsets = undefined;\n    }\n    get uri() {\n        return this._uri;\n    }\n    get languageId() {\n        return this._languageId;\n    }\n    get version() {\n        return this._version;\n    }\n    getText(range) {\n        if (range) {\n            const start = this.offsetAt(range.start);\n            const end = this.offsetAt(range.end);\n            return this._content.substring(start, end);\n        }\n        return this._content;\n    }\n    update(changes, version) {\n        for (const change of changes) {\n            if (FullTextDocument.isIncremental(change)) {\n                // makes sure start is before end\n                const range = getWellformedRange(change.range);\n                // update content\n                const startOffset = this.offsetAt(range.start);\n                const endOffset = this.offsetAt(range.end);\n                this._content = this._content.substring(0, startOffset) + change.text + this._content.substring(endOffset, this._content.length);\n                // update the offsets\n                const startLine = Math.max(range.start.line, 0);\n                const endLine = Math.max(range.end.line, 0);\n                let lineOffsets = this._lineOffsets;\n                const addedLineOffsets = computeLineOffsets(change.text, false, startOffset);\n                if (endLine - startLine === addedLineOffsets.length) {\n                    for (let i = 0, len = addedLineOffsets.length; i < len; i++) {\n                        lineOffsets[i + startLine + 1] = addedLineOffsets[i];\n                    }\n                }\n                else {\n                    if (addedLineOffsets.length < 10000) {\n                        lineOffsets.splice(startLine + 1, endLine - startLine, ...addedLineOffsets);\n                    }\n                    else { // avoid too many arguments for splice\n                        this._lineOffsets = lineOffsets = lineOffsets.slice(0, startLine + 1).concat(addedLineOffsets, lineOffsets.slice(endLine + 1));\n                    }\n                }\n                const diff = change.text.length - (endOffset - startOffset);\n                if (diff !== 0) {\n                    for (let i = startLine + 1 + addedLineOffsets.length, len = lineOffsets.length; i < len; i++) {\n                        lineOffsets[i] = lineOffsets[i] + diff;\n                    }\n                }\n            }\n            else if (FullTextDocument.isFull(change)) {\n                this._content = change.text;\n                this._lineOffsets = undefined;\n            }\n            else {\n                throw new Error('Unknown change event received');\n            }\n        }\n        this._version = version;\n    }\n    getLineOffsets() {\n        if (this._lineOffsets === undefined) {\n            this._lineOffsets = computeLineOffsets(this._content, true);\n        }\n        return this._lineOffsets;\n    }\n    positionAt(offset) {\n        offset = Math.max(Math.min(offset, this._content.length), 0);\n        const lineOffsets = this.getLineOffsets();\n        let low = 0, high = lineOffsets.length;\n        if (high === 0) {\n            return { line: 0, character: offset };\n        }\n        while (low < high) {\n            const mid = Math.floor((low + high) / 2);\n            if (lineOffsets[mid] > offset) {\n                high = mid;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        // low is the least x for which the line offset is larger than the current offset\n        // or array.length if no line offset is larger than the current offset\n        const line = low - 1;\n        offset = this.ensureBeforeEOL(offset, lineOffsets[line]);\n        return { line, character: offset - lineOffsets[line] };\n    }\n    offsetAt(position) {\n        const lineOffsets = this.getLineOffsets();\n        if (position.line >= lineOffsets.length) {\n            return this._content.length;\n        }\n        else if (position.line < 0) {\n            return 0;\n        }\n        const lineOffset = lineOffsets[position.line];\n        if (position.character <= 0) {\n            return lineOffset;\n        }\n        const nextLineOffset = (position.line + 1 < lineOffsets.length) ? lineOffsets[position.line + 1] : this._content.length;\n        const offset = Math.min(lineOffset + position.character, nextLineOffset);\n        return this.ensureBeforeEOL(offset, lineOffset);\n    }\n    ensureBeforeEOL(offset, lineOffset) {\n        while (offset > lineOffset && isEOL(this._content.charCodeAt(offset - 1))) {\n            offset--;\n        }\n        return offset;\n    }\n    get lineCount() {\n        return this.getLineOffsets().length;\n    }\n    static isIncremental(event) {\n        const candidate = event;\n        return candidate !== undefined && candidate !== null &&\n            typeof candidate.text === 'string' && candidate.range !== undefined &&\n            (candidate.rangeLength === undefined || typeof candidate.rangeLength === 'number');\n    }\n    static isFull(event) {\n        const candidate = event;\n        return candidate !== undefined && candidate !== null &&\n            typeof candidate.text === 'string' && candidate.range === undefined && candidate.rangeLength === undefined;\n    }\n}\nexport var TextDocument;\n(function (TextDocument) {\n    /**\n     * Creates a new text document.\n     *\n     * @param uri The document's uri.\n     * @param languageId  The document's language Id.\n     * @param version The document's initial version number.\n     * @param content The document's content.\n     */\n    function create(uri, languageId, version, content) {\n        return new FullTextDocument(uri, languageId, version, content);\n    }\n    TextDocument.create = create;\n    /**\n     * Updates a TextDocument by modifying its content.\n     *\n     * @param document the document to update. Only documents created by TextDocument.create are valid inputs.\n     * @param changes the changes to apply to the document.\n     * @param version the changes version for the document.\n     * @returns The updated TextDocument. Note: That's the same document instance passed in as first parameter.\n     *\n     */\n    function update(document, changes, version) {\n        if (document instanceof FullTextDocument) {\n            document.update(changes, version);\n            return document;\n        }\n        else {\n            throw new Error('TextDocument.update: document must be created by TextDocument.create');\n        }\n    }\n    TextDocument.update = update;\n    function applyEdits(document, edits) {\n        const text = document.getText();\n        const sortedEdits = mergeSort(edits.map(getWellformedEdit), (a, b) => {\n            const diff = a.range.start.line - b.range.start.line;\n            if (diff === 0) {\n                return a.range.start.character - b.range.start.character;\n            }\n            return diff;\n        });\n        let lastModifiedOffset = 0;\n        const spans = [];\n        for (const e of sortedEdits) {\n            const startOffset = document.offsetAt(e.range.start);\n            if (startOffset < lastModifiedOffset) {\n                throw new Error('Overlapping edit');\n            }\n            else if (startOffset > lastModifiedOffset) {\n                spans.push(text.substring(lastModifiedOffset, startOffset));\n            }\n            if (e.newText.length) {\n                spans.push(e.newText);\n            }\n            lastModifiedOffset = document.offsetAt(e.range.end);\n        }\n        spans.push(text.substr(lastModifiedOffset));\n        return spans.join('');\n    }\n    TextDocument.applyEdits = applyEdits;\n})(TextDocument || (TextDocument = {}));\nfunction mergeSort(data, compare) {\n    if (data.length <= 1) {\n        // sorted\n        return data;\n    }\n    const p = (data.length / 2) | 0;\n    const left = data.slice(0, p);\n    const right = data.slice(p);\n    mergeSort(left, compare);\n    mergeSort(right, compare);\n    let leftIdx = 0;\n    let rightIdx = 0;\n    let i = 0;\n    while (leftIdx < left.length && rightIdx < right.length) {\n        const ret = compare(left[leftIdx], right[rightIdx]);\n        if (ret <= 0) {\n            // smaller_equal -> take left to preserve order\n            data[i++] = left[leftIdx++];\n        }\n        else {\n            // greater -> take right\n            data[i++] = right[rightIdx++];\n        }\n    }\n    while (leftIdx < left.length) {\n        data[i++] = left[leftIdx++];\n    }\n    while (rightIdx < right.length) {\n        data[i++] = right[rightIdx++];\n    }\n    return data;\n}\nfunction computeLineOffsets(text, isAtLineStart, textOffset = 0) {\n    const result = isAtLineStart ? [textOffset] : [];\n    for (let i = 0; i < text.length; i++) {\n        const ch = text.charCodeAt(i);\n        if (isEOL(ch)) {\n            if (ch === 13 /* CharCode.CarriageReturn */ && i + 1 < text.length && text.charCodeAt(i + 1) === 10 /* CharCode.LineFeed */) {\n                i++;\n            }\n            result.push(textOffset + i + 1);\n        }\n    }\n    return result;\n}\nfunction isEOL(char) {\n    return char === 13 /* CharCode.CarriageReturn */ || char === 10 /* CharCode.LineFeed */;\n}\nfunction getWellformedRange(range) {\n    const start = range.start;\n    const end = range.end;\n    if (start.line > end.line || (start.line === end.line && start.character > end.character)) {\n        return { start: end, end: start };\n    }\n    return range;\n}\nfunction getWellformedEdit(textEdit) {\n    const range = getWellformedRange(textEdit.range);\n    if (range !== textEdit.range) {\n        return { newText: textEdit.newText, range };\n    }\n    return textEdit;\n}\n","// 'path' module extracted from Node.js v8.11.1 (only the posix part)\n// transplited with Babel\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));\n  }\n}\n\n// Resolves . and .. elements in a path with directory names\nfunction normalizeStringPosix(path, allowAboveRoot) {\n  var res = '';\n  var lastSegmentLength = 0;\n  var lastSlash = -1;\n  var dots = 0;\n  var code;\n  for (var i = 0; i <= path.length; ++i) {\n    if (i < path.length)\n      code = path.charCodeAt(i);\n    else if (code === 47 /*/*/)\n      break;\n    else\n      code = 47 /*/*/;\n    if (code === 47 /*/*/) {\n      if (lastSlash === i - 1 || dots === 1) {\n        // NOOP\n      } else if (lastSlash !== i - 1 && dots === 2) {\n        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/ || res.charCodeAt(res.length - 2) !== 46 /*.*/) {\n          if (res.length > 2) {\n            var lastSlashIndex = res.lastIndexOf('/');\n            if (lastSlashIndex !== res.length - 1) {\n              if (lastSlashIndex === -1) {\n                res = '';\n                lastSegmentLength = 0;\n              } else {\n                res = res.slice(0, lastSlashIndex);\n                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');\n              }\n              lastSlash = i;\n              dots = 0;\n              continue;\n            }\n          } else if (res.length === 2 || res.length === 1) {\n            res = '';\n            lastSegmentLength = 0;\n            lastSlash = i;\n            dots = 0;\n            continue;\n          }\n        }\n        if (allowAboveRoot) {\n          if (res.length > 0)\n            res += '/..';\n          else\n            res = '..';\n          lastSegmentLength = 2;\n        }\n      } else {\n        if (res.length > 0)\n          res += '/' + path.slice(lastSlash + 1, i);\n        else\n          res = path.slice(lastSlash + 1, i);\n        lastSegmentLength = i - lastSlash - 1;\n      }\n      lastSlash = i;\n      dots = 0;\n    } else if (code === 46 /*.*/ && dots !== -1) {\n      ++dots;\n    } else {\n      dots = -1;\n    }\n  }\n  return res;\n}\n\nfunction _format(sep, pathObject) {\n  var dir = pathObject.dir || pathObject.root;\n  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');\n  if (!dir) {\n    return base;\n  }\n  if (dir === pathObject.root) {\n    return dir + base;\n  }\n  return dir + sep + base;\n}\n\nvar posix = {\n  // path.resolve([from ...], to)\n  resolve: function resolve() {\n    var resolvedPath = '';\n    var resolvedAbsolute = false;\n    var cwd;\n\n    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n      var path;\n      if (i >= 0)\n        path = arguments[i];\n      else {\n        if (cwd === undefined)\n          cwd = process.cwd();\n        path = cwd;\n      }\n\n      assertPath(path);\n\n      // Skip empty entries\n      if (path.length === 0) {\n        continue;\n      }\n\n      resolvedPath = path + '/' + resolvedPath;\n      resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    }\n\n    // At this point the path should be resolved to a full absolute path, but\n    // handle relative paths to be safe (might happen when process.cwd() fails)\n\n    // Normalize the path\n    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);\n\n    if (resolvedAbsolute) {\n      if (resolvedPath.length > 0)\n        return '/' + resolvedPath;\n      else\n        return '/';\n    } else if (resolvedPath.length > 0) {\n      return resolvedPath;\n    } else {\n      return '.';\n    }\n  },\n\n  normalize: function normalize(path) {\n    assertPath(path);\n\n    if (path.length === 0) return '.';\n\n    var isAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/;\n\n    // Normalize the path\n    path = normalizeStringPosix(path, !isAbsolute);\n\n    if (path.length === 0 && !isAbsolute) path = '.';\n    if (path.length > 0 && trailingSeparator) path += '/';\n\n    if (isAbsolute) return '/' + path;\n    return path;\n  },\n\n  isAbsolute: function isAbsolute(path) {\n    assertPath(path);\n    return path.length > 0 && path.charCodeAt(0) === 47 /*/*/;\n  },\n\n  join: function join() {\n    if (arguments.length === 0)\n      return '.';\n    var joined;\n    for (var i = 0; i < arguments.length; ++i) {\n      var arg = arguments[i];\n      assertPath(arg);\n      if (arg.length > 0) {\n        if (joined === undefined)\n          joined = arg;\n        else\n          joined += '/' + arg;\n      }\n    }\n    if (joined === undefined)\n      return '.';\n    return posix.normalize(joined);\n  },\n\n  relative: function relative(from, to) {\n    assertPath(from);\n    assertPath(to);\n\n    if (from === to) return '';\n\n    from = posix.resolve(from);\n    to = posix.resolve(to);\n\n    if (from === to) return '';\n\n    // Trim any leading backslashes\n    var fromStart = 1;\n    for (; fromStart < from.length; ++fromStart) {\n      if (from.charCodeAt(fromStart) !== 47 /*/*/)\n        break;\n    }\n    var fromEnd = from.length;\n    var fromLen = fromEnd - fromStart;\n\n    // Trim any leading backslashes\n    var toStart = 1;\n    for (; toStart < to.length; ++toStart) {\n      if (to.charCodeAt(toStart) !== 47 /*/*/)\n        break;\n    }\n    var toEnd = to.length;\n    var toLen = toEnd - toStart;\n\n    // Compare paths to find the longest common path from root\n    var length = fromLen < toLen ? fromLen : toLen;\n    var lastCommonSep = -1;\n    var i = 0;\n    for (; i <= length; ++i) {\n      if (i === length) {\n        if (toLen > length) {\n          if (to.charCodeAt(toStart + i) === 47 /*/*/) {\n            // We get here if `from` is the exact base path for `to`.\n            // For example: from='/foo/bar'; to='/foo/bar/baz'\n            return to.slice(toStart + i + 1);\n          } else if (i === 0) {\n            // We get here if `from` is the root\n            // For example: from='/'; to='/foo'\n            return to.slice(toStart + i);\n          }\n        } else if (fromLen > length) {\n          if (from.charCodeAt(fromStart + i) === 47 /*/*/) {\n            // We get here if `to` is the exact base path for `from`.\n            // For example: from='/foo/bar/baz'; to='/foo/bar'\n            lastCommonSep = i;\n          } else if (i === 0) {\n            // We get here if `to` is the root.\n            // For example: from='/foo'; to='/'\n            lastCommonSep = 0;\n          }\n        }\n        break;\n      }\n      var fromCode = from.charCodeAt(fromStart + i);\n      var toCode = to.charCodeAt(toStart + i);\n      if (fromCode !== toCode)\n        break;\n      else if (fromCode === 47 /*/*/)\n        lastCommonSep = i;\n    }\n\n    var out = '';\n    // Generate the relative path based on the path difference between `to`\n    // and `from`\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n      if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/) {\n        if (out.length === 0)\n          out += '..';\n        else\n          out += '/..';\n      }\n    }\n\n    // Lastly, append the rest of the destination (`to`) path that comes after\n    // the common path parts\n    if (out.length > 0)\n      return out + to.slice(toStart + lastCommonSep);\n    else {\n      toStart += lastCommonSep;\n      if (to.charCodeAt(toStart) === 47 /*/*/)\n        ++toStart;\n      return to.slice(toStart);\n    }\n  },\n\n  _makeLong: function _makeLong(path) {\n    return path;\n  },\n\n  dirname: function dirname(path) {\n    assertPath(path);\n    if (path.length === 0) return '.';\n    var code = path.charCodeAt(0);\n    var hasRoot = code === 47 /*/*/;\n    var end = -1;\n    var matchedSlash = true;\n    for (var i = path.length - 1; i >= 1; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          if (!matchedSlash) {\n            end = i;\n            break;\n          }\n        } else {\n        // We saw the first non-path separator\n        matchedSlash = false;\n      }\n    }\n\n    if (end === -1) return hasRoot ? '/' : '.';\n    if (hasRoot && end === 1) return '//';\n    return path.slice(0, end);\n  },\n\n  basename: function basename(path, ext) {\n    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('\"ext\" argument must be a string');\n    assertPath(path);\n\n    var start = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i;\n\n    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n      if (ext.length === path.length && ext === path) return '';\n      var extIdx = ext.length - 1;\n      var firstNonSlashEnd = -1;\n      for (i = path.length - 1; i >= 0; --i) {\n        var code = path.charCodeAt(i);\n        if (code === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else {\n          if (firstNonSlashEnd === -1) {\n            // We saw the first non-path separator, remember this index in case\n            // we need it if the extension ends up not matching\n            matchedSlash = false;\n            firstNonSlashEnd = i + 1;\n          }\n          if (extIdx >= 0) {\n            // Try to match the explicit extension\n            if (code === ext.charCodeAt(extIdx)) {\n              if (--extIdx === -1) {\n                // We matched the extension, so mark this as the end of our path\n                // component\n                end = i;\n              }\n            } else {\n              // Extension does not match, so our result is the entire path\n              // component\n              extIdx = -1;\n              end = firstNonSlashEnd;\n            }\n          }\n        }\n      }\n\n      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;\n      return path.slice(start, end);\n    } else {\n      for (i = path.length - 1; i >= 0; --i) {\n        if (path.charCodeAt(i) === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else if (end === -1) {\n          // We saw the first non-path separator, mark this as the end of our\n          // path component\n          matchedSlash = false;\n          end = i + 1;\n        }\n      }\n\n      if (end === -1) return '';\n      return path.slice(start, end);\n    }\n  },\n\n  extname: function extname(path) {\n    assertPath(path);\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n    for (var i = path.length - 1; i >= 0; --i) {\n      var code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1)\n            startDot = i;\n          else if (preDotState !== 1)\n            preDotState = 1;\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n        // We saw a non-dot character immediately before the dot\n        preDotState === 0 ||\n        // The (right-most) trimmed path component is exactly '..'\n        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      return '';\n    }\n    return path.slice(startDot, end);\n  },\n\n  format: function format(pathObject) {\n    if (pathObject === null || typeof pathObject !== 'object') {\n      throw new TypeError('The \"pathObject\" argument must be of type Object. Received type ' + typeof pathObject);\n    }\n    return _format('/', pathObject);\n  },\n\n  parse: function parse(path) {\n    assertPath(path);\n\n    var ret = { root: '', dir: '', base: '', ext: '', name: '' };\n    if (path.length === 0) return ret;\n    var code = path.charCodeAt(0);\n    var isAbsolute = code === 47 /*/*/;\n    var start;\n    if (isAbsolute) {\n      ret.root = '/';\n      start = 1;\n    } else {\n      start = 0;\n    }\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i = path.length - 1;\n\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n\n    // Get non-dir info\n    for (; i >= start; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n        } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n    // We saw a non-dot character immediately before the dot\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly '..'\n    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      if (end !== -1) {\n        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);\n      }\n    } else {\n      if (startPart === 0 && isAbsolute) {\n        ret.name = path.slice(1, startDot);\n        ret.base = path.slice(1, end);\n      } else {\n        ret.name = path.slice(startPart, startDot);\n        ret.base = path.slice(startPart, end);\n      }\n      ret.ext = path.slice(startDot, end);\n    }\n\n    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';\n\n    return ret;\n  },\n\n  sep: '/',\n  delimiter: ':',\n  win32: null,\n  posix: null\n};\n\nposix.posix = posix;\n\nmodule.exports = posix;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\n// !!!!!\n// SEE https://github.com/microsoft/vscode/blob/master/src/vs/base/common/platform.ts\n// !!!!!\n\ndeclare const process: { platform: 'win32' };\ndeclare const navigator: { userAgent: string };\n\nexport let isWindows: boolean;\n\nif (typeof process === 'object') {\n\tisWindows = process.platform === 'win32';\n} else if (typeof navigator === 'object') {\n\tlet userAgent = navigator.userAgent;\n\tisWindows = userAgent.indexOf('Windows') >= 0;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport { CharCode } from './charCode'\nimport { isWindows } from './platform';\n\nconst _schemePattern = /^\\w[\\w\\d+.-]*$/;\nconst _singleSlashStart = /^\\//;\nconst _doubleSlashStart = /^\\/\\//;\n\nfunction _validateUri(ret: URI, _strict?: boolean): void {\n\n\t// scheme, must be set\n\tif (!ret.scheme && _strict) {\n\t\tthrow new Error(`[UriError]: Scheme is missing: {scheme: \"\", authority: \"${ret.authority}\", path: \"${ret.path}\", query: \"${ret.query}\", fragment: \"${ret.fragment}\"}`);\n\t}\n\n\t// scheme, https://tools.ietf.org/html/rfc3986#section-3.1\n\t// ALPHA *( ALPHA / DIGIT / \"+\" / \"-\" / \".\" )\n\tif (ret.scheme && !_schemePattern.test(ret.scheme)) {\n\t\tthrow new Error('[UriError]: Scheme contains illegal characters.');\n\t}\n\n\t// path, http://tools.ietf.org/html/rfc3986#section-3.3\n\t// If a URI contains an authority component, then the path component\n\t// must either be empty or begin with a slash (\"/\") character.  If a URI\n\t// does not contain an authority component, then the path cannot begin\n\t// with two slash characters (\"//\").\n\tif (ret.path) {\n\t\tif (ret.authority) {\n\t\t\tif (!_singleSlashStart.test(ret.path)) {\n\t\t\t\tthrow new Error('[UriError]: If a URI contains an authority component, then the path component must either be empty or begin with a slash (\"/\") character');\n\t\t\t}\n\t\t} else {\n\t\t\tif (_doubleSlashStart.test(ret.path)) {\n\t\t\t\tthrow new Error('[UriError]: If a URI does not contain an authority component, then the path cannot begin with two slash characters (\"//\")');\n\t\t\t}\n\t\t}\n\t}\n}\n\n// for a while we allowed uris *without* schemes and this is the migration\n// for them, e.g. an uri without scheme and without strict-mode warns and falls\n// back to the file-scheme. that should cause the least carnage and still be a\n// clear warning\nfunction _schemeFix(scheme: string, _strict: boolean): string {\n\tif (!scheme && !_strict) {\n\t\treturn 'file';\n\t}\n\treturn scheme;\n}\n\n// implements a bit of https://tools.ietf.org/html/rfc3986#section-5\nfunction _referenceResolution(scheme: string, path: string): string {\n\n\t// the slash-character is our 'default base' as we don't\n\t// support constructing URIs relative to other URIs. This\n\t// also means that we alter and potentially break paths.\n\t// see https://tools.ietf.org/html/rfc3986#section-5.1.4\n\tswitch (scheme) {\n\t\tcase 'https':\n\t\tcase 'http':\n\t\tcase 'file':\n\t\t\tif (!path) {\n\t\t\t\tpath = _slash;\n\t\t\t} else if (path[0] !== _slash) {\n\t\t\t\tpath = _slash + path;\n\t\t\t}\n\t\t\tbreak;\n\t}\n\treturn path;\n}\n\nconst _empty = '';\nconst _slash = '/';\nconst _regexp = /^(([^:/?#]+?):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?/;\n\n/**\n * Uniform Resource Identifier (URI) http://tools.ietf.org/html/rfc3986.\n * This class is a simple parser which creates the basic component parts\n * (http://tools.ietf.org/html/rfc3986#section-3) with minimal validation\n * and encoding.\n *\n * ```txt\n *       foo://example.com:8042/over/there?name=ferret#nose\n *       \\_/   \\______________/\\_________/ \\_________/ \\__/\n *        |           |            |            |        |\n *     scheme     authority       path        query   fragment\n *        |   _____________________|__\n *       / \\ /                        \\\n *       urn:example:animal:ferret:nose\n * ```\n */\nexport class URI implements UriComponents {\n\n\tstatic isUri(thing: any): thing is URI {\n\t\tif (thing instanceof URI) {\n\t\t\treturn true;\n\t\t}\n\t\tif (!thing) {\n\t\t\treturn false;\n\t\t}\n\t\treturn typeof (<URI>thing).authority === 'string'\n\t\t\t&& typeof (<URI>thing).fragment === 'string'\n\t\t\t&& typeof (<URI>thing).path === 'string'\n\t\t\t&& typeof (<URI>thing).query === 'string'\n\t\t\t&& typeof (<URI>thing).scheme === 'string'\n\t\t\t&& typeof (<URI>thing).fsPath === 'string'\n\t\t\t&& typeof (<URI>thing).with === 'function'\n\t\t\t&& typeof (<URI>thing).toString === 'function';\n\t}\n\n\t/**\n\t * scheme is the 'http' part of 'http://www.example.com/some/path?query#fragment'.\n\t * The part before the first colon.\n\t */\n\treadonly scheme: string;\n\n\t/**\n\t * authority is the 'www.example.com' part of 'http://www.example.com/some/path?query#fragment'.\n\t * The part between the first double slashes and the next slash.\n\t */\n\treadonly authority: string;\n\n\t/**\n\t * path is the '/some/path' part of 'http://www.example.com/some/path?query#fragment'.\n\t */\n\treadonly path: string;\n\n\t/**\n\t * query is the 'query' part of 'http://www.example.com/some/path?query#fragment'.\n\t */\n\treadonly query: string;\n\n\t/**\n\t * fragment is the 'fragment' part of 'http://www.example.com/some/path?query#fragment'.\n\t */\n\treadonly fragment: string;\n\n\t/**\n\t * @internal\n\t */\n\tprotected constructor(scheme: string, authority?: string, path?: string, query?: string, fragment?: string, _strict?: boolean);\n\n\t/**\n\t * @internal\n\t */\n\tprotected constructor(components: UriComponents);\n\n\t/**\n\t * @internal\n\t */\n\tprotected constructor(schemeOrData: string | UriComponents, authority?: string, path?: string, query?: string, fragment?: string, _strict: boolean = false) {\n\n\t\tif (typeof schemeOrData === 'object') {\n\t\t\tthis.scheme = schemeOrData.scheme || _empty;\n\t\t\tthis.authority = schemeOrData.authority || _empty;\n\t\t\tthis.path = schemeOrData.path || _empty;\n\t\t\tthis.query = schemeOrData.query || _empty;\n\t\t\tthis.fragment = schemeOrData.fragment || _empty;\n\t\t\t// no validation because it's this URI\n\t\t\t// that creates uri components.\n\t\t\t// _validateUri(this);\n\t\t} else {\n\t\t\tthis.scheme = _schemeFix(schemeOrData, _strict);\n\t\t\tthis.authority = authority || _empty;\n\t\t\tthis.path = _referenceResolution(this.scheme, path || _empty);\n\t\t\tthis.query = query || _empty;\n\t\t\tthis.fragment = fragment || _empty;\n\n\t\t\t_validateUri(this, _strict);\n\t\t}\n\t}\n\n\t// ---- filesystem path -----------------------\n\n\t/**\n\t * Returns a string representing the corresponding file system path of this URI.\n\t * Will handle UNC paths, normalizes windows drive letters to lower-case, and uses the\n\t * platform specific path separator.\n\t *\n\t * * Will *not* validate the path for invalid characters and semantics.\n\t * * Will *not* look at the scheme of this URI.\n\t * * The result shall *not* be used for display purposes but for accessing a file on disk.\n\t *\n\t *\n\t * The *difference* to `URI#path` is the use of the platform specific separator and the handling\n\t * of UNC paths. See the below sample of a file-uri with an authority (UNC path).\n\t *\n\t * ```ts\n\t\tconst u = URI.parse('file://server/c$/folder/file.txt')\n\t\tu.authority === 'server'\n\t\tu.path === '/shares/c$/file.txt'\n\t\tu.fsPath === '\\\\server\\c$\\folder\\file.txt'\n\t```\n\t *\n\t * Using `URI#path` to read a file (using fs-apis) would not be enough because parts of the path,\n\t * namely the server name, would be missing. Therefore `URI#fsPath` exists - it's sugar to ease working\n\t * with URIs that represent files on disk (`file` scheme).\n\t */\n\tget fsPath(): string {\n\t\t// if (this.scheme !== 'file') {\n\t\t// \tconsole.warn(`[UriError] calling fsPath with scheme ${this.scheme}`);\n\t\t// }\n\t\treturn uriToFsPath(this, false);\n\t}\n\n\t// ---- modify to new -------------------------\n\n\twith(change: { scheme?: string; authority?: string | null; path?: string | null; query?: string | null; fragment?: string | null }): URI {\n\n\t\tif (!change) {\n\t\t\treturn this;\n\t\t}\n\n\t\tlet { scheme, authority, path, query, fragment } = change;\n\t\tif (scheme === undefined) {\n\t\t\tscheme = this.scheme;\n\t\t} else if (scheme === null) {\n\t\t\tscheme = _empty;\n\t\t}\n\t\tif (authority === undefined) {\n\t\t\tauthority = this.authority;\n\t\t} else if (authority === null) {\n\t\t\tauthority = _empty;\n\t\t}\n\t\tif (path === undefined) {\n\t\t\tpath = this.path;\n\t\t} else if (path === null) {\n\t\t\tpath = _empty;\n\t\t}\n\t\tif (query === undefined) {\n\t\t\tquery = this.query;\n\t\t} else if (query === null) {\n\t\t\tquery = _empty;\n\t\t}\n\t\tif (fragment === undefined) {\n\t\t\tfragment = this.fragment;\n\t\t} else if (fragment === null) {\n\t\t\tfragment = _empty;\n\t\t}\n\n\t\tif (scheme === this.scheme\n\t\t\t&& authority === this.authority\n\t\t\t&& path === this.path\n\t\t\t&& query === this.query\n\t\t\t&& fragment === this.fragment) {\n\n\t\t\treturn this;\n\t\t}\n\n\t\treturn new Uri(scheme, authority, path, query, fragment);\n\t}\n\n\t// ---- parse & validate ------------------------\n\n\t/**\n\t * Creates a new URI from a string, e.g. `http://www.example.com/some/path`,\n\t * `file:///usr/home`, or `scheme:with/path`.\n\t *\n\t * @param value A string which represents an URI (see `URI#toString`).\n\t */\n\tstatic parse(value: string, _strict: boolean = false): URI {\n\t\tconst match = _regexp.exec(value);\n\t\tif (!match) {\n\t\t\treturn new Uri(_empty, _empty, _empty, _empty, _empty);\n\t\t}\n\t\treturn new Uri(\n\t\t\tmatch[2] || _empty,\n\t\t\tpercentDecode(match[4] || _empty),\n\t\t\tpercentDecode(match[5] || _empty),\n\t\t\tpercentDecode(match[7] || _empty),\n\t\t\tpercentDecode(match[9] || _empty),\n\t\t\t_strict\n\t\t);\n\t}\n\n\t/**\n\t * Creates a new URI from a file system path, e.g. `c:\\my\\files`,\n\t * `/usr/home`, or `\\\\server\\share\\some\\path`.\n\t *\n\t * The *difference* between `URI#parse` and `URI#file` is that the latter treats the argument\n\t * as path, not as stringified-uri. E.g. `URI.file(path)` is **not the same as**\n\t * `URI.parse('file://' + path)` because the path might contain characters that are\n\t * interpreted (# and ?). See the following sample:\n\t * ```ts\n\tconst good = URI.file('/coding/c#/project1');\n\tgood.scheme === 'file';\n\tgood.path === '/coding/c#/project1';\n\tgood.fragment === '';\n\tconst bad = URI.parse('file://' + '/coding/c#/project1');\n\tbad.scheme === 'file';\n\tbad.path === '/coding/c'; // path is now broken\n\tbad.fragment === '/project1';\n\t```\n\t *\n\t * @param path A file system path (see `URI#fsPath`)\n\t */\n\tstatic file(path: string): URI {\n\n\t\tlet authority = _empty;\n\n\t\t// normalize to fwd-slashes on windows,\n\t\t// on other systems bwd-slashes are valid\n\t\t// filename character, eg /f\\oo/ba\\r.txt\n\t\tif (isWindows) {\n\t\t\tpath = path.replace(/\\\\/g, _slash);\n\t\t}\n\n\t\t// check for authority as used in UNC shares\n\t\t// or use the path as given\n\t\tif (path[0] === _slash && path[1] === _slash) {\n\t\t\tconst idx = path.indexOf(_slash, 2);\n\t\t\tif (idx === -1) {\n\t\t\t\tauthority = path.substring(2);\n\t\t\t\tpath = _slash;\n\t\t\t} else {\n\t\t\t\tauthority = path.substring(2, idx);\n\t\t\t\tpath = path.substring(idx) || _slash;\n\t\t\t}\n\t\t}\n\n\t\treturn new Uri('file', authority, path, _empty, _empty);\n\t}\n\n\tstatic from(components: { scheme: string; authority?: string; path?: string; query?: string; fragment?: string }): URI {\n\t\tconst result = new Uri(\n\t\t\tcomponents.scheme,\n\t\t\tcomponents.authority,\n\t\t\tcomponents.path,\n\t\t\tcomponents.query,\n\t\t\tcomponents.fragment,\n\t\t);\n\t\t_validateUri(result, true);\n\t\treturn result;\n\t}\n\n\t// ---- printing/externalize ---------------------------\n\n\t/**\n\t * Creates a string representation for this URI. It's guaranteed that calling\n\t * `URI.parse` with the result of this function creates an URI which is equal\n\t * to this URI.\n\t *\n\t * * The result shall *not* be used for display purposes but for externalization or transport.\n\t * * The result will be encoded using the percentage encoding and encoding happens mostly\n\t * ignore the scheme-specific encoding rules.\n\t *\n\t * @param skipEncoding Do not encode the result, default is `false`\n\t */\n\ttoString(skipEncoding: boolean = false): string {\n\t\treturn _asFormatted(this, skipEncoding);\n\t}\n\n\ttoJSON(): UriComponents {\n\t\treturn this;\n\t}\n\n\tstatic revive(data: UriComponents | URI): URI;\n\tstatic revive(data: UriComponents | URI | undefined): URI | undefined;\n\tstatic revive(data: UriComponents | URI | null): URI | null;\n\tstatic revive(data: UriComponents | URI | undefined | null): URI | undefined | null;\n\tstatic revive(data: UriComponents | URI | undefined | null): URI | undefined | null {\n\t\tif (!data) {\n\t\t\treturn <any>data;\n\t\t} else if (data instanceof URI) {\n\t\t\treturn data;\n\t\t} else {\n\t\t\tconst result = new Uri(data);\n\t\t\tresult._formatted = (<UriState>data).external;\n\t\t\tresult._fsPath = (<UriState>data)._sep === _pathSepMarker ? (<UriState>data).fsPath : null;\n\t\t\treturn result;\n\t\t}\n\t}\n}\n\nexport interface UriComponents {\n\tscheme: string;\n\tauthority: string;\n\tpath: string;\n\tquery: string;\n\tfragment: string;\n}\n\ninterface UriState extends UriComponents {\n\t$mid: number;\n\texternal: string;\n\tfsPath: string;\n\t_sep: 1 | undefined;\n}\n\nconst _pathSepMarker = isWindows ? 1 : undefined;\n\n// This class exists so that URI is compatible with vscode.Uri (API).\nclass Uri extends URI {\n\n\t_formatted: string | null = null;\n\t_fsPath: string | null = null;\n\n\toverride get fsPath(): string {\n\t\tif (!this._fsPath) {\n\t\t\tthis._fsPath = uriToFsPath(this, false);\n\t\t}\n\t\treturn this._fsPath;\n\t}\n\n\toverride toString(skipEncoding: boolean = false): string {\n\t\tif (!skipEncoding) {\n\t\t\tif (!this._formatted) {\n\t\t\t\tthis._formatted = _asFormatted(this, false);\n\t\t\t}\n\t\t\treturn this._formatted;\n\t\t} else {\n\t\t\t// we don't cache that\n\t\t\treturn _asFormatted(this, true);\n\t\t}\n\t}\n\n\toverride toJSON(): UriComponents {\n\t\tconst res = <UriState>{\n\t\t\t$mid: 1\n\t\t};\n\t\t// cached state\n\t\tif (this._fsPath) {\n\t\t\tres.fsPath = this._fsPath;\n\t\t\tres._sep = _pathSepMarker;\n\t\t}\n\t\tif (this._formatted) {\n\t\t\tres.external = this._formatted;\n\t\t}\n\t\t// uri components\n\t\tif (this.path) {\n\t\t\tres.path = this.path;\n\t\t}\n\t\tif (this.scheme) {\n\t\t\tres.scheme = this.scheme;\n\t\t}\n\t\tif (this.authority) {\n\t\t\tres.authority = this.authority;\n\t\t}\n\t\tif (this.query) {\n\t\t\tres.query = this.query;\n\t\t}\n\t\tif (this.fragment) {\n\t\t\tres.fragment = this.fragment;\n\t\t}\n\t\treturn res;\n\t}\n}\n\n// reserved characters: https://tools.ietf.org/html/rfc3986#section-2.2\nconst encodeTable: { [ch: number]: string } = {\n\t[CharCode.Colon]: '%3A', // gen-delims\n\t[CharCode.Slash]: '%2F',\n\t[CharCode.QuestionMark]: '%3F',\n\t[CharCode.Hash]: '%23',\n\t[CharCode.OpenSquareBracket]: '%5B',\n\t[CharCode.CloseSquareBracket]: '%5D',\n\t[CharCode.AtSign]: '%40',\n\n\t[CharCode.ExclamationMark]: '%21', // sub-delims\n\t[CharCode.DollarSign]: '%24',\n\t[CharCode.Ampersand]: '%26',\n\t[CharCode.SingleQuote]: '%27',\n\t[CharCode.OpenParen]: '%28',\n\t[CharCode.CloseParen]: '%29',\n\t[CharCode.Asterisk]: '%2A',\n\t[CharCode.Plus]: '%2B',\n\t[CharCode.Comma]: '%2C',\n\t[CharCode.Semicolon]: '%3B',\n\t[CharCode.Equals]: '%3D',\n\n\t[CharCode.Space]: '%20',\n};\n\nfunction encodeURIComponentFast(uriComponent: string, isPath: boolean, isAuthority: boolean): string {\n\tlet res: string | undefined = undefined;\n\tlet nativeEncodePos = -1;\n\n\tfor (let pos = 0; pos < uriComponent.length; pos++) {\n\t\tconst code = uriComponent.charCodeAt(pos);\n\n\t\t// unreserved characters: https://tools.ietf.org/html/rfc3986#section-2.3\n\t\tif (\n\t\t\t(code >= CharCode.a && code <= CharCode.z)\n\t\t\t|| (code >= CharCode.A && code <= CharCode.Z)\n\t\t\t|| (code >= CharCode.Digit0 && code <= CharCode.Digit9)\n\t\t\t|| code === CharCode.Dash\n\t\t\t|| code === CharCode.Period\n\t\t\t|| code === CharCode.Underline\n\t\t\t|| code === CharCode.Tilde\n\t\t\t|| (isPath && code === CharCode.Slash)\n\t\t\t|| (isAuthority && code === CharCode.OpenSquareBracket)\n\t\t\t|| (isAuthority && code === CharCode.CloseSquareBracket)\n\t\t\t|| (isAuthority && code === CharCode.Colon)\n\t\t) {\n\t\t\t// check if we are delaying native encode\n\t\t\tif (nativeEncodePos !== -1) {\n\t\t\t\tres += encodeURIComponent(uriComponent.substring(nativeEncodePos, pos));\n\t\t\t\tnativeEncodePos = -1;\n\t\t\t}\n\t\t\t// check if we write into a new string (by default we try to return the param)\n\t\t\tif (res !== undefined) {\n\t\t\t\tres += uriComponent.charAt(pos);\n\t\t\t}\n\n\t\t} else {\n\t\t\t// encoding needed, we need to allocate a new string\n\t\t\tif (res === undefined) {\n\t\t\t\tres = uriComponent.substr(0, pos);\n\t\t\t}\n\n\t\t\t// check with default table first\n\t\t\tconst escaped = encodeTable[code];\n\t\t\tif (escaped !== undefined) {\n\n\t\t\t\t// check if we are delaying native encode\n\t\t\t\tif (nativeEncodePos !== -1) {\n\t\t\t\t\tres += encodeURIComponent(uriComponent.substring(nativeEncodePos, pos));\n\t\t\t\t\tnativeEncodePos = -1;\n\t\t\t\t}\n\n\t\t\t\t// append escaped variant to result\n\t\t\t\tres += escaped;\n\n\t\t\t} else if (nativeEncodePos === -1) {\n\t\t\t\t// use native encode only when needed\n\t\t\t\tnativeEncodePos = pos;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (nativeEncodePos !== -1) {\n\t\tres += encodeURIComponent(uriComponent.substring(nativeEncodePos));\n\t}\n\n\treturn res !== undefined ? res : uriComponent;\n}\n\nfunction encodeURIComponentMinimal(path: string): string {\n\tlet res: string | undefined = undefined;\n\tfor (let pos = 0; pos < path.length; pos++) {\n\t\tconst code = path.charCodeAt(pos);\n\t\tif (code === CharCode.Hash || code === CharCode.QuestionMark) {\n\t\t\tif (res === undefined) {\n\t\t\t\tres = path.substr(0, pos);\n\t\t\t}\n\t\t\tres += encodeTable[code];\n\t\t} else {\n\t\t\tif (res !== undefined) {\n\t\t\t\tres += path[pos];\n\t\t\t}\n\t\t}\n\t}\n\treturn res !== undefined ? res : path;\n}\n\n/**\n * Compute `fsPath` for the given uri\n */\nexport function uriToFsPath(uri: URI, keepDriveLetterCasing: boolean): string {\n\n\tlet value: string;\n\tif (uri.authority && uri.path.length > 1 && uri.scheme === 'file') {\n\t\t// unc path: file://shares/c$/far/boo\n\t\tvalue = `//${uri.authority}${uri.path}`;\n\t} else if (\n\t\turi.path.charCodeAt(0) === CharCode.Slash\n\t\t&& (uri.path.charCodeAt(1) >= CharCode.A && uri.path.charCodeAt(1) <= CharCode.Z || uri.path.charCodeAt(1) >= CharCode.a && uri.path.charCodeAt(1) <= CharCode.z)\n\t\t&& uri.path.charCodeAt(2) === CharCode.Colon\n\t) {\n\t\tif (!keepDriveLetterCasing) {\n\t\t\t// windows drive letter: file:///c:/far/boo\n\t\t\tvalue = uri.path[1].toLowerCase() + uri.path.substr(2);\n\t\t} else {\n\t\t\tvalue = uri.path.substr(1);\n\t\t}\n\t} else {\n\t\t// other path\n\t\tvalue = uri.path;\n\t}\n\tif (isWindows) {\n\t\tvalue = value.replace(/\\//g, '\\\\');\n\t}\n\treturn value;\n}\n\n/**\n * Create the external version of a uri\n */\nfunction _asFormatted(uri: URI, skipEncoding: boolean): string {\n\n\tconst encoder = !skipEncoding\n\t\t? encodeURIComponentFast\n\t\t: encodeURIComponentMinimal;\n\n\tlet res = '';\n\tlet { scheme, authority, path, query, fragment } = uri;\n\tif (scheme) {\n\t\tres += scheme;\n\t\tres += ':';\n\t}\n\tif (authority || scheme === 'file') {\n\t\tres += _slash;\n\t\tres += _slash;\n\t}\n\tif (authority) {\n\t\tlet idx = authority.indexOf('@');\n\t\tif (idx !== -1) {\n\t\t\t// <user>@<auth>\n\t\t\tconst userinfo = authority.substr(0, idx);\n\t\t\tauthority = authority.substr(idx + 1);\n\t\t\tidx = userinfo.lastIndexOf(':');\n\t\t\tif (idx === -1) {\n\t\t\t\tres += encoder(userinfo, false, false);\n\t\t\t} else {\n\t\t\t\t// <user>:<pass>@<auth>\n\t\t\t\tres += encoder(userinfo.substr(0, idx), false, false);\n\t\t\t\tres += ':';\n\t\t\t\tres += encoder(userinfo.substr(idx + 1), false, true);\n\t\t\t}\n\t\t\tres += '@';\n\t\t}\n\t\tauthority = authority.toLowerCase();\n\t\tidx = authority.lastIndexOf(':');\n\t\tif (idx === -1) {\n\t\t\tres += encoder(authority, false, true);\n\t\t} else {\n\t\t\t// <auth>:<port>\n\t\t\tres += encoder(authority.substr(0, idx), false, true);\n\t\t\tres += authority.substr(idx);\n\t\t}\n\t}\n\tif (path) {\n\t\t// lower-case windows drive letters in /C:/fff or C:/fff\n\t\tif (path.length >= 3 && path.charCodeAt(0) === CharCode.Slash && path.charCodeAt(2) === CharCode.Colon) {\n\t\t\tconst code = path.charCodeAt(1);\n\t\t\tif (code >= CharCode.A && code <= CharCode.Z) {\n\t\t\t\tpath = `/${String.fromCharCode(code + 32)}:${path.substr(3)}`; // \"/c:\".length === 3\n\t\t\t}\n\t\t} else if (path.length >= 2 && path.charCodeAt(1) === CharCode.Colon) {\n\t\t\tconst code = path.charCodeAt(0);\n\t\t\tif (code >= CharCode.A && code <= CharCode.Z) {\n\t\t\t\tpath = `${String.fromCharCode(code + 32)}:${path.substr(2)}`; // \"/c:\".length === 3\n\t\t\t}\n\t\t}\n\t\t// encode the rest of the path\n\t\tres += encoder(path, true, false);\n\t}\n\tif (query) {\n\t\tres += '?';\n\t\tres += encoder(query, false, false);\n\t}\n\tif (fragment) {\n\t\tres += '#';\n\t\tres += !skipEncoding ? encodeURIComponentFast(fragment, false, false) : fragment;\n\t}\n\treturn res;\n}\n\n// --- decode\n\nfunction decodeURIComponentGraceful(str: string): string {\n\ttry {\n\t\treturn decodeURIComponent(str);\n\t} catch {\n\t\tif (str.length > 3) {\n\t\t\treturn str.substr(0, 3) + decodeURIComponentGraceful(str.substr(3));\n\t\t} else {\n\t\t\treturn str;\n\t\t}\n\t}\n}\n\nconst _rEncodedAsHex = /(%[0-9A-Za-z][0-9A-Za-z])+/g;\n\nfunction percentDecode(str: string): string {\n\tif (!str.match(_rEncodedAsHex)) {\n\t\treturn str;\n\t}\n\treturn str.replace(_rEncodedAsHex, (match) => decodeURIComponentGraceful(match));\n}\n\n/**\n * Mapped-type that replaces all occurrences of URI with UriComponents\n */\nexport type UriDto<T> = { [K in keyof T]: T[K] extends URI\n\t? UriComponents\n\t: UriDto<T[K]> };\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport { CharCode } from './charCode';\nimport { URI } from './uri';\nimport * as nodePath from 'path';\n\nconst posixPath = nodePath.posix || nodePath;\nconst slash = '/';\n\nexport namespace Utils {\n\n    /**\n     * Joins one or more input paths to the path of URI. \n     * '/' is used as the directory separation character. \n     * \n     * The resolved path will be normalized. That means:\n     *  - all '..' and '.' segments are resolved.\n     *  - multiple, sequential occurences of '/' are replaced by a single instance of '/'.\n     *  - trailing separators are preserved.\n     * \n     * @param uri The input URI.\n     * @param paths The paths to be joined with the path of URI.\n     * @returns A URI with the joined path. All other properties of the URI (scheme, authority, query, fragments, ...) will be taken from the input URI.\n     */\n    export function joinPath(uri: URI, ...paths: string[]): URI {\n        return uri.with({ path: posixPath.join(uri.path, ...paths) });\n    }\n\n\n    /**\n     * Resolves one or more paths against the path of a URI. \n     * '/' is used as the directory separation character. \n     * \n     * The resolved path will be normalized. That means:\n     *  - all '..' and '.' segments are resolved. \n     *  - multiple, sequential occurences of '/' are replaced by a single instance of '/'.\n     *  - trailing separators are removed.\n     * \n     * @param uri The input URI.\n     * @param paths The paths to resolve against the path of URI.\n     * @returns A URI with the resolved path. All other properties of the URI (scheme, authority, query, fragments, ...) will be taken from the input URI.\n     */\n    export function resolvePath(uri: URI, ...paths: string[]): URI {\n        let path = uri.path; \n        let slashAdded = false;\n        if (path[0] !== slash) {\n            path = slash + path; // make the path abstract: for posixPath.resolve the first segments has to be absolute or cwd is used.\n            slashAdded = true;\n        }\n        let resolvedPath = posixPath.resolve(path, ...paths);\n        if (slashAdded && resolvedPath[0] === slash && !uri.authority) {\n            resolvedPath = resolvedPath.substring(1);\n        }\n        return uri.with({ path: resolvedPath });\n    }\n\n    /**\n     * Returns a URI where the path is the directory name of the input uri, similar to the Unix dirname command. \n     * In the path, '/' is recognized as the directory separation character. Trailing directory separators are ignored.\n     * The orignal URI is returned if the URIs path is empty or does not contain any path segments.\n     * \n     * @param uri The input URI.\n     * @return The last segment of the URIs path.\n     */\n    export function dirname(uri: URI): URI {\n        if (uri.path.length === 0 || uri.path === slash) {\n            return uri;\n        }\n        let path = posixPath.dirname(uri.path);\n        if (path.length === 1 && path.charCodeAt(0) === CharCode.Period) {\n            path = '';\n        }\n        return uri.with({ path });\n    }\n\n    /**\n     * Returns the last segment of the path of a URI, similar to the Unix basename command. \n     * In the path, '/' is recognized as the directory separation character. Trailing directory separators are ignored.\n     * The empty string is returned if the URIs path is empty or does not contain any path segments.\n     * \n     * @param uri The input URI.\n     * @return The base name of the URIs path.\n     */\n    export function basename(uri: URI): string {\n        return posixPath.basename(uri.path);\n    }\n\n    /**\n     * Returns the extension name of the path of a URI, similar to the Unix extname command. \n     * In the path, '/' is recognized as the directory separation character. Trailing directory separators are ignored.\n     * The empty string is returned if the URIs path is empty or does not contain any path segments.\n     * \n     * @param uri The input URI.\n     * @return The extension name of the URIs path.\n     */\n    export function extname(uri: URI): string {\n        return posixPath.extname(uri.path);\n    }\n}","/******************************************************************************\n * Copyright 2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport { URI, Utils } from 'vscode-uri';\n\nexport { URI };\n\nexport namespace UriUtils {\n\n    export const basename = Utils.basename;\n    export const dirname = Utils.dirname;\n    export const extname = Utils.extname;\n    export const joinPath = Utils.joinPath;\n    export const resolvePath = Utils.resolvePath;\n\n    export function equals(a?: URI | string, b?: URI | string): boolean {\n        return a?.toString() === b?.toString();\n    }\n\n    export function relative(from: URI | string, to: URI | string): string {\n        const fromPath = typeof from === 'string' ? from : from.path;\n        const toPath = typeof to === 'string' ? to : to.path;\n        const fromParts = fromPath.split('/').filter(e => e.length > 0);\n        const toParts = toPath.split('/').filter(e => e.length > 0);\n        let i = 0;\n        for (; i < fromParts.length; i++) {\n            if (fromParts[i] !== toParts[i]) {\n                break;\n            }\n        }\n        const backPart = '../'.repeat(fromParts.length - i);\n        const toPart = toParts.slice(i).join('/');\n        return backPart + toPart;\n    }\n\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n/**\n * Re-export 'TextDocument' from 'vscode-languageserver-textdocument' for convenience,\n *  including both type _and_ symbol (namespace), as we here and there also refer to the symbol,\n *  the overhead is very small, just a few kilobytes.\n * Everything else of that package (at the time contributing) is also defined\n *  in 'vscode-languageserver-protocol' or 'vscode-languageserver-types'.\n */\nexport { TextDocument } from 'vscode-languageserver-textdocument';\n\nimport type { Diagnostic, Range } from 'vscode-languageserver-types';\nimport type { FileSystemProvider } from './file-system-provider.js';\nimport type { ParseResult } from '../parser/langium-parser.js';\nimport type { ServiceRegistry } from '../service-registry.js';\nimport type { LangiumSharedCoreServices } from '../services.js';\nimport type { AstNode, AstNodeDescription, Mutable, Reference } from '../syntax-tree.js';\nimport type { MultiMap } from '../utils/collections.js';\nimport type { Stream } from '../utils/stream.js';\nimport { TextDocument } from './documents.js';\nimport { CancellationToken } from '../utils/cancellation.js';\nimport { stream } from '../utils/stream.js';\nimport { URI } from '../utils/uri-utils.js';\n\n/**\n * A Langium document holds the parse result (AST and CST) and any additional state that is derived\n * from the AST, e.g. the result of scope precomputation.\n */\nexport interface LangiumDocument<T extends AstNode = AstNode> {\n    /** The Uniform Resource Identifier (URI) of the document */\n    readonly uri: URI;\n    /** The text document used to convert between offsets and positions */\n    readonly textDocument: TextDocument;\n    /** The current state of the document */\n    state: DocumentState;\n    /** The parse result holds the Abstract Syntax Tree (AST) and potentially also parser / lexer errors */\n    parseResult: ParseResult<T>;\n    /** Result of the scope precomputation phase */\n    precomputedScopes?: PrecomputedScopes;\n    /** An array of all cross-references found in the AST while linking */\n    references: Reference[];\n    /** Result of the validation phase */\n    diagnostics?: Diagnostic[]\n}\n\n/**\n * A document is subject to several phases that are run in predefined order. Any state value implies that\n * smaller state values are finished as well.\n */\nexport enum DocumentState {\n    /**\n     * The text content has changed and needs to be parsed again. The AST held by this outdated\n     * document instance is no longer valid.\n     */\n    Changed = 0,\n    /**\n     * An AST has been created from the text content. The document structure can be traversed,\n     * but cross-references cannot be resolved yet. If necessary, the structure can be manipulated\n     * at this stage as a preprocessing step.\n     */\n    Parsed = 1,\n    /**\n     * The `IndexManager` service has processed AST nodes of this document. This means the\n     * exported symbols are available in the global scope and can be resolved from other documents.\n     */\n    IndexedContent = 2,\n    /**\n     * The `ScopeComputation` service has processed this document. This means the local symbols\n     * are stored in a MultiMap so they can be looked up by the `ScopeProvider` service.\n     * Once a document has reached this state, you may follow every reference - it will lazily\n     * resolve its `ref` property and yield either the target AST node or `undefined` in case\n     * the target is not in scope.\n     */\n    ComputedScopes = 3,\n    /**\n     * The `Linker` service has processed this document. All outgoing references have been\n     * resolved or marked as erroneous.\n     */\n    Linked = 4,\n    /**\n     * The `IndexManager` service has processed AST node references of this document. This is\n     * necessary to determine which documents are affected by a change in one of the workspace\n     * documents.\n     */\n    IndexedReferences = 5,\n    /**\n     * The `DocumentValidator` service has processed this document. The language server listens\n     * to the results of this phase and sends diagnostics to the client.\n     */\n    Validated = 6\n}\n\n/**\n * Result of the scope precomputation phase (`ScopeComputation` service).\n * It maps every AST node to the set of symbols that are visible in the subtree of that node.\n */\nexport type PrecomputedScopes = MultiMap<AstNode, AstNodeDescription>\n\nexport interface DocumentSegment {\n    readonly range: Range\n    readonly offset: number\n    readonly length: number\n    readonly end: number\n}\n\n/**\n * Surrogate definition of the `TextDocuments` interface from the `vscode-languageserver` package.\n * No implementation object is expected to be offered by `LangiumCoreServices`, but only by `LangiumLSPServices`.\n */\nexport type TextDocumentProvider = {\n    get(uri: string): TextDocument | undefined\n}\n\n/**\n * Shared service for creating `LangiumDocument` instances.\n *\n * Register a custom implementation if special (additional) behavior is required for your language(s).\n * Note: If you specialize {@link fromString} or {@link fromTextDocument} you probably might want to\n * specialize {@link update}, too!\n */\nexport interface LangiumDocumentFactory {\n    /**\n     * Create a Langium document from a `TextDocument` (usually associated with a file).\n     */\n    fromTextDocument<T extends AstNode = AstNode>(textDocument: TextDocument, uri?: URI): LangiumDocument<T>;\n    /**\n     * Create a Langium document from a `TextDocument` asynchronously. This action can be cancelled if a cancellable parser implementation has been provided.\n     */\n    fromTextDocument<T extends AstNode = AstNode>(textDocument: TextDocument, uri: URI | undefined, cancellationToken: CancellationToken): Promise<LangiumDocument<T>>;\n\n    /**\n     * Create an Langium document from an in-memory string.\n     */\n    fromString<T extends AstNode = AstNode>(text: string, uri: URI): LangiumDocument<T>;\n    /**\n     * Create a Langium document from an in-memory string asynchronously. This action can be cancelled if a cancellable parser implementation has been provided.\n     */\n    fromString<T extends AstNode = AstNode>(text: string, uri: URI, cancellationToken: CancellationToken): Promise<LangiumDocument<T>>;\n\n    /**\n     * Create an Langium document from a model that has been constructed in memory.\n     */\n    fromModel<T extends AstNode = AstNode>(model: T, uri: URI): LangiumDocument<T>;\n\n    /**\n     * Create an Langium document from a specified `URI`. The factory will use the `FileSystemAccess` service to read the file.\n     */\n    fromUri<T extends AstNode = AstNode>(uri: URI, cancellationToken?: CancellationToken): Promise<LangiumDocument<T>>;\n\n    /**\n     * Update the given document after changes in the corresponding textual representation.\n     * Method is called by the document builder after it has been requested to build an existing\n     * document and the document's state is {@link DocumentState.Changed}.\n     * The text parsing is expected to be done the same way as in {@link fromTextDocument}\n     * and {@link fromString}.\n     */\n    update<T extends AstNode = AstNode>(document: LangiumDocument<T>, cancellationToken: CancellationToken): Promise<LangiumDocument<T>>\n}\n\nexport class DefaultLangiumDocumentFactory implements LangiumDocumentFactory {\n\n    protected readonly serviceRegistry: ServiceRegistry;\n    protected readonly textDocuments?: TextDocumentProvider;\n    protected readonly fileSystemProvider: FileSystemProvider;\n\n    constructor(services: LangiumSharedCoreServices) {\n        this.serviceRegistry = services.ServiceRegistry;\n        this.textDocuments = services.workspace.TextDocuments;\n        this.fileSystemProvider = services.workspace.FileSystemProvider;\n    }\n\n    async fromUri<T extends AstNode = AstNode>(uri: URI, cancellationToken = CancellationToken.None): Promise<LangiumDocument<T>> {\n        const content = await this.fileSystemProvider.readFile(uri);\n        return this.createAsync<T>(uri, content, cancellationToken);\n    }\n\n    fromTextDocument<T extends AstNode = AstNode>(textDocument: TextDocument, uri?: URI): LangiumDocument<T>;\n    fromTextDocument<T extends AstNode = AstNode>(textDocument: TextDocument, uri: URI | undefined, cancellationToken: CancellationToken): Promise<LangiumDocument<T>>;\n    fromTextDocument<T extends AstNode = AstNode>(textDocument: TextDocument, uri?: URI, cancellationToken?: CancellationToken): LangiumDocument<T> | Promise<LangiumDocument<T>> {\n        uri = uri ?? URI.parse(textDocument.uri);\n        if (cancellationToken) {\n            return this.createAsync<T>(uri, textDocument, cancellationToken);\n        } else {\n            return this.create<T>(uri, textDocument);\n        }\n    }\n\n    fromString<T extends AstNode = AstNode>(text: string, uri: URI): LangiumDocument<T>;\n    fromString<T extends AstNode = AstNode>(text: string, uri: URI, cancellationToken: CancellationToken): Promise<LangiumDocument<T>>;\n    fromString<T extends AstNode = AstNode>(text: string, uri: URI, cancellationToken?: CancellationToken): LangiumDocument<T> | Promise<LangiumDocument<T>> {\n        if (cancellationToken) {\n            return this.createAsync<T>(uri, text, cancellationToken);\n        } else {\n            return this.create<T>(uri, text);\n        }\n    }\n\n    fromModel<T extends AstNode = AstNode>(model: T, uri: URI): LangiumDocument<T> {\n        return this.create<T>(uri, { $model: model });\n    }\n\n    protected create<T extends AstNode = AstNode>(uri: URI, content: string | TextDocument | { $model: T }): LangiumDocument<T> {\n        if (typeof content === 'string') {\n            const parseResult = this.parse<T>(uri, content);\n            return this.createLangiumDocument<T>(parseResult, uri, undefined, content);\n\n        } else if ('$model' in content) {\n            const parseResult = { value: content.$model, parserErrors: [], lexerErrors: [] };\n            return this.createLangiumDocument<T>(parseResult, uri);\n\n        } else {\n            const parseResult = this.parse<T>(uri, content.getText());\n            return this.createLangiumDocument(parseResult, uri, content);\n        }\n    }\n\n    protected async createAsync<T extends AstNode = AstNode>(uri: URI, content: string | TextDocument, cancelToken: CancellationToken): Promise<LangiumDocument<T>> {\n        if (typeof content === 'string') {\n            const parseResult = await this.parseAsync<T>(uri, content, cancelToken);\n            return this.createLangiumDocument<T>(parseResult, uri, undefined, content);\n        } else {\n            const parseResult = await this.parseAsync<T>(uri, content.getText(), cancelToken);\n            return this.createLangiumDocument(parseResult, uri, content);\n        }\n    }\n\n    /**\n     * Create a LangiumDocument from a given parse result.\n     *\n     * A TextDocument is created on demand if it is not provided as argument here. Usually this\n     * should not be necessary because the main purpose of the TextDocument is to convert between\n     * text ranges and offsets, which is done solely in LSP request handling.\n     *\n     * With the introduction of {@link update} below this method is supposed to be mainly called\n     * during workspace initialization and on addition/recognition of new files, while changes in\n     * existing documents are processed via {@link update}.\n     */\n    protected createLangiumDocument<T extends AstNode = AstNode>(parseResult: ParseResult<T>, uri: URI, textDocument?: TextDocument, text?: string): LangiumDocument<T> {\n        let document: LangiumDocument<T>;\n        if (textDocument) {\n            document = {\n                parseResult,\n                uri,\n                state: DocumentState.Parsed,\n                references: [],\n                textDocument\n            };\n        } else {\n            const textDocumentGetter = this.createTextDocumentGetter(uri, text);\n            document = {\n                parseResult,\n                uri,\n                state: DocumentState.Parsed,\n                references: [],\n                get textDocument() {\n                    return textDocumentGetter();\n                }\n            };\n        }\n        (parseResult.value as Mutable<AstNode>).$document = document;\n        return document;\n    }\n\n    async update<T extends AstNode = AstNode>(document: Mutable<LangiumDocument<T>>, cancellationToken: CancellationToken): Promise<LangiumDocument<T>> {\n        // The CST full text property contains the original text that was used to create the AST.\n        const oldText = document.parseResult.value.$cstNode?.root.fullText;\n        const textDocument = this.textDocuments?.get(document.uri.toString());\n        const text = textDocument ? textDocument.getText() : await this.fileSystemProvider.readFile(document.uri);\n\n        if (textDocument) {\n            Object.defineProperty(\n                document,\n                'textDocument',\n                {\n                    value: textDocument\n                }\n            );\n        } else {\n            const textDocumentGetter = this.createTextDocumentGetter(document.uri, text);\n            Object.defineProperty(\n                document,\n                'textDocument',\n                {\n                    get: textDocumentGetter\n                }\n            );\n        }\n\n        // Some of these documents can be pretty large, so parsing them again can be quite expensive.\n        // Therefore, we only parse if the text has actually changed.\n        if (oldText !== text) {\n            document.parseResult = await this.parseAsync(document.uri, text, cancellationToken);\n            (document.parseResult.value as Mutable<AstNode>).$document = document;\n        }\n        document.state = DocumentState.Parsed;\n        return document;\n    }\n\n    protected parse<T extends AstNode>(uri: URI, text: string): ParseResult<T> {\n        const services = this.serviceRegistry.getServices(uri);\n        return services.parser.LangiumParser.parse<T>(text);\n    }\n\n    protected parseAsync<T extends AstNode>(uri: URI, text: string, cancellationToken: CancellationToken): Promise<ParseResult<T>> {\n        const services = this.serviceRegistry.getServices(uri);\n        return services.parser.AsyncParser.parse<T>(text, cancellationToken);\n    }\n\n    protected createTextDocumentGetter(uri: URI, text?: string): () => TextDocument {\n        const serviceRegistry = this.serviceRegistry;\n        let textDoc: TextDocument | undefined = undefined;\n        return () => {\n            return textDoc ??= TextDocument.create(\n                uri.toString(), serviceRegistry.getServices(uri).LanguageMetaData.languageId, 0, text ?? ''\n            );\n        };\n    }\n}\n\n/**\n * Shared service for managing Langium documents.\n */\nexport interface LangiumDocuments {\n\n    /**\n     * A stream of all documents managed under this service.\n     */\n    readonly all: Stream<LangiumDocument>\n\n    /**\n     * Manage a new document under this service.\n     * @throws an error if a document with the same URI is already present.\n     */\n    addDocument(document: LangiumDocument): void;\n\n    /**\n     * Retrieve the document with the given URI, if present. Otherwise returns `undefined`.\n     */\n    getDocument(uri: URI): LangiumDocument | undefined;\n\n    /**\n     * Retrieve the document with the given URI. If not present, a new one will be created using the file system access.\n     * The new document will be added to the list of documents managed under this service.\n     */\n    getOrCreateDocument(uri: URI, cancellationToken?: CancellationToken): Promise<LangiumDocument>;\n\n    /**\n     * Creates a new document with the given URI and text content.\n     * The new document is automatically added to this service and can be retrieved using {@link getDocument}.\n     *\n     * @throws an error if a document with the same URI is already present.\n     */\n    createDocument(uri: URI, text: string): LangiumDocument;\n\n    /**\n     * Creates a new document with the given URI and text content asynchronously.\n     * The process can be interrupted with a cancellation token.\n     * The new document is automatically added to this service and can be retrieved using {@link getDocument}.\n     *\n     * @throws an error if a document with the same URI is already present.\n     */\n    createDocument(uri: URI, text: string, cancellationToken: CancellationToken): Promise<LangiumDocument>;\n\n    /**\n     * Returns `true` if a document with the given URI is managed under this service.\n     */\n    hasDocument(uri: URI): boolean;\n\n    /**\n     * Flag the document with the given URI as `Changed`, if present, meaning that its content\n     * is no longer valid. The content (parseResult) stays untouched, while internal data may\n     * be dropped to reduce memory footprint.\n     *\n     * @returns the affected {@link LangiumDocument} if existing for convenience\n     */\n    invalidateDocument(uri: URI): LangiumDocument | undefined;\n\n    /**\n     * Remove the document with the given URI, if present, and mark it as `Changed`, meaning\n     * that its content is no longer valid. The next call to `getOrCreateDocument` with the same\n     * URI will create a new document instance.\n     *\n     * @returns the affected {@link LangiumDocument} if existing for convenience\n     */\n    deleteDocument(uri: URI): LangiumDocument | undefined;\n}\n\nexport class DefaultLangiumDocuments implements LangiumDocuments {\n\n    protected readonly langiumDocumentFactory: LangiumDocumentFactory;\n\n    protected readonly documentMap: Map<string, LangiumDocument> = new Map();\n\n    constructor(services: LangiumSharedCoreServices) {\n        this.langiumDocumentFactory = services.workspace.LangiumDocumentFactory;\n    }\n\n    get all(): Stream<LangiumDocument> {\n        return stream(this.documentMap.values());\n    }\n\n    addDocument(document: LangiumDocument): void {\n        const uriString = document.uri.toString();\n        if (this.documentMap.has(uriString)) {\n            throw new Error(`A document with the URI '${uriString}' is already present.`);\n        }\n        this.documentMap.set(uriString, document);\n    }\n\n    getDocument(uri: URI): LangiumDocument | undefined {\n        const uriString = uri.toString();\n        return this.documentMap.get(uriString);\n    }\n\n    async getOrCreateDocument(uri: URI, cancellationToken?: CancellationToken): Promise<LangiumDocument> {\n        let document = this.getDocument(uri);\n        if (document) {\n            return document;\n        }\n        document = await this.langiumDocumentFactory.fromUri(uri, cancellationToken);\n        this.addDocument(document);\n        return document;\n    }\n\n    createDocument(uri: URI, text: string): LangiumDocument;\n    createDocument(uri: URI, text: string, cancellationToken: CancellationToken): Promise<LangiumDocument>;\n    createDocument(uri: URI, text: string, cancellationToken?: CancellationToken): LangiumDocument | Promise<LangiumDocument> {\n        if (cancellationToken) {\n            return this.langiumDocumentFactory.fromString(text, uri, cancellationToken).then(document => {\n                this.addDocument(document);\n                return document;\n            });\n        } else {\n            const document = this.langiumDocumentFactory.fromString(text, uri);\n            this.addDocument(document);\n            return document;\n        }\n    }\n\n    hasDocument(uri: URI): boolean {\n        return this.documentMap.has(uri.toString());\n    }\n\n    invalidateDocument(uri: URI): LangiumDocument | undefined {\n        const uriString = uri.toString();\n        const langiumDoc = this.documentMap.get(uriString);\n        if (langiumDoc) {\n            langiumDoc.state = DocumentState.Changed;\n            langiumDoc.precomputedScopes = undefined;\n            langiumDoc.references = [];\n            langiumDoc.diagnostics = undefined;\n        }\n        return langiumDoc;\n    }\n\n    deleteDocument(uri: URI): LangiumDocument | undefined {\n        const uriString = uri.toString();\n        const langiumDoc = this.documentMap.get(uriString);\n        if (langiumDoc) {\n            langiumDoc.state = DocumentState.Changed;\n            this.documentMap.delete(uriString);\n        }\n        return langiumDoc;\n    }\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { LangiumCoreServices } from '../services.js';\nimport type { AstNode, AstNodeDescription, AstReflection, CstNode, LinkingError, Reference, ReferenceInfo } from '../syntax-tree.js';\nimport type { AstNodeLocator } from '../workspace/ast-node-locator.js';\nimport type { LangiumDocument, LangiumDocuments } from '../workspace/documents.js';\nimport type { ScopeProvider } from './scope-provider.js';\nimport { CancellationToken } from '../utils/cancellation.js';\nimport { isAstNode, isAstNodeDescription, isLinkingError } from '../syntax-tree.js';\nimport { getDocument, streamAst, streamReferences } from '../utils/ast-utils.js';\nimport { interruptAndCheck } from '../utils/promise-utils.js';\nimport { DocumentState } from '../workspace/documents.js';\n\n/**\n * Language-specific service for resolving cross-references in the AST.\n */\nexport interface Linker {\n\n    /**\n     * Links all cross-references within the specified document. The default implementation loads only target\n     * elements from documents that are present in the `LangiumDocuments` service. The linked references are\n     * stored in the document's `references` property.\n     *\n     * @param document A LangiumDocument that shall be linked.\n     * @param cancelToken A token for cancelling the operation.\n     */\n    link(document: LangiumDocument, cancelToken?: CancellationToken): Promise<void>;\n\n    /**\n     * Unlinks all references within the specified document and removes them from the list of `references`.\n     *\n     * @param document A LangiumDocument that shall be unlinked.\n     */\n    unlink(document: LangiumDocument): void;\n\n    /**\n     * Determines a candidate AST node description for linking the given reference.\n     *\n     * @param node The AST node containing the reference.\n     * @param refId The reference identifier used to build a scope.\n     * @param reference The actual reference to resolve.\n     */\n    getCandidate(refInfo: ReferenceInfo): AstNodeDescription | LinkingError;\n\n    /**\n     * Creates a cross reference node being aware of its containing AstNode, the corresponding CstNode,\n     * the cross reference text denoting the target AstNode being already extracted of the document text,\n     * as well as the unique cross reference identifier.\n     *\n     * Default behavior:\n     *  - The returned Reference's 'ref' property pointing to the target AstNode is populated lazily on its\n     *    first visit.\n     *  - If the target AstNode cannot be resolved on the first visit, an error indicator will be installed\n     *    and further resolution attempts will *not* be performed.\n     *\n     * @param node The containing AST node\n     * @param refNode The corresponding CST node\n     * @param refId The cross reference identifier like '<entityTypeName>:<propertyName>'\n     * @param refText The cross reference text denoting the target AstNode\n     * @returns the desired Reference node, whose behavior wrt. resolving the cross reference is implementation specific.\n     */\n    buildReference(node: AstNode, property: string, refNode: CstNode | undefined, refText: string): Reference;\n\n}\n\ninterface DefaultReference extends Reference {\n    _ref?: AstNode | LinkingError;\n    _nodeDescription?: AstNodeDescription;\n}\n\nexport class DefaultLinker implements Linker {\n    protected readonly reflection: AstReflection;\n    protected readonly scopeProvider: ScopeProvider;\n    protected readonly astNodeLocator: AstNodeLocator;\n    protected readonly langiumDocuments: () => LangiumDocuments;\n\n    constructor(services: LangiumCoreServices) {\n        this.reflection = services.shared.AstReflection;\n        this.langiumDocuments = () => services.shared.workspace.LangiumDocuments;\n        this.scopeProvider = services.references.ScopeProvider;\n        this.astNodeLocator = services.workspace.AstNodeLocator;\n    }\n\n    async link(document: LangiumDocument, cancelToken = CancellationToken.None): Promise<void> {\n        for (const node of streamAst(document.parseResult.value)) {\n            await interruptAndCheck(cancelToken);\n            streamReferences(node).forEach(ref => this.doLink(ref, document));\n        }\n    }\n\n    protected doLink(refInfo: ReferenceInfo, document: LangiumDocument): void {\n        const ref = refInfo.reference as DefaultReference;\n        // The reference may already have been resolved lazily by accessing its `ref` property.\n        if (ref._ref === undefined) {\n            try {\n                const description = this.getCandidate(refInfo);\n                if (isLinkingError(description)) {\n                    ref._ref = description;\n                } else {\n                    ref._nodeDescription = description;\n                    if (this.langiumDocuments().hasDocument(description.documentUri)) {\n                        // The target document is already loaded\n                        const linkedNode = this.loadAstNode(description);\n                        ref._ref = linkedNode ?? this.createLinkingError(refInfo, description);\n                    }\n                }\n            } catch (err) {\n                ref._ref = {\n                    ...refInfo,\n                    message: `An error occurred while resolving reference to '${ref.$refText}': ${err}`\n                };\n            }\n        }\n        // Add the reference to the document's array of references\n        document.references.push(ref);\n    }\n\n    unlink(document: LangiumDocument): void {\n        for (const ref of document.references) {\n            delete (ref as DefaultReference)._ref;\n            delete (ref as DefaultReference)._nodeDescription;\n        }\n        document.references = [];\n    }\n\n    getCandidate(refInfo: ReferenceInfo): AstNodeDescription | LinkingError {\n        const scope = this.scopeProvider.getScope(refInfo);\n        const description = scope.getElement(refInfo.reference.$refText);\n        return description ?? this.createLinkingError(refInfo);\n    }\n\n    buildReference(node: AstNode, property: string, refNode: CstNode | undefined, refText: string): Reference {\n        // See behavior description in doc of Linker, update that on changes in here.\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const linker = this;\n        const reference: DefaultReference = {\n            $refNode: refNode,\n            $refText: refText,\n\n            get ref() {\n                if (isAstNode(this._ref)) {\n                    // Most frequent case: the target is already resolved.\n                    return this._ref;\n                } else if (isAstNodeDescription(this._nodeDescription)) {\n                    // A candidate has been found before, but it is not loaded yet.\n                    const linkedNode = linker.loadAstNode(this._nodeDescription);\n                    this._ref = linkedNode ??\n                        linker.createLinkingError({ reference, container: node, property }, this._nodeDescription);\n                } else if (this._ref === undefined) {\n                    // The reference has not been linked yet, so do that now.\n                    const refData = linker.getLinkedNode({ reference, container: node, property });\n                    if (refData.error && getDocument(node).state < DocumentState.ComputedScopes) {\n                        // Document scope is not ready, don't set `this._ref` so linker can retry later.\n                        return undefined;\n                    }\n                    this._ref = refData.node ?? refData.error;\n                    this._nodeDescription = refData.descr;\n                }\n                return isAstNode(this._ref) ? this._ref : undefined;\n            },\n            get $nodeDescription() {\n                return this._nodeDescription;\n            },\n            get error() {\n                return isLinkingError(this._ref) ? this._ref : undefined;\n            }\n        };\n        return reference;\n    }\n\n    protected getLinkedNode(refInfo: ReferenceInfo): { node?: AstNode, descr?: AstNodeDescription, error?: LinkingError } {\n        try {\n            const description = this.getCandidate(refInfo);\n            if (isLinkingError(description)) {\n                return { error: description };\n            }\n            const linkedNode = this.loadAstNode(description);\n            if (linkedNode) {\n                return { node: linkedNode, descr: description };\n            }\n            else {\n                return {\n                    descr: description,\n                    error:\n                        this.createLinkingError(refInfo, description)\n                };\n            }\n        } catch (err) {\n            return {\n                error: {\n                    ...refInfo,\n                    message: `An error occurred while resolving reference to '${refInfo.reference.$refText}': ${err}`\n                }\n            };\n        }\n    }\n\n    protected loadAstNode(nodeDescription: AstNodeDescription): AstNode | undefined {\n        if (nodeDescription.node) {\n            return nodeDescription.node;\n        }\n        const doc = this.langiumDocuments().getDocument(nodeDescription.documentUri);\n        if (!doc) {\n            return undefined;\n        }\n        return this.astNodeLocator.getAstNode(doc.parseResult.value, nodeDescription.path);\n    }\n\n    protected createLinkingError(refInfo: ReferenceInfo, targetDescription?: AstNodeDescription): LinkingError {\n        // Check whether the document is sufficiently processed by the DocumentBuilder. If not, this is a hint for a bug\n        // in the language implementation.\n        const document = getDocument(refInfo.container);\n        if (document.state < DocumentState.ComputedScopes) {\n            console.warn(`Attempted reference resolution before document reached ComputedScopes state (${document.uri}).`);\n        }\n        const referenceType = this.reflection.getReferenceType(refInfo);\n        return {\n            ...refInfo,\n            message: `Could not resolve reference to ${referenceType} named '${refInfo.reference.$refText}'.`,\n            targetDescription\n        };\n    }\n\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { AstNode, CstNode } from '../syntax-tree.js';\nimport { findNodeForProperty } from '../utils/grammar-utils.js';\n\nexport interface NamedAstNode extends AstNode {\n    name: string;\n}\n\nexport function isNamed(node: AstNode): node is NamedAstNode {\n    return typeof (node as NamedAstNode).name === 'string';\n}\n\n/**\n * Utility service for retrieving the `name` of an `AstNode` or the `CstNode` containing a `name`.\n */\nexport interface NameProvider {\n    /**\n     * Returns the `name` of a given AstNode.\n     * @param node Specified `AstNode` whose name node shall be retrieved.\n     */\n    getName(node: AstNode): string | undefined;\n    /**\n     * Returns the `CstNode` which contains the parsed value of the `name` assignment.\n     * @param node Specified `AstNode` whose name node shall be retrieved.\n     */\n    getNameNode(node: AstNode): CstNode | undefined;\n}\n\nexport class DefaultNameProvider implements NameProvider {\n    getName(node: AstNode): string | undefined {\n        if (isNamed(node)) {\n            return node.name;\n        }\n        return undefined;\n    }\n\n    getNameNode(node: AstNode): CstNode | undefined {\n        return findNodeForProperty(node.$cstNode, 'name');\n    }\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { LangiumCoreServices } from '../services.js';\nimport type { AstNode, CstNode, GenericAstNode } from '../syntax-tree.js';\nimport type { Stream } from '../utils/stream.js';\nimport type { ReferenceDescription } from '../workspace/ast-descriptions.js';\nimport type { AstNodeLocator } from '../workspace/ast-node-locator.js';\nimport type { IndexManager } from '../workspace/index-manager.js';\nimport type { NameProvider } from './name-provider.js';\nimport type { URI } from '../utils/uri-utils.js';\nimport { findAssignment } from '../utils/grammar-utils.js';\nimport { isReference } from '../syntax-tree.js';\nimport { getDocument } from '../utils/ast-utils.js';\nimport { isChildNode, toDocumentSegment } from '../utils/cst-utils.js';\nimport { stream } from '../utils/stream.js';\nimport { UriUtils } from '../utils/uri-utils.js';\n\n/**\n * Language-specific service for finding references and declaration of a given `CstNode`.\n */\nexport interface References {\n\n    /**\n     * If the CstNode is a reference node the target CstNode will be returned.\n     * If the CstNode is a significant node of the CstNode this CstNode will be returned.\n     *\n     * @param sourceCstNode CstNode that points to a AstNode\n     */\n    findDeclaration(sourceCstNode: CstNode): AstNode | undefined;\n\n    /**\n     * If the CstNode is a reference node the target CstNode will be returned.\n     * If the CstNode is a significant node of the CstNode this CstNode will be returned.\n     *\n     * @param sourceCstNode CstNode that points to a AstNode\n     */\n    findDeclarationNode(sourceCstNode: CstNode): CstNode | undefined;\n\n    /**\n     * Finds all references to the target node as references (local references) or reference descriptions.\n     *\n     * @param targetNode Specified target node whose references should be returned\n     */\n    findReferences(targetNode: AstNode, options: FindReferencesOptions): Stream<ReferenceDescription>;\n}\n\nexport interface FindReferencesOptions {\n    /**\n     * @deprecated Since v1.2.0. Please use `documentUri` instead.\n     */\n    onlyLocal?: boolean;\n    /**\n     * When set, the `findReferences` method will only return references/declarations from the specified document.\n     */\n    documentUri?: URI;\n    /**\n     * Whether the returned list of references should include the declaration.\n     */\n    includeDeclaration?: boolean;\n}\n\nexport class DefaultReferences implements References {\n    protected readonly nameProvider: NameProvider;\n    protected readonly index: IndexManager;\n    protected readonly nodeLocator: AstNodeLocator;\n\n    constructor(services: LangiumCoreServices) {\n        this.nameProvider = services.references.NameProvider;\n        this.index = services.shared.workspace.IndexManager;\n        this.nodeLocator = services.workspace.AstNodeLocator;\n    }\n\n    findDeclaration(sourceCstNode: CstNode): AstNode | undefined {\n        if (sourceCstNode) {\n            const assignment = findAssignment(sourceCstNode);\n            const nodeElem = sourceCstNode.astNode;\n            if (assignment && nodeElem) {\n                const reference = (nodeElem as GenericAstNode)[assignment.feature];\n\n                if (isReference(reference)) {\n                    return reference.ref;\n                } else if (Array.isArray(reference)) {\n                    for (const ref of reference) {\n                        if (isReference(ref) && ref.$refNode\n                            && ref.$refNode.offset <= sourceCstNode.offset\n                            && ref.$refNode.end >= sourceCstNode.end) {\n                            return ref.ref;\n                        }\n                    }\n                }\n            }\n            if (nodeElem) {\n                const nameNode = this.nameProvider.getNameNode(nodeElem);\n                // Only return the targeted node in case the targeted cst node is the name node or part of it\n                if (nameNode && (nameNode === sourceCstNode || isChildNode(sourceCstNode, nameNode))) {\n                    return nodeElem;\n                }\n            }\n        }\n        return undefined;\n    }\n\n    findDeclarationNode(sourceCstNode: CstNode): CstNode | undefined {\n        const astNode = this.findDeclaration(sourceCstNode);\n        if (astNode?.$cstNode) {\n            const targetNode = this.nameProvider.getNameNode(astNode);\n            return targetNode ?? astNode.$cstNode;\n        }\n        return undefined;\n    }\n\n    findReferences(targetNode: AstNode, options: FindReferencesOptions): Stream<ReferenceDescription> {\n        const refs: ReferenceDescription[] = [];\n        if (options.includeDeclaration) {\n            const ref = this.getReferenceToSelf(targetNode);\n            if (ref) {\n                refs.push(ref);\n            }\n        }\n        let indexReferences = this.index.findAllReferences(targetNode, this.nodeLocator.getAstNodePath(targetNode));\n        if (options.documentUri) {\n            indexReferences = indexReferences.filter(ref => UriUtils.equals(ref.sourceUri, options.documentUri));\n        }\n        refs.push(...indexReferences);\n        return stream(refs);\n    }\n\n    protected getReferenceToSelf(targetNode: AstNode): ReferenceDescription | undefined {\n        const nameNode = this.nameProvider.getNameNode(targetNode);\n        if (nameNode) {\n            const doc = getDocument(targetNode);\n            const path = this.nodeLocator.getAstNodePath(targetNode);\n            return {\n                sourceUri: doc.uri,\n                sourcePath: path,\n                targetUri: doc.uri,\n                targetPath: path,\n                segment: toDocumentSegment(nameNode),\n                local: true\n            };\n        }\n        return undefined;\n    }\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { Stream } from './stream.js';\nimport { Reduction, stream } from './stream.js';\n\n/**\n * A multimap is a variation of a Map that has potentially multiple values for every key.\n */\nexport class MultiMap<K, V> {\n\n    private map = new Map<K, V[]>();\n\n    constructor()\n    constructor(elements: Array<[K, V]>)\n    constructor(elements?: Array<[K, V]>) {\n        if (elements) {\n            for (const [key, value] of elements) {\n                this.add(key, value);\n            }\n        }\n    }\n\n    /**\n     * The total number of values in the multimap.\n     */\n    get size(): number {\n        return Reduction.sum(stream(this.map.values()).map(a => a.length));\n    }\n\n    /**\n     * Clear all entries in the multimap.\n     */\n    clear(): void {\n        this.map.clear();\n    }\n\n    /**\n     * Operates differently depending on whether a `value` is given:\n     *  * With a value, this method deletes the specific key / value pair from the multimap.\n     *  * Without a value, all values associated with the given key are deleted.\n     *\n     * @returns `true` if a value existed and has been removed, or `false` if the specified\n     *     key / value does not exist.\n     */\n    delete(key: K, value?: V): boolean {\n        if (value === undefined) {\n            return this.map.delete(key);\n        } else {\n            const values = this.map.get(key);\n            if (values) {\n                const index = values.indexOf(value);\n                if (index >= 0) {\n                    if (values.length === 1) {\n                        this.map.delete(key);\n                    } else {\n                        values.splice(index, 1);\n                    }\n                    return true;\n                }\n            }\n            return false;\n        }\n    }\n\n    /**\n     * Returns an array of all values associated with the given key. If no value exists,\n     * an empty array is returned.\n     *\n     * _Note:_ The returned array is assumed not to be modified. Use the `set` method to add a\n     * value and `delete` to remove a value from the multimap.\n     */\n    get(key: K): readonly V[] {\n        return this.map.get(key) ?? [];\n    }\n\n    /**\n     * Operates differently depending on whether a `value` is given:\n     *  * With a value, this method returns `true` if the specific key / value pair is present in the multimap.\n     *  * Without a value, this method returns `true` if the given key is present in the multimap.\n     */\n    has(key: K, value?: V): boolean {\n        if (value === undefined) {\n            return this.map.has(key);\n        } else {\n            const values = this.map.get(key);\n            if (values) {\n                return values.indexOf(value) >= 0;\n            }\n            return false;\n        }\n    }\n\n    /**\n     * Add the given key / value pair to the multimap.\n     */\n    add(key: K, value: V): this {\n        if (this.map.has(key)) {\n            this.map.get(key)!.push(value);\n        } else {\n            this.map.set(key, [value]);\n        }\n        return this;\n    }\n\n    /**\n     * Add the given set of key / value pairs to the multimap.\n     */\n    addAll(key: K, values: Iterable<V>): this {\n        if (this.map.has(key)) {\n            this.map.get(key)!.push(...values);\n        } else {\n            this.map.set(key, Array.from(values));\n        }\n        return this;\n    }\n\n    /**\n     * Invokes the given callback function for every key / value pair in the multimap.\n     */\n    forEach(callbackfn: (value: V, key: K, map: this) => void): void {\n        this.map.forEach((array, key) =>\n            array.forEach(value => callbackfn(value, key, this))\n        );\n    }\n\n    /**\n     * Returns an iterator of key, value pairs for every entry in the map.\n     */\n    [Symbol.iterator](): Iterator<[K, V]> {\n        return this.entries().iterator();\n    }\n\n    /**\n     * Returns a stream of key, value pairs for every entry in the map.\n     */\n    entries(): Stream<[K, V]> {\n        return stream(this.map.entries())\n            .flatMap(([key, array]) => array.map(value => [key, value] as [K, V]));\n    }\n\n    /**\n     * Returns a stream of keys in the map.\n     */\n    keys(): Stream<K> {\n        return stream(this.map.keys());\n    }\n\n    /**\n     * Returns a stream of values in the map.\n     */\n    values(): Stream<V> {\n        return stream(this.map.values()).flat();\n    }\n\n    /**\n     * Returns a stream of key, value set pairs for every key in the map.\n     */\n    entriesGroupedByKey(): Stream<[K, V[]]> {\n        return stream(this.map.entries());\n    }\n\n}\n\nexport class BiMap<K, V> {\n\n    private map = new Map<K, V>();\n    private inverse = new Map<V, K>();\n\n    get size(): number {\n        return this.map.size;\n    }\n\n    constructor()\n    constructor(elements: Array<[K, V]>)\n    constructor(elements?: Array<[K, V]>) {\n        if (elements) {\n            for (const [key, value] of elements) {\n                this.set(key, value);\n            }\n        }\n    }\n\n    clear(): void {\n        this.map.clear();\n        this.inverse.clear();\n    }\n\n    set(key: K, value: V): this {\n        this.map.set(key, value);\n        this.inverse.set(value, key);\n        return this;\n    }\n\n    get(key: K): V | undefined {\n        return this.map.get(key);\n    }\n\n    getKey(value: V): K | undefined {\n        return this.inverse.get(value);\n    }\n\n    delete(key: K): boolean {\n        const value = this.map.get(key);\n        if (value !== undefined) {\n            this.map.delete(key);\n            this.inverse.delete(value);\n            return true;\n        }\n        return false;\n    }\n}\n","/******************************************************************************\n * Copyright 2021-2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { LangiumCoreServices } from '../services.js';\nimport type { AstNode, AstNodeDescription } from '../syntax-tree.js';\nimport type { AstNodeDescriptionProvider } from '../workspace/ast-descriptions.js';\nimport type { LangiumDocument, PrecomputedScopes } from '../workspace/documents.js';\nimport type { NameProvider } from './name-provider.js';\nimport { CancellationToken } from '../utils/cancellation.js';\nimport { streamAllContents, streamContents } from '../utils/ast-utils.js';\nimport { MultiMap } from '../utils/collections.js';\nimport { interruptAndCheck } from '../utils/promise-utils.js';\n\n/**\n * Language-specific service for precomputing global and local scopes. The service methods are executed\n * as the first and second phase in the `DocumentBuilder`.\n */\nexport interface ScopeComputation {\n\n    /**\n     * Creates descriptions of all AST nodes that shall be exported into the _global_ scope from the given\n     * document. These descriptions are gathered by the `IndexManager` and stored in the global index so\n     * they can be referenced from other documents.\n     *\n     * _Note:_ You should not resolve any cross-references in this service method. Cross-reference resolution\n     * depends on the scope computation phase to be completed (`computeScope` method), which runs after the\n     * initial indexing where this method is used.\n     *\n     * @param document The document from which to gather exported AST nodes.\n     * @param cancelToken Indicates when to cancel the current operation.\n     * @throws `OperationCanceled` if a user action occurs during execution\n     */\n    computeExports(document: LangiumDocument, cancelToken?: CancellationToken): Promise<AstNodeDescription[]>;\n\n    /**\n     * Precomputes the _local_ scopes for a document, which are necessary for the default way of\n     * resolving references to symbols in the same document. The result is a multimap assigning a\n     * set of AST node descriptions to every level of the AST. These data are used by the `ScopeProvider`\n     * service to determine which target nodes are visible in the context of a specific cross-reference.\n     *\n     * _Note:_ You should not resolve any cross-references in this service method. Cross-reference\n     * resolution depends on the scope computation phase to be completed.\n     *\n     * @param document The document in which to compute scopes.\n     * @param cancelToken Indicates when to cancel the current operation.\n     * @throws `OperationCanceled` if a user action occurs during execution\n     */\n    computeLocalScopes(document: LangiumDocument, cancelToken?: CancellationToken): Promise<PrecomputedScopes>;\n\n}\n\n/**\n * The default scope computation creates and collectes descriptions of the AST nodes to be exported into the\n * _global_ scope from the given document. By default those are the document's root AST node and its directly\n * contained child nodes.\n *\n * Besides, it gathers all AST nodes that have a name (according to the `NameProvider` service) and includes them\n * in the local scope of their particular container nodes. As a result, for every cross-reference in the AST,\n * target elements from the same level (siblings) and further up towards the root (parents and siblings of parents)\n * are visible. Elements being nested inside lower levels (children, children of siblings and parents' siblings)\n * are _invisible_ by default, but that can be changed by customizing this service.\n */\nexport class DefaultScopeComputation implements ScopeComputation {\n\n    protected readonly nameProvider: NameProvider;\n    protected readonly descriptions: AstNodeDescriptionProvider;\n\n    constructor(services: LangiumCoreServices) {\n        this.nameProvider = services.references.NameProvider;\n        this.descriptions = services.workspace.AstNodeDescriptionProvider;\n    }\n\n    async computeExports(document: LangiumDocument, cancelToken = CancellationToken.None): Promise<AstNodeDescription[]> {\n        return this.computeExportsForNode(document.parseResult.value, document, undefined, cancelToken);\n    }\n\n    /**\n     * Creates {@link AstNodeDescription AstNodeDescriptions} for the given {@link AstNode parentNode} and its children.\n     * The list of children to be considered is determined by the function parameter {@link children}.\n     * By default only the direct children of {@link parentNode} are visited, nested nodes are not exported.\n     *\n     * @param parentNode AST node to be exported, i.e., of which an {@link AstNodeDescription} shall be added to the returned list.\n     * @param document The document containing the AST node to be exported.\n     * @param children A function called with {@link parentNode} as single argument and returning an {@link Iterable} supplying the children to be visited, which must be directly or transitively contained in {@link parentNode}.\n     * @param cancelToken Indicates when to cancel the current operation.\n     * @throws `OperationCanceled` if a user action occurs during execution.\n     * @returns A list of {@link AstNodeDescription AstNodeDescriptions} to be published to index.\n     */\n    async computeExportsForNode(parentNode: AstNode, document: LangiumDocument<AstNode>, children: (root: AstNode) => Iterable<AstNode> = streamContents, cancelToken: CancellationToken = CancellationToken.None): Promise<AstNodeDescription[]> {\n        const exports: AstNodeDescription[] = [];\n\n        this.exportNode(parentNode, exports, document);\n        for (const node of children(parentNode)) {\n            await interruptAndCheck(cancelToken);\n            this.exportNode(node, exports, document);\n        }\n        return exports;\n    }\n\n    /**\n     * Add a single node to the list of exports if it has a name. Override this method to change how\n     * symbols are exported, e.g. by modifying their exported name.\n     */\n    protected exportNode(node: AstNode, exports: AstNodeDescription[], document: LangiumDocument): void {\n        const name = this.nameProvider.getName(node);\n        if (name) {\n            exports.push(this.descriptions.createDescription(node, name, document));\n        }\n    }\n\n    async computeLocalScopes(document: LangiumDocument, cancelToken = CancellationToken.None): Promise<PrecomputedScopes> {\n        const rootNode = document.parseResult.value;\n        const scopes = new MultiMap<AstNode, AstNodeDescription>();\n        // Here we navigate the full AST - local scopes shall be available in the whole document\n        for (const node of streamAllContents(rootNode)) {\n            await interruptAndCheck(cancelToken);\n            this.processNode(node, document, scopes);\n        }\n        return scopes;\n    }\n\n    /**\n     * Process a single node during scopes computation. The default implementation makes the node visible\n     * in the subtree of its container (if the node has a name). Override this method to change this,\n     * e.g. by increasing the visibility to a higher level in the AST.\n     */\n    protected processNode(node: AstNode, document: LangiumDocument, scopes: PrecomputedScopes): void {\n        const container = node.$container;\n        if (container) {\n            const name = this.nameProvider.getName(node);\n            if (name) {\n                scopes.add(container, this.descriptions.createDescription(node, name, document));\n            }\n        }\n    }\n\n}\n","/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { AstNodeDescription } from '../syntax-tree.js';\nimport type { Stream } from '../utils/stream.js';\nimport { EMPTY_STREAM, stream } from '../utils/stream.js';\n\n/**\n * A scope describes what target elements are visible from a specific cross-reference context.\n */\nexport interface Scope {\n\n    /**\n     * Find a target element matching the given name. If no element is found, `undefined` is returned.\n     * If multiple matching elements are present, the selection of the returned element should be done\n     * according to the semantics of your language. Usually it is the element that is most closely defined.\n     *\n     * @param name Name of the cross-reference target as it appears in the source text.\n     */\n    getElement(name: string): AstNodeDescription | undefined;\n\n    /**\n     * Create a stream of all elements in the scope. This is used to compute completion proposals to be\n     * shown in the editor.\n     */\n    getAllElements(): Stream<AstNodeDescription>;\n\n}\n\nexport interface ScopeOptions {\n    caseInsensitive?: boolean;\n}\n\n/**\n * The default scope implementation is based on a `Stream`. It has an optional _outer scope_ describing\n * the next level of elements, which are queried when a target element is not found in the stream provided\n * to this scope.\n */\nexport class StreamScope implements Scope {\n    readonly elements: Stream<AstNodeDescription>;\n    readonly outerScope?: Scope;\n    readonly caseInsensitive: boolean;\n\n    constructor(elements: Stream<AstNodeDescription>, outerScope?: Scope, options?: ScopeOptions) {\n        this.elements = elements;\n        this.outerScope = outerScope;\n        this.caseInsensitive = options?.caseInsensitive ?? false;\n    }\n\n    getAllElements(): Stream<AstNodeDescription> {\n        if (this.outerScope) {\n            return this.elements.concat(this.outerScope.getAllElements());\n        } else {\n            return this.elements;\n        }\n    }\n\n    getElement(name: string): AstNodeDescription | undefined {\n        const local = this.caseInsensitive\n            ? this.elements.find(e => e.name.toLowerCase() === name.toLowerCase())\n            : this.elements.find(e => e.name === name);\n        if (local) {\n            return local;\n        }\n        if (this.outerScope) {\n            return this.outerScope.getElement(name);\n        }\n        return undefined;\n    }\n}\n\nexport class MapScope implements Scope {\n    readonly elements: Map<string, AstNodeDescription>;\n    readonly outerScope?: Scope;\n    readonly caseInsensitive: boolean;\n\n    constructor(elements: Iterable<AstNodeDescription>, outerScope?: Scope, options?: ScopeOptions) {\n        this.elements = new Map();\n        this.caseInsensitive = options?.caseInsensitive ?? false;\n        for (const element of elements) {\n            const name = this.caseInsensitive\n                ? element.name.toLowerCase()\n                : element.name;\n            this.elements.set(name, element);\n        }\n        this.outerScope = outerScope;\n    }\n\n    getElement(name: string): AstNodeDescription | undefined {\n        const localName = this.caseInsensitive ? name.toLowerCase() : name;\n        const local = this.elements.get(localName);\n        if (local) {\n            return local;\n        }\n        if (this.outerScope) {\n            return this.outerScope.getElement(name);\n        }\n        return undefined;\n    }\n\n    getAllElements(): Stream<AstNodeDescription> {\n        let elementStream = stream(this.elements.values());\n        if (this.outerScope) {\n            elementStream = elementStream.concat(this.outerScope.getAllElements());\n        }\n        return elementStream;\n    }\n\n}\n\nexport const EMPTY_SCOPE: Scope = {\n    getElement(): undefined {\n        return undefined;\n    },\n    getAllElements(): Stream<AstNodeDescription> {\n        return EMPTY_STREAM;\n    }\n};\n","/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { Disposable } from './disposable.js';\nimport type { URI } from './uri-utils.js';\nimport type { LangiumSharedCoreServices } from '../services.js';\n\nexport abstract class DisposableCache implements Disposable {\n\n    protected toDispose: Disposable[] = [];\n    protected isDisposed = false;\n\n    onDispose(disposable: Disposable): void {\n        this.toDispose.push(disposable);\n    }\n\n    dispose(): void {\n        this.throwIfDisposed();\n        this.clear();\n        this.isDisposed = true;\n        this.toDispose.forEach(disposable => disposable.dispose());\n    }\n\n    protected throwIfDisposed(): void {\n        if (this.isDisposed) {\n            throw new Error('This cache has already been disposed');\n        }\n    }\n\n    abstract clear(): void;\n}\n\nexport class SimpleCache<K, V> extends DisposableCache {\n    protected readonly cache = new Map<K, V>();\n\n    has(key: K): boolean {\n        this.throwIfDisposed();\n        return this.cache.has(key);\n    }\n\n    set(key: K, value: V): void {\n        this.throwIfDisposed();\n        this.cache.set(key, value);\n    }\n\n    get(key: K): V | undefined;\n    get(key: K, provider: () => V): V;\n    get(key: K, provider?: () => V): V | undefined {\n        this.throwIfDisposed();\n        if (this.cache.has(key)) {\n            return this.cache.get(key);\n        } else if (provider) {\n            const value = provider();\n            this.cache.set(key, value);\n            return value;\n        } else {\n            return undefined;\n        }\n    }\n\n    delete(key: K): boolean {\n        this.throwIfDisposed();\n        return this.cache.delete(key);\n    }\n\n    clear(): void {\n        this.throwIfDisposed();\n        this.cache.clear();\n    }\n}\n\nexport class ContextCache<Context, Key, Value, ContextKey = Context> extends DisposableCache {\n\n    private readonly cache = new Map<ContextKey | Context, Map<Key, Value>>();\n    private readonly converter: (input: Context) => ContextKey | Context;\n\n    constructor(converter?: (input: Context) => ContextKey) {\n        super();\n        this.converter = converter ?? (value => value);\n    }\n\n    has(contextKey: Context, key: Key): boolean {\n        this.throwIfDisposed();\n        return this.cacheForContext(contextKey).has(key);\n    }\n\n    set(contextKey: Context, key: Key, value: Value): void {\n        this.throwIfDisposed();\n        this.cacheForContext(contextKey).set(key, value);\n    }\n\n    get(contextKey: Context, key: Key): Value | undefined;\n    get(contextKey: Context, key: Key, provider: () => Value): Value;\n    get(contextKey: Context, key: Key, provider?: () => Value): Value | undefined {\n        this.throwIfDisposed();\n        const contextCache = this.cacheForContext(contextKey);\n        if (contextCache.has(key)) {\n            return contextCache.get(key);\n        } else if (provider) {\n            const value = provider();\n            contextCache.set(key, value);\n            return value;\n        } else {\n            return undefined;\n        }\n    }\n\n    delete(contextKey: Context, key: Key): boolean {\n        this.throwIfDisposed();\n        return this.cacheForContext(contextKey).delete(key);\n    }\n\n    clear(): void;\n    clear(contextKey: Context): void;\n    clear(contextKey?: Context): void {\n        this.throwIfDisposed();\n        if (contextKey) {\n            const mapKey = this.converter(contextKey);\n            this.cache.delete(mapKey);\n        } else {\n            this.cache.clear();\n        }\n    }\n\n    protected cacheForContext(contextKey: Context): Map<Key, Value> {\n        const mapKey = this.converter(contextKey);\n        let documentCache = this.cache.get(mapKey);\n        if (!documentCache) {\n            documentCache = new Map();\n            this.cache.set(mapKey, documentCache);\n        }\n        return documentCache;\n    }\n}\n\n/**\n * Every key/value pair in this cache is scoped to a document.\n * If this document is changed or deleted, all associated key/value pairs are deleted.\n */\nexport class DocumentCache<K, V> extends ContextCache<URI | string, K, V, string> {\n    constructor(sharedServices: LangiumSharedCoreServices) {\n        super(uri => uri.toString());\n        this.onDispose(sharedServices.workspace.DocumentBuilder.onUpdate((changed, deleted) => {\n            const allUris = changed.concat(deleted);\n            for (const uri of allUris) {\n                this.clear(uri);\n            }\n        }));\n    }\n}\n\n/**\n * Every key/value pair in this cache is scoped to the whole workspace.\n * If any document in the workspace changes, the whole cache is evicted.\n */\nexport class WorkspaceCache<K, V> extends SimpleCache<K, V> {\n    constructor(sharedServices: LangiumSharedCoreServices) {\n        super();\n        this.onDispose(sharedServices.workspace.DocumentBuilder.onUpdate(() => {\n            this.clear();\n        }));\n    }\n}\n","/******************************************************************************\n * Copyright 2021-2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { LangiumCoreServices } from '../services.js';\nimport type { AstNode, AstNodeDescription, AstReflection, ReferenceInfo } from '../syntax-tree.js';\nimport type { Stream } from '../utils/stream.js';\nimport type { AstNodeDescriptionProvider } from '../workspace/ast-descriptions.js';\nimport type { IndexManager } from '../workspace/index-manager.js';\nimport type { NameProvider } from './name-provider.js';\nimport type { Scope, ScopeOptions} from './scope.js';\nimport { MapScope, StreamScope } from './scope.js';\nimport { getDocument } from '../utils/ast-utils.js';\nimport { stream } from '../utils/stream.js';\nimport { WorkspaceCache } from '../utils/caching.js';\n\n/**\n * Language-specific service for determining the scope of target elements visible in a specific cross-reference context.\n */\nexport interface ScopeProvider {\n\n    /**\n     * Return a scope describing what elements are visible for the given AST node and cross-reference\n     * identifier.\n     *\n     * @param context Information about the reference for which a scope is requested.\n     */\n    getScope(context: ReferenceInfo): Scope;\n\n}\n\nexport class DefaultScopeProvider implements ScopeProvider {\n\n    protected readonly reflection: AstReflection;\n    protected readonly nameProvider: NameProvider;\n    protected readonly descriptions: AstNodeDescriptionProvider;\n    protected readonly indexManager: IndexManager;\n\n    protected readonly globalScopeCache: WorkspaceCache<string, Scope>;\n\n    constructor(services: LangiumCoreServices) {\n        this.reflection = services.shared.AstReflection;\n        this.nameProvider = services.references.NameProvider;\n        this.descriptions = services.workspace.AstNodeDescriptionProvider;\n        this.indexManager = services.shared.workspace.IndexManager;\n        this.globalScopeCache = new WorkspaceCache<string, Scope>(services.shared);\n    }\n\n    getScope(context: ReferenceInfo): Scope {\n        const scopes: Array<Stream<AstNodeDescription>> = [];\n        const referenceType = this.reflection.getReferenceType(context);\n\n        const precomputed = getDocument(context.container).precomputedScopes;\n        if (precomputed) {\n            let currentNode: AstNode | undefined = context.container;\n            do {\n                const allDescriptions = precomputed.get(currentNode);\n                if (allDescriptions.length > 0) {\n                    scopes.push(stream(allDescriptions).filter(\n                        desc => this.reflection.isSubtype(desc.type, referenceType)));\n                }\n                currentNode = currentNode.$container;\n            } while (currentNode);\n        }\n\n        let result: Scope = this.getGlobalScope(referenceType, context);\n        for (let i = scopes.length - 1; i >= 0; i--) {\n            result = this.createScope(scopes[i], result);\n        }\n        return result;\n    }\n\n    /**\n     * Create a scope for the given collection of AST node descriptions.\n     */\n    protected createScope(elements: Iterable<AstNodeDescription>, outerScope?: Scope, options?: ScopeOptions): Scope {\n        return new StreamScope(stream(elements), outerScope, options);\n    }\n\n    /**\n     * Create a scope for the given collection of AST nodes, which need to be transformed into respective\n     * descriptions first. This is done using the `NameProvider` and `AstNodeDescriptionProvider` services.\n     */\n    protected createScopeForNodes(elements: Iterable<AstNode>, outerScope?: Scope, options?: ScopeOptions): Scope {\n        const s = stream(elements).map(e => {\n            const name = this.nameProvider.getName(e);\n            if (name) {\n                return this.descriptions.createDescription(e, name);\n            }\n            return undefined;\n        }).nonNullable();\n        return new StreamScope(s, outerScope, options);\n    }\n\n    /**\n     * Create a global scope filtered for the given reference type.\n     */\n    protected getGlobalScope(referenceType: string, _context: ReferenceInfo): Scope {\n        return this.globalScopeCache.get(referenceType, () => new MapScope(this.indexManager.allElements(referenceType)));\n    }\n\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport { URI } from 'vscode-uri';\nimport type { CommentProvider } from '../documentation/comment-provider.js';\nimport type { NameProvider } from '../references/name-provider.js';\nimport type { LangiumCoreServices } from '../services.js';\nimport type { AstNode, CstNode, GenericAstNode, Mutable, Reference } from '../syntax-tree.js';\nimport { isAstNode, isReference } from '../syntax-tree.js';\nimport { getDocument } from '../utils/ast-utils.js';\nimport { findNodesForProperty } from '../utils/grammar-utils.js';\nimport type { AstNodeLocator } from '../workspace/ast-node-locator.js';\nimport type { DocumentSegment, LangiumDocument, LangiumDocuments } from '../workspace/documents.js';\n\nexport interface JsonSerializeOptions {\n    /** The space parameter for `JSON.stringify`, controlling whether and how to pretty-print the output. */\n    space?: string | number;\n    /** Whether to include the `$refText` property for references (the name used to identify the target node). */\n    refText?: boolean;\n    /** Whether to include the `$sourceText` property, which holds the full source text from which an AST node was parsed. */\n    sourceText?: boolean;\n    /** Whether to include the `$textRegion` property, which holds information to trace AST node properties to their respective source text regions. */\n    textRegions?: boolean;\n    /** Whether to include the `$comment` property, which holds comments according to the CommentProvider service. */\n    comments?: boolean;\n    /** The replacer parameter for `JSON.stringify`; the default replacer given as parameter should be used to apply basic replacements. */\n    replacer?: (key: string, value: unknown, defaultReplacer: (key: string, value: unknown) => unknown) => unknown\n    /** Used to convert and serialize URIs when the target of a cross-reference is in a different document. */\n    uriConverter?: (uri: URI, reference: Reference) => string\n}\n\nexport interface JsonDeserializeOptions {\n    /** Used to parse and convert URIs when the target of a cross-reference is in a different document. */\n    uriConverter?: (uri: string) => URI\n}\n\n/**\n * {@link AstNode}s that may carry information on their definition area within the DSL text.\n */\nexport interface AstNodeWithTextRegion extends AstNode {\n    $sourceText?: string;\n    $textRegion?: AstNodeRegionWithAssignments;\n}\n\n/**\n * {@link AstNode}s that may carry a semantically relevant comment.\n */\nexport interface AstNodeWithComment extends AstNode {\n    $comment?: string;\n}\n\nexport function isAstNodeWithComment(node: AstNode): node is AstNodeWithComment {\n    return typeof (node as AstNodeWithComment).$comment === 'string';\n}\n\n/**\n * A {@DocumentSegment} representing the definition area of an AstNode within the DSL text.\n * Usually contains text region information on all assigned property values of the AstNode,\n * and may contain the defining file's URI as string.\n */\nexport interface AstNodeRegionWithAssignments extends DocumentSegment {\n    /**\n     * A record containing an entry for each assigned property of the AstNode.\n     * The key is equal to the property name and the value is an array of the property values'\n     * text regions, regardless of whether the property is a single value or list property.\n     */\n    assignments?: Record<string, DocumentSegment[]>;\n    /**\n     * The AstNode defining file's URI as string\n     */\n    documentURI?: string;\n}\n\n/**\n * Utility service for transforming an `AstNode` into a JSON string and vice versa.\n */\nexport interface JsonSerializer {\n    /**\n     * Serialize an `AstNode` into a JSON `string`.\n     * @param node The `AstNode` to be serialized.\n     * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.\n     */\n    serialize(node: AstNode, options?: JsonSerializeOptions): string;\n    /**\n     * Deserialize (parse) a JSON `string` into an `AstNode`.\n     */\n    deserialize<T extends AstNode = AstNode>(content: string, options?: JsonDeserializeOptions): T;\n}\n\n/**\n * A cross-reference in the serialized JSON representation of an AstNode.\n */\ninterface IntermediateReference {\n    /** URI pointing to the target element. This is either `#${path}` if the target is in the same document, or `${documentURI}#${path}` otherwise. */\n    $ref?: string\n    /** The actual text used to look up the reference target in the surrounding scope. */\n    $refText?: string\n    /** If any problem occurred while resolving the reference, it is described by this property. */\n    $error?: string\n}\n\nfunction isIntermediateReference(obj: unknown): obj is IntermediateReference {\n    return typeof obj === 'object' && !!obj && ('$ref' in obj || '$error' in obj);\n}\n\nexport class DefaultJsonSerializer implements JsonSerializer {\n\n    /** The set of AstNode properties to be ignored by the serializer. */\n    ignoreProperties = new Set(['$container', '$containerProperty', '$containerIndex', '$document', '$cstNode']);\n\n    /** The document that is currently processed by the serializer; this is used by the replacer function.  */\n    protected currentDocument: LangiumDocument | undefined;\n\n    protected readonly langiumDocuments: LangiumDocuments;\n    protected readonly astNodeLocator: AstNodeLocator;\n    protected readonly nameProvider: NameProvider;\n    protected readonly commentProvider: CommentProvider;\n\n    constructor(services: LangiumCoreServices) {\n        this.langiumDocuments = services.shared.workspace.LangiumDocuments;\n        this.astNodeLocator = services.workspace.AstNodeLocator;\n        this.nameProvider = services.references.NameProvider;\n        this.commentProvider = services.documentation.CommentProvider;\n    }\n\n    serialize(node: AstNode, options: JsonSerializeOptions = {}): string {\n        const specificReplacer = options?.replacer;\n        const defaultReplacer = (key: string, value: unknown) => this.replacer(key, value, options);\n        const replacer = specificReplacer ? (key: string, value: unknown) => specificReplacer(key, value, defaultReplacer) : defaultReplacer;\n\n        try {\n            this.currentDocument = getDocument(node);\n            return JSON.stringify(node, replacer, options?.space);\n        } finally {\n            this.currentDocument = undefined;\n        }\n    }\n\n    deserialize<T extends AstNode = AstNode>(content: string, options: JsonDeserializeOptions = {}): T {\n        const root = JSON.parse(content);\n        this.linkNode(root, root, options);\n        return root;\n    }\n\n    protected replacer(key: string, value: unknown, { refText, sourceText, textRegions, comments, uriConverter }: JsonSerializeOptions): unknown {\n        if (this.ignoreProperties.has(key)) {\n            return undefined;\n        } else if (isReference(value)) {\n            const refValue = value.ref;\n            const $refText = refText ? value.$refText : undefined;\n            if (refValue) {\n                const targetDocument = getDocument(refValue);\n                let targetUri = '';\n                if (this.currentDocument && this.currentDocument !== targetDocument) {\n                    if (uriConverter) {\n                        targetUri = uriConverter(targetDocument.uri, value);\n                    } else {\n                        targetUri = targetDocument.uri.toString();\n                    }\n                }\n                const targetPath = this.astNodeLocator.getAstNodePath(refValue);\n                return {\n                    $ref: `${targetUri}#${targetPath}`,\n                    $refText\n                } satisfies IntermediateReference;\n            } else {\n                return {\n                    $error: value.error?.message ?? 'Could not resolve reference',\n                    $refText\n                } satisfies IntermediateReference;\n            }\n        } else if (isAstNode(value)) {\n            let astNode: AstNodeWithTextRegion | undefined = undefined;\n            if (textRegions) {\n                astNode = this.addAstNodeRegionWithAssignmentsTo({ ...value });\n                if ((!key || value.$document) && astNode?.$textRegion) {\n                    // The document URI is added to the root node of the resulting JSON tree\n                    astNode.$textRegion.documentURI = this.currentDocument?.uri.toString();\n                }\n            }\n            if (sourceText && !key) {\n                astNode ??= { ...value };\n                astNode.$sourceText = value.$cstNode?.text;\n            }\n            if (comments) {\n                astNode ??= { ...value };\n                const comment = this.commentProvider.getComment(value);\n                if (comment) {\n                    (astNode as AstNodeWithComment).$comment = comment.replace(/\\r/g, '');\n                }\n            }\n            return astNode ?? value;\n        } else {\n            return value;\n        }\n    }\n\n    protected addAstNodeRegionWithAssignmentsTo(node: AstNodeWithTextRegion) {\n        const createDocumentSegment: (cstNode: CstNode) => AstNodeRegionWithAssignments = cstNode => <DocumentSegment>{\n            offset: cstNode.offset,\n            end: cstNode.end,\n            length: cstNode.length,\n            range: cstNode.range,\n        };\n\n        if (node.$cstNode) {\n            const textRegion = node.$textRegion = createDocumentSegment(node.$cstNode);\n            const assignments: Record<string, DocumentSegment[]> = textRegion.assignments = {};\n\n            Object.keys(node).filter(key => !key.startsWith('$')).forEach(key => {\n                const propertyAssignments = findNodesForProperty(node.$cstNode, key).map(createDocumentSegment);\n                if (propertyAssignments.length !== 0) {\n                    assignments[key] = propertyAssignments;\n                }\n            });\n\n            return node;\n        }\n        return undefined;\n    }\n\n    protected linkNode(node: GenericAstNode, root: AstNode, options: JsonDeserializeOptions, container?: AstNode, containerProperty?: string, containerIndex?: number) {\n        for (const [propertyName, item] of Object.entries(node)) {\n            if (Array.isArray(item)) {\n                for (let index = 0; index < item.length; index++) {\n                    const element = item[index];\n                    if (isIntermediateReference(element)) {\n                        item[index] = this.reviveReference(node, propertyName, root, element, options);\n                    } else if (isAstNode(element)) {\n                        this.linkNode(element as GenericAstNode, root, options, node, propertyName, index);\n                    }\n                }\n            } else if (isIntermediateReference(item)) {\n                node[propertyName] = this.reviveReference(node, propertyName, root, item, options);\n            } else if (isAstNode(item)) {\n                this.linkNode(item as GenericAstNode, root, options, node, propertyName);\n            }\n        }\n        const mutable = node as Mutable<AstNode>;\n        mutable.$container = container;\n        mutable.$containerProperty = containerProperty;\n        mutable.$containerIndex = containerIndex;\n    }\n\n    protected reviveReference(container: AstNode, property: string, root: AstNode, reference: IntermediateReference, options: JsonDeserializeOptions): Reference | undefined {\n        let refText = reference.$refText;\n        let error = reference.$error;\n        if (reference.$ref) {\n            const ref = this.getRefNode(root, reference.$ref, options.uriConverter);\n            if (isAstNode(ref)) {\n                if (!refText) {\n                    refText = this.nameProvider.getName(ref);\n                }\n                return {\n                    $refText: refText ?? '',\n                    ref\n                };\n            } else {\n                error = ref;\n            }\n        }\n        if (error) {\n            const ref: Mutable<Reference> = {\n                $refText: refText ?? ''\n            };\n            ref.error = {\n                container,\n                property,\n                message: error,\n                reference: ref\n            };\n            return ref;\n        } else {\n            return undefined;\n        }\n    }\n\n    protected getRefNode(root: AstNode, uri: string, uriConverter?: (uri: string) => URI): AstNode | string {\n        try {\n            const fragmentIndex = uri.indexOf('#');\n            if (fragmentIndex === 0) {\n                const node = this.astNodeLocator.getAstNode(root, uri.substring(1));\n                if (!node) {\n                    return 'Could not resolve path: ' + uri;\n                }\n                return node;\n            }\n            if (fragmentIndex < 0) {\n                const documentUri = uriConverter ? uriConverter(uri) : URI.parse(uri);\n                const document = this.langiumDocuments.getDocument(documentUri);\n                if (!document) {\n                    return 'Could not find document for URI: ' + uri;\n                }\n                return document.parseResult.value;\n            }\n            const documentUri = uriConverter ? uriConverter(uri.substring(0, fragmentIndex)) : URI.parse(uri.substring(0, fragmentIndex));\n            const document = this.langiumDocuments.getDocument(documentUri);\n            if (!document) {\n                return 'Could not find document for URI: ' + uri;\n            }\n            if (fragmentIndex === uri.length - 1) {\n                return document.parseResult.value;\n            }\n            const node = this.astNodeLocator.getAstNode(document.parseResult.value, uri.substring(fragmentIndex + 1));\n            if (!node) {\n                return 'Could not resolve URI: ' + uri;\n            }\n            return node;\n        } catch (err) {\n            return String(err);\n        }\n    }\n\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { LangiumCoreServices } from './services.js';\nimport { UriUtils, type URI } from './utils/uri-utils.js';\n\n/**\n * The service registry provides access to the language-specific {@link LangiumCoreServices} optionally including LSP-related services.\n * These are resolved via the URI of a text document.\n */\nexport interface ServiceRegistry {\n\n    /**\n     * Register a language via its injected services.\n     */\n    register(language: LangiumCoreServices): void;\n\n    /**\n     * Retrieve the language-specific services for the given URI. In case only one language is\n     * registered, it may be used regardless of the URI format.\n     */\n    getServices(uri: URI): LangiumCoreServices;\n\n    /**\n     * The full set of registered language services.\n     */\n    readonly all: readonly LangiumCoreServices[];\n}\n\n/**\n * Generic registry for Langium services, but capable of being used with extending service sets as well (such as the lsp-complete LangiumCoreServices set)\n */\nexport class DefaultServiceRegistry implements ServiceRegistry {\n\n    protected singleton?: LangiumCoreServices;\n    protected map?: Record<string, LangiumCoreServices>;\n\n    register(language: LangiumCoreServices): void {\n        if (!this.singleton && !this.map) {\n            // This is the first language to be registered; store it as singleton.\n            this.singleton = language;\n            return;\n        }\n        if (!this.map) {\n            this.map = {};\n            if (this.singleton) {\n                // Move the previous singleton instance to the new map.\n                for (const ext of this.singleton.LanguageMetaData.fileExtensions) {\n                    this.map[ext] = this.singleton;\n                }\n                this.singleton = undefined;\n            }\n        }\n        // Store the language services in the map.\n        for (const ext of language.LanguageMetaData.fileExtensions) {\n            if (this.map[ext] !== undefined && this.map[ext] !== language) {\n                console.warn(`The file extension ${ext} is used by multiple languages. It is now assigned to '${language.LanguageMetaData.languageId}'.`);\n            }\n            this.map[ext] = language;\n        }\n    }\n\n    getServices(uri: URI): LangiumCoreServices {\n        if (this.singleton !== undefined) {\n            return this.singleton;\n        }\n        if (this.map === undefined) {\n            throw new Error('The service registry is empty. Use `register` to register the services of a language.');\n        }\n        const ext = UriUtils.extname(uri);\n        const services = this.map[ext];\n        if (!services) {\n            throw new Error(`The service registry contains no services for the extension '${ext}'.`);\n        }\n        return services;\n    }\n\n    get all(): readonly LangiumCoreServices[] {\n        if (this.singleton !== undefined) {\n            return [this.singleton];\n        }\n        if (this.map !== undefined) {\n            return Object.values(this.map);\n        }\n        return [];\n    }\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { CodeDescription, DiagnosticRelatedInformation, DiagnosticTag, integer, Range } from 'vscode-languageserver-types';\nimport type { CancellationToken } from '../utils/cancellation.js';\nimport type { LangiumCoreServices } from '../services.js';\nimport type { AstNode, AstReflection, Properties } from '../syntax-tree.js';\nimport type { MaybePromise } from '../utils/promise-utils.js';\nimport type { Stream } from '../utils/stream.js';\nimport type { DocumentSegment } from '../workspace/documents.js';\nimport { MultiMap } from '../utils/collections.js';\nimport { isOperationCancelled } from '../utils/promise-utils.js';\nimport { stream } from '../utils/stream.js';\n\nexport type DiagnosticInfo<N extends AstNode, P extends string = Properties<N>> = {\n    /** The AST node to which the diagnostic is attached. */\n    node: N;\n    /** If a property name is given, the diagnostic is restricted to the corresponding text region. */\n    property?: P;\n    /** If the value of a keyword is given, the diagnostic will appear at its corresponding text region */\n    keyword?: string;\n    /** In case of a multi-value property (array), an index can be given to select a specific element. */\n    index?: number;\n    /** If you want to create a diagnostic independent to any property, use the range property. */\n    range?: Range;\n    /** The diagnostic's code, which usually appear in the user interface. */\n    code?: integer | string;\n    /** An optional property to describe the error code. */\n    codeDescription?: CodeDescription;\n    /** Additional metadata about the diagnostic. */\n    tags?: DiagnosticTag[];\n    /** An array of related diagnostic information, e.g. when symbol-names within a scope collide all definitions can be marked via this property. */\n    relatedInformation?: DiagnosticRelatedInformation[];\n    /** A data entry field that is preserved between a `textDocument/publishDiagnostics` notification and `textDocument/codeAction` request. */\n    data?: unknown;\n}\n\n/**\n * Shape of information commonly used in the `data` field of diagnostics.\n */\nexport interface DiagnosticData {\n    /** Diagnostic code for identifying which code action to apply. This code is _not_ shown in the user interface. */\n    code: string\n    /** Specifies where to apply the code action in the form of a `DocumentSegment`. */\n    actionSegment?: DocumentSegment\n    /** Specifies where to apply the code action in the form of a `Range`. */\n    actionRange?: Range\n}\n\n/**\n * Create DiagnosticData for a given diagnostic code. The result can be put into the `data` field of a DiagnosticInfo.\n */\nexport function diagnosticData(code: string): DiagnosticData {\n    return { code };\n}\n\nexport type ValidationAcceptor = <N extends AstNode>(severity: 'error' | 'warning' | 'info' | 'hint', message: string, info: DiagnosticInfo<N>) => void\n\nexport type ValidationCheck<T extends AstNode = AstNode> = (node: T, accept: ValidationAcceptor, cancelToken: CancellationToken) => MaybePromise<void>;\n\n/**\n * A utility type for associating non-primitive AST types to corresponding validation checks. For example:\n *\n * ```ts\n *   const checks: ValidationChecks<StatemachineAstType> = {\n *       State: validator.checkStateNameStartsWithCapital\n *    };\n * ```\n *\n * If an AST type does not extend AstNode, e.g. if it describes a union of string literals, that type's name must not occur as a key in objects of type `ValidationCheck<...>`.\n *\n * @param T a type definition mapping language specific type names (keys) to the corresponding types (values)\n */\nexport type ValidationChecks<T> = {\n    [K in keyof T]?: T[K] extends AstNode ? ValidationCheck<T[K]> | Array<ValidationCheck<T[K]>> : never\n} & {\n    AstNode?: ValidationCheck<AstNode> | Array<ValidationCheck<AstNode>>;\n}\n\n/**\n * `fast` checks can be executed after every document change (i.e. as the user is typing). If a check\n * is too slow it can delay the response to document changes, yielding bad user experience. By marking\n * it as `slow`, it will be skipped for normal as-you-type validation. Then it's up to you when to\n * schedule these long-running checks: after the fast checks are done, or after saving a document,\n * or with an explicit command, etc.\n *\n * `built-in` checks are errors produced by the lexer, the parser, or the linker. They cannot be used\n * for custom validation checks.\n */\nexport type ValidationCategory = 'fast' | 'slow' | 'built-in'\n\nexport namespace ValidationCategory {\n    export const all: readonly ValidationCategory[] = ['fast', 'slow', 'built-in'];\n}\n\ntype ValidationCheckEntry = {\n    check: ValidationCheck\n    category: ValidationCategory\n}\n\n/**\n * Manages a set of `ValidationCheck`s to be applied when documents are validated.\n */\nexport class ValidationRegistry {\n    private readonly entries = new MultiMap<string, ValidationCheckEntry>();\n    private readonly reflection: AstReflection;\n\n    constructor(services: LangiumCoreServices) {\n        this.reflection = services.shared.AstReflection;\n    }\n\n    /**\n     * Register a set of validation checks. Each value in the record can be either a single validation check (i.e. a function)\n     * or an array of validation checks.\n     *\n     * @param checksRecord Set of validation checks to register.\n     * @param category Optional category for the validation checks (defaults to `'fast'`).\n     * @param thisObj Optional object to be used as `this` when calling the validation check functions.\n     */\n    register<T>(checksRecord: ValidationChecks<T>, thisObj: ThisParameterType<unknown> = this, category: ValidationCategory = 'fast'): void {\n        if (category === 'built-in') {\n            throw new Error(\"The 'built-in' category is reserved for lexer, parser, and linker errors.\");\n        }\n        for (const [type, ch] of Object.entries(checksRecord)) {\n            const callbacks = ch as ValidationCheck | ValidationCheck[];\n            if (Array.isArray(callbacks)) {\n                for (const check of callbacks) {\n                    const entry: ValidationCheckEntry = {\n                        check: this.wrapValidationException(check, thisObj),\n                        category\n                    };\n                    this.addEntry(type, entry);\n                }\n            } else if (typeof callbacks === 'function') {\n                const entry: ValidationCheckEntry = {\n                    check: this.wrapValidationException(callbacks, thisObj),\n                    category\n                };\n                this.addEntry(type, entry);\n            }\n        }\n    }\n\n    protected wrapValidationException(check: ValidationCheck, thisObj: unknown): ValidationCheck {\n        return async (node, accept, cancelToken) => {\n            try {\n                await check.call(thisObj, node, accept, cancelToken);\n            } catch (err) {\n                if (isOperationCancelled(err)) {\n                    throw err;\n                }\n                console.error('An error occurred during validation:', err);\n                const message = err instanceof Error ? err.message : String(err);\n                if (err instanceof Error && err.stack) {\n                    console.error(err.stack);\n                }\n                accept('error', 'An error occurred during validation: ' + message, { node });\n            }\n        };\n    }\n\n    protected addEntry(type: string, entry: ValidationCheckEntry): void {\n        if (type === 'AstNode') {\n            this.entries.add('AstNode', entry);\n            return;\n        }\n        for (const subtype of this.reflection.getAllSubTypes(type)) {\n            this.entries.add(subtype, entry);\n        }\n    }\n\n    getChecks(type: string, categories?: ValidationCategory[]): Stream<ValidationCheck> {\n        let checks = stream(this.entries.get(type))\n            .concat(this.entries.get('AstNode'));\n        if (categories) {\n            checks = checks.filter(entry => categories.includes(entry.category));\n        }\n        return checks.map(entry => entry.check);\n    }\n\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { MismatchedTokenException } from 'chevrotain';\nimport type { DiagnosticSeverity, Position, Range, Diagnostic } from 'vscode-languageserver-types';\nimport type { LanguageMetaData } from '../languages/language-meta-data.js';\nimport type { ParseResult } from '../parser/langium-parser.js';\nimport type { LangiumCoreServices } from '../services.js';\nimport type { AstNode, CstNode } from '../syntax-tree.js';\nimport type { LangiumDocument } from '../workspace/documents.js';\nimport type { DiagnosticData, DiagnosticInfo, ValidationAcceptor, ValidationCategory, ValidationRegistry } from './validation-registry.js';\nimport { CancellationToken } from '../utils/cancellation.js';\nimport { findNodeForKeyword, findNodeForProperty } from '../utils/grammar-utils.js';\nimport { streamAst } from '../utils/ast-utils.js';\nimport { tokenToRange } from '../utils/cst-utils.js';\nimport { interruptAndCheck, isOperationCancelled } from '../utils/promise-utils.js';\nimport { diagnosticData } from './validation-registry.js';\n\nexport interface ValidationOptions {\n    /**\n     * If this is set, only the checks associated with these categories are executed; otherwise\n     * all checks are executed. The default category if not specified to the registry is `'fast'`.\n     */\n    categories?: ValidationCategory[];\n    /** If true, no further diagnostics are reported if there are lexing errors. */\n    stopAfterLexingErrors?: boolean\n    /** If true, no further diagnostics are reported if there are parsing errors. */\n    stopAfterParsingErrors?: boolean\n    /** If true, no further diagnostics are reported if there are linking errors. */\n    stopAfterLinkingErrors?: boolean\n}\n\n/**\n * Language-specific service for validating `LangiumDocument`s.\n */\nexport interface DocumentValidator {\n    /**\n     * Validates the whole specified document.\n     *\n     * @param document specified document to validate\n     * @param options options to control the validation process\n     * @param cancelToken allows to cancel the current operation\n     * @throws `OperationCanceled` if a user action occurs during execution\n     */\n    validateDocument(document: LangiumDocument, options?: ValidationOptions, cancelToken?: CancellationToken): Promise<Diagnostic[]>;\n}\n\nexport class DefaultDocumentValidator implements DocumentValidator {\n\n    protected readonly validationRegistry: ValidationRegistry;\n    protected readonly metadata: LanguageMetaData;\n\n    constructor(services: LangiumCoreServices) {\n        this.validationRegistry = services.validation.ValidationRegistry;\n        this.metadata = services.LanguageMetaData;\n    }\n\n    async validateDocument(document: LangiumDocument, options: ValidationOptions = {}, cancelToken = CancellationToken.None): Promise<Diagnostic[]> {\n        const parseResult = document.parseResult;\n        const diagnostics: Diagnostic[] = [];\n\n        await interruptAndCheck(cancelToken);\n\n        if (!options.categories || options.categories.includes('built-in')) {\n            this.processLexingErrors(parseResult, diagnostics, options);\n            if (options.stopAfterLexingErrors && diagnostics.some(d => d.data?.code === DocumentValidator.LexingError)) {\n                return diagnostics;\n            }\n\n            this.processParsingErrors(parseResult, diagnostics, options);\n            if (options.stopAfterParsingErrors && diagnostics.some(d => d.data?.code === DocumentValidator.ParsingError)) {\n                return diagnostics;\n            }\n\n            this.processLinkingErrors(document, diagnostics, options);\n            if (options.stopAfterLinkingErrors && diagnostics.some(d => d.data?.code === DocumentValidator.LinkingError)) {\n                return diagnostics;\n            }\n        }\n\n        // Process custom validations\n        try {\n            diagnostics.push(...await this.validateAst(parseResult.value, options, cancelToken));\n        } catch (err) {\n            if (isOperationCancelled(err)) {\n                throw err;\n            }\n            console.error('An error occurred during validation:', err);\n        }\n\n        await interruptAndCheck(cancelToken);\n\n        return diagnostics;\n    }\n\n    protected processLexingErrors(parseResult: ParseResult, diagnostics: Diagnostic[], _options: ValidationOptions): void {\n        for (const lexerError of parseResult.lexerErrors) {\n            const diagnostic: Diagnostic = {\n                severity: toDiagnosticSeverity('error'),\n                range: {\n                    start: {\n                        line: lexerError.line! - 1,\n                        character: lexerError.column! - 1\n                    },\n                    end: {\n                        line: lexerError.line! - 1,\n                        character: lexerError.column! + lexerError.length - 1\n                    }\n                },\n                message: lexerError.message,\n                data: diagnosticData(DocumentValidator.LexingError),\n                source: this.getSource()\n            };\n            diagnostics.push(diagnostic);\n        }\n    }\n\n    protected processParsingErrors(parseResult: ParseResult, diagnostics: Diagnostic[], _options: ValidationOptions): void {\n        for (const parserError of parseResult.parserErrors) {\n            let range: Range | undefined = undefined;\n            // We can run into the chevrotain error recovery here\n            // The token contained in the parser error might be automatically inserted\n            // In this case every position value will be `NaN`\n            if (isNaN(parserError.token.startOffset)) {\n                // Some special parser error types contain a `previousToken`\n                // We can simply append our diagnostic to that token\n                if ('previousToken' in parserError) {\n                    const token = (parserError as MismatchedTokenException).previousToken;\n                    if (!isNaN(token.startOffset)) {\n                        const position: Position = { line: token.endLine! - 1, character: token.endColumn! };\n                        range = { start: position, end: position};\n                    } else {\n                        // No valid prev token. Might be empty document or containing only hidden tokens.\n                        // Point to document start\n                        const position: Position = { line: 0, character: 0 };\n                        range = { start: position, end: position};\n                    }\n                }\n            } else {\n                range = tokenToRange(parserError.token);\n            }\n            if (range) {\n                const diagnostic: Diagnostic = {\n                    severity: toDiagnosticSeverity('error'),\n                    range,\n                    message: parserError.message,\n                    data: diagnosticData(DocumentValidator.ParsingError),\n                    source: this.getSource()\n                };\n                diagnostics.push(diagnostic);\n            }\n        }\n    }\n\n    protected processLinkingErrors(document: LangiumDocument, diagnostics: Diagnostic[], _options: ValidationOptions): void {\n        for (const reference of document.references) {\n            const linkingError = reference.error;\n            if (linkingError) {\n                const info: DiagnosticInfo<AstNode, string> = {\n                    node: linkingError.container,\n                    property: linkingError.property,\n                    index: linkingError.index,\n                    data: {\n                        code: DocumentValidator.LinkingError,\n                        containerType: linkingError.container.$type,\n                        property: linkingError.property,\n                        refText: linkingError.reference.$refText\n                    } satisfies LinkingErrorData\n                };\n                diagnostics.push(this.toDiagnostic('error', linkingError.message, info));\n            }\n        }\n    }\n\n    protected async validateAst(rootNode: AstNode, options: ValidationOptions, cancelToken = CancellationToken.None): Promise<Diagnostic[]> {\n        const validationItems: Diagnostic[] = [];\n        const acceptor: ValidationAcceptor = <N extends AstNode>(severity: 'error' | 'warning' | 'info' | 'hint', message: string, info: DiagnosticInfo<N>) => {\n            validationItems.push(this.toDiagnostic(severity, message, info));\n        };\n\n        await Promise.all(streamAst(rootNode).map(async node => {\n            await interruptAndCheck(cancelToken);\n            const checks = this.validationRegistry.getChecks(node.$type, options.categories);\n            for (const check of checks) {\n                await check(node, acceptor, cancelToken);\n            }\n        }));\n        return validationItems;\n    }\n\n    protected toDiagnostic<N extends AstNode>(severity: 'error' | 'warning' | 'info' | 'hint', message: string, info: DiagnosticInfo<N, string>): Diagnostic {\n        return {\n            message,\n            range: getDiagnosticRange(info),\n            severity: toDiagnosticSeverity(severity),\n            code: info.code,\n            codeDescription: info.codeDescription,\n            tags: info.tags,\n            relatedInformation: info.relatedInformation,\n            data: info.data,\n            source: this.getSource()\n        };\n    }\n\n    protected getSource(): string | undefined {\n        return this.metadata.languageId;\n    }\n}\n\nexport function getDiagnosticRange<N extends AstNode>(info: DiagnosticInfo<N, string>): Range {\n    if (info.range) {\n        return info.range;\n    }\n    let cstNode: CstNode | undefined;\n    if (typeof info.property === 'string') {\n        cstNode = findNodeForProperty(info.node.$cstNode, info.property, info.index);\n    } else if (typeof info.keyword === 'string') {\n        cstNode = findNodeForKeyword(info.node.$cstNode, info.keyword, info.index);\n    }\n    cstNode ??= info.node.$cstNode;\n    if (!cstNode) {\n        return {\n            start: { line: 0, character: 0 },\n            end: { line: 0, character: 0 }\n        };\n    }\n    return cstNode.range;\n}\n\nexport function toDiagnosticSeverity(severity: 'error' | 'warning' | 'info' | 'hint'): DiagnosticSeverity {\n    switch (severity) {\n        case 'error':\n            return 1; // according to vscode-languageserver-types/lib/esm/main.js#DiagnosticSeverity.Error\n        case 'warning':\n            return 2; // according to vscode-languageserver-types/lib/esm/main.js#DiagnosticSeverity.Warning\n        case 'info':\n            return 3; // according to vscode-languageserver-types/lib/esm/main.js#DiagnosticSeverity.Information\n        case 'hint':\n            return 4; // according to vscode-languageserver-types/lib/esm/main.js#DiagnosticSeverity.Hint\n        default:\n            throw new Error('Invalid diagnostic severity: ' + severity);\n    }\n}\n\nexport namespace DocumentValidator {\n    export const LexingError = 'lexing-error';\n    export const ParsingError = 'parsing-error';\n    export const LinkingError = 'linking-error';\n}\n\nexport interface LinkingErrorData extends DiagnosticData {\n    containerType: string\n    property: string\n    refText: string\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nexport interface Disposable {\n    /**\n     * Dispose this object.\n     */\n    dispose(): void;\n}\n\nexport interface AsyncDisposable {\n    /**\n     * Dispose this object.\n     */\n    dispose(): Promise<void>;\n}\n\nexport namespace Disposable {\n    export function create(callback: () => Promise<void>): AsyncDisposable;\n    export function create(callback: () => void): Disposable;\n    export function create(callback: () => void | Promise<void>): Disposable | AsyncDisposable {\n        return {\n            dispose: async () => await callback()\n        };\n    }\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { URI } from '../utils/uri-utils.js';\nimport type { NameProvider } from '../references/name-provider.js';\nimport type { LangiumCoreServices } from '../services.js';\nimport type { AstNode, AstNodeDescription, ReferenceInfo } from '../syntax-tree.js';\nimport type { AstNodeLocator } from './ast-node-locator.js';\nimport type { DocumentSegment, LangiumDocument } from './documents.js';\nimport { CancellationToken } from '../utils/cancellation.js';\nimport { isLinkingError } from '../syntax-tree.js';\nimport { getDocument, streamAst, streamReferences } from '../utils/ast-utils.js';\nimport { toDocumentSegment } from '../utils/cst-utils.js';\nimport { interruptAndCheck } from '../utils/promise-utils.js';\nimport { UriUtils } from '../utils/uri-utils.js';\n\n/**\n * Language-specific service for creating descriptions of AST nodes to be used for cross-reference resolutions.\n */\nexport interface AstNodeDescriptionProvider {\n\n    /**\n     * Create a description for the given AST node. This service method is typically used while indexing\n     * the contents of a document and during scope computation.\n     *\n     * @param node An AST node.\n     * @param name The name to be used to refer to the AST node. By default, this is determined by the\n     *     `NameProvider` service, but alternative names may be provided according to the semantics\n     *     of your language.\n     * @param document The document containing the AST node. If omitted, it is taken from the root AST node.\n     */\n    createDescription(node: AstNode, name: string | undefined, document?: LangiumDocument): AstNodeDescription;\n\n}\n\nexport class DefaultAstNodeDescriptionProvider implements AstNodeDescriptionProvider {\n\n    protected readonly astNodeLocator: AstNodeLocator;\n    protected readonly nameProvider: NameProvider;\n\n    constructor(services: LangiumCoreServices) {\n        this.astNodeLocator = services.workspace.AstNodeLocator;\n        this.nameProvider = services.references.NameProvider;\n    }\n\n    createDescription(node: AstNode, name: string | undefined, document: LangiumDocument = getDocument(node)): AstNodeDescription {\n        name ??= this.nameProvider.getName(node);\n        const path = this.astNodeLocator.getAstNodePath(node);\n        if (!name) {\n            throw new Error(`Node at path ${path} has no name.`);\n        }\n        let nameNodeSegment: DocumentSegment | undefined;\n        const nameSegmentGetter = () => nameNodeSegment ??= toDocumentSegment(this.nameProvider.getNameNode(node) ?? node.$cstNode);\n        return {\n            node,\n            name,\n            get nameSegment() {\n                return nameSegmentGetter();\n            },\n            selectionSegment: toDocumentSegment(node.$cstNode),\n            type: node.$type,\n            documentUri: document.uri,\n            path\n        };\n    }\n\n}\n\n/**\n * Describes a cross-reference within a document or between two documents.\n */\nexport interface ReferenceDescription {\n    /** URI of the document that holds a reference */\n    sourceUri: URI\n    /** Path to AstNode that holds a reference */\n    sourcePath: string\n    /** Target document uri */\n    targetUri: URI\n    /** Path to the target AstNode inside the document */\n    targetPath: string\n    /** Segment of the reference text. */\n    segment: DocumentSegment\n    /** Marks a local reference i.e. a cross reference inside a document.   */\n    local?: boolean\n}\n\n/**\n * Language-specific service to create descriptions of all cross-references in a document. These are used by the `IndexManager`\n * to determine which documents are affected and should be rebuilt when a document is changed.\n */\nexport interface ReferenceDescriptionProvider {\n    /**\n     * Create descriptions of all cross-references found in the given document. These descriptions are\n     * gathered by the `IndexManager` and stored in the global index so they can be considered when\n     * a document change is reported by the client.\n     *\n     * @param document The document in which to gather cross-references.\n     * @param cancelToken Indicates when to cancel the current operation.\n     * @throws `OperationCanceled` if a user action occurs during execution\n     */\n    createDescriptions(document: LangiumDocument, cancelToken?: CancellationToken): Promise<ReferenceDescription[]>;\n}\n\nexport class DefaultReferenceDescriptionProvider implements ReferenceDescriptionProvider {\n\n    protected readonly nodeLocator: AstNodeLocator;\n\n    constructor(services: LangiumCoreServices) {\n        this.nodeLocator = services.workspace.AstNodeLocator;\n    }\n\n    async createDescriptions(document: LangiumDocument, cancelToken = CancellationToken.None): Promise<ReferenceDescription[]> {\n        const descr: ReferenceDescription[] = [];\n        const rootNode = document.parseResult.value;\n        for (const astNode of streamAst(rootNode)) {\n            await interruptAndCheck(cancelToken);\n            streamReferences(astNode).filter(refInfo => !isLinkingError(refInfo)).forEach(refInfo => {\n                // TODO: Consider logging a warning or throw an exception when DocumentState is < than Linked\n                const description = this.createDescription(refInfo);\n                if (description) {\n                    descr.push(description);\n                }\n            });\n        }\n        return descr;\n    }\n\n    protected createDescription(refInfo: ReferenceInfo): ReferenceDescription | undefined {\n        const targetNodeDescr = refInfo.reference.$nodeDescription;\n        const refCstNode = refInfo.reference.$refNode;\n        if (!targetNodeDescr || !refCstNode) {\n            return undefined;\n        }\n        const docUri = getDocument(refInfo.container).uri;\n        return {\n            sourceUri: docUri,\n            sourcePath: this.nodeLocator.getAstNodePath(refInfo.container),\n            targetUri: targetNodeDescr.documentUri,\n            targetPath: targetNodeDescr.path,\n            segment: toDocumentSegment(refCstNode),\n            local: UriUtils.equals(targetNodeDescr.documentUri, docUri)\n        };\n    }\n\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { AstNode } from '../syntax-tree.js';\n\n/**\n * Language-specific service for locating an `AstNode` in a document.\n */\nexport interface AstNodeLocator {\n\n    /**\n     * Creates a path represented by a `string` that identifies an `AstNode` inside its document.\n     * It must be possible to retrieve exactly the same `AstNode` from the document using this path.\n     *\n     * @param node The `AstNode` for which to create the path.\n     * @returns a path represented by a `string` that identifies `node` inside its document.\n     * @see AstNodeLocator.getAstNode\n     */\n    getAstNodePath(node: AstNode): string;\n\n    /**\n     * Locates an `AstNode` inside another node by following the given path.\n     *\n     * @param node Parent element.\n     * @param path Describes how to locate the `AstNode` inside the given `node`.\n     * @returns The `AstNode` located under the given path, or `undefined` if the path cannot be resolved.\n     * @see AstNodeLocator.getAstNodePath\n     */\n    getAstNode<T extends AstNode = AstNode>(node: AstNode, path: string): T | undefined;\n\n}\n\nexport class DefaultAstNodeLocator implements AstNodeLocator {\n    protected segmentSeparator = '/';\n    protected indexSeparator = '@';\n\n    getAstNodePath(node: AstNode): string {\n        if (node.$container) {\n            const containerPath = this.getAstNodePath(node.$container);\n            const newSegment = this.getPathSegment(node);\n            const nodePath = containerPath + this.segmentSeparator + newSegment;\n            return nodePath;\n        }\n        return '';\n    }\n\n    protected getPathSegment({ $containerProperty, $containerIndex }: AstNode): string {\n        if (!$containerProperty) {\n            throw new Error(\"Missing '$containerProperty' in AST node.\");\n        }\n        if ($containerIndex !== undefined) {\n            return $containerProperty + this.indexSeparator + $containerIndex;\n        }\n        return $containerProperty;\n    }\n\n    getAstNode<T extends AstNode = AstNode>(node: AstNode, path: string): T | undefined {\n        const segments = path.split(this.segmentSeparator);\n        return segments.reduce((previousValue, currentValue) => {\n            if (!previousValue || currentValue.length === 0) {\n                return previousValue;\n            }\n            const propertyIndex = currentValue.indexOf(this.indexSeparator);\n            if (propertyIndex > 0) {\n                const property = currentValue.substring(0, propertyIndex);\n                const arrayIndex = parseInt(currentValue.substring(propertyIndex + 1));\n                const array = (previousValue as unknown as Record<string, AstNode[]>)[property];\n                return array?.[arrayIndex];\n            }\n            return (previousValue as unknown as Record<string, AstNode>)[currentValue];\n        }, node) as T;\n    }\n\n}\n","/******************************************************************************\n * Copyright 2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { ConfigurationItem, DidChangeConfigurationParams, DidChangeConfigurationRegistrationOptions, InitializeParams, InitializedParams } from 'vscode-languageserver-protocol';\nimport type { ServiceRegistry } from '../service-registry.js';\nimport type { LangiumSharedCoreServices } from '../services.js';\nimport { Deferred } from '../utils/promise-utils.js';\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nexport interface ConfigurationProvider {\n\n    /**\n     * A promise that resolves when the configuration provider is ready to be used.\n     */\n    readonly ready: Promise<void>;\n\n    /**\n     * When used in a language server context, this method is called when the server receives\n     * the `initialize` request.\n     */\n    initialize(params: InitializeParams): void;\n\n    /**\n     * When used in a language server context, this method is called when the server receives\n     * the `initialized` notification.\n     */\n    initialized(params: ConfigurationInitializedParams): Promise<void>;\n\n    /**\n     * Returns a configuration value stored for the given language.\n     *\n     * @param language The language id\n     * @param configuration Configuration name\n     */\n    getConfiguration(language: string, configuration: string): Promise<any>;\n\n    /**\n     *  Updates the cached configurations using the `change` notification parameters.\n     *\n     * @param change The parameters of a change configuration notification.\n     * `settings` property of the change object could be expressed as `Record<string, Record<string, any>>`\n     */\n    updateConfiguration(change: DidChangeConfigurationParams): void;\n}\n\nexport interface ConfigurationInitializedParams extends InitializedParams {\n    register?: (params: DidChangeConfigurationRegistrationOptions) => void,\n    fetchConfiguration?: (configuration: ConfigurationItem[]) => Promise<any>\n}\n\n/**\n * Base configuration provider for building up other configuration providers\n */\nexport class DefaultConfigurationProvider implements ConfigurationProvider {\n\n    protected readonly serviceRegistry: ServiceRegistry;\n    protected readonly _ready = new Deferred<void>();\n    protected settings: Record<string, Record<string, any>> = {};\n    protected workspaceConfig = false;\n\n    constructor(services: LangiumSharedCoreServices) {\n        this.serviceRegistry = services.ServiceRegistry;\n    }\n\n    get ready(): Promise<void> {\n        return this._ready.promise;\n    }\n\n    initialize(params: InitializeParams): void {\n        this.workspaceConfig = params.capabilities.workspace?.configuration ?? false;\n    }\n\n    async initialized(params: ConfigurationInitializedParams): Promise<void> {\n        if (this.workspaceConfig) {\n            if (params.register) {\n                // params.register(...) is a function to be provided by the calling language server for the sake of\n                //  decoupling this implementation from the concrete LSP implementations, specifically the LSP Connection\n\n                const languages = this.serviceRegistry.all;\n                params.register({\n                    // Listen to configuration changes for all languages\n                    section: languages.map(lang => this.toSectionName(lang.LanguageMetaData.languageId))\n                });\n            }\n\n            if (params.fetchConfiguration) {\n                // params.fetchConfiguration(...) is a function to be provided by the calling language server for the sake of\n                //  decoupling this implementation from the concrete LSP implementations, specifically the LSP Connection\n                const configToUpdate = this.serviceRegistry.all.map(lang => <ConfigurationItem>{\n                    // Fetch the configuration changes for all languages\n                    section: this.toSectionName(lang.LanguageMetaData.languageId)\n                });\n\n                // get workspace configurations (default scope URI)\n                const configs = await params.fetchConfiguration(configToUpdate);\n                configToUpdate.forEach((conf, idx) => {\n                    this.updateSectionConfiguration(conf.section!, configs[idx]);\n                });\n            }\n        }\n        this._ready.resolve();\n    }\n\n    /**\n     *  Updates the cached configurations using the `change` notification parameters.\n     *\n     * @param change The parameters of a change configuration notification.\n     * `settings` property of the change object could be expressed as `Record<string, Record<string, any>>`\n     */\n    updateConfiguration(change: DidChangeConfigurationParams): void {\n        if (!change.settings) {\n            return;\n        }\n        Object.keys(change.settings).forEach(section => {\n            this.updateSectionConfiguration(section, change.settings[section]);\n        });\n    }\n\n    protected updateSectionConfiguration(section: string, configuration: any): void {\n        this.settings[section] = configuration;\n    }\n\n    /**\n    * Returns a configuration value stored for the given language.\n    *\n    * @param language The language id\n    * @param configuration Configuration name\n    */\n    async getConfiguration(language: string, configuration: string): Promise<any> {\n        await this.ready;\n\n        const sectionName = this.toSectionName(language);\n        if (this.settings[sectionName]) {\n            return this.settings[sectionName][configuration];\n        }\n    }\n\n    protected toSectionName(languageId: string): string {\n        return `${languageId}`;\n    }\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport { CancellationToken } from '../utils/cancellation.js';\nimport { Disposable } from '../utils/disposable.js';\nimport type { ServiceRegistry } from '../service-registry.js';\nimport type { LangiumSharedCoreServices } from '../services.js';\nimport type { AstNode } from '../syntax-tree.js';\nimport type { MaybePromise } from '../utils/promise-utils.js';\nimport type { Deferred } from '../utils/promise-utils.js';\nimport type { ValidationOptions } from '../validation/document-validator.js';\nimport type { IndexManager } from '../workspace/index-manager.js';\nimport type { LangiumDocument, LangiumDocuments, LangiumDocumentFactory } from './documents.js';\nimport { MultiMap } from '../utils/collections.js';\nimport { OperationCancelled, interruptAndCheck } from '../utils/promise-utils.js';\nimport { stream } from '../utils/stream.js';\nimport type { URI } from '../utils/uri-utils.js';\nimport { ValidationCategory } from '../validation/validation-registry.js';\nimport { DocumentState } from './documents.js';\n\nexport interface BuildOptions {\n    /**\n     * Control the validation phase with this option:\n     *  - `true` enables all validation checks and forces revalidating the documents\n     *  - `false` or `undefined` disables all validation checks\n     *  - An object runs only the necessary validation checks; the `categories` property restricts this to a specific subset\n     */\n    validation?: boolean | ValidationOptions\n}\n\nexport interface DocumentBuildState {\n    /** Whether a document has completed its last build process. */\n    completed: boolean\n    /** The options used for the last build process. */\n    options: BuildOptions\n    /** Additional information about the last build result. */\n    result?: {\n        validationChecks?: ValidationCategory[]\n    }\n}\n\n/**\n * Shared-service for building and updating `LangiumDocument`s.\n */\nexport interface DocumentBuilder {\n\n    /** The options used for rebuilding documents after an update. */\n    updateBuildOptions: BuildOptions;\n\n    /**\n     * Execute all necessary build steps for the given documents.\n     *\n     * @param documents Set of documents to be built.\n     * @param options Options for the document builder.\n     * @param cancelToken Indicates when to cancel the current operation.\n     * @throws `OperationCanceled` if a user action occurs during execution\n     */\n    build<T extends AstNode>(documents: Array<LangiumDocument<T>>, options?: BuildOptions, cancelToken?: CancellationToken): Promise<void>;\n\n    /**\n     * This method is called when a document change is detected. It updates the state of all\n     * affected documents, including those with references to the changed ones, so they are rebuilt.\n     *\n     * @param changed URIs of changed or created documents\n     * @param deleted URIs of deleted documents\n     * @param cancelToken allows to cancel the current operation\n     * @throws `OperationCancelled` if cancellation is detected during execution\n     */\n    update(changed: URI[], deleted: URI[], cancelToken?: CancellationToken): Promise<void>;\n\n    /**\n     * Notify the given callback when a document update was triggered, but before any document\n     * is rebuilt. Listeners to this event should not perform any long-running task.\n     */\n    onUpdate(callback: DocumentUpdateListener): Disposable;\n\n    /**\n     * Notify the given callback when a set of documents has been built reaching a desired target state.\n     */\n    onBuildPhase(targetState: DocumentState, callback: DocumentBuildListener): Disposable;\n\n    /**\n     * Wait until the workspace has reached the specified state for all documents.\n     *\n     * @param state The desired state. The promise won't resolve until all documents have reached this state\n     * @param cancelToken Optionally allows to cancel the wait operation, disposing any listeners in the process\n     * @throws `OperationCancelled` if cancellation has been requested before the state has been reached\n     */\n    waitUntil(state: DocumentState, cancelToken?: CancellationToken): Promise<void>;\n\n    /**\n     * Wait until the document specified by the {@link uri} has reached the specified state.\n     *\n     * @param state The desired state. The promise won't resolve until the document has reached this state.\n     * @param uri The specified URI that points to the document. If the URI does not exist, the promise will resolve once the workspace has reached the specified state.\n     * @param cancelToken Optionally allows to cancel the wait operation, disposing any listeners in the process.\n     * @return The URI of the document that has reached the desired state, or `undefined` if the document does not exist.\n     * @throws `OperationCancelled` if cancellation has been requested before the state has been reached\n     */\n    waitUntil(state: DocumentState, uri?: URI, cancelToken?: CancellationToken): Promise<URI | undefined>;\n}\n\nexport type DocumentUpdateListener = (changed: URI[], deleted: URI[]) => void | Promise<void>\nexport type DocumentBuildListener = (built: LangiumDocument[], cancelToken: CancellationToken) => void | Promise<void>\nexport class DefaultDocumentBuilder implements DocumentBuilder {\n\n    updateBuildOptions: BuildOptions = {\n        // Default: run only the built-in validation checks and those in the _fast_ category (includes those without category)\n        validation: {\n            categories: ['built-in', 'fast']\n        }\n    };\n\n    protected readonly langiumDocuments: LangiumDocuments;\n    protected readonly langiumDocumentFactory: LangiumDocumentFactory;\n    protected readonly indexManager: IndexManager;\n    protected readonly serviceRegistry: ServiceRegistry;\n    protected readonly updateListeners: DocumentUpdateListener[] = [];\n    protected readonly buildPhaseListeners = new MultiMap<DocumentState, DocumentBuildListener>();\n    protected readonly buildState = new Map<string, DocumentBuildState>();\n    protected readonly documentBuildWaiters = new Map<string, Deferred<void>>();\n    protected currentState = DocumentState.Changed;\n\n    constructor(services: LangiumSharedCoreServices) {\n        this.langiumDocuments = services.workspace.LangiumDocuments;\n        this.langiumDocumentFactory = services.workspace.LangiumDocumentFactory;\n        this.indexManager = services.workspace.IndexManager;\n        this.serviceRegistry = services.ServiceRegistry;\n    }\n\n    async build<T extends AstNode>(documents: Array<LangiumDocument<T>>, options: BuildOptions = {}, cancelToken = CancellationToken.None): Promise<void> {\n        for (const document of documents) {\n            const key = document.uri.toString();\n            if (document.state === DocumentState.Validated) {\n                if (typeof options.validation === 'boolean' && options.validation) {\n                    // Force re-running all validation checks\n                    document.state = DocumentState.IndexedReferences;\n                    document.diagnostics = undefined;\n                    this.buildState.delete(key);\n                } else if (typeof options.validation === 'object') {\n                    const buildState = this.buildState.get(key);\n                    const previousCategories = buildState?.result?.validationChecks;\n                    if (previousCategories) {\n                        // Validation with explicit options was requested for a document that has already been partly validated.\n                        // In this case, we need to merge the previous validation categories with the new ones.\n                        const newCategories = options.validation.categories ?? ValidationCategory.all as ValidationCategory[];\n                        const categories = newCategories.filter(c => !previousCategories.includes(c));\n                        if (categories.length > 0) {\n                            this.buildState.set(key, {\n                                completed: false,\n                                options: {\n                                    validation: {\n                                        ...options.validation,\n                                        categories\n                                    }\n                                },\n                                result: buildState.result\n                            });\n                            document.state = DocumentState.IndexedReferences;\n                        }\n                    }\n                }\n            } else {\n                // Default: forget any previous build options\n                this.buildState.delete(key);\n            }\n        }\n        this.currentState = DocumentState.Changed;\n        await this.emitUpdate(documents.map(e => e.uri), []);\n        await this.buildDocuments(documents, options, cancelToken);\n    }\n\n    async update(changed: URI[], deleted: URI[], cancelToken = CancellationToken.None): Promise<void> {\n        this.currentState = DocumentState.Changed;\n        // Remove all metadata of documents that are reported as deleted\n        for (const deletedUri of deleted) {\n            this.langiumDocuments.deleteDocument(deletedUri);\n            this.buildState.delete(deletedUri.toString());\n            this.indexManager.remove(deletedUri);\n        }\n        // Set the state of all changed documents to `Changed` so they are completely rebuilt\n        for (const changedUri of changed) {\n            const invalidated = this.langiumDocuments.invalidateDocument(changedUri);\n            if (!invalidated) {\n                // We create an unparsed, invalid document.\n                // This will be parsed as soon as we reach the first document builder phase.\n                // This allows to cancel the parsing process later in case we need it.\n                const newDocument = this.langiumDocumentFactory.fromModel({ $type: 'INVALID' }, changedUri);\n                newDocument.state = DocumentState.Changed;\n                this.langiumDocuments.addDocument(newDocument);\n            }\n            this.buildState.delete(changedUri.toString());\n        }\n        // Set the state of all documents that should be relinked to `ComputedScopes` (if not already lower)\n        const allChangedUris = stream(changed).concat(deleted).map(uri => uri.toString()).toSet();\n        this.langiumDocuments.all\n            .filter(doc => !allChangedUris.has(doc.uri.toString()) && this.shouldRelink(doc, allChangedUris))\n            .forEach(doc => {\n                const linker = this.serviceRegistry.getServices(doc.uri).references.Linker;\n                linker.unlink(doc);\n                doc.state = Math.min(doc.state, DocumentState.ComputedScopes);\n                doc.diagnostics = undefined;\n            });\n        // Notify listeners of the update\n        await this.emitUpdate(changed, deleted);\n        // Only allow interrupting the execution after all state changes are done\n        await interruptAndCheck(cancelToken);\n\n        // Collect all documents that we should rebuild\n        const rebuildDocuments = this.langiumDocuments.all\n            .filter(doc =>\n                // This includes those that were reported as changed and those that we selected for relinking\n                doc.state < DocumentState.Linked\n                // This includes those for which a previous build has been cancelled\n                || !this.buildState.get(doc.uri.toString())?.completed\n            )\n            .toArray();\n        await this.buildDocuments(rebuildDocuments, this.updateBuildOptions, cancelToken);\n    }\n\n    protected async emitUpdate(changed: URI[], deleted: URI[]): Promise<void> {\n        await Promise.all(this.updateListeners.map(listener => listener(changed, deleted)));\n    }\n\n    /**\n     * Check whether the given document should be relinked after changes were found in the given URIs.\n     */\n    protected shouldRelink(document: LangiumDocument, changedUris: Set<string>): boolean {\n        // Relink documents with linking errors -- maybe those references can be resolved now\n        if (document.references.some(ref => ref.error !== undefined)) {\n            return true;\n        }\n        // Check whether the document is affected by any of the changed URIs\n        return this.indexManager.isAffected(document, changedUris);\n    }\n\n    onUpdate(callback: DocumentUpdateListener): Disposable {\n        this.updateListeners.push(callback);\n        return Disposable.create(() => {\n            const index = this.updateListeners.indexOf(callback);\n            if (index >= 0) {\n                this.updateListeners.splice(index, 1);\n            }\n        });\n    }\n\n    /**\n     * Build the given documents by stepping through all build phases. If a document's state indicates\n     * that a certain build phase is already done, the phase is skipped for that document.\n     */\n    protected async buildDocuments(documents: LangiumDocument[], options: BuildOptions, cancelToken: CancellationToken): Promise<void> {\n        this.prepareBuild(documents, options);\n        // 0. Parse content\n        await this.runCancelable(documents, DocumentState.Parsed, cancelToken, doc =>\n            this.langiumDocumentFactory.update(doc, cancelToken)\n        );\n        // 1. Index content\n        await this.runCancelable(documents, DocumentState.IndexedContent, cancelToken, doc =>\n            this.indexManager.updateContent(doc, cancelToken)\n        );\n        // 2. Compute scopes\n        await this.runCancelable(documents, DocumentState.ComputedScopes, cancelToken, async doc => {\n            const scopeComputation = this.serviceRegistry.getServices(doc.uri).references.ScopeComputation;\n            doc.precomputedScopes = await scopeComputation.computeLocalScopes(doc, cancelToken);\n        });\n        // 3. Linking\n        await this.runCancelable(documents, DocumentState.Linked, cancelToken, doc => {\n            const linker = this.serviceRegistry.getServices(doc.uri).references.Linker;\n            return linker.link(doc, cancelToken);\n        });\n        // 4. Index references\n        await this.runCancelable(documents, DocumentState.IndexedReferences, cancelToken, doc =>\n            this.indexManager.updateReferences(doc, cancelToken)\n        );\n        // 5. Validation\n        const toBeValidated = documents.filter(doc => this.shouldValidate(doc));\n        await this.runCancelable(toBeValidated, DocumentState.Validated, cancelToken, doc =>\n            this.validate(doc, cancelToken)\n        );\n\n        // If we've made it to this point without being cancelled, we can mark the build state as completed.\n        for (const doc of documents) {\n            const state = this.buildState.get(doc.uri.toString());\n            if (state) {\n                state.completed = true;\n            }\n        }\n    }\n\n    protected prepareBuild(documents: LangiumDocument[], options: BuildOptions): void {\n        for (const doc of documents) {\n            const key = doc.uri.toString();\n            const state = this.buildState.get(key);\n            // If the document has no previous build state, we set it. If it has one, but it's already marked\n            // as completed, we overwrite it. If the previous build was not completed, we keep its state\n            // and continue where it was cancelled.\n            if (!state || state.completed) {\n                this.buildState.set(key, {\n                    completed: false,\n                    options,\n                    result: state?.result\n                });\n            }\n        }\n    }\n\n    protected async runCancelable(documents: LangiumDocument[], targetState: DocumentState, cancelToken: CancellationToken,\n        callback: (document: LangiumDocument) => MaybePromise<unknown>): Promise<void> {\n        const filtered = documents.filter(e => e.state < targetState);\n        for (const document of filtered) {\n            await interruptAndCheck(cancelToken);\n            await callback(document);\n            document.state = targetState;\n        }\n        await this.notifyBuildPhase(filtered, targetState, cancelToken);\n        this.currentState = targetState;\n    }\n\n    onBuildPhase(targetState: DocumentState, callback: DocumentBuildListener): Disposable {\n        this.buildPhaseListeners.add(targetState, callback);\n        return Disposable.create(() => {\n            this.buildPhaseListeners.delete(targetState, callback);\n        });\n    }\n\n    waitUntil(state: DocumentState, cancelToken?: CancellationToken): Promise<void>;\n    waitUntil(state: DocumentState, uri?: URI, cancelToken?: CancellationToken): Promise<URI | undefined>;\n    waitUntil(state: DocumentState, uriOrToken?: URI | CancellationToken, cancelToken?: CancellationToken): Promise<URI | undefined | void> {\n        let uri: URI | undefined = undefined;\n        if (uriOrToken && 'path' in uriOrToken) {\n            uri = uriOrToken;\n        } else {\n            cancelToken = uriOrToken;\n        }\n        cancelToken ??= CancellationToken.None;\n        if (uri) {\n            const document = this.langiumDocuments.getDocument(uri);\n            if (document && document.state > state) {\n                return Promise.resolve(uri);\n            }\n        }\n        if (this.currentState >= state) {\n            return Promise.resolve(undefined);\n        } else if (cancelToken.isCancellationRequested) {\n            return Promise.reject(OperationCancelled);\n        }\n        return new Promise((resolve, reject) => {\n            const buildDisposable = this.onBuildPhase(state, () => {\n                buildDisposable.dispose();\n                cancelDisposable.dispose();\n                if (uri) {\n                    const document = this.langiumDocuments.getDocument(uri);\n                    resolve(document?.uri);\n                } else {\n                    resolve(undefined);\n                }\n            });\n            const cancelDisposable = cancelToken!.onCancellationRequested(() => {\n                buildDisposable.dispose();\n                cancelDisposable.dispose();\n                reject(OperationCancelled);\n            });\n        });\n    }\n\n    protected async notifyBuildPhase(documents: LangiumDocument[], state: DocumentState, cancelToken: CancellationToken): Promise<void> {\n        if (documents.length === 0) {\n            // Don't notify when no document has been processed\n            return;\n        }\n        const listeners = this.buildPhaseListeners.get(state);\n        for (const listener of listeners) {\n            await interruptAndCheck(cancelToken);\n            await listener(documents, cancelToken);\n        }\n    }\n\n    /**\n     * Determine whether the given document should be validated during a build. The default\n     * implementation checks the `validation` property of the build options. If it's set to `true`\n     * or a `ValidationOptions` object, the document is included in the validation phase.\n     */\n    protected shouldValidate(document: LangiumDocument): boolean {\n        return Boolean(this.getBuildOptions(document).validation);\n    }\n\n    /**\n     * Run validation checks on the given document and store the resulting diagnostics in the document.\n     * If the document already contains diagnostics, the new ones are added to the list.\n     */\n    protected async validate(document: LangiumDocument, cancelToken: CancellationToken): Promise<void> {\n        const validator = this.serviceRegistry.getServices(document.uri).validation.DocumentValidator;\n        const validationSetting = this.getBuildOptions(document).validation;\n        const options = typeof validationSetting === 'object' ? validationSetting : undefined;\n        const diagnostics = await validator.validateDocument(document, options, cancelToken);\n        if (document.diagnostics) {\n            document.diagnostics.push(...diagnostics);\n        } else {\n            document.diagnostics = diagnostics;\n        }\n\n        // Store information about the executed validation in the build state\n        const state = this.buildState.get(document.uri.toString());\n        if (state) {\n            state.result ??= {};\n            const newCategories = options?.categories ?? ValidationCategory.all;\n            if (state.result.validationChecks) {\n                state.result.validationChecks.push(...newCategories);\n            } else {\n                state.result.validationChecks = [...newCategories];\n            }\n        }\n    }\n\n    protected getBuildOptions(document: LangiumDocument): BuildOptions {\n        return this.buildState.get(document.uri.toString())?.options ?? {};\n    }\n\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { ServiceRegistry } from '../service-registry.js';\nimport type { LangiumSharedCoreServices } from '../services.js';\nimport type { AstNode, AstNodeDescription, AstReflection } from '../syntax-tree.js';\nimport { getDocument } from '../utils/ast-utils.js';\nimport { ContextCache } from '../utils/caching.js';\nimport { CancellationToken } from '../utils/cancellation.js';\nimport type { Stream } from '../utils/stream.js';\nimport { stream } from '../utils/stream.js';\nimport type { URI } from '../utils/uri-utils.js';\nimport { UriUtils } from '../utils/uri-utils.js';\nimport type { ReferenceDescription } from './ast-descriptions.js';\nimport type { LangiumDocument, LangiumDocuments } from './documents.js';\n\n/**\n * The index manager is responsible for keeping metadata about symbols and cross-references\n * in the workspace. It is used to look up symbols in the global scope, mostly during linking\n * and completion. This service is shared between all languages of a language server.\n */\nexport interface IndexManager {\n\n    /**\n     * Removes the specified document URI from the index.\n     * Necessary when documents are deleted and not referenceable anymore.\n     *\n     * @param uri The URI of the document for which index data shall be removed\n     */\n    remove(uri: URI): void;\n\n    /**\n     * Updates the information about the exportable content of a document inside the index.\n     *\n     * @param document Document to be updated\n     * @param cancelToken Indicates when to cancel the current operation.\n     * @throws `OperationCanceled` if a user action occurs during execution\n     */\n    updateContent(document: LangiumDocument, cancelToken?: CancellationToken): Promise<void>;\n\n    /**\n     * Updates the information about the cross-references of a document inside the index.\n     *\n     * @param document Document to be updated\n     * @param cancelToken Indicates when to cancel the current operation.\n     * @throws `OperationCanceled` if a user action occurs during execution\n     */\n    updateReferences(document: LangiumDocument, cancelToken?: CancellationToken): Promise<void>;\n\n    /**\n     * Determine whether the given document could be affected by changes of the documents\n     * identified by the given URIs (second parameter). The document is typically regarded as\n     * affected if it contains a reference to any of the changed files.\n     *\n     * @param document Document to check whether it's affected\n     * @param changedUris URIs of the changed documents\n     */\n    isAffected(document: LangiumDocument, changedUris: Set<string>): boolean;\n\n    /**\n     * Compute a list of all exported elements, optionally filtered using a type identifier and document URIs.\n     *\n     * @param nodeType The type to filter with, or `undefined` to return descriptions of all types.\n     * @param uris If specified, only returns elements from the given URIs.\n     * @returns a `Stream` containing all globally visible nodes (of a given type).\n     */\n    allElements(nodeType?: string, uris?: Set<string>): Stream<AstNodeDescription>;\n\n    /**\n     * Returns all known references that are pointing to the given `targetNode`.\n     *\n     * @param targetNode the `AstNode` to look up references for\n     * @param astNodePath the path that points to the `targetNode` inside the document. See also `AstNodeLocator`\n     *\n     * @returns a `Stream` of references that are targeting the `targetNode`\n     */\n    findAllReferences(targetNode: AstNode, astNodePath: string): Stream<ReferenceDescription>;\n\n}\n\nexport class DefaultIndexManager implements IndexManager {\n\n    protected readonly serviceRegistry: ServiceRegistry;\n    protected readonly documents: LangiumDocuments;\n    protected readonly astReflection: AstReflection;\n\n    /**\n     * The symbol index stores all `AstNodeDescription` items exported by a document.\n     * The key used in this map is the string representation of the specific document URI.\n     */\n    protected readonly symbolIndex = new Map<string, AstNodeDescription[]>();\n    /**\n     * This is a cache for the `allElements()` method.\n     * It caches the descriptions from `symbolIndex` grouped by types.\n     */\n    protected readonly symbolByTypeIndex = new ContextCache<string, string, AstNodeDescription[]>();\n    /**\n     * This index keeps track of all `ReferenceDescription` items exported by a document.\n     * This is used to compute which elements are affected by a document change\n     * and for finding references to an AST node.\n     */\n    protected readonly referenceIndex = new Map<string, ReferenceDescription[]>();\n\n    constructor(services: LangiumSharedCoreServices) {\n        this.documents = services.workspace.LangiumDocuments;\n        this.serviceRegistry = services.ServiceRegistry;\n        this.astReflection = services.AstReflection;\n    }\n\n    findAllReferences(targetNode: AstNode, astNodePath: string): Stream<ReferenceDescription> {\n        const targetDocUri = getDocument(targetNode).uri;\n        const result: ReferenceDescription[] = [];\n        this.referenceIndex.forEach(docRefs => {\n            docRefs.forEach(refDescr => {\n                if (UriUtils.equals(refDescr.targetUri, targetDocUri) && refDescr.targetPath === astNodePath) {\n                    result.push(refDescr);\n                }\n            });\n        });\n        return stream(result);\n    }\n\n    allElements(nodeType?: string, uris?: Set<string>): Stream<AstNodeDescription> {\n        let documentUris = stream(this.symbolIndex.keys());\n        if (uris) {\n            documentUris = documentUris.filter(uri => !uris || uris.has(uri));\n        }\n        return documentUris\n            .map(uri => this.getFileDescriptions(uri, nodeType))\n            .flat();\n    }\n\n    protected getFileDescriptions(uri: string, nodeType?: string): AstNodeDescription[] {\n        if (!nodeType) {\n            return this.symbolIndex.get(uri) ?? [];\n        }\n        const descriptions = this.symbolByTypeIndex.get(uri, nodeType, () => {\n            const allFileDescriptions = this.symbolIndex.get(uri) ?? [];\n            return allFileDescriptions.filter(e => this.astReflection.isSubtype(e.type, nodeType));\n        });\n        return descriptions;\n    }\n\n    remove(uri: URI): void {\n        const uriString = uri.toString();\n        this.symbolIndex.delete(uriString);\n        this.symbolByTypeIndex.clear(uriString);\n        this.referenceIndex.delete(uriString);\n    }\n\n    async updateContent(document: LangiumDocument, cancelToken = CancellationToken.None): Promise<void> {\n        const services = this.serviceRegistry.getServices(document.uri);\n        const exports = await services.references.ScopeComputation.computeExports(document, cancelToken);\n        const uri = document.uri.toString();\n        this.symbolIndex.set(uri, exports);\n        this.symbolByTypeIndex.clear(uri);\n    }\n\n    async updateReferences(document: LangiumDocument, cancelToken = CancellationToken.None): Promise<void> {\n        const services = this.serviceRegistry.getServices(document.uri);\n        const indexData = await services.workspace.ReferenceDescriptionProvider.createDescriptions(document, cancelToken);\n        this.referenceIndex.set(document.uri.toString(), indexData);\n    }\n\n    isAffected(document: LangiumDocument, changedUris: Set<string>): boolean {\n        const references = this.referenceIndex.get(document.uri.toString());\n        if (!references) {\n            return false;\n        }\n        return references.some(ref => !ref.local && changedUris.has(ref.targetUri.toString()));\n    }\n\n}\n","/******************************************************************************\n * Copyright 2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { InitializeParams, InitializedParams } from 'vscode-languageserver-protocol';\nimport type { WorkspaceFolder } from 'vscode-languageserver-types';\nimport type { ServiceRegistry } from '../service-registry.js';\nimport type { LangiumSharedCoreServices } from '../services.js';\nimport { CancellationToken } from '../utils/cancellation.js';\nimport { Deferred, interruptAndCheck } from '../utils/promise-utils.js';\nimport { URI, UriUtils } from '../utils/uri-utils.js';\nimport type { BuildOptions, DocumentBuilder } from './document-builder.js';\nimport type { LangiumDocument, LangiumDocuments } from './documents.js';\nimport type { FileSystemNode, FileSystemProvider } from './file-system-provider.js';\nimport type { WorkspaceLock } from './workspace-lock.js';\n\n// export type WorkspaceFolder from 'vscode-languageserver-types' for convenience,\n//  is supposed to avoid confusion as 'WorkspaceFolder' might accidentally be imported via 'vscode-languageclient'\nexport type { WorkspaceFolder };\n\n/**\n * The workspace manager is responsible for finding source files in the workspace.\n * This service is shared between all languages of a language server.\n */\nexport interface WorkspaceManager {\n\n    /** The options used for the initial workspace build. */\n    initialBuildOptions: BuildOptions | undefined;\n\n    /**\n     * A promise that resolves when the workspace manager is ready to be used.\n     * Use this to ensure that the workspace manager has finished its initialization.\n     */\n    readonly ready: Promise<void>;\n\n    /**\n     * When used in a language server context, this method is called when the server receives\n     * the `initialize` request.\n     */\n    initialize(params: InitializeParams): void;\n\n    /**\n     * When used in a language server context, this method is called when the server receives\n     * the `initialized` notification.\n     */\n    initialized(params: InitializedParams): Promise<void>;\n\n    /**\n     * Does the initial indexing of workspace folders.\n     * Collects information about exported and referenced AstNodes in\n     * each language file and stores it locally.\n     *\n     * @param folders The set of workspace folders to be indexed.\n     */\n    initializeWorkspace(folders: WorkspaceFolder[], cancelToken?: CancellationToken): Promise<void>;\n\n}\n\nexport class DefaultWorkspaceManager implements WorkspaceManager {\n\n    initialBuildOptions: BuildOptions = {};\n\n    protected readonly serviceRegistry: ServiceRegistry;\n    protected readonly langiumDocuments: LangiumDocuments;\n    protected readonly documentBuilder: DocumentBuilder;\n    protected readonly fileSystemProvider: FileSystemProvider;\n    protected readonly mutex: WorkspaceLock;\n    protected readonly _ready = new Deferred<void>();\n    protected folders?: WorkspaceFolder[];\n\n    constructor(services: LangiumSharedCoreServices) {\n        this.serviceRegistry = services.ServiceRegistry;\n        this.langiumDocuments = services.workspace.LangiumDocuments;\n        this.documentBuilder = services.workspace.DocumentBuilder;\n        this.fileSystemProvider = services.workspace.FileSystemProvider;\n        this.mutex = services.workspace.WorkspaceLock;\n    }\n\n    get ready(): Promise<void> {\n        return this._ready.promise;\n    }\n\n    initialize(params: InitializeParams): void {\n        this.folders = params.workspaceFolders ?? undefined;\n    }\n\n    initialized(_params: InitializedParams): Promise<void> {\n        // Initialize the workspace even if there are no workspace folders\n        // We still want to load additional documents (language library or similar) during initialization\n        return this.mutex.write(token => this.initializeWorkspace(this.folders ?? [], token));\n    }\n\n    async initializeWorkspace(folders: WorkspaceFolder[], cancelToken = CancellationToken.None): Promise<void> {\n        const documents = await this.performStartup(folders);\n        // Only after creating all documents do we check whether we need to cancel the initialization\n        // The document builder will later pick up on all unprocessed documents\n        await interruptAndCheck(cancelToken);\n        await this.documentBuilder.build(documents, this.initialBuildOptions, cancelToken);\n    }\n\n    /**\n     * Performs the uninterruptable startup sequence of the workspace manager.\n     * This methods loads all documents in the workspace and other documents and returns them.\n     */\n    protected async performStartup(folders: WorkspaceFolder[]): Promise<LangiumDocument[]> {\n        const fileExtensions = this.serviceRegistry.all.flatMap(e => e.LanguageMetaData.fileExtensions);\n        const documents: LangiumDocument[] = [];\n        const collector = (document: LangiumDocument) => {\n            documents.push(document);\n            if (!this.langiumDocuments.hasDocument(document.uri)) {\n                this.langiumDocuments.addDocument(document);\n            }\n        };\n        // Even though we don't await the initialization of the workspace manager,\n        // we can still assume that all library documents and file documents are loaded by the time we start building documents.\n        // The mutex prevents anything from performing a workspace build until we check the cancellation token\n        await this.loadAdditionalDocuments(folders, collector);\n        await Promise.all(\n            folders.map(wf => [wf, this.getRootFolder(wf)] as [WorkspaceFolder, URI])\n                .map(async entry => this.traverseFolder(...entry, fileExtensions, collector))\n        );\n        this._ready.resolve();\n        return documents;\n    }\n\n    /**\n     * Load all additional documents that shall be visible in the context of the given workspace\n     * folders and add them to the collector. This can be used to include built-in libraries of\n     * your language, which can be either loaded from provided files or constructed in memory.\n     */\n    protected loadAdditionalDocuments(_folders: WorkspaceFolder[], _collector: (document: LangiumDocument) => void): Promise<void> {\n        return Promise.resolve();\n    }\n\n    /**\n     * Determine the root folder of the source documents in the given workspace folder.\n     * The default implementation returns the URI of the workspace folder, but you can override\n     * this to return a subfolder like `src` instead.\n     */\n    protected getRootFolder(workspaceFolder: WorkspaceFolder): URI {\n        return URI.parse(workspaceFolder.uri);\n    }\n\n    /**\n     * Traverse the file system folder identified by the given URI and its subfolders. All\n     * contained files that match the file extensions are added to the collector.\n     */\n    protected async traverseFolder(workspaceFolder: WorkspaceFolder, folderPath: URI, fileExtensions: string[], collector: (document: LangiumDocument) => void): Promise<void> {\n        const content = await this.fileSystemProvider.readDirectory(folderPath);\n        await Promise.all(content.map(async entry => {\n            if (this.includeEntry(workspaceFolder, entry, fileExtensions)) {\n                if (entry.isDirectory) {\n                    await this.traverseFolder(workspaceFolder, entry.uri, fileExtensions, collector);\n                } else if (entry.isFile) {\n                    const document = await this.langiumDocuments.getOrCreateDocument(entry.uri);\n                    collector(document);\n                }\n            }\n        }));\n    }\n\n    /**\n     * Determine whether the given folder entry shall be included while indexing the workspace.\n     */\n    protected includeEntry(_workspaceFolder: WorkspaceFolder, entry: FileSystemNode, fileExtensions: string[]): boolean {\n        const name = UriUtils.basename(entry.uri);\n        if (name.startsWith('.')) {\n            return false;\n        }\n        if (entry.isDirectory) {\n            return name !== 'node_modules' && name !== 'out';\n        } else if (entry.isFile) {\n            const extname = UriUtils.extname(entry.uri);\n            return fileExtensions.includes(extname);\n        }\n        return false;\n    }\n\n}\n","/******************************************************************************\n * Copyright 2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { ILexingError, IMultiModeLexerDefinition, IToken, TokenType, TokenTypeDictionary, TokenVocabulary } from 'chevrotain';\nimport type { LangiumCoreServices } from '../services.js';\nimport { Lexer as ChevrotainLexer } from 'chevrotain';\n\nexport interface LexerResult {\n    /**\n     * A list of all tokens that were lexed from the input.\n     *\n     * Note that Langium requires the optional properties\n     * `startLine`, `startColumn`, `endOffset`, `endLine` and `endColumn` to be set on each token.\n     */\n    tokens: IToken[];\n    /**\n     * Contains hidden tokens, usually comments.\n     */\n    hidden: IToken[];\n    errors: ILexingError[];\n}\n\nexport interface Lexer {\n    readonly definition: TokenTypeDictionary;\n    tokenize(text: string): LexerResult;\n}\n\nexport class DefaultLexer implements Lexer {\n\n    protected chevrotainLexer: ChevrotainLexer;\n    protected tokenTypes: TokenTypeDictionary;\n\n    constructor(services: LangiumCoreServices) {\n        const tokens = services.parser.TokenBuilder.buildTokens(services.Grammar, {\n            caseInsensitive: services.LanguageMetaData.caseInsensitive\n        });\n        this.tokenTypes = this.toTokenTypeDictionary(tokens);\n        const lexerTokens = isTokenTypeDictionary(tokens) ? Object.values(tokens) : tokens;\n        this.chevrotainLexer = new ChevrotainLexer(lexerTokens, {\n            positionTracking: 'full'\n        });\n    }\n\n    get definition(): TokenTypeDictionary {\n        return this.tokenTypes;\n    }\n\n    tokenize(text: string): LexerResult {\n        const chevrotainResult = this.chevrotainLexer.tokenize(text);\n        return {\n            tokens: chevrotainResult.tokens,\n            errors: chevrotainResult.errors,\n            hidden: chevrotainResult.groups.hidden ?? []\n        };\n    }\n\n    protected toTokenTypeDictionary(buildTokens: TokenVocabulary): TokenTypeDictionary {\n        if (isTokenTypeDictionary(buildTokens)) return buildTokens;\n        const tokens = isIMultiModeLexerDefinition(buildTokens) ? Object.values(buildTokens.modes).flat() : buildTokens;\n        const res: TokenTypeDictionary = {};\n        tokens.forEach(token => res[token.name] = token);\n        return res;\n    }\n}\n\n/**\n * Returns a check whether the given TokenVocabulary is TokenType array\n */\nexport function isTokenTypeArray(tokenVocabulary: TokenVocabulary): tokenVocabulary is TokenType[] {\n    return Array.isArray(tokenVocabulary) && (tokenVocabulary.length === 0 || 'name' in tokenVocabulary[0]);\n}\n\n/**\n * Returns a check whether the given TokenVocabulary is IMultiModeLexerDefinition\n */\nexport function isIMultiModeLexerDefinition(tokenVocabulary: TokenVocabulary): tokenVocabulary is IMultiModeLexerDefinition {\n    return tokenVocabulary && 'modes' in tokenVocabulary && 'defaultMode' in tokenVocabulary;\n}\n\n/**\n * Returns a check whether the given TokenVocabulary is TokenTypeDictionary\n */\nexport function isTokenTypeDictionary(tokenVocabulary: TokenVocabulary): tokenVocabulary is TokenTypeDictionary {\n    return !isTokenTypeArray(tokenVocabulary) && !isIMultiModeLexerDefinition(tokenVocabulary);\n}\n","/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport { Position, Range } from 'vscode-languageserver-types';\nimport type { CstNode } from '../syntax-tree.js';\nimport { NEWLINE_REGEXP, escapeRegExp } from '../utils/regexp-utils.js';\nimport { URI } from '../utils/uri-utils.js';\n\nexport interface JSDocComment extends JSDocValue {\n    readonly elements: JSDocElement[]\n    getTag(name: string): JSDocTag | undefined\n    getTags(name: string): JSDocTag[]\n}\n\nexport type JSDocElement = JSDocParagraph | JSDocTag;\n\nexport type JSDocInline = JSDocTag | JSDocLine;\n\nexport interface JSDocValue {\n    /**\n     * Represents the range that this JSDoc element occupies.\n     * If the JSDoc was parsed from a `CstNode`, the range will represent the location in the source document.\n     */\n    readonly range: Range\n    /**\n     * Renders this JSDoc element to a plain text representation.\n     */\n    toString(): string\n    /**\n     * Renders this JSDoc element to a markdown representation.\n     *\n     * @param options Rendering options to customize the markdown result.\n     */\n    toMarkdown(options?: JSDocRenderOptions): string\n}\n\nexport interface JSDocParagraph extends JSDocValue {\n    readonly inlines: JSDocInline[]\n}\n\nexport interface JSDocLine extends JSDocValue {\n    readonly text: string\n}\n\nexport interface JSDocTag extends JSDocValue {\n    readonly name: string\n    readonly content: JSDocParagraph\n    readonly inline: boolean\n}\n\nexport interface JSDocParseOptions {\n    /**\n     * The start symbol of your comment format. Defaults to `/**`.\n     */\n    readonly start?: RegExp | string\n    /**\n     * The symbol that start a line of your comment format. Defaults to `*`.\n     */\n    readonly line?: RegExp | string\n    /**\n     * The end symbol of your comment format. Defaults to `*\\/`.\n     */\n    readonly end?: RegExp | string\n}\n\nexport interface JSDocRenderOptions {\n    /**\n     * Determines the style for rendering tags. Defaults to `italic`.\n     */\n    tag?: 'plain' | 'italic' | 'bold' | 'bold-italic'\n    /**\n     * Determines the default for rendering `@link` tags. Defaults to `plain`.\n     */\n    link?: 'code' | 'plain'\n    /**\n     * Custom tag rendering function.\n     * Return a markdown formatted tag or `undefined` to fall back to the default rendering.\n     */\n    renderTag?(tag: JSDocTag): string | undefined\n    /**\n     * Custom link rendering function. Accepts a link target and a display value for the link.\n     * Return a markdown formatted link with the format `[$display]($link)` or `undefined` if the link is not a valid target.\n     */\n    renderLink?(link: string, display: string): string | undefined\n}\n\n/**\n * Parses a JSDoc from a `CstNode` containing a comment.\n *\n * @param node A `CstNode` from a parsed Langium document.\n * @param options Parsing options specialized to your language. See {@link JSDocParseOptions}.\n */\nexport function parseJSDoc(node: CstNode, options?: JSDocParseOptions): JSDocComment;\n/**\n * Parses a JSDoc from a string comment.\n *\n * @param content A string containing the source of the JSDoc comment.\n * @param start The start position the comment occupies in the source document.\n * @param options Parsing options specialized to your language. See {@link JSDocParseOptions}.\n */\nexport function parseJSDoc(content: string, start?: Position, options?: JSDocParseOptions): JSDocComment;\nexport function parseJSDoc(node: CstNode | string, start?: Position | JSDocParseOptions, options?: JSDocParseOptions): JSDocComment {\n    let opts: JSDocParseOptions | undefined;\n    let position: Position | undefined;\n    if (typeof node === 'string') {\n        position = start as Position | undefined;\n        opts = options as JSDocParseOptions | undefined;\n    } else {\n        position = node.range.start;\n        opts = start as JSDocParseOptions | undefined;\n    }\n    if (!position) {\n        position = Position.create(0, 0);\n    }\n\n    const lines = getLines(node);\n    const normalizedOptions = normalizeOptions(opts);\n\n    const tokens = tokenize({\n        lines,\n        position,\n        options: normalizedOptions\n    });\n\n    return parseJSDocComment({\n        index: 0,\n        tokens,\n        position\n    });\n}\n\nexport function isJSDoc(node: CstNode | string, options?: JSDocParseOptions): boolean {\n    const normalizedOptions = normalizeOptions(options);\n    const lines = getLines(node);\n    if (lines.length === 0) {\n        return false;\n    }\n\n    const first = lines[0];\n    const last = lines[lines.length - 1];\n    const firstRegex = normalizedOptions.start;\n    const lastRegex = normalizedOptions.end;\n\n    return Boolean(firstRegex?.exec(first)) && Boolean(lastRegex?.exec(last));\n}\n\nfunction getLines(node: CstNode | string): string[] {\n    let content = '';\n    if (typeof node === 'string') {\n        content = node;\n    } else {\n        content = node.text;\n    }\n    const lines = content.split(NEWLINE_REGEXP);\n    return lines;\n}\n\n// Tokenization\n\ninterface JSDocToken {\n    type: 'text' | 'tag' | 'inline-tag' | 'break'\n    content: string\n    range: Range\n}\n\nconst tagRegex = /\\s*(@([\\p{L}][\\p{L}\\p{N}]*)?)/uy;\nconst inlineTagRegex = /\\{(@[\\p{L}][\\p{L}\\p{N}]*)(\\s*)([^\\r\\n}]+)?\\}/gu;\n\nfunction tokenize(context: TokenizationContext): JSDocToken[] {\n    const tokens: JSDocToken[] = [];\n    let currentLine = context.position.line;\n    let currentCharacter = context.position.character;\n    for (let i = 0; i < context.lines.length; i++) {\n        const first = i === 0;\n        const last = i === context.lines.length - 1;\n        let line = context.lines[i];\n        let index = 0;\n\n        if (first && context.options.start) {\n            const match = context.options.start?.exec(line);\n            if (match) {\n                index = match.index + match[0].length;\n            }\n        } else {\n            const match = context.options.line?.exec(line);\n            if (match) {\n                index = match.index + match[0].length;\n            }\n        }\n        if (last) {\n            const match = context.options.end?.exec(line);\n            if (match) {\n                line = line.substring(0, match.index);\n            }\n        }\n\n        line = line.substring(0, lastCharacter(line));\n        const whitespaceEnd = skipWhitespace(line, index);\n\n        if (whitespaceEnd >= line.length) {\n            // Only create a break token when we already have previous tokens\n            if (tokens.length > 0) {\n                const position = Position.create(currentLine, currentCharacter);\n                tokens.push({\n                    type: 'break',\n                    content: '',\n                    range: Range.create(position, position)\n                });\n            }\n        } else {\n            tagRegex.lastIndex = index;\n            const tagMatch = tagRegex.exec(line);\n            if (tagMatch) {\n                const fullMatch = tagMatch[0];\n                const value = tagMatch[1];\n                const start = Position.create(currentLine, currentCharacter + index);\n                const end = Position.create(currentLine, currentCharacter + index + fullMatch.length);\n                tokens.push({\n                    type: 'tag',\n                    content: value,\n                    range: Range.create(start, end)\n                });\n                index += fullMatch.length;\n                index = skipWhitespace(line, index);\n            }\n\n            if (index < line.length) {\n                const rest = line.substring(index);\n                const inlineTagMatches = Array.from(rest.matchAll(inlineTagRegex));\n                tokens.push(...buildInlineTokens(inlineTagMatches, rest, currentLine, currentCharacter + index));\n            }\n        }\n\n        currentLine++;\n        currentCharacter = 0;\n    }\n\n    // Remove last break token if there is one\n    if (tokens.length > 0 && tokens[tokens.length - 1].type === 'break') {\n        return tokens.slice(0, -1);\n    }\n\n    return tokens;\n}\n\nfunction buildInlineTokens(tags: RegExpMatchArray[], line: string, lineIndex: number, characterIndex: number): JSDocToken[] {\n    const tokens: JSDocToken[] = [];\n\n    if (tags.length === 0) {\n        const start = Position.create(lineIndex, characterIndex);\n        const end = Position.create(lineIndex, characterIndex + line.length);\n        tokens.push({\n            type: 'text',\n            content: line,\n            range: Range.create(start, end)\n        });\n    } else {\n        let lastIndex = 0;\n        for (const match of tags) {\n            const matchIndex = match.index!;\n            const startContent = line.substring(lastIndex, matchIndex);\n            if (startContent.length > 0) {\n                tokens.push({\n                    type: 'text',\n                    content: line.substring(lastIndex, matchIndex),\n                    range: Range.create(\n                        Position.create(lineIndex, lastIndex + characterIndex),\n                        Position.create(lineIndex, matchIndex + characterIndex)\n                    )\n                });\n            }\n            let offset = startContent.length + 1;\n            const tagName = match[1];\n            tokens.push({\n                type: 'inline-tag',\n                content: tagName,\n                range: Range.create(\n                    Position.create(lineIndex, lastIndex + offset + characterIndex),\n                    Position.create(lineIndex, lastIndex + offset + tagName.length + characterIndex)\n                )\n            });\n            offset += tagName.length;\n            if (match.length === 4) {\n                offset += match[2].length;\n                const value = match[3];\n                tokens.push({\n                    type: 'text',\n                    content: value,\n                    range: Range.create(\n                        Position.create(lineIndex, lastIndex + offset + characterIndex),\n                        Position.create(lineIndex, lastIndex + offset + value.length + characterIndex)\n                    )\n                });\n            } else {\n                tokens.push({\n                    type: 'text',\n                    content: '',\n                    range: Range.create(\n                        Position.create(lineIndex, lastIndex + offset + characterIndex),\n                        Position.create(lineIndex, lastIndex + offset + characterIndex)\n                    )\n                });\n            }\n            lastIndex = matchIndex + match[0].length;\n        }\n        const endContent = line.substring(lastIndex);\n        if (endContent.length > 0) {\n            tokens.push({\n                type: 'text',\n                content: endContent,\n                range: Range.create(\n                    Position.create(lineIndex, lastIndex + characterIndex),\n                    Position.create(lineIndex, lastIndex + characterIndex + endContent.length)\n                )\n            });\n        }\n    }\n\n    return tokens;\n}\n\nconst nonWhitespaceRegex = /\\S/;\nconst whitespaceEndRegex = /\\s*$/;\n\nfunction skipWhitespace(line: string, index: number): number {\n    const match = line.substring(index).match(nonWhitespaceRegex);\n    if (match) {\n        return index + match.index!;\n    } else {\n        return line.length;\n    }\n}\n\nfunction lastCharacter(line: string): number | undefined {\n    const match = line.match(whitespaceEndRegex);\n    if (match && typeof match.index === 'number') {\n        return match.index;\n    }\n    return undefined;\n}\n\n// Parsing\n\nfunction parseJSDocComment(context: ParseContext): JSDocComment {\n    const startPosition: Position = Position.create(context.position.line, context.position.character);\n    if (context.tokens.length === 0) {\n        return new JSDocCommentImpl([], Range.create(startPosition, startPosition));\n    }\n    const elements: JSDocElement[] = [];\n    while (context.index < context.tokens.length) {\n        const element = parseJSDocElement(context, elements[elements.length - 1]);\n        if (element) {\n            elements.push(element);\n        }\n    }\n    const start = elements[0]?.range.start ?? startPosition;\n    const end = elements[elements.length - 1]?.range.end ?? startPosition;\n    return new JSDocCommentImpl(elements, Range.create(start, end));\n}\n\nfunction parseJSDocElement(context: ParseContext, last?: JSDocElement): JSDocElement | undefined {\n    const next = context.tokens[context.index];\n    if (next.type === 'tag') {\n        return parseJSDocTag(context, false);\n    } else if (next.type === 'text' || next.type === 'inline-tag') {\n        return parseJSDocText(context);\n    } else {\n        appendEmptyLine(next, last);\n        context.index++;\n        return undefined;\n    }\n}\n\nfunction appendEmptyLine(token: JSDocToken, element?: JSDocElement): void {\n    if (element) {\n        const line = new JSDocLineImpl('', token.range);\n        if ('inlines' in element) {\n            element.inlines.push(line);\n        } else {\n            element.content.inlines.push(line);\n        }\n    }\n}\n\nfunction parseJSDocText(context: ParseContext): JSDocParagraph {\n    let token = context.tokens[context.index];\n    const firstToken = token;\n    let lastToken = token;\n    const lines: JSDocInline[] = [];\n    while (token && token.type !== 'break' && token.type !== 'tag') {\n        lines.push(parseJSDocInline(context));\n        lastToken = token;\n        token = context.tokens[context.index];\n    }\n    return new JSDocTextImpl(lines, Range.create(firstToken.range.start, lastToken.range.end));\n}\n\nfunction parseJSDocInline(context: ParseContext): JSDocInline {\n    const token = context.tokens[context.index];\n    if (token.type === 'inline-tag') {\n        return parseJSDocTag(context, true);\n    } else {\n        return parseJSDocLine(context);\n    }\n}\n\nfunction parseJSDocTag(context: ParseContext, inline: boolean): JSDocTag {\n    const tagToken = context.tokens[context.index++];\n    const name = tagToken.content.substring(1);\n    const nextToken = context.tokens[context.index];\n    if (nextToken?.type === 'text') {\n        if (inline) {\n            const docLine = parseJSDocLine(context);\n            return new JSDocTagImpl(\n                name,\n                new JSDocTextImpl([docLine], docLine.range),\n                inline,\n                Range.create(tagToken.range.start, docLine.range.end)\n            );\n        } else {\n            const textDoc = parseJSDocText(context);\n            return new JSDocTagImpl(\n                name,\n                textDoc,\n                inline,\n                Range.create(tagToken.range.start, textDoc.range.end)\n            );\n        }\n    } else {\n        const range = tagToken.range;\n        return new JSDocTagImpl(name, new JSDocTextImpl([], range), inline, range);\n    }\n}\n\nfunction parseJSDocLine(context: ParseContext): JSDocLine {\n    const token = context.tokens[context.index++];\n    return new JSDocLineImpl(token.content, token.range);\n}\n\ninterface NormalizedOptions {\n    start?: RegExp\n    end?: RegExp\n    line?: RegExp\n}\n\ninterface TokenizationContext {\n    position: Position\n    lines: string[]\n    options: NormalizedOptions\n}\n\ninterface ParseContext {\n    position: Position\n    tokens: JSDocToken[]\n    index: number\n}\n\nfunction normalizeOptions(options?: JSDocParseOptions): NormalizedOptions {\n    if (!options) {\n        return normalizeOptions({\n            start: '/**',\n            end: '*/',\n            line: '*'\n        });\n    }\n    const { start, end, line } = options;\n    return {\n        start: normalizeOption(start, true),\n        end: normalizeOption(end, false),\n        line: normalizeOption(line, true)\n    };\n}\n\nfunction normalizeOption(option: RegExp | string | undefined, start: boolean): RegExp | undefined {\n    if (typeof option === 'string' || typeof option === 'object') {\n        const escaped = typeof option === 'string' ? escapeRegExp(option) : option.source;\n        if (start) {\n            return new RegExp(`^\\\\s*${escaped}`);\n        } else {\n            return new RegExp(`\\\\s*${escaped}\\\\s*$`);\n        }\n    } else {\n        return option;\n    }\n}\n\nclass JSDocCommentImpl implements JSDocComment {\n\n    readonly elements: JSDocElement[];\n    readonly range: Range;\n\n    constructor(elements: JSDocElement[], range: Range) {\n        this.elements = elements;\n        this.range = range;\n    }\n\n    getTag(name: string): JSDocTag | undefined {\n        return this.getAllTags().find(e => e.name === name);\n    }\n\n    getTags(name: string): JSDocTag[] {\n        return this.getAllTags().filter(e => e.name === name);\n    }\n\n    private getAllTags(): JSDocTag[] {\n        return this.elements.filter((e): e is JSDocTag => 'name' in e);\n    }\n\n    toString(): string {\n        let value = '';\n        for (const element of this.elements) {\n            if (value.length === 0) {\n                value = element.toString();\n            } else {\n                const text = element.toString();\n                value += fillNewlines(value) + text;\n            }\n        }\n        return value.trim();\n    }\n\n    toMarkdown(options?: JSDocRenderOptions): string {\n        let value = '';\n        for (const element of this.elements) {\n            if (value.length === 0) {\n                value = element.toMarkdown(options);\n            } else {\n                const text = element.toMarkdown(options);\n                value += fillNewlines(value) + text;\n            }\n        }\n        return value.trim();\n    }\n}\n\nclass JSDocTagImpl implements JSDocTag {\n    name: string;\n    content: JSDocParagraph;\n    range: Range;\n    inline: boolean;\n\n    constructor(name: string, content: JSDocParagraph, inline: boolean, range: Range) {\n        this.name = name;\n        this.content = content;\n        this.inline = inline;\n        this.range = range;\n    }\n\n    toString(): string {\n        let text = `@${this.name}`;\n        const content = this.content.toString();\n        if (this.content.inlines.length === 1) {\n            text = `${text} ${content}`;\n        } else if (this.content.inlines.length > 1) {\n            text = `${text}\\n${content}`;\n        }\n        if (this.inline) {\n            // Inline tags are surrounded by curly braces\n            return `{${text}}`;\n        } else {\n            return text;\n        }\n    }\n\n    toMarkdown(options?: JSDocRenderOptions): string {\n        return options?.renderTag?.(this) ?? this.toMarkdownDefault(options);\n    }\n\n    private toMarkdownDefault(options?: JSDocRenderOptions): string {\n        const content = this.content.toMarkdown(options);\n        if (this.inline) {\n            const rendered = renderInlineTag(this.name, content, options ?? {});\n            if (typeof rendered === 'string') {\n                return rendered;\n            }\n        }\n        let marker = '';\n        if (options?.tag === 'italic' || options?.tag === undefined) {\n            marker = '*';\n        } else if (options?.tag === 'bold') {\n            marker = '**';\n        } else if (options?.tag === 'bold-italic') {\n            marker = '***';\n        }\n        let text = `${marker}@${this.name}${marker}`;\n        if (this.content.inlines.length === 1) {\n            text = `${text} — ${content}`;\n        } else if (this.content.inlines.length > 1) {\n            text = `${text}\\n${content}`;\n        }\n        if (this.inline) {\n            // Inline tags are surrounded by curly braces\n            return `{${text}}`;\n        } else {\n            return text;\n        }\n    }\n}\n\nfunction renderInlineTag(tag: string, content: string, options: JSDocRenderOptions): string | undefined {\n    if (tag === 'linkplain' || tag === 'linkcode' || tag === 'link') {\n        const index = content.indexOf(' ');\n        let display = content;\n        if (index > 0) {\n            const displayStart = skipWhitespace(content, index);\n            display = content.substring(displayStart);\n            content = content.substring(0, index);\n        }\n        if (tag === 'linkcode' || (tag === 'link' && options.link === 'code')) {\n            // Surround the display value in a markdown inline code block\n            display = `\\`${display}\\``;\n        }\n        const renderedLink = options.renderLink?.(content, display) ?? renderLinkDefault(content, display);\n        return renderedLink;\n    }\n    return undefined;\n}\n\nfunction renderLinkDefault(content: string, display: string): string {\n    try {\n        URI.parse(content, true);\n        return `[${display}](${content})`;\n    } catch {\n        return content;\n    }\n}\n\nclass JSDocTextImpl implements JSDocParagraph {\n    inlines: JSDocInline[];\n    range: Range;\n\n    constructor(lines: JSDocInline[], range: Range) {\n        this.inlines = lines;\n        this.range = range;\n    }\n\n    toString(): string {\n        let text = '';\n        for (let i = 0; i < this.inlines.length; i++) {\n            const inline = this.inlines[i];\n            const next = this.inlines[i + 1];\n            text += inline.toString();\n            if (next && next.range.start.line > inline.range.start.line) {\n                text += '\\n';\n            }\n        }\n        return text;\n    }\n\n    toMarkdown(options?: JSDocRenderOptions): string {\n        let text = '';\n        for (let i = 0; i < this.inlines.length; i++) {\n            const inline = this.inlines[i];\n            const next = this.inlines[i + 1];\n            text += inline.toMarkdown(options);\n            if (next && next.range.start.line > inline.range.start.line) {\n                text += '\\n';\n            }\n        }\n        return text;\n    }\n}\n\nclass JSDocLineImpl implements JSDocLine {\n    text: string;\n    range: Range;\n\n    constructor(text: string, range: Range) {\n        this.text = text;\n        this.range = range;\n    }\n\n    toString(): string {\n        return this.text;\n    }\n    toMarkdown(): string {\n        return this.text;\n    }\n\n}\n\nfunction fillNewlines(text: string): string {\n    if (text.endsWith('\\n')) {\n        return '\\n';\n    } else {\n        return '\\n\\n';\n    }\n}\n","/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { LangiumCoreServices } from '../services.js';\nimport type { AstNode, AstNodeDescription } from '../syntax-tree.js';\nimport type { IndexManager } from '../workspace/index-manager.js';\nimport type { CommentProvider } from './comment-provider.js';\nimport type { JSDocTag } from './jsdoc.js';\nimport { getDocument } from '../utils/ast-utils.js';\nimport { isJSDoc, parseJSDoc } from './jsdoc.js';\n\n/**\n * Provides documentation for AST nodes.\n */\nexport interface DocumentationProvider {\n    /**\n     * Returns a markdown documentation string for the specified AST node.\n     *\n     * The default implementation `JSDocDocumentationProvider` will inspect the comment associated with the specified node.\n     */\n    getDocumentation(node: AstNode): string | undefined;\n}\n\nexport class JSDocDocumentationProvider implements DocumentationProvider {\n\n    protected readonly indexManager: IndexManager;\n    protected readonly commentProvider: CommentProvider;\n\n    constructor(services: LangiumCoreServices) {\n        this.indexManager = services.shared.workspace.IndexManager;\n        this.commentProvider = services.documentation.CommentProvider;\n    }\n\n    getDocumentation(node: AstNode): string | undefined {\n        const comment = this.commentProvider.getComment(node);\n        if (comment && isJSDoc(comment)) {\n            const parsedJSDoc = parseJSDoc(comment);\n            return parsedJSDoc.toMarkdown({\n                renderLink: (link, display) => {\n                    return this.documentationLinkRenderer(node, link, display);\n                },\n                renderTag: (tag) => {\n                    return this.documentationTagRenderer(node, tag);\n                }\n            });\n        }\n        return undefined;\n    }\n\n    protected documentationLinkRenderer(node: AstNode, name: string, display: string): string | undefined {\n        const description = this.findNameInPrecomputedScopes(node, name) ?? this.findNameInGlobalScope(node, name);\n        if (description && description.nameSegment) {\n            const line = description.nameSegment.range.start.line + 1;\n            const character = description.nameSegment.range.start.character + 1;\n            const uri = description.documentUri.with({ fragment: `L${line},${character}` });\n            return `[${display}](${uri.toString()})`;\n        } else {\n            return undefined;\n        }\n    }\n\n    protected documentationTagRenderer(_node: AstNode, _tag: JSDocTag): string | undefined {\n        // Fall back to the default tag rendering\n        return undefined;\n    }\n\n    protected findNameInPrecomputedScopes(node: AstNode, name: string): AstNodeDescription | undefined {\n        const document = getDocument(node);\n        const precomputed = document.precomputedScopes;\n        if (!precomputed) {\n            return undefined;\n        }\n        let currentNode: AstNode | undefined = node;\n        do {\n            const allDescriptions = precomputed.get(currentNode);\n            const description = allDescriptions.find(e => e.name === name);\n            if (description) {\n                return description;\n            }\n            currentNode = currentNode.$container;\n        } while (currentNode);\n\n        return undefined;\n    }\n\n    protected findNameInGlobalScope(node: AstNode, name: string): AstNodeDescription | undefined {\n        const description = this.indexManager.allElements().find(e => e.name === name);\n        return description;\n    }\n}\n","/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { GrammarConfig } from '../languages/grammar-config.js';\nimport { isAstNodeWithComment } from '../serializer/json-serializer.js';\nimport type { LangiumCoreServices } from '../services.js';\nimport type { AstNode } from '../syntax-tree.js';\nimport { findCommentNode } from '../utils/cst-utils.js';\n\n/**\n * Provides comments for AST nodes.\n */\nexport interface CommentProvider {\n    /**\n     * Returns the comment associated with the specified AST node.\n     * @param node The AST node to get the comment for.\n     * @returns The comment associated with the specified AST node or `undefined` if there is no comment.\n     */\n    getComment(node: AstNode): string | undefined;\n}\n\nexport class DefaultCommentProvider implements CommentProvider {\n    protected readonly grammarConfig: () => GrammarConfig;\n    constructor(services: LangiumCoreServices) {\n        this.grammarConfig = () => services.parser.GrammarConfig;\n    }\n    getComment(node: AstNode): string | undefined {\n        if(isAstNodeWithComment(node)) {\n            return node.$comment;\n        }\n        return findCommentNode(node.$cstNode, this.grammarConfig().multilineCommentRules)?.text;\n    }\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/**\n * A `Module<I>` is a description of possibly grouped service factories.\n *\n * Given a type I = { group: { service: A } },\n * Module<I> := { group: { service: (injector: I) => A } }\n *\n * Making `I` available during the creation of `I` allows us to create cyclic\n * dependencies.\n */\nexport type Module<I, T = I> = {\n    [K in keyof T]: Module<I, T[K]> | ((injector: I) => T[K])\n}\n\nexport namespace Module {\n    export const merge = <M1, M2, R extends M1 & M2>(m1: Module<R, M1>, m2: Module<R, M2>) => (_merge(_merge({}, m1), m2) as Module<R, M1 & M2>);\n}\n\n/**\n * Given a set of modules, the inject function returns a lazily evaluated injector\n * that injects dependencies into the requested service when it is requested the\n * first time. Subsequent requests will return the same service.\n *\n * In the case of cyclic dependencies, an Error will be thrown. This can be fixed\n * by injecting a provider `() => T` instead of a `T`.\n *\n * Please note that the arguments may be objects or arrays. However, the result will\n * be an object. Using it with for..of will have no effect.\n *\n * @param module1 first Module\n * @param module2 (optional) second Module\n * @param module3 (optional) third Module\n * @param module4 (optional) fourth Module\n * @param module5 (optional) fifth Module\n * @param module6 (optional) sixth Module\n * @param module7 (optional) seventh Module\n * @param module8 (optional) eighth Module\n * @param module9 (optional) ninth Module\n * @returns a new object of type I\n */\nexport function inject<I1, I2, I3, I4, I5, I6, I7, I8, I9, I extends I1 & I2 & I3 & I4 & I5 & I6 & I7 & I8 & I9>(\n    module1: Module<I, I1>, module2?: Module<I, I2>, module3?: Module<I, I3>, module4?: Module<I, I4>, module5?: Module<I, I5>, module6?: Module<I, I6>, module7?: Module<I, I7>, module8?: Module<I, I8>, module9?: Module<I, I9>\n): I {\n    const module = [module1, module2, module3, module4, module5, module6, module7, module8, module9].reduce(_merge, {}) as Module<I>;\n    return _inject(module);\n}\n\nconst isProxy = Symbol('isProxy');\n\n/**\n * Eagerly load all services in the given dependency injection container. This is sometimes\n * necessary because services can register event listeners in their constructors.\n */\nexport function eagerLoad<T>(item: T): T {\n    if (item && (item as any)[isProxy]) {\n        for (const value of Object.values(item)) {\n            eagerLoad(value);\n        }\n    }\n    return item;\n}\n\n/**\n * Helper function that returns an injector by creating a proxy.\n * Invariant: injector is of type I. If injector is undefined, then T = I.\n */\nfunction _inject<I, T>(module: Module<I, T>, injector?: any): T {\n    const proxy: any = new Proxy({} as any, {\n        deleteProperty: () => false,\n        get: (obj, prop) => _resolve(obj, prop, module, injector || proxy),\n        getOwnPropertyDescriptor: (obj, prop) => (_resolve(obj, prop, module, injector || proxy), Object.getOwnPropertyDescriptor(obj, prop)), // used by for..in\n        has: (_, prop) => prop in module, // used by ..in..\n        ownKeys: () => [...Reflect.ownKeys(module), isProxy] // used by for..in\n    });\n    proxy[isProxy] = true;\n    return proxy;\n}\n\n/**\n * Internally used to tag a requested dependency, directly before calling the factory.\n * This allows us to find cycles during instance creation.\n */\nconst __requested__ = Symbol();\n\n/**\n * Returns the value `obj[prop]`. If the value does not exist, yet, it is resolved from\n * the module description. The result of service factories is cached. Groups are\n * recursively proxied.\n *\n * @param obj an object holding all group proxies and services\n * @param prop the key of a value within obj\n * @param module an object containing groups and service factories\n * @param injector the first level proxy that provides access to all values\n * @returns the requested value `obj[prop]`\n * @throws Error if a dependency cycle is detected\n */\nfunction _resolve<I, T>(obj: any, prop: string | symbol | number, module: Module<I, T>, injector: I): T[keyof T] | undefined {\n    if (prop in obj) {\n        if (obj[prop] instanceof Error) {\n            throw new Error('Construction failure. Please make sure that your dependencies are constructable.', {cause: obj[prop]});\n        }\n        if (obj[prop] === __requested__) {\n            throw new Error('Cycle detected. Please make \"' + String(prop) + '\" lazy. See https://langium.org/docs/configuration-services/#resolving-cyclic-dependencies');\n        }\n        return obj[prop];\n    } else if (prop in module) {\n        const value: Module<I, T[keyof T]> | ((injector: I) => T[keyof T]) = module[prop as keyof T];\n        obj[prop] = __requested__;\n        try {\n            obj[prop] = (typeof value === 'function') ? value(injector) : _inject(value, injector);\n        } catch (error) {\n            obj[prop] = error instanceof Error ? error : undefined;\n            throw error;\n        }\n        return obj[prop];\n    } else {\n        return undefined;\n    }\n}\n\n/**\n * Performs a deep-merge of two modules by writing source entries into the target module.\n *\n * @param target the module which is written\n * @param source the module which is read\n * @returns the target module\n */\nfunction _merge(target: Module<any>, source?: Module<any>): Module<unknown> {\n    if (source) {\n        for (const [key, value2] of Object.entries(source)) {\n            if (value2 !== undefined) {\n                const value1 = target[key];\n                if (value1 !== null && value2 !== null && typeof value1 === 'object' && typeof value2 === 'object') {\n                    target[key] = _merge(value1, value2);\n                } else {\n                    target[key] = value2;\n                }\n            }\n        }\n    }\n    return target;\n}\n","/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { CancellationToken } from '../utils/cancellation.js';\nimport type { LangiumCoreServices } from '../services.js';\nimport type { AstNode } from '../syntax-tree.js';\nimport type { LangiumParser, ParseResult } from './langium-parser.js';\nimport type { Hydrator } from '../serializer/hydrator.js';\nimport type { Event } from '../utils/event.js';\nimport { Deferred, OperationCancelled } from '../utils/promise-utils.js';\nimport { Emitter } from '../utils/event.js';\n\n/**\n * Async parser that allows to cancel the current parsing process.\n * The sync parser implementation is blocking the event loop, which can become quite problematic for large files.\n *\n * Note that the default implementation is not actually async. It just wraps the sync parser in a promise.\n * A real implementation would create worker threads or web workers to offload the parsing work.\n */\nexport interface AsyncParser {\n    parse<T extends AstNode>(text: string, cancelToken: CancellationToken): Promise<ParseResult<T>>;\n}\n\n/**\n * Default implementation of the async parser. This implementation only wraps the sync parser in a promise.\n *\n * A real implementation would create worker threads or web workers to offload the parsing work.\n */\nexport class DefaultAsyncParser implements AsyncParser {\n\n    protected readonly syncParser: LangiumParser;\n\n    constructor(services: LangiumCoreServices) {\n        this.syncParser = services.parser.LangiumParser;\n    }\n\n    parse<T extends AstNode>(text: string): Promise<ParseResult<T>> {\n        return Promise.resolve(this.syncParser.parse<T>(text));\n    }\n}\n\nexport abstract class AbstractThreadedAsyncParser implements AsyncParser {\n\n    /**\n     * The thread count determines how many threads are used to parse files in parallel.\n     * The default value is 8. Decreasing this value increases startup performance, but decreases parallel parsing performance.\n     */\n    protected threadCount = 8;\n    /**\n     * The termination delay determines how long the parser waits for a thread to finish after a cancellation request.\n     * The default value is 200(ms).\n     */\n    protected terminationDelay = 200;\n    protected workerPool: ParserWorker[] = [];\n    protected queue: Array<Deferred<ParserWorker>> = [];\n\n    protected readonly hydrator: Hydrator;\n\n    constructor(services: LangiumCoreServices) {\n        this.hydrator = services.serializer.Hydrator;\n    }\n\n    protected initializeWorkers(): void {\n        while (this.workerPool.length < this.threadCount) {\n            const worker = this.createWorker();\n            worker.onReady(() => {\n                if (this.queue.length > 0) {\n                    const deferred = this.queue.shift();\n                    if (deferred) {\n                        worker.lock();\n                        deferred.resolve(worker);\n                    }\n                }\n            });\n            this.workerPool.push(worker);\n        }\n    }\n\n    async parse<T extends AstNode>(text: string, cancelToken: CancellationToken): Promise<ParseResult<T>> {\n        const worker = await this.acquireParserWorker(cancelToken);\n        const deferred = new Deferred<ParseResult<T>>();\n        let timeout: NodeJS.Timeout | undefined;\n        // If the cancellation token is requested, we wait for a certain time before terminating the worker.\n        // Since the cancellation token lives longer than the parsing process, we need to dispose the event listener.\n        // Otherwise, we might accidentally terminate the worker after the parsing process has finished.\n        const cancellation = cancelToken.onCancellationRequested(() => {\n            timeout = setTimeout(() => {\n                this.terminateWorker(worker);\n            }, this.terminationDelay);\n        });\n        worker.parse(text).then(result => {\n            const hydrated = this.hydrator.hydrate<T>(result);\n            deferred.resolve(hydrated);\n        }).catch(err => {\n            deferred.reject(err);\n        }).finally(() => {\n            cancellation.dispose();\n            clearTimeout(timeout);\n        });\n        return deferred.promise;\n    }\n\n    protected terminateWorker(worker: ParserWorker): void {\n        worker.terminate();\n        const index = this.workerPool.indexOf(worker);\n        if (index >= 0) {\n            this.workerPool.splice(index, 1);\n        }\n    }\n\n    protected async acquireParserWorker(cancelToken: CancellationToken): Promise<ParserWorker> {\n        this.initializeWorkers();\n        for (const worker of this.workerPool) {\n            if (worker.ready) {\n                worker.lock();\n                return worker;\n            }\n        }\n        const deferred = new Deferred<ParserWorker>();\n        cancelToken.onCancellationRequested(() => {\n            const index = this.queue.indexOf(deferred);\n            if (index >= 0) {\n                this.queue.splice(index, 1);\n            }\n            deferred.reject(OperationCancelled);\n        });\n        this.queue.push(deferred);\n        return deferred.promise;\n    }\n\n    protected abstract createWorker(): ParserWorker;\n}\n\nexport type WorkerMessagePost = (message: unknown) => void;\nexport type WorkerMessageCallback = (cb: (message: unknown) => void) => void;\n\nexport class ParserWorker {\n\n    protected readonly sendMessage: WorkerMessagePost;\n    protected readonly _terminate: () => void;\n    protected readonly onReadyEmitter = new Emitter<void>();\n\n    protected deferred = new Deferred<ParseResult>();\n    protected _ready = true;\n    protected _parsing = false;\n\n    get ready(): boolean {\n        return this._ready;\n    }\n\n    get onReady(): Event<void> {\n        return this.onReadyEmitter.event;\n    }\n\n    constructor(sendMessage: WorkerMessagePost, onMessage: WorkerMessageCallback, onError: WorkerMessageCallback, terminate: () => void) {\n        this.sendMessage = sendMessage;\n        this._terminate = terminate;\n        onMessage(result => {\n            const parseResult = result as ParseResult;\n            this.deferred.resolve(parseResult);\n            this.unlock();\n        });\n        onError(error => {\n            this.deferred.reject(error);\n            this.unlock();\n        });\n    }\n\n    terminate(): void {\n        this.deferred.reject(OperationCancelled);\n        this._terminate();\n    }\n\n    lock(): void {\n        this._ready = false;\n    }\n\n    unlock(): void {\n        this._parsing = false;\n        this._ready = true;\n        this.onReadyEmitter.fire();\n    }\n\n    parse(text: string): Promise<ParseResult> {\n        if (this._parsing) {\n            throw new Error('Parser worker is busy');\n        }\n        this._parsing = true;\n        this.deferred = new Deferred();\n        this.sendMessage(text);\n        return this.deferred.promise;\n    }\n}\n","/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport { CancellationToken, CancellationTokenSource } from '../utils/cancellation.js';\nimport { Deferred, isOperationCancelled, type MaybePromise } from '../utils/promise-utils.js';\n\n/**\n * Utility service to execute mutually exclusive actions.\n */\nexport interface WorkspaceLock {\n    /**\n     * Performs a single async action, like initializing the workspace or processing document changes.\n     * Only one action will be executed at a time.\n     *\n     * When another action is queued up, the token provided for the action will be cancelled.\n     * Assuming the action makes use of this token, the next action only has to wait for the current action to finish cancellation.\n     */\n    write(action: (token: CancellationToken) => MaybePromise<void>): Promise<void>;\n\n    /**\n     * Performs a single action, like computing completion results or providing workspace symbols.\n     * Read actions will only be executed after all write actions have finished. They will be executed in parallel if possible.\n     *\n     * If a write action is currently running, the read action will be queued up and executed afterwards.\n     * If a new write action is queued up while a read action is waiting, the write action will receive priority and will be handled before the read action.\n     *\n     * Note that read actions are not allowed to modify anything in the workspace. Please use {@link write} instead.\n     */\n    read<T>(action: () => MaybePromise<T>): Promise<T>;\n\n    /**\n     * Cancels the last queued write action. All previous write actions already have been cancelled.\n     */\n    cancelWrite(): void;\n}\n\ntype LockAction<T = void> = (token: CancellationToken) => MaybePromise<T>;\n\ninterface LockEntry {\n    action: LockAction<unknown>;\n    deferred: Deferred<unknown>;\n    cancellationToken: CancellationToken;\n}\n\nexport class DefaultWorkspaceLock implements WorkspaceLock {\n\n    private previousTokenSource = new CancellationTokenSource();\n    private writeQueue: LockEntry[] = [];\n    private readQueue: LockEntry[] = [];\n    private done = true;\n\n    write(action: (token: CancellationToken) => MaybePromise<void>): Promise<void> {\n        this.cancelWrite();\n        const tokenSource = new CancellationTokenSource();\n        this.previousTokenSource = tokenSource;\n        return this.enqueue(this.writeQueue, action, tokenSource.token);\n    }\n\n    read<T>(action: () => MaybePromise<T>): Promise<T> {\n        return this.enqueue(this.readQueue, action);\n    }\n\n    private enqueue<T = void>(queue: LockEntry[], action: LockAction<T>, cancellationToken?: CancellationToken): Promise<T> {\n        const deferred = new Deferred<unknown>();\n        const entry: LockEntry = {\n            action,\n            deferred,\n            cancellationToken: cancellationToken ?? CancellationToken.None\n        };\n        queue.push(entry);\n        this.performNextOperation();\n        return deferred.promise as Promise<T>;\n    }\n\n    private async performNextOperation(): Promise<void> {\n        if (!this.done) {\n            return;\n        }\n        const entries: LockEntry[] = [];\n        if (this.writeQueue.length > 0) {\n            // Just perform the next write action\n            entries.push(this.writeQueue.shift()!);\n        } else if (this.readQueue.length > 0) {\n            // Empty the read queue and perform all actions in parallel\n            entries.push(...this.readQueue.splice(0, this.readQueue.length));\n        } else {\n            return;\n        }\n        this.done = false;\n        await Promise.all(entries.map(async ({ action, deferred, cancellationToken }) => {\n            try {\n                // Move the execution of the action to the next event loop tick via `Promise.resolve()`\n                const result = await Promise.resolve().then(() => action(cancellationToken));\n                deferred.resolve(result);\n            } catch (err) {\n                if (isOperationCancelled(err)) {\n                    // If the operation was cancelled, we don't want to reject the promise\n                    deferred.resolve(undefined);\n                } else {\n                    deferred.reject(err);\n                }\n            }\n        }));\n        this.done = true;\n        this.performNextOperation();\n    }\n\n    cancelWrite(): void {\n        this.previousTokenSource.cancel();\n    }\n}\n","/******************************************************************************\n * Copyright 2024 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport type { TokenType } from 'chevrotain';\nimport { CompositeCstNodeImpl, LeafCstNodeImpl, RootCstNodeImpl } from '../parser/cst-node-builder.js';\nimport { isAbstractElement, type AbstractElement, type Grammar } from '../languages/generated/ast.js';\nimport type { Linker } from '../references/linker.js';\nimport type { Lexer } from '../parser/lexer.js';\nimport type { LangiumCoreServices } from '../services.js';\nimport type { ParseResult } from '../parser/langium-parser.js';\nimport type { Reference, AstNode, CstNode, LeafCstNode, GenericAstNode, Mutable, RootCstNode } from '../syntax-tree.js';\nimport { isRootCstNode, isCompositeCstNode, isLeafCstNode, isAstNode, isReference } from '../syntax-tree.js';\nimport { streamAst } from '../utils/ast-utils.js';\nimport { BiMap } from '../utils/collections.js';\nimport { streamCst } from '../utils/cst-utils.js';\n\n/**\n * The hydrator service is responsible for allowing AST parse results to be sent across worker threads.\n */\nexport interface Hydrator {\n    /**\n     * Converts a parse result to a plain object. The resulting object can be sent across worker threads.\n     */\n    dehydrate(result: ParseResult<AstNode>): ParseResult<object>;\n    /**\n     * Converts a plain object to a parse result. The included AST node can then be used in the main thread.\n     * Calling this method on objects that have not been dehydrated first will result in undefined behavior.\n     */\n    hydrate<T extends AstNode = AstNode>(result: ParseResult<object>): ParseResult<T>;\n}\n\nexport interface DehydrateContext {\n    astNodes: Map<AstNode, any>;\n    cstNodes: Map<CstNode, any>;\n}\n\nexport interface HydrateContext {\n    astNodes: Map<any, AstNode>;\n    cstNodes: Map<any, CstNode>;\n}\n\nexport class DefaultHydrator implements Hydrator {\n\n    protected readonly grammar: Grammar;\n    protected readonly lexer: Lexer;\n    protected readonly linker: Linker;\n\n    protected readonly grammarElementIdMap = new BiMap<AbstractElement, number>();\n    protected readonly tokenTypeIdMap = new BiMap<number, TokenType>();\n\n    constructor(services: LangiumCoreServices) {\n        this.grammar = services.Grammar;\n        this.lexer = services.parser.Lexer;\n        this.linker = services.references.Linker;\n    }\n\n    dehydrate(result: ParseResult<AstNode>): ParseResult<object> {\n        return {\n            // We need to create shallow copies of the errors\n            // The original errors inherit from the `Error` class, which is not transferable across worker threads\n            lexerErrors: result.lexerErrors.map(e => ({ ...e })),\n            parserErrors: result.parserErrors.map(e => ({ ...e })),\n            value: this.dehydrateAstNode(result.value, this.createDehyrationContext(result.value))\n        };\n    }\n\n    protected createDehyrationContext(node: AstNode): DehydrateContext {\n        const astNodes = new Map<AstNode, any>();\n        const cstNodes = new Map<CstNode, any>();\n        for (const astNode of streamAst(node)) {\n            astNodes.set(astNode, {});\n        }\n        if (node.$cstNode) {\n            for (const cstNode of streamCst(node.$cstNode)) {\n                cstNodes.set(cstNode, {});\n            }\n        }\n        return {\n            astNodes,\n            cstNodes\n        };\n    }\n\n    protected dehydrateAstNode(node: AstNode, context: DehydrateContext): object {\n        const obj = context.astNodes.get(node) as Record<string, any>;\n        obj.$type = node.$type;\n        obj.$containerIndex = node.$containerIndex;\n        obj.$containerProperty = node.$containerProperty;\n        if (node.$cstNode !== undefined) {\n            obj.$cstNode = this.dehydrateCstNode(node.$cstNode, context);\n        }\n        for (const [name, value] of Object.entries(node)) {\n            if (name.startsWith('$')) {\n                continue;\n            }\n            if (Array.isArray(value)) {\n                const arr: any[] = [];\n                obj[name] = arr;\n                for (const item of value) {\n                    if (isAstNode(item)) {\n                        arr.push(this.dehydrateAstNode(item, context));\n                    } else if (isReference(item)) {\n                        arr.push(this.dehydrateReference(item, context));\n                    } else {\n                        arr.push(item);\n                    }\n                }\n            } else if (isAstNode(value)) {\n                obj[name] = this.dehydrateAstNode(value, context);\n            } else if (isReference(value)) {\n                obj[name] = this.dehydrateReference(value, context);\n            } else if (value !== undefined) {\n                obj[name] = value;\n            }\n        }\n        return obj;\n    }\n\n    protected dehydrateReference(reference: Reference, context: DehydrateContext): any {\n        const obj: Record<string, unknown> = {};\n        obj.$refText = reference.$refText;\n        if (reference.$refNode) {\n            obj.$refNode = context.cstNodes.get(reference.$refNode);\n        }\n        return obj;\n    }\n\n    protected dehydrateCstNode(node: CstNode, context: DehydrateContext): any {\n        const cstNode = context.cstNodes.get(node) as Record<string, any>;\n        if (isRootCstNode(node)) {\n            cstNode.fullText = node.fullText;\n        } else {\n            // Note: This returns undefined for hidden nodes (i.e. comments)\n            cstNode.grammarSource = this.getGrammarElementId(node.grammarSource);\n        }\n        cstNode.hidden = node.hidden;\n        cstNode.astNode = context.astNodes.get(node.astNode);\n        if (isCompositeCstNode(node)) {\n            cstNode.content = node.content.map(child => this.dehydrateCstNode(child, context));\n        } else if (isLeafCstNode(node)) {\n            cstNode.tokenType = node.tokenType.name;\n            cstNode.offset = node.offset;\n            cstNode.length = node.length;\n            cstNode.startLine = node.range.start.line;\n            cstNode.startColumn = node.range.start.character;\n            cstNode.endLine = node.range.end.line;\n            cstNode.endColumn = node.range.end.character;\n        }\n        return cstNode;\n    }\n\n    hydrate<T extends AstNode = AstNode>(result: ParseResult<object>): ParseResult<T> {\n        const node = result.value;\n        const context = this.createHydrationContext(node);\n        if ('$cstNode' in node) {\n            this.hydrateCstNode(node.$cstNode, context);\n        }\n        return {\n            lexerErrors: result.lexerErrors,\n            parserErrors: result.parserErrors,\n            value: this.hydrateAstNode(node, context) as T\n        };\n    }\n\n    protected createHydrationContext(node: any): HydrateContext {\n        const astNodes = new Map<any, AstNode>();\n        const cstNodes = new Map<any, CstNode>();\n        for (const astNode of streamAst(node)) {\n            astNodes.set(astNode, {} as AstNode);\n        }\n        let root: RootCstNode;\n        if (node.$cstNode) {\n            for (const cstNode of streamCst(node.$cstNode)) {\n                let cst: Mutable<CstNode> | undefined;\n                if ('fullText' in cstNode) {\n                    cst = new RootCstNodeImpl(cstNode.fullText as string);\n                    root = cst as RootCstNode;\n                } else if ('content' in cstNode) {\n                    cst = new CompositeCstNodeImpl();\n                } else if ('tokenType' in cstNode) {\n                    cst = this.hydrateCstLeafNode(cstNode);\n                }\n                if (cst) {\n                    cstNodes.set(cstNode, cst);\n                    cst.root = root!;\n                }\n            }\n        }\n        return {\n            astNodes,\n            cstNodes\n        };\n    }\n\n    protected hydrateAstNode(node: any, context: HydrateContext): AstNode {\n        const astNode = context.astNodes.get(node) as Mutable<GenericAstNode>;\n        astNode.$type = node.$type;\n        astNode.$containerIndex = node.$containerIndex;\n        astNode.$containerProperty = node.$containerProperty;\n        if (node.$cstNode) {\n            astNode.$cstNode = context.cstNodes.get(node.$cstNode);\n        }\n        for (const [name, value] of Object.entries(node)) {\n            if (name.startsWith('$')) {\n                continue;\n            }\n            if (Array.isArray(value)) {\n                const arr: unknown[] = [];\n                astNode[name] = arr;\n                for (const item of value) {\n                    if (isAstNode(item)) {\n                        arr.push(this.setParent(this.hydrateAstNode(item, context), astNode));\n                    } else if (isReference(item)) {\n                        arr.push(this.hydrateReference(item, astNode, name, context));\n                    } else {\n                        arr.push(item);\n                    }\n                }\n            } else if (isAstNode(value)) {\n                astNode[name] = this.setParent(this.hydrateAstNode(value, context), astNode);\n            } else if (isReference(value)) {\n                astNode[name] = this.hydrateReference(value, astNode, name, context);\n            } else if (value !== undefined) {\n                astNode[name] = value;\n            }\n        }\n        return astNode;\n    }\n\n    protected setParent(node: any, parent: any): any {\n        node.$container = parent as AstNode;\n        return node;\n    }\n\n    protected hydrateReference(reference: any, node: AstNode, name: string, context: HydrateContext): Reference {\n        return this.linker.buildReference(node, name, context.cstNodes.get(reference.$refNode)!, reference.$refText);\n    }\n\n    protected hydrateCstNode(cstNode: any, context: HydrateContext, num = 0): CstNode {\n        const cstNodeObj = context.cstNodes.get(cstNode) as Mutable<CstNode>;\n        if (typeof cstNode.grammarSource === 'number') {\n            cstNodeObj.grammarSource = this.getGrammarElement(cstNode.grammarSource);\n        }\n        cstNodeObj.astNode = context.astNodes.get(cstNode.astNode)!;\n        if (isCompositeCstNode(cstNodeObj)) {\n            for (const child of cstNode.content) {\n                const hydrated = this.hydrateCstNode(child, context, num++);\n                cstNodeObj.content.push(hydrated);\n            }\n        }\n        return cstNodeObj;\n    }\n\n    protected hydrateCstLeafNode(cstNode: any): LeafCstNode {\n        const tokenType = this.getTokenType(cstNode.tokenType);\n        const offset = cstNode.offset;\n        const length = cstNode.length;\n        const startLine = cstNode.startLine;\n        const startColumn = cstNode.startColumn;\n        const endLine = cstNode.endLine;\n        const endColumn = cstNode.endColumn;\n        const hidden = cstNode.hidden;\n        const node = new LeafCstNodeImpl(\n            offset,\n            length,\n            {\n                start: {\n                    line: startLine,\n                    character: startColumn\n                },\n                end: {\n                    line: endLine,\n                    character: endColumn\n                }\n            },\n            tokenType,\n            hidden\n        );\n        return node;\n    }\n\n    protected getTokenType(name: string): TokenType {\n        return this.lexer.definition[name];\n    }\n\n    protected getGrammarElementId(node: AbstractElement): number | undefined {\n        if (this.grammarElementIdMap.size === 0) {\n            this.createGrammarElementIdMap();\n        }\n        return this.grammarElementIdMap.get(node);\n    }\n\n    protected getGrammarElement(id: number): AbstractElement {\n        if (this.grammarElementIdMap.size === 0) {\n            this.createGrammarElementIdMap();\n        }\n        const element = this.grammarElementIdMap.getKey(id);\n        if (element) {\n            return element;\n        } else {\n            throw new Error('Invalid grammar element id: ' + id);\n        }\n    }\n\n    protected createGrammarElementIdMap(): void {\n        let id = 0;\n        for (const element of streamAst(this.grammar)) {\n            if (isAbstractElement(element)) {\n                this.grammarElementIdMap.set(element, id++);\n            }\n        }\n    }\n\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n******************************************************************************/\n\nimport type { Module } from './dependency-injection.js';\nimport type { LangiumDefaultCoreServices, LangiumDefaultSharedCoreServices, LangiumCoreServices, LangiumSharedCoreServices } from './services.js';\nimport type { FileSystemProvider } from './workspace/file-system-provider.js';\nimport { createGrammarConfig } from './languages/grammar-config.js';\nimport { createCompletionParser } from './parser/completion-parser-builder.js';\nimport { createLangiumParser } from './parser/langium-parser-builder.js';\nimport { DefaultTokenBuilder } from './parser/token-builder.js';\nimport { DefaultValueConverter } from './parser/value-converter.js';\nimport { DefaultLinker } from './references/linker.js';\nimport { DefaultNameProvider } from './references/name-provider.js';\nimport { DefaultReferences } from './references/references.js';\nimport { DefaultScopeComputation } from './references/scope-computation.js';\nimport { DefaultScopeProvider } from './references/scope-provider.js';\nimport { DefaultJsonSerializer } from './serializer/json-serializer.js';\nimport { DefaultServiceRegistry } from './service-registry.js';\nimport { DefaultDocumentValidator } from './validation/document-validator.js';\nimport { ValidationRegistry } from './validation/validation-registry.js';\nimport { DefaultAstNodeDescriptionProvider, DefaultReferenceDescriptionProvider } from './workspace/ast-descriptions.js';\nimport { DefaultAstNodeLocator } from './workspace/ast-node-locator.js';\nimport { DefaultConfigurationProvider } from './workspace/configuration.js';\nimport { DefaultDocumentBuilder } from './workspace/document-builder.js';\nimport { DefaultLangiumDocumentFactory, DefaultLangiumDocuments } from './workspace/documents.js';\nimport { DefaultIndexManager } from './workspace/index-manager.js';\nimport { DefaultWorkspaceManager } from './workspace/workspace-manager.js';\nimport { DefaultLexer } from './parser/lexer.js';\nimport { JSDocDocumentationProvider } from './documentation/documentation-provider.js';\nimport { DefaultCommentProvider } from './documentation/comment-provider.js';\nimport { LangiumParserErrorMessageProvider } from './parser/langium-parser.js';\nimport { DefaultAsyncParser } from './parser/async-parser.js';\nimport { DefaultWorkspaceLock } from './workspace/workspace-lock.js';\nimport { DefaultHydrator } from './serializer/hydrator.js';\n\n/**\n * Context required for creating the default language-specific dependency injection module.\n */\nexport interface DefaultCoreModuleContext {\n    shared: LangiumSharedCoreServices;\n}\n\n/**\n * Creates a dependency injection module configuring the default core services.\n * This is a set of services that are dedicated to a specific language.\n */\nexport function createDefaultCoreModule(context: DefaultCoreModuleContext): Module<LangiumCoreServices, LangiumDefaultCoreServices> {\n    return {\n        documentation: {\n            CommentProvider: (services) => new DefaultCommentProvider(services),\n            DocumentationProvider: (services) => new JSDocDocumentationProvider(services)\n        },\n        parser: {\n            AsyncParser: (services) => new DefaultAsyncParser(services),\n            GrammarConfig: (services) => createGrammarConfig(services),\n            LangiumParser: (services) => createLangiumParser(services),\n            CompletionParser: (services) => createCompletionParser(services),\n            ValueConverter: () => new DefaultValueConverter(),\n            TokenBuilder: () => new DefaultTokenBuilder(),\n            Lexer: (services) => new DefaultLexer(services),\n            ParserErrorMessageProvider: () => new LangiumParserErrorMessageProvider()\n        },\n        workspace: {\n            AstNodeLocator: () => new DefaultAstNodeLocator(),\n            AstNodeDescriptionProvider: (services) => new DefaultAstNodeDescriptionProvider(services),\n            ReferenceDescriptionProvider: (services) => new DefaultReferenceDescriptionProvider(services)\n        },\n        references: {\n            Linker: (services) => new DefaultLinker(services),\n            NameProvider: () => new DefaultNameProvider(),\n            ScopeProvider: (services) => new DefaultScopeProvider(services),\n            ScopeComputation: (services) => new DefaultScopeComputation(services),\n            References: (services) => new DefaultReferences(services)\n        },\n        serializer: {\n            Hydrator: (services) => new DefaultHydrator(services),\n            JsonSerializer: (services) => new DefaultJsonSerializer(services)\n        },\n        validation: {\n            DocumentValidator: (services) => new DefaultDocumentValidator(services),\n            ValidationRegistry: (services) => new ValidationRegistry(services)\n        },\n        shared: () => context.shared\n    };\n}\n\n/**\n * Context required for creating the default shared dependency injection module.\n */\nexport interface DefaultSharedCoreModuleContext {\n    /**\n     * Factory function to create a {@link FileSystemProvider}.\n     *\n     * Langium exposes an `EmptyFileSystem` and `NodeFileSystem`, exported through `langium/node`.\n     * When running Langium as part of a vscode language server or a Node.js app, using the `NodeFileSystem` is recommended,\n     * the `EmptyFileSystem` in every other use case.\n     */\n    fileSystemProvider: (services: LangiumSharedCoreServices) => FileSystemProvider;\n}\n\n/**\n * Creates a dependency injection module configuring the default shared core services.\n * This is the set of services that are shared between multiple languages.\n */\nexport function createDefaultSharedCoreModule(context: DefaultSharedCoreModuleContext): Module<LangiumSharedCoreServices, LangiumDefaultSharedCoreServices> {\n    return {\n        ServiceRegistry: () => new DefaultServiceRegistry(),\n        workspace: {\n            LangiumDocuments: (services) => new DefaultLangiumDocuments(services),\n            LangiumDocumentFactory: (services) => new DefaultLangiumDocumentFactory(services),\n            DocumentBuilder: (services) => new DefaultDocumentBuilder(services),\n            IndexManager: (services) => new DefaultIndexManager(services),\n            WorkspaceManager: (services) => new DefaultWorkspaceManager(services),\n            FileSystemProvider: (services) => context.fileSystemProvider(services),\n            WorkspaceLock: () => new DefaultWorkspaceLock(),\n            ConfigurationProvider: (services) => new DefaultConfigurationProvider(services)\n        }\n    };\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { LangiumCoreServices } from '../services.js';\nimport { DefaultNameRegexp } from '../utils/cst-utils.js';\nimport { isCommentTerminal, terminalRegex } from '../utils/grammar-utils.js';\nimport { isMultilineComment } from '../utils/regexp-utils.js';\nimport { isTerminalRule } from './generated/ast.js';\n\nexport interface GrammarConfig {\n    /**\n     * Lists all rule names which are classified as multiline comment rules\n     */\n    multilineCommentRules: string[]\n    /**\n     * A regular expression which matches characters of names\n     */\n    nameRegexp: RegExp\n}\n\n/**\n * Create the default grammar configuration (used by `createDefaultModule`). This can be overridden in a\n * language-specific module.\n */\nexport function createGrammarConfig(services: LangiumCoreServices): GrammarConfig {\n    const rules: string[] = [];\n    const grammar = services.Grammar;\n    for (const rule of grammar.rules) {\n        if (isTerminalRule(rule) && isCommentTerminal(rule) && isMultilineComment(terminalRegex(rule))) {\n            rules.push(rule.name);\n        }\n    }\n    return {\n        multilineCommentRules: rules,\n        nameRegexp: DefaultNameRegexp\n    };\n}\n","/******************************************************************************\n * Copyright 2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { LangiumCoreServices } from '../services.js';\nimport { LangiumCompletionParser } from './langium-parser.js';\nimport { createParser } from './parser-builder-base.js';\n\nexport function createCompletionParser(services: LangiumCoreServices): LangiumCompletionParser {\n    const grammar = services.Grammar;\n    const lexer = services.parser.Lexer;\n    const parser = new LangiumCompletionParser(services);\n    createParser(grammar, parser, lexer.definition);\n    parser.finalize();\n    return parser;\n}\n","/******************************************************************************\n * Copyright 2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { URI } from '../utils/uri-utils.js';\n\nexport interface FileSystemNode {\n    readonly isFile: boolean;\n    readonly isDirectory: boolean;\n    readonly uri: URI;\n}\n\nexport type FileSystemFilter = (node: FileSystemNode) => boolean;\n\n/**\n * Provides methods to interact with an abstract file system. The default implementation is based on the node.js `fs` API.\n */\nexport interface FileSystemProvider {\n    /**\n     * Reads a document asynchronously from a given URI.\n     * @returns The string content of the file with the specified URI.\n     */\n    readFile(uri: URI): Promise<string>;\n    /**\n     * Reads the directory information for the given URI.\n     * @returns The list of file system entries that are contained within the specified directory.\n     */\n    readDirectory(uri: URI): Promise<FileSystemNode[]>;\n}\n\nexport class EmptyFileSystemProvider implements FileSystemProvider {\n\n    readFile(): Promise<string> {\n        throw new Error('No file system is available.');\n    }\n\n    async readDirectory(): Promise<FileSystemNode[]> {\n        return [];\n    }\n\n}\n\nexport const EmptyFileSystem = {\n    fileSystemProvider: () => new EmptyFileSystemProvider()\n};\n","/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport { createDefaultCoreModule, createDefaultSharedCoreModule } from '../default-module.js';\nimport type { Module } from '../dependency-injection.js';\nimport { inject } from '../dependency-injection.js';\nimport * as ast from '../languages/generated/ast.js';\nimport type { LangiumCoreServices, LangiumSharedCoreServices, PartialLangiumCoreServices, PartialLangiumSharedCoreServices } from '../services.js';\nimport type { Mutable } from '../syntax-tree.js';\nimport { EmptyFileSystem } from '../workspace/file-system-provider.js';\nimport { URI } from './uri-utils.js';\n\nconst minimalGrammarModule: Module<LangiumCoreServices, PartialLangiumCoreServices> = {\n    Grammar: () => undefined as unknown as ast.Grammar,\n    LanguageMetaData: () => ({\n        caseInsensitive: false,\n        fileExtensions: ['.langium'],\n        languageId: 'langium'\n    })\n};\n\nconst minimalSharedGrammarModule: Module<LangiumSharedCoreServices, PartialLangiumSharedCoreServices> = {\n    AstReflection: () => new ast.LangiumGrammarAstReflection()\n};\n\nfunction createMinimalGrammarServices(): LangiumCoreServices {\n    const shared = inject(\n        createDefaultSharedCoreModule(EmptyFileSystem),\n        minimalSharedGrammarModule\n    );\n    const grammar = inject(\n        createDefaultCoreModule({ shared }),\n        minimalGrammarModule\n    );\n    shared.ServiceRegistry.register(grammar);\n    return grammar;\n}\n\n/**\n * Load a Langium grammar for your language from a JSON string. This is used by several services,\n * most notably the parser builder which interprets the grammar to create a parser.\n */\nexport function loadGrammarFromJson(json: string): ast.Grammar {\n    const services = createMinimalGrammarServices();\n    const astNode = services.serializer.JsonSerializer.deserialize(json) as Mutable<ast.Grammar>;\n    services.shared.workspace.LangiumDocumentFactory.fromModel(astNode, URI.parse(`memory://${astNode.name ?? 'grammar'}.langium`));\n    return astNode;\n}\n","import isSymbol from './isSymbol.js';\n\n/**\n * The base implementation of methods like `_.max` and `_.min` which accepts a\n * `comparator` to determine the extremum value.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The iteratee invoked per iteration.\n * @param {Function} comparator The comparator used to compare values.\n * @returns {*} Returns the extremum value.\n */\nfunction baseExtremum(array, iteratee, comparator) {\n  var index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    var value = array[index],\n        current = iteratee(value);\n\n    if (current != null && (computed === undefined\n          ? (current === current && !isSymbol(current))\n          : comparator(current, computed)\n        )) {\n      var computed = current,\n          result = value;\n    }\n  }\n  return result;\n}\n\nexport default baseExtremum;\n","/**\n * The base implementation of `_.lt` which doesn't coerce arguments.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if `value` is less than `other`,\n *  else `false`.\n */\nfunction baseLt(value, other) {\n  return value < other;\n}\n\nexport default baseLt;\n","import baseEach from './_baseEach.js';\nimport isArrayLike from './isArrayLike.js';\n\n/**\n * The base implementation of `_.map` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction baseMap(collection, iteratee) {\n  var index = -1,\n      result = isArrayLike(collection) ? Array(collection.length) : [];\n\n  baseEach(collection, function(value, key, collection) {\n    result[++index] = iteratee(value, key, collection);\n  });\n  return result;\n}\n\nexport default baseMap;\n","import assignValue from './_assignValue.js';\nimport castPath from './_castPath.js';\nimport isIndex from './_isIndex.js';\nimport isObject from './isObject.js';\nimport toKey from './_toKey.js';\n\n/**\n * The base implementation of `_.set`.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to set.\n * @param {*} value The value to set.\n * @param {Function} [customizer] The function to customize path creation.\n * @returns {Object} Returns `object`.\n */\nfunction baseSet(object, path, value, customizer) {\n  if (!isObject(object)) {\n    return object;\n  }\n  path = castPath(path, object);\n\n  var index = -1,\n      length = path.length,\n      lastIndex = length - 1,\n      nested = object;\n\n  while (nested != null && ++index < length) {\n    var key = toKey(path[index]),\n        newValue = value;\n\n    if (key === '__proto__' || key === 'constructor' || key === 'prototype') {\n      return object;\n    }\n\n    if (index != lastIndex) {\n      var objValue = nested[key];\n      newValue = customizer ? customizer(objValue, key, nested) : undefined;\n      if (newValue === undefined) {\n        newValue = isObject(objValue)\n          ? objValue\n          : (isIndex(path[index + 1]) ? [] : {});\n      }\n    }\n    assignValue(nested, key, newValue);\n    nested = nested[key];\n  }\n  return object;\n}\n\nexport default baseSet;\n","import baseGet from './_baseGet.js';\nimport baseSet from './_baseSet.js';\nimport castPath from './_castPath.js';\n\n/**\n * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The source object.\n * @param {string[]} paths The property paths to pick.\n * @param {Function} predicate The function invoked per property.\n * @returns {Object} Returns the new object.\n */\nfunction basePickBy(object, paths, predicate) {\n  var index = -1,\n      length = paths.length,\n      result = {};\n\n  while (++index < length) {\n    var path = paths[index],\n        value = baseGet(object, path);\n\n    if (predicate(value, path)) {\n      baseSet(result, castPath(path, object), value);\n    }\n  }\n  return result;\n}\n\nexport default basePickBy;\n","import baseClone from './_baseClone.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * Creates a shallow clone of `value`.\n *\n * **Note:** This method is loosely based on the\n * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n * and supports cloning arrays, array buffers, booleans, date objects, maps,\n * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n * arrays. The own enumerable properties of `arguments` objects are cloned\n * as plain objects. An empty object is returned for uncloneable values such\n * as error objects, functions, DOM nodes, and WeakMaps.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to clone.\n * @returns {*} Returns the cloned value.\n * @see _.cloneDeep\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var shallow = _.clone(objects);\n * console.log(shallow[0] === objects[0]);\n * // => true\n */\nfunction clone(value) {\n  return baseClone(value, CLONE_SYMBOLS_FLAG);\n}\n\nexport default clone;\n","import baseRest from './_baseRest.js';\nimport eq from './eq.js';\nimport isIterateeCall from './_isIterateeCall.js';\nimport keysIn from './keysIn.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns own and inherited enumerable string keyed properties of source\n * objects to the destination object for all destination properties that\n * resolve to `undefined`. Source objects are applied from left to right.\n * Once a property is set, additional values of the same property are ignored.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @see _.defaultsDeep\n * @example\n *\n * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n * // => { 'a': 1, 'b': 2 }\n */\nvar defaults = baseRest(function(object, sources) {\n  object = Object(object);\n\n  var index = -1;\n  var length = sources.length;\n  var guard = length > 2 ? sources[2] : undefined;\n\n  if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n    length = 1;\n  }\n\n  while (++index < length) {\n    var source = sources[index];\n    var props = keysIn(source);\n    var propsIndex = -1;\n    var propsLength = props.length;\n\n    while (++propsIndex < propsLength) {\n      var key = props[propsIndex];\n      var value = object[key];\n\n      if (value === undefined ||\n          (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n        object[key] = source[key];\n      }\n    }\n  }\n\n  return object;\n});\n\nexport default defaults;\n","import baseIteratee from './_baseIteratee.js';\nimport isArrayLike from './isArrayLike.js';\nimport keys from './keys.js';\n\n/**\n * Creates a `_.find` or `_.findLast` function.\n *\n * @private\n * @param {Function} findIndexFunc The function to find the collection index.\n * @returns {Function} Returns the new find function.\n */\nfunction createFind(findIndexFunc) {\n  return function(collection, predicate, fromIndex) {\n    var iterable = Object(collection);\n    if (!isArrayLike(collection)) {\n      var iteratee = baseIteratee(predicate, 3);\n      collection = keys(collection);\n      predicate = function(key) { return iteratee(iterable[key], key, iterable); };\n    }\n    var index = findIndexFunc(collection, predicate, fromIndex);\n    return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;\n  };\n}\n\nexport default createFind;\n","import baseFindIndex from './_baseFindIndex.js';\nimport baseIteratee from './_baseIteratee.js';\nimport toInteger from './toInteger.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * This method is like `_.find` except that it returns the index of the first\n * element `predicate` returns truthy for instead of the element itself.\n *\n * @static\n * @memberOf _\n * @since 1.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {number} Returns the index of the found element, else `-1`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'active': false },\n *   { 'user': 'fred',    'active': false },\n *   { 'user': 'pebbles', 'active': true }\n * ];\n *\n * _.findIndex(users, function(o) { return o.user == 'barney'; });\n * // => 0\n *\n * // The `_.matches` iteratee shorthand.\n * _.findIndex(users, { 'user': 'fred', 'active': false });\n * // => 1\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.findIndex(users, ['active', false]);\n * // => 0\n *\n * // The `_.property` iteratee shorthand.\n * _.findIndex(users, 'active');\n * // => 2\n */\nfunction findIndex(array, predicate, fromIndex) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return -1;\n  }\n  var index = fromIndex == null ? 0 : toInteger(fromIndex);\n  if (index < 0) {\n    index = nativeMax(length + index, 0);\n  }\n  return baseFindIndex(array, baseIteratee(predicate, 3), index);\n}\n\nexport default findIndex;\n","import createFind from './_createFind.js';\nimport findIndex from './findIndex.js';\n\n/**\n * Iterates over elements of `collection`, returning the first element\n * `predicate` returns truthy for. The predicate is invoked with three\n * arguments: (value, index|key, collection).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to inspect.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {*} Returns the matched element, else `undefined`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'age': 36, 'active': true },\n *   { 'user': 'fred',    'age': 40, 'active': false },\n *   { 'user': 'pebbles', 'age': 1,  'active': true }\n * ];\n *\n * _.find(users, function(o) { return o.age < 40; });\n * // => object for 'barney'\n *\n * // The `_.matches` iteratee shorthand.\n * _.find(users, { 'age': 1, 'active': true });\n * // => object for 'pebbles'\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.find(users, ['active', false]);\n * // => object for 'fred'\n *\n * // The `_.property` iteratee shorthand.\n * _.find(users, 'active');\n * // => object for 'barney'\n */\nvar find = createFind(findIndex);\n\nexport default find;\n","import baseFlatten from './_baseFlatten.js';\n\n/**\n * Flattens `array` a single level deep.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to flatten.\n * @returns {Array} Returns the new flattened array.\n * @example\n *\n * _.flatten([1, [2, [3, [4]], 5]]);\n * // => [1, 2, [3, [4]], 5]\n */\nfunction flatten(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? baseFlatten(array, 1) : [];\n}\n\nexport default flatten;\n","import baseGetTag from './_baseGetTag.js';\nimport isArray from './isArray.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar stringTag = '[object String]';\n\n/**\n * Checks if `value` is classified as a `String` primitive or object.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a string, else `false`.\n * @example\n *\n * _.isString('abc');\n * // => true\n *\n * _.isString(1);\n * // => false\n */\nfunction isString(value) {\n  return typeof value == 'string' ||\n    (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);\n}\n\nexport default isString;\n","/**\n * Gets the last element of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to query.\n * @returns {*} Returns the last element of `array`.\n * @example\n *\n * _.last([1, 2, 3]);\n * // => 3\n */\nfunction last(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? array[length - 1] : undefined;\n}\n\nexport default last;\n","import arrayMap from './_arrayMap.js';\nimport baseIteratee from './_baseIteratee.js';\nimport baseMap from './_baseMap.js';\nimport isArray from './isArray.js';\n\n/**\n * Creates an array of values by running each element in `collection` thru\n * `iteratee`. The iteratee is invoked with three arguments:\n * (value, index|key, collection).\n *\n * Many lodash methods are guarded to work as iteratees for methods like\n * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n *\n * The guarded methods are:\n * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n * `template`, `trim`, `trimEnd`, `trimStart`, and `words`\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n * @example\n *\n * function square(n) {\n *   return n * n;\n * }\n *\n * _.map([4, 8], square);\n * // => [16, 64]\n *\n * _.map({ 'a': 4, 'b': 8 }, square);\n * // => [16, 64] (iteration order is not guaranteed)\n *\n * var users = [\n *   { 'user': 'barney' },\n *   { 'user': 'fred' }\n * ];\n *\n * // The `_.property` iteratee shorthand.\n * _.map(users, 'user');\n * // => ['barney', 'fred']\n */\nfunction map(collection, iteratee) {\n  var func = isArray(collection) ? arrayMap : baseMap;\n  return func(collection, baseIteratee(iteratee, 3));\n}\n\nexport default map;\n","import baseExtremum from './_baseExtremum.js';\nimport baseLt from './_baseLt.js';\nimport identity from './identity.js';\n\n/**\n * Computes the minimum value of `array`. If `array` is empty or falsey,\n * `undefined` is returned.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {*} Returns the minimum value.\n * @example\n *\n * _.min([4, 2, 8, 6]);\n * // => 2\n *\n * _.min([]);\n * // => undefined\n */\nfunction min(array) {\n  return (array && array.length)\n    ? baseExtremum(array, identity, baseLt)\n    : undefined;\n}\n\nexport default min;\n","/** Used to match a single whitespace character. */\nvar reWhitespace = /\\s/;\n\n/**\n * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace\n * character of `string`.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {number} Returns the index of the last non-whitespace character.\n */\nfunction trimmedEndIndex(string) {\n  var index = string.length;\n\n  while (index-- && reWhitespace.test(string.charAt(index))) {}\n  return index;\n}\n\nexport default trimmedEndIndex;\n","import trimmedEndIndex from './_trimmedEndIndex.js';\n\n/** Used to match leading whitespace. */\nvar reTrimStart = /^\\s+/;\n\n/**\n * The base implementation of `_.trim`.\n *\n * @private\n * @param {string} string The string to trim.\n * @returns {string} Returns the trimmed string.\n */\nfunction baseTrim(string) {\n  return string\n    ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')\n    : string;\n}\n\nexport default baseTrim;\n","import baseTrim from './_baseTrim.js';\nimport isObject from './isObject.js';\nimport isSymbol from './isSymbol.js';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = baseTrim(value);\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nexport default toNumber;\n","import toNumber from './toNumber.js';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_INTEGER = 1.7976931348623157e+308;\n\n/**\n * Converts `value` to a finite number.\n *\n * @static\n * @memberOf _\n * @since 4.12.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted number.\n * @example\n *\n * _.toFinite(3.2);\n * // => 3.2\n *\n * _.toFinite(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toFinite(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toFinite('3.2');\n * // => 3.2\n */\nfunction toFinite(value) {\n  if (!value) {\n    return value === 0 ? value : 0;\n  }\n  value = toNumber(value);\n  if (value === INFINITY || value === -INFINITY) {\n    var sign = (value < 0 ? -1 : 1);\n    return sign * MAX_INTEGER;\n  }\n  return value === value ? value : 0;\n}\n\nexport default toFinite;\n","import toFinite from './toFinite.js';\n\n/**\n * Converts `value` to an integer.\n *\n * **Note:** This method is loosely based on\n * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toInteger(3.2);\n * // => 3\n *\n * _.toInteger(Number.MIN_VALUE);\n * // => 0\n *\n * _.toInteger(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toInteger('3.2');\n * // => 3\n */\nfunction toInteger(value) {\n  var result = toFinite(value),\n      remainder = result % 1;\n\n  return result === result ? (remainder ? result - remainder : result) : 0;\n}\n\nexport default toInteger;\n"],"names":["exports","ral_1","require","Is","events_1","CancellationToken","None","Object","freeze","isCancellationRequested","onCancellationRequested","Event","Cancelled","is","value","candidate","boolean","shortcutEvent","callback","context","handle","default","timer","setTimeout","bind","dispose","MutableToken","constructor","this","_isCancelled","cancel","_emitter","fire","undefined","Emitter","event","token","_token","defineProperty","_disposable","CallbackList","add","arguments","length","bucket","_callbacks","_contexts","push","Array","isArray","remove","foundCallbackWithDifferentContext","i","len","splice","Error","invoke","ret","callbacks","slice","contexts","_len","args","_key","apply","e","console","error","isEmpty","_options","_event","listener","thisArgs","disposables","onFirstListenerAdd","result","_noop","onLastListenerRemove","call","string","String","array","stringArray","func","number","Number","every","elem","_ral","RAL","install","ral","PacketTokenBuilder","AbstractMermaidTokenBuilder","__name","super","PacketModule","parser","TokenBuilder","ValueConverter","CommonValueConverter","createPacketServices","EmptyFileSystem","shared","inject","createDefaultSharedCoreModule","MermaidGeneratedSharedModule","Packet","createDefaultCoreModule","PacketGeneratedModule","ServiceRegistry","register","PieTokenBuilder","PieValueConverter","AbstractMermaidValueConverter","runCustomConverter","rule","input","_cstNode","name","replace","trim","PieModule","createPieServices","Pie","PieGeneratedModule","InfoTokenBuilder","InfoModule","createInfoServices","Info","InfoGeneratedModule","GitGraphTokenBuilder","GitGraphModule","createGitGraphServices","GitGraph","GitGraphGeneratedModule","__defProp","target","configurable","Branch","item","reflection","isInstance","Commit","Merge","loadedInfoGrammar","loadedPacketGrammar","loadedPieGrammar","loadedGitGraphGrammar","MermaidAstReflection","AbstractAstReflection","getAllTypes","computeIsSubtype","subtype","supertype","isSubtype","getReferenceType","refInfo","referenceId","container","$type","property","getTypeMetaData","type","properties","defaultValue","InfoGrammar","loadGrammarFromJson","PacketGrammar","PieGrammar","GitGraphGrammar","InfoLanguageMetaData","languageId","fileExtensions","caseInsensitive","PacketLanguageMetaData","PieLanguageMetaData","GitGraphLanguageMetaData","AstReflection","Grammar","LanguageMetaData","rulesRegexes","ACC_DESCR","ACC_TITLE","TITLE","DefaultValueConverter","runConverter","cstNode","runCommonConverter","regex","match","exec","_rule","_input","DefaultTokenBuilder","keywords","Set","buildKeywordTokens","rules","terminalTokens","options","tokenTypes","forEach","tokenType","has","PATTERN","RegExp","toString","parsers","initializers","info","async","createInfoServices2","LangiumParser","packet","createPacketServices2","pie","createPieServices2","gitGraph","createGitGraphServices2","parse","diagramType","text","initializer","lexerErrors","parserErrors","MermaidParseError","map","err","message","join","isAstNode","obj","isReference","$refText","isLinkingError","reference","subtypes","allSubtypes","node","nested","existing","getAllSubTypes","allTypes","types","possibleSubType","isCompositeCstNode","content","isLeafCstNode","isRootCstNode","fullText","StreamImpl","startFn","nextFn","iterator","state","next","Symbol","Boolean","done","count","toArray","toSet","toMap","keyFn","valueFn","entryStream","element","Map","concat","other","first","firstDone","DONE_RESULT","separator","addSeparator","indexOf","searchElement","fromIndex","index","predicate","some","callbackfn","filter","nonNullable","reduce","initialValue","previousValue","reduceRight","recursiveReduce","find","findIndex","includes","flatMap","mapped","isIterable","flat","depth","stream","head","tail","skipCount","limit","maxSize","size","distinct","by","set","exclude","key","otherKeySet","ownKey","prototype","EMPTY_STREAM","collections","collection","collIndex","arrIndex","TreeStreamImpl","root","children","iterators","includeRoot","pruned","pop","prune","Reduction","RangeComparison","streamCst","tokenToRange","start","character","startColumn","line","startLine","end","endColumn","endLine","toDocumentSegment","offset","range","inRange","to","comparison","Before","After","startInside","endInside","Inside","OverlapBack","OverlapFront","compareRange","sum","a","b","product","min","Math","max","DefaultNameRegexp","findCommentNode","commentNames","previous","hidden","parent","getPreviousNode","isCommentNode","child","ErrorWithLocation","assertUnreachable","_","AbstractRule","AbstractType","Condition","TypeDefinition","ValueLiteral","AbstractElement","ArrayLiteral","ArrayType","BooleanLiteral","Conjunction","Disjunction","InferredType","isInferredType","Interface","isInterface","Negation","NumberLiteral","Parameter","ParameterReference","ParserRule","isParserRule","ReferenceType","ReturnType","SimpleType","StringLiteral","TerminalRule","isTerminalRule","Type","isType","UnionType","Action","isAction","Alternatives","isAlternatives","Assignment","isAssignment","CharacterRange","CrossReference","isCrossReference","EndOfFile","Group","isGroup","Keyword","isKeyword","NegatedToken","RegexToken","RuleCall","isRuleCall","TerminalAlternatives","TerminalGroup","TerminalRuleCall","isTerminalRuleCall","UnorderedGroup","isUnorderedGroup","UntilToken","Wildcard","LangiumGrammarAstReflection","linkContentToContainer","entries","startsWith","$container","$containerProperty","$containerIndex","getContainerOfType","typePredicate","getDocument","rootNode","findRootNode","$document","streamContents","keys","keyIndex","arrayIndex","isAstNodeInRange","streamAllContents","streamAst","astNode","nodeRange","_a","$cstNode","streamReferences","copyDefaultValue","propertyType","cc","char","charCodeAt","insertToSet","subItem","addFlag","flagObj","flagKey","ASSERT_EXISTS","ASSERT_NEVER_REACH_HERE","isCharacter","digitsCharCodes","wordCharCodes","whitespaceCodes","hexDigitPattern","decimalPattern","decimalPatternNoZero","RegExpParser","idx","groupIdx","saveState","restoreState","newState","pattern","consumeChar","disjunction","flags","loc","begin","global","ignoreCase","multiLine","unicode","sticky","isRegExpFlag","popChar","substring","alts","alternative","peekChar","terms","isTerm","term","isAssertion","assertion","atom","quantifier","isBacktracking","atLeast","atMost","Infinity","integerIncludingZero","isDigit","greedy","dotAll","atomEscape","characterClass","group","isPatternCharacter","patternCharacter","isQuantifier","complement","decimalEscapeAtom","characterClassEscape","controlEscapeAtom","controlLetterEscapeAtom","nulCharacterAtom","hexEscapeSequenceAtom","regExpUnicodeEscapeSequenceAtom","identityEscapeAtom","positiveInteger","escapeCode","letter","test","toUpperCase","parseHexDigits","classPatternCharacterAtom","isClassAtom","from","classAtom","isRangeDash","classEscape","capturing","groupAst","parseInt","nextChar","howMuch","isAtom","prevState","howMany","hexString","hexChar","BaseRegExpVisitor","visitChildren","hasOwnProperty","visit","subChild","visitPattern","visitFlags","visitDisjunction","visitAlternative","visitStartAnchor","visitEndAnchor","visitWordBoundary","visitNonWordBoundary","visitLookahead","visitNegativeLookahead","visitCharacter","visitSet","visitGroup","visitGroupBackReference","visitQuantifier","NEWLINE_REGEXP","regexpParser","visitor","isStarting","endRegexpStack","multiline","endRegex","reset","startRegexp","fromCharCode","escapedChar","escapeRegExp","isMultilineComment","regexp","isWhitespace","partialMatches","partial","re","source","process","tmp","appendRaw","nbChars","substr","appendOptional","lastIndex","partialRegExp","getAllReachableRules","grammar","allTerminals","ruleNames","entryRule","ast","entry","getEntryRule","topMostRules","getHiddenRules","ruleDfs","visitedSet","refRule","ref","findNodeForProperty","nodes","findNodesForPropertyInternal","nodeFeature","grammarSource","feature","findNodesForKeywordInternal","keyword","treeIterator","keywordNodes","childNode","findNameAssignment","startNode","findNameAssignmentInternal","cache","go","refType","childAssignment","get","toLowerCase","typeRef","isDataTypeRule","isDataTypeRuleInternal","visited","definition","getExplicitRuleType","inferredType","dataType","returnType","getTypeName","actionType","action","getActionType","terminalRegex","terminalRule","s","u","abstractElementToRegex","flagText","_ref","_ref2","WILDCARD","withCardinality","alternatives","elements","cardinality","lookahead","right","keywordToRegex","left","wrap","characterRangeToRegex","negate","terminal","negateTokenToRegex","until","lastSlash","lastIndexOf","regexFlags","toFastProperties","toBecomeFast","FakeConstructor","fakeInstance","fakeAccess","bar","n","guard","toInteger","baseSlice","createAssigner","object","isPrototype","isArrayLike","copyObject","assignValue","props","arrayMap","getAllKeysIn","prop","baseIteratee","basePickBy","path","isObjectLike","baseGetTag","nodeIsRegExp","nodeUtil","isRegExp","baseUnary","baseIsRegExp","tokenLabel","tokType","isString","LABEL","AbstractProduction","_definition","accept","prod","NonTerminal","assign","pickBy","v","referencedRule","Rule","orgText","Alternative","ignoreAmbiguities","Option","RepetitionMandatory","RepetitionMandatoryWithSeparator","Repetition","RepetitionWithSeparator","Alternation","hasPredicates","Terminal","serializeProduction","convertDefinition","serializedNonTerminal","nonTerminalName","label","terminalType","serializedTerminal","terminalLabel","GAstVisitor","nodeAny","visitNonTerminal","visitOption","visitRepetitionMandatory","visitRepetitionMandatoryWithSeparator","visitRepetitionWithSeparator","visitRepetition","visitAlternation","visitTerminal","visitRule","baseEach","arraySome","baseSome","isIterateeCall","nativeMax","values","baseIndexOf","arrayEvery","baseEvery","isOptionalProd","alreadyVisited","subProd","getProductionDslName","RestWalker","walk","prevRest","currRest","drop","walkProdRef","walkTerminal","walkFlat","walkOption","walkAtLeastOne","walkAtLeastOneSep","walkManySep","walkMany","walkOr","refProd","flatProd","fullOrRest","optionProd","atLeastOneProd","fullAtLeastOneRest","atLeastOneSepProd","fullAtLeastOneSepRest","restForRepetitionWithSeparator","manyProd","fullManyRest","manySepProd","fullManySepRest","orProd","alt","prodWrapper","repSepProd","baseUniq","isSequenceProd","firstSet","seq","currSubProd","nextSubProdIdx","hasInnerProdsRemaining","isLastInnerProdOptional","uniq","firstForSequence","isBranchingProd","allAlternativesFirsts","innerProd","flatten","firstForBranching","IN","ResyncFollowsWalker","topProd","follows","startWalking","followName","inner","occurenceInParent","fullRest","t_in_topProd_follows","TypeError","arrayFilter","baseFilter","iteratee","comparator","arrayIncludes","isCommon","valuesLength","arrayIncludesWith","cacheHas","SetCache","outer","computed","valuesIndex","baseRest","isArrayLikeObject","baseDifference","baseFlatten","resIndex","PRINT_ERROR","msg","PRINT_WARNING","warn","regExpAstCache","regExpParser","getRegExpAst","regExp","regExpStr","regExpAst","complementErrorMessage","failedOptimizationPrefixMsg","getOptimizedStartCodesIndices","ensureOptimizations","firstCharOptimizedIndices","msgSuffix","addOptimizedIdxToResult","code","rangeCode","minOptimizationVal","minUnOptVal","maxUnOptVal","minOptIdx","charCodeToOptimizedIndex","maxOptIdx","currOptIdx","isOptionalQuantifier","isWholeOptional","optimizedCharIdx","upperChar","lowerChar","handleIgnoreCase","findCode","setNode","targetCharCodes","codeOrRange","targetCode","CharCodeFinder","found","canMatchCharCode","charCodes","charCodeFinder","DEFAULT_MODE","MODES","SUPPORT_STICKY","analyzeTokenTypes","tracer","defaults","useSticky","debug","safeMode","positionTracking","lineTerminatorCharacters","onlyRelevantTypes","charCodeToOptimizedIdxMap","initCharCodeToOptimizedIndexMap","reject","currType","Lexer","NA","allTransformedPatterns","patternIdxToType","patternIdxToGroup","patternIdxToLongerAltIdxArr","patternIdxToPushMode","patternIdxToPopMode","patternIdxToCanLineTerminator","patternIdxToIsCustom","patternIdxToShort","emptyGroups","patternIdxToConfig","hasCustom","currPattern","regExpSource","addStickyFlag","addStartOfInput","isFunction","escapedRegExpString","wrappedRegExp","tokenTypeIdx","clazz","groupName","GROUP","SKIPPED","isUndefined","longerAltType","LONGER_ALT","PUSH_MODE","lineTerminatorCharCodes","getCharCodes","LINE_BREAKS","checkLineBreaksIssues","isCustomPattern","isShortPattern","acc","x","longerAlt","canLineTerminator","isCustom","short","canBeOptimized","charCodeToPatternIdxToConfig","currTokType","optimizedIdx","addToMapOfArrays","START_CHARS_HINT","lastOptimizedIdx","charOrInt","currOptimizedIdx","optimizedCodes","validatePatterns","validModesNames","errors","missingResult","tokenTypesWithMissingPattern","LexerDefinitionErrorType","MISSING_PATTERN","valid","difference","findMissingPatterns","invalidResult","tokenTypesWithInvalidPattern","INVALID_PATTERN","findInvalidPatterns","validTokenTypes","withRegExpPatterns","EndAnchorFinder","invalidRegex","regexpAst","endAnchorVisitor","end_of_input","EOI_ANCHOR_FOUND","findEndOfInputAnchor","StartAnchorFinder","startAnchorVisitor","start_of_input","SOI_ANCHOR_FOUND","findStartOfInputAnchor","invalidFlags","UNSUPPORTED_FLAGS_FOUND","findUnsupportedFlags","identicalPatterns","outerType","innerType","compact","duplicatePatterns","currIdenticalSet","setOfIdentical","tokenTypeNames","DUPLICATE_PATTERNS_FOUND","findDuplicatePatterns","matchesEmptyString","EMPTY_MATCH_PATTERN","findEmptyMatchRegExps","validateRegExpPattern","invalidTypes","INVALID_GROUP_TYPE_FOUND","findInvalidGroupType","validModes","invalidModes","PUSH_MODE_DOES_NOT_EXIST","findModesThatDoNotExist","canBeTested","str","metaChars","noMetaChar","testIdx","regExpArray","testTokenType","UNREACHABLE_PATTERN","findUnreachablePatterns","performWarningRuntimeChecks","lexerDefinition","trackLines","warnings","hasAnyLineBreak","allTokenTypes","modes","concreteTokenTypes","terminatorCharCodes","currIssue","details","issue","IDENTIFY_TERMINATOR","errMsg","CUSTOM_LINE_BREAK","buildLineBreakIssueMessage","warningDescriptor","NO_LINE_BREAKS_FLAGS","LineTerminatorOptimizedTester","c","charsOrCodes","numOrString","charCode","Date","getTime","val","time","tokenStructuredMatcher","tokInstance","tokConstructor","instanceType","isParent","categoryMatchesMap","tokenStructuredMatcherNoCategories","tokenShortNameIdx","tokenIdxToClass","augmentTokenTypes","tokenTypesAndParents","clone","categories","searching","CATEGORIES","newCategories","expandCategories","hasShortKeyProperty","hasCategoriesProperty","categoryMatches","hasExtendingTokensTypesMapProperty","assignTokenDefaultProps","singleAssignCategoriesToksMap","assignCategoriesMapProp","assignCategoriesTokensProp","nextNode","pathNode","nextCategory","newPath","isTokenType","defaultLexerErrorProvider","buildUnableToPopLexerModeMessage","image","buildUnexpectedCharactersMessage","startOffset","column","charAt","DEFAULT_LEXER_CONFIG","deferDefinitionErrorsHandling","lineTerminatorsPattern","errorMessageProvider","traceInitPerf","skipValidations","recoveryEnabled","config","lexerDefinitionErrors","lexerDefinitionWarning","trackStartLines","trackEndLines","canModeBeOptimized","TRACE_INIT","phaseDesc","phaseImpl","traceInitIndent","indent","traceInitMaxIdent","log","traceMethod","traceInitVal","actualDefinition","hasOnlySingleMode","defaultMode","MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE","MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY","MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST","currModeValue","currModeName","currIdx","LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED","currLongerAlt","MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE","performRuntimeChecks","allModeNames","currModDef","currModName","currAnalyzeResult","allErrMessagesString","chopInput","identity","matchWithTest","updateLastIndex","noop","matchWithExec","handleModes","computeNewColumn","updateTokenEndLineColumnLocation","createTokenInstance","createFullToken","createStartOnlyToken","createOffsetOnlyToken","addToken","addTokenUsingPush","handlePayload","handlePayloadWithCustom","addTokenUsingMemberAccess","handlePayloadNoCustom","unOptimizedModes","cannotBeOptimized","modeName","tokenize","initialMode","tokenizeInternal","j","k","matchAltImage","matchedImage","payload","altPayload","imageLength","newToken","errLength","orgLength","matchedTokensIndex","guessedNumberOfTokens","floor","matchedTokens","groups","clonedResult","groupKeys","currKey","currGroupValue","cloneEmptyGroups","lineTerminatorPattern","currModePatternsLength","currCharCodeToPatternIdxToConfig","modeStack","emptyArray","getPossiblePatterns","getPossiblePatternsSlow","getPossiblePatternsOptimized","possiblePatterns","pop_mode","popToken","newMode","last","modeCanBeOptimized","push_mode","currConfig","nextCharCode","chosenPatternIdxToConfig","chosenPatternsLength","singleCharCode","longerAltLength","longerAltConfig","longerAltPattern","foundTerminator","lastLTEndOffset","numOfLTsInMatch","errorStartOffset","errorLine","errorColumn","foundResyncPoint","tokens","pushMode","newLastIndex","lastLTIdx","lastCharIsLT","fixForEndingInLT","oldColumn","endOffset","tokenVector","tokenToAdd","hasTokenLabel","PARENT","POP_MODE","createToken","createTokenInternal","EOF","tokenMatcher","defaultParserErrorProvider","buildMismatchTokenMessage","expected","actual","ruleName","buildNotAllInputParsedMessage","firstRedundant","buildNoViableAltMessage","_ref3","expectedPathsPerAlt","customUserDescription","errPrefix","errSuffix","allLookAheadPaths","currAltPaths","nextValidTokenSequences","currPath","currTokenType","itemMsg","buildEarlyExitMessage","_ref4","expectedIterationPaths","defaultGrammarResolverErrorProvider","buildRuleNotFoundError","topLevelRule","undefinedRule","defaultGrammarValidatorErrorProvider","buildDuplicateFoundError","duplicateProds","topLevelName","duplicateProd","dslName","extraArgument","buildNamespaceConflictError","buildAlternationPrefixAmbiguityError","pathMsg","prefixPath","currTok","occurrence","alternation","ambiguityIndices","buildAlternationAmbiguityError","currtok","currMessage","buildEmptyRepetitionError","repetition","buildTokenNameError","buildEmptyAlternationError","emptyChoiceIdx","buildTooManyAlternativesError","buildLeftRecursionError","leftRecursionPath","currRule","buildInvalidRuleNameError","buildDuplicateRuleNameError","grammarName","GastRefResolverVisitor","nameToTopRule","errMsgProvider","resolveRefs","currTopLevel","ParserDefinitionErrorType","UNRESOLVED_SUBRULE_REF","unresolvedRefName","setter","accumulator","arrayAggregator","baseAggregator","createAggregator","baseAssignValue","AbstractNextPossibleTokensWalker","possibleTokTypes","nextProductionName","nextProductionOccurrence","isAtEndOfPath","ruleStack","reverse","occurrenceStack","updateExpectedNext","NextAfterTokenWalker","nextTerminalName","nextTerminalOccurrence","lastTok","lastTokOccurrence","restProd","AbstractNextTerminalAfterProductionWalker","topRule","isEndOfRule","NextTerminalAfterManyWalker","firstAfterMany","_first","NextTerminalAfterManySepWalker","firstAfterManySep","NextTerminalAfterAtLeastOneWalker","firstAfterAtLeastOne","NextTerminalAfterAtLeastOneSepWalker","atleastOneSepProd","firstAfterfirstAfterAtLeastOneSep","possiblePathsFrom","targetDef","maxLength","getAlternativesForProd","newDef","currAlt","partialPath","suffixDef","nextPossibleTokensAfter","initialDef","tokMatcher","maxLookAhead","EXIT_NON_TERMINAL","EXIT_NON_TERMINAL_ARR","EXIT_ALTERNATIVE","foundCompletePath","tokenVectorLength","minimalAlternativesIndex","possiblePaths","def","currDef","currRuleStack","currOccurrenceStack","nextPath","dropRight","nextIdx","nextTokenType","nextTokenOccurrence","newRuleStack","newOccurrenceStack","nextPathWithout","nextPathWith","secondIteration","separatorGast","nthRepetition","currAltPath","expandTopLevelRule","newCurrOccurrenceStack","PROD_TYPE","getProdType","OPTION","REPETITION","REPETITION_MANDATORY","REPETITION_MANDATORY_WITH_SEPARATOR","REPETITION_WITH_SEPARATOR","ALTERNATION","getLookaheadPaths","prodType","maxLookahead","getLookaheadPathsForOr","getLookaheadPathsForOptionalProd","buildAlternativesLookAheadFunc","dynamicTokensEnabled","numOfAlts","areAllOneTokenLookahead","orAlts","predicates","GATE","t","currNumOfPaths","currPredicate","currPathLength","nextToken","LA","singleTokenAlts","choiceToAlt","currExtendingType","buildSingleAlternativeLookaheadFunction","numOfPaths","singleTokensTypes","expectedTokenUniqueKey","RestDefinitionFinderWalker","targetOccurrence","targetProdType","restDef","checkIsTarget","expectedProdType","InsideDefinitionFinderVisitor","targetRef","expectedProdName","initializeArrayOfArrays","pathToHashKeys","longerKeys","currShorterKey","categoriesKeySuffix","isUniquePrefixHash","altKnownPathsKeys","searchPathKeys","currAltIdx","otherAltKnownPathsKeys","searchIdx","lookAheadSequenceFromAlternatives","altsDefs","partialAlts","finalResult","altsHashes","dict","newData","pathLength","currDataset","altIdx","currAltPathsAndSuffixes","currPathIdx","currPathPrefix","prefixKeys","currAltResult","containsPath","newPartialPathsAndSuffixes","ruleGrammar","insideDefVisitor","insideDef","afterDef","AlternativeGAST","searchPath","compareOtherPath","otherPath","searchTok","otherTok","areTokenCategoriesNotUsed","lookAheadPaths","singleAltPaths","singlePath","validateGrammar","topLevels","duplicateErrors","collectorVisitor","OccurrenceValidationCollector","allRuleProductions","allProductions","productionGroups","groupBy","identifyProductionForDuplicates","duplicates","currGroup","currDuplicates","firstProd","defError","DUPLICATE_PRODUCTIONS","param","getExtraProductionArgument","parameter","validateDuplicateProductions","termsNamespaceConflictErrors","tokenNames","currToken","currRuleName","CONFLICT_TOKENS_RULES_NAMESPACE","checkTerminalAndNoneTerminalsNameSpace","tooManyAltsErrors","curRule","orCollector","OrCollector","ors","alternations","currOr","TOO_MANY_ALTS","validateTooManyAlts","duplicateRulesError","allRules","className","occurrences","DUPLICATE_RULE_NAME","validateRuleDoesNotAlreadyExist","subrule","option","manySep","atLeastOne","atLeastOneSep","many","or","validateNoLeftRecursion","nextNonTerminals","getFirstNoneTerminal","LEFT_RECURSION","validNextSteps","errorsFromNextSteps","currRefRule","currSubDef","isFirstOptional","hasMore","rest","validateAmbiguousAlternationAlternatives","globalMaxLookahead","currOccurrence","actualMaxLookahead","altsAmbiguityErrors","foundAmbiguousPaths","identicalAmbiguities","altsCurrPathAppearsIn","currOtherAlt","currOtherAltIdx","currErrors","currAmbDescriptor","ambgIndices","AMBIGUOUS_ALTS","checkAlternativesAmbiguities","altsPrefixAmbiguityErrors","pathsAndIndices","currPathsAndIdx","currPathAndIdx","targetIdx","targetPath","prefixAmbiguitiesPathsAndIndices","searchPathAndIdx","prefix","otherTokType","currAmbPathAndIdx","AMBIGUOUS_PREFIX_ALTS","checkPrefixAlternativesAmbiguities","RepetitionCollector","resolveGrammar","actualOptions","topRulesTable","refResolver","orgResolveGrammar","MISMATCHED_TOKEN_EXCEPTION","NO_VIABLE_ALT_EXCEPTION","EARLY_EXIT_EXCEPTION","NOT_ALL_INPUT_PARSED_EXCEPTION","RECOGNITION_EXCEPTION_NAMES","isRecognitionException","RecognitionException","resyncedTokens","setPrototypeOf","captureStackTrace","MismatchedTokenException","previousToken","NoViableAltException","NotAllInputParsedException","EarlyExitException","EOF_FOLLOW_KEY","IN_RULE_RECOVERY_EXCEPTION","InRuleRecoveryException","attemptInRepetitionRecovery","prodFunc","lookaheadFunc","dslMethodIdx","prodOccurrence","nextToksWalker","notStuck","getKeyForAutomaticLookahead","firstAfterRepInfo","firstAfterRepMap","getCurrRuleFullName","getGAstProductions","expectTokAfterLastMatch","nextTokIdx","RULE_STACK","shouldInRepetitionRecoveryBeTried","tryInRepetitionRecovery","AT_LEAST_ONE_IDX","MANY_SEP_IDX","AT_LEAST_ONE_SEP_IDX","ruleIdx","LLkLookaheadStrategy","DEFAULT_PARSER_CONFIG","validate","leftRecursionErrors","emptyAltErrors","validateEmptyOrAlternatives","ambiguousAltsErrors","emptyRepetitionErrors","validateSomeNonEmptyLookaheadPath","currTopRule","exceptLast","currAlternative","possibleFirstInAlt","NONE_LAST_EMPTY_ALT","validateEmptyOrAlternative","topLevelRules","currProd","pathsInsideProduction","NO_NON_EMPTY_LOOKAHEAD","buildLookaheadForAlternation","laFuncBuilder","buildLookaheadFuncForOr","buildLookaheadForOptional","lookaheadBuilder","buildLookaheadFuncForOptionalProd","dslMethods","repetitionWithSeparator","repetitionMandatory","repetitionMandatoryWithSeparator","setNodeLocationOnlyOffset","currNodeLocation","newLocationInfo","isNaN","setNodeLocationFull","NAME","defineNameProp","nameValue","enumerable","writable","defaultVisit","ctx","childrenNames","childrenNamesLength","currChildArray","currChildArrayLength","currChild","createBaseSemanticVisitorConstructor","derivedConstructor","semanticProto","validateVisitor","semanticDefinitionErrors","visitorInstance","missingErrors","missingRuleNames","CstVisitorDefinitionError","MISSING_METHOD","methodName","validateMissingCstMethods","errorMessages","currDefError","_RULE_NAMES","RECORDING_NULL_OBJECT","description","HANDLE_SEPARATOR","MAX_METHOD_IDX","pow","RFT","RECORDING_PHASE_TOKEN","RECORDING_PHASE_CSTNODE","recordProd","prodConstructor","mainProdArg","handleSep","assertMethodIdxIsValid","prevProd","peek","recordingProdStack","grammarAction","DEF","newProd","SEP","MAX_LOOKAHEAD","recordOrProd","hasOptions","newOrProd","IGNORE_AMBIGUITIES","currAltFlat","ALT","getIdxSuffix","KNOWN_RECORDER_ERROR","END_OF_FILE","NaN","outputCst","nodeLocationTracking","DEFAULT_RULE_CONFIG","recoveryValueFunc","resyncEnabled","derivedCtor","baseCtors","EMPTY_ALT","Parser","performSelfAnalysis","parserInstance","defErrorsMsgs","selfAnalysisDone","enableRecording","definedRulesNames","originalGrammarAction","recordedRuleGast","topLevelRuleRecord","gastProductionsCache","disableRecording","resolverErrors","definitionErrors","validationErrors","tokensMap","orgValidateGrammar","lookaheadValidationErrors","lookaheadValidationErrorMessages","lookaheadStrategy","errorMessage","CUSTOM_LOOKAHEAD_VALIDATION","validateLookahead","allFollows","topProductions","reSyncFollows","currRefsFollow","computeAllProdsFollows","resyncFollows","_b","initialize","preComputeLookaheadFunctions","DEFER_DEFINITION_ERRORS_HANDLING","tokenVocabulary","that","initErrorHandler","initLexerAdapter","initLooksAhead","initRecognizerEngine","initRecoverable","initTreeBuilder","initContentAssist","initGastRecorder","initPerformanceTracer","getTokenToInsert","tokToInsert","isInsertedInRecovery","canTokenTypeBeInsertedInRecovery","canTokenTypeBeDeletedInRecovery","grammarRule","grammarRuleArgs","lookAheadFunc","expectedTokType","reSyncTokType","findReSyncTokenType","savedLexerState","exportLexerState","passedResyncPoint","nextTokenWithoutResync","generateErrorMessage","SAVE_ERROR","SKIP_TOKEN","addToResyncTokens","importLexerState","isBackTracking","canPerformInRuleRecovery","getFollowsForInRuleRecovery","tokIdxInRule","grammarPath","getCurrentGrammarPath","getNextPossibleTokenTypes","tryInRuleRecovery","canRecoverWithSingleTokenInsertion","canRecoverWithSingleTokenDeletion","nextTok","consumeToken","expectedToken","mismatchedTok","possibleFollowsTokType","isInCurrentRuleReSyncSet","followKey","getCurrFollowKey","currentRuleReSyncSet","getFollowSetFromFollowKey","allPossibleReSyncTokTypes","flattenFollowSet","foundMatch","resyncTokType","currRuleShortName","getLastExplicitRuleShortName","currRuleIdx","getLastExplicitRuleOccurrenceIndex","prevRuleShortName","getPreviousExplicitRuleShortName","shortRuleNameToFullName","idxInCallingRule","inRule","buildFullFollowKeyStack","explicitRuleStack","explicitOccurrenceStack","RULE_OCCURRENCE_STACK","followStack","resyncTokens","reSyncTo","getHumanReadableRuleStack","currShortName","lookAheadFuncsCache","collectMethods","prodIdx","laFunc","fullRuleNameToShort","setLaFuncCache","computeLookaheadFunc","prodKey","prodMaxLookahead","dslMethodName","getLaFuncFromCache","CST_STACK","setNodeLocationFromToken","setNodeLocationFromNode","cstPostRule","setInitialNodeLocation","setInitialNodeLocationFullRecovery","cstPostRuleFull","setInitialNodeLocationFullRegular","setInitialNodeLocationOnlyOffsetRecovery","cstPostRuleOnlyOffset","setInitialNodeLocationOnlyOffsetRegular","cstInvocationStateUpdate","cstFinallyStateUpdate","cstPostTerminal","cstPostNonTerminal","location","fullRuleName","create","ruleCstNode","prevToken","consumedToken","rootCst","tokenTypeName","ruleCstResult","preCstNode","ruleResult","addNoneTerminalToCst","getBaseCstVisitorConstructor","baseCstVisitorConstructor","newBaseCstVisitorConstructor","getBaseCstVisitorConstructorWithDefaults","baseCstVisitorWithDefaultsConstructor","newConstructor","baseConstructor","withDefaultsProto","createBaseVisitorConstructorWithDefaults","tokVector","tokVectorLength","newInput","soughtIdx","resetLexerState","moveToTerminatedState","getLexerPosition","shortRuleNameToFull","ruleShortNameIdx","subruleIdx","isBackTrackingStack","uniqueTokens","isObject","noTokenCategoriesUsed","tokenConstructor","defineRule","impl","shortName","BITS_FOR_METHOD_TYPE","invokeRuleWithTry","ruleInvocationStateUpdate","cst","invokeRuleCatch","ruleFinallyStateUpdate","_len2","_key2","resyncEnabledConfig","isFirstInvokedRule","reSyncEnabled","recogError","partialCstResult","recoveredNode","optionInternal","actionORMethodDef","optionInternalLogic","orgLookaheadFunction","atLeastOneInternal","laKey","atLeastOneInternalLogic","raiseEarlyExitException","ERR_MSG","doSingleRepetition","atLeastOneSepFirstInternal","atLeastOneSepFirstInternalLogic","separatorLookAheadFunc","CONSUME","repetitionSepSecondInternal","manyInternal","manyInternalLogic","lookaheadFunction","manySepFirstInternal","manySepFirstInternalLogic","nextTerminalAfterWalker","beforeIteration","orInternal","altsOrOpts","altIdxToTake","raiseNoAltException","isAtEndOfInput","firstRedundantTok","subruleInternal","ruleToCall","ARGS","subruleInternalError","consumeInternal","consumeInternalError","eFromConsumption","consumeInternalRecovery","eFromInRuleRecovery","saveRecogState","savedErrors","savedRuleStack","lexerState","reloadRecogState","fullName","ACTION","consume","CONSUME1","CONSUME2","CONSUME3","CONSUME4","CONSUME5","CONSUME6","CONSUME7","CONSUME8","CONSUME9","SUBRULE","SUBRULE1","SUBRULE2","SUBRULE3","SUBRULE4","SUBRULE5","SUBRULE6","SUBRULE7","SUBRULE8","SUBRULE9","OPTION1","OPTION2","OPTION3","OPTION4","OPTION5","OPTION6","OPTION7","OPTION8","OPTION9","OR","OR1","OR2","OR3","OR4","OR5","OR6","OR7","OR8","OR9","MANY","MANY1","MANY2","MANY3","MANY4","MANY5","MANY6","MANY7","MANY8","MANY9","MANY_SEP","MANY_SEP1","MANY_SEP2","MANY_SEP3","MANY_SEP4","MANY_SEP5","MANY_SEP6","MANY_SEP7","MANY_SEP8","MANY_SEP9","AT_LEAST_ONE","AT_LEAST_ONE1","AT_LEAST_ONE2","AT_LEAST_ONE3","AT_LEAST_ONE4","AT_LEAST_ONE5","AT_LEAST_ONE6","AT_LEAST_ONE7","AT_LEAST_ONE8","AT_LEAST_ONE9","AT_LEAST_ONE_SEP","AT_LEAST_ONE_SEP1","AT_LEAST_ONE_SEP2","AT_LEAST_ONE_SEP3","AT_LEAST_ONE_SEP4","AT_LEAST_ONE_SEP5","AT_LEAST_ONE_SEP6","AT_LEAST_ONE_SEP7","AT_LEAST_ONE_SEP8","AT_LEAST_ONE_SEP9","RULE","implementation","ruleImplementation","OVERRIDE_RULE","ruleErrors","INVALID_RULE_OVERRIDE","validateRuleIsOverridden","BACKTRACK","orgState","getSerializedGastProductions","topRules","_errors","ruleOccurrenceStack","newErrors","userDefinedErrMsg","insideProdPaths","actualTokens","errMsgTypes","lookAheadPathsPerAlternative","computeContentAssist","startRuleName","precedingInput","startRuleGast","topRuleName","topProduction","RECORDING_PHASE","arg1","arg2","consumeInternalRecord","subruleInternalRecord","optionInternalRecord","orInternalRecord","manyInternalRecord","manySepFirstInternalRecord","atLeastOneInternalRecord","atLeastOneSepFirstInternalRecord","ACTION_RECORD","BACKTRACK_RECORD","LA_RECORD","newTopLevelRule","originalError","mutabilityError","JSON","stringify","newNoneTerminal","userTraceInitPerf","traceIsNumber","baseCtor","baseProto","getOwnPropertyNames","propName","basePropDescriptor","getOwnPropertyDescriptor","EmbeddedActionsParser","configClone","buildATNKey","ATN_BASIC","ATN_RULE_START","ATN_PLUS_BLOCK_START","ATN_STAR_BLOCK_START","ATN_RULE_STOP","ATN_BLOCK_END","ATN_STAR_LOOP_BACK","ATN_STAR_LOOP_ENTRY","ATN_PLUS_LOOP_BACK","ATN_LOOP_END","AbstractTransition","isEpsilon","AtomTransition","EpsilonTransition","RuleTransition","ruleStart","followState","createATN","atn","decisionMap","decisionStates","ruleToStartState","ruleToStopState","states","ruleLength","stop","createRuleStartAndStopATNStates","ruleBlock","block","buildRuleHandle","production","tokenRef","currentRule","nonTerminal","addTransition","ruleRef","defineDecisionState","makeAlts","optional","epsilon","starState","star","sep","repetitionSep","plusState","plus","repetitionMandatorySep","handles","altsLength","transition","transitions","isRuleTransition","ruleTransition","removeState","makeBlock","blkStart","blkEnd","loop","loopback","loopEnd","decision","epsilonOnlyTransitions","nextTokenWithinRule","stateNumber","DFA_ERROR","ATNConfigSet","configs","finalize","getATNConfigKey","stack","createDFACache","startState","predicateSet","atnStartState","PredicateSet","EMPTY_PREDICATES","LLStarLookaheadStrategy","logging","dfas","decisionLength","decisionToDFA","initATNSimulator","decisionIndex","isLL1Sequence","prediction","gate","adaptivePredict","g","sequences","allowEmpty","fullSet","altSet","indices","dfaCaches","dfa","addDFAState","newDFAState","computeStartState","performLookahead","s0","previousD","d","edges","computeLookaheadTarget","buildAdaptivePredictError","isAcceptState","reach","intermediate","skippedStopStates","transitionLength","getReachableTarget","closure","hasConfigInRuleStopState","computeReachSet","addDFAEdge","predictedAlt","getUniqueAlt","uniqueAlt","allConfigsInRuleStopStates","altSets","configToAlts","getConflictingAltSets","hasConflictingAltSet","hasStateAssociatedWithOneAlt","hasConflictTerminatingPrediction","reportLookaheadAmbiguity","atnState","buildAmbiguityError","current","nextTransitions","actualToken","possibleTokenTypes","uniqBy","tokenPath","mapKey","numberOfTransitions","p","atnStack","getEpsilonTarget","DocumentUri","URI","integer","uinteger","Position","Range","Location","LocationLink","Color","ColorInformation","ColorPresentation","FoldingRangeKind","FoldingRange","DiagnosticRelatedInformation","DiagnosticSeverity","DiagnosticTag","CodeDescription","Diagnostic","Command","TextEdit","ChangeAnnotation","ChangeAnnotationIdentifier","AnnotatedTextEdit","TextDocumentEdit","CreateFile","RenameFile","DeleteFile","WorkspaceEdit","TextDocumentIdentifier","VersionedTextDocumentIdentifier","OptionalVersionedTextDocumentIdentifier","TextDocumentItem","MarkupKind","MarkupContent","CompletionItemKind","InsertTextFormat","CompletionItemTag","InsertReplaceEdit","InsertTextMode","CompletionItemLabelDetails","CompletionItem","CompletionList","MarkedString","Hover","ParameterInformation","SignatureInformation","DocumentHighlightKind","DocumentHighlight","SymbolKind","SymbolTag","SymbolInformation","WorkspaceSymbol","DocumentSymbol","CodeActionKind","CodeActionTriggerKind","CodeActionContext","CodeAction","CodeLens","FormattingOptions","DocumentLink","SelectionRange","SemanticTokenTypes","SemanticTokenModifiers","SemanticTokens","InlineValueText","InlineValueVariableLookup","InlineValueEvaluatableExpression","InlineValueContext","InlayHintKind","InlayHintLabelPart","InlayHint","StringValue","InlineCompletionItem","InlineCompletionList","InlineCompletionTriggerKind","SelectedCompletionInfo","InlineCompletionContext","WorkspaceFolder","MIN_VALUE","MAX_VALUE","objectLiteral","one","two","three","four","uri","targetUri","targetRange","targetSelectionRange","originSelectionRange","red","green","blue","alpha","numberRange","color","textEdit","additionalTextEdits","typedArray","Comment","Imports","Region","startCharacter","endCharacter","kind","collapsedText","defined","Warning","Information","Hint","Unnecessary","Deprecated","href","severity","relatedInformation","codeDescription","title","command","newText","insert","position","del","needsConfirmation","annotation","annotationId","textDocument","edits","overwrite","ignoreIfExists","oldUri","newUri","recursive","ignoreIfNotExists","changes","documentChanges","change","version","PlainText","Markdown","Text","Method","Function","Constructor","Field","Variable","Class","Module","Property","Unit","Value","Enum","Snippet","File","Reference","Folder","EnumMember","Constant","Struct","Operator","TypeParameter","asIs","adjustIndentation","detail","items","isIncomplete","fromPlainText","plainText","language","contents","documentation","parameters","Read","Write","Namespace","Package","Key","Null","containerName","selectionRange","deprecated","tags","Empty","QuickFix","Refactor","RefactorExtract","RefactorInline","RefactorRewrite","Source","SourceOrganizeImports","SourceFixAll","Invoked","Automatic","diagnostics","only","triggerKind","kindOrCommandOrEdit","checkKind","edit","isPreferred","data","tabSize","insertSpaces","resultId","variableName","caseSensitiveLookup","expression","frameId","stoppedLocation","tooltip","textEdits","paddingLeft","paddingRight","createSnippet","insertText","filterText","selectedCompletionInfo","TextDocument","mergeSort","compare","leftIdx","rightIdx","FullTextDocument","lineCount","getText","positionAt","offsetAt","applyEdits","document","sortedEdits","diff","lastModifiedOffset","_uri","_languageId","_version","_content","_lineOffsets","update","getLineOffsets","lineOffsets","isLineStart","ch","low","high","mid","lineOffset","nextLineOffset","check","CstNodeBuilder","nodeStack","buildRootNode","RootCstNodeImpl","buildCompositeNode","compositeNode","CompositeCstNodeImpl","buildLeafNode","leafNode","LeafCstNodeImpl","removeNode","construct","addHiddenTokens","hiddenTokens","hiddenNode","addHiddenToken","tokenStart","tokenEnd","childStart","childEnd","AbstractCstNode","_astNode","_offset","_length","_hidden","_tokenType","_range","CstNodeContainer","firstNonHiddenNode","lastNonHiddenNode","firstNode","lastNode","_rangeCache","firstRange","lastRange","addParents","unshift","_len3","_key3","_text","DatatypeSymbol","isDataTypeNode","withRuleSuffix","endsWith","AbstractLangiumParser","services","_unorderedGroups","lexer","wrapper","ChevrotainWrapper","ParserConfig","ParserErrorMessageProvider","choices","wrapOr","wrapOption","wrapMany","wrapAtLeastOne","isRecording","IS_RECORDING","unorderedGroups","getRuleStack","wrapSelfAnalysis","nodeBuilder","assignmentMap","linker","references","Linker","converter","astReflection","fragment","ruleMethod","DEFINE_RULE","startImplementation","mainRule","lexerResult","clear","wrapConsume","isValidToken","assignment","isCrossRef","getAssignment","convertedValue","convert","operator","subruleResult","wrapSubrule","performSubruleAssignment","resultKind","assignWithoutOverride","newItem","typeMetaData","genericNode","assignMandatoryProperties","buildReference","existingValue","newValue","AbstractParserErrorMessageProvider","LangiumParserErrorMessageProvider","LangiumCompletionParser","elementStack","lastElementStack","nextTokenIndex","stackSize","resetState","tokenIndex","keepStackSize","resetStackSize","removeUnexpectedElements","before","after","defaultConfig","useDefaultLookahead","createParser","parserContext","reachable","parserRules","buildElement","buildRules","method","ignoreGuard","buildKeyword","buildAction","buildCrossReference","ruleCall","namedArgs","buildPredicate","ruleArgs","ruleTarget","buildRuleCallPredicate","getRule","getToken","buildRuleCall","methods","predicatedMethod","getGuardCondition","buildAlternatives","orIdx","idFunc","lParser","groupState","trackedAlternatives","wrapped","delete","buildUnorderedGroup","buildGroup","condition","isConjunction","isNegation","isParameterReference","isBooleanLiteral","true","guardCondition","crossRef","assignTerminal","getRuleName","createLangiumParser","prepareLangiumParser","buildTokens","reachableRules","buildTerminalTokens","terminalToken","buildTerminalToken","requiresCustomPattern","regexPatternFunction","stickyRegex","sort","buildKeywordToken","buildKeywordPattern","findLongerAlt","getCaseInsensitivePattern","longerAlts","nameAssigment","getCrossReferenceTerminal","convertInt","convertString","convertID","_c","getRuleType","convertNumber","convertBoolean","convertBigint","convertDate","convertEscapeCharacter","BigInt","lastTick","globalInterruptionPeriod","OperationCancelled","isOperationCancelled","interruptAndCheck","now","Promise","resolve","setImmediate","Deferred","promise","arg","isIncremental","getWellformedRange","addedLineOffsets","computeLineOffsets","isFull","ensureBeforeEOL","isEOL","rangeLength","isAtLineStart","textOffset","getWellformedEdit","spans","r","o","h","cwd","normalize","isAbsolute","relative","f","l","_makeLong","dirname","basename","extname","format","dir","base","ext","delimiter","win32","posix","toStringTag","platform","navigator","userAgent","scheme","authority","query","isUri","fsPath","with","m","C","file","y","toJSON","revive","_formatted","external","_fsPath","_sep","$mid","encodeURIComponent","decodeURIComponent","w","A","P","joinPath","resolvePath","UriUtils","DocumentState","Utils","equals","fromPath","toPath","fromParts","split","toParts","repeat","DefaultLangiumDocumentFactory","serviceRegistry","textDocuments","workspace","TextDocuments","fileSystemProvider","FileSystemProvider","fromUri","cancellationToken","readFile","createAsync","fromTextDocument","fromString","fromModel","model","$model","parseResult","createLangiumDocument","cancelToken","parseAsync","Parsed","textDocumentGetter","createTextDocumentGetter","oldText","getServices","AsyncParser","textDoc","DefaultLangiumDocuments","documentMap","langiumDocumentFactory","LangiumDocumentFactory","all","addDocument","uriString","getOrCreateDocument","createDocument","then","hasDocument","invalidateDocument","langiumDoc","Changed","precomputedScopes","deleteDocument","DefaultLinker","langiumDocuments","LangiumDocuments","scopeProvider","ScopeProvider","astNodeLocator","AstNodeLocator","link","doLink","getCandidate","_nodeDescription","documentUri","linkedNode","loadAstNode","createLinkingError","unlink","getScope","getElement","refNode","refText","$refNode","refData","getLinkedNode","ComputedScopes","descr","$nodeDescription","nodeDescription","doc","getAstNode","targetDescription","referenceType","DefaultNameProvider","getName","isNamed","getNameNode","DefaultReferences","nameProvider","NameProvider","IndexManager","nodeLocator","findDeclaration","sourceCstNode","findAssignment","nodeElem","nameNode","isChildNode","findDeclarationNode","targetNode","findReferences","refs","includeDeclaration","getReferenceToSelf","indexReferences","findAllReferences","getAstNodePath","sourceUri","sourcePath","segment","local","MultiMap","addAll","entriesGroupedByKey","BiMap","inverse","getKey","DefaultScopeComputation","descriptions","AstNodeDescriptionProvider","computeExports","computeExportsForNode","parentNode","exportNode","createDescription","computeLocalScopes","scopes","processNode","StreamScope","outerScope","getAllElements","MapScope","localName","elementStream","DisposableCache","toDispose","isDisposed","onDispose","disposable","throwIfDisposed","SimpleCache","provider","ContextCache","contextKey","cacheForContext","contextCache","documentCache","WorkspaceCache","sharedServices","DocumentBuilder","onUpdate","DefaultScopeProvider","indexManager","globalScopeCache","precomputed","currentNode","allDescriptions","desc","getGlobalScope","createScope","createScopeForNodes","_context","allElements","isIntermediateReference","DefaultJsonSerializer","ignoreProperties","commentProvider","CommentProvider","serialize","specificReplacer","replacer","defaultReplacer","currentDocument","space","deserialize","linkNode","sourceText","textRegions","comments","uriConverter","refValue","targetDocument","$ref","$error","addAstNodeRegionWithAssignmentsTo","$textRegion","documentURI","$sourceText","_d","comment","getComment","$comment","createDocumentSegment","assignments","propertyAssignments","findNodesForProperty","containerProperty","containerIndex","propertyName","reviveReference","mutable","getRefNode","fragmentIndex","DefaultServiceRegistry","singleton","diagnosticData","ValidationCategory","DocumentValidator","Disposable","ValidationRegistry","checksRecord","thisObj","category","wrapValidationException","addEntry","getChecks","checks","DefaultDocumentValidator","validationRegistry","validation","metadata","validateDocument","processLexingErrors","stopAfterLexingErrors","LexingError","processParsingErrors","stopAfterParsingErrors","ParsingError","processLinkingErrors","stopAfterLinkingErrors","LinkingError","validateAst","lexerError","diagnostic","toDiagnosticSeverity","getSource","parserError","linkingError","containerType","toDiagnostic","validationItems","acceptor","getDiagnosticRange","findNodeForKeyword","DefaultAstNodeDescriptionProvider","nameNodeSegment","nameSegmentGetter","nameSegment","selectionSegment","DefaultReferenceDescriptionProvider","createDescriptions","targetNodeDescr","refCstNode","docUri","DefaultAstNodeLocator","segmentSeparator","indexSeparator","containerPath","newSegment","getPathSegment","currentValue","propertyIndex","DefaultConfigurationProvider","_ready","settings","workspaceConfig","ready","params","capabilities","configuration","initialized","languages","section","lang","toSectionName","fetchConfiguration","configToUpdate","conf","updateSectionConfiguration","updateConfiguration","getConfiguration","sectionName","DefaultDocumentBuilder","updateBuildOptions","updateListeners","buildPhaseListeners","buildState","documentBuildWaiters","currentState","build","documents","Validated","IndexedReferences","previousCategories","validationChecks","completed","emitUpdate","buildDocuments","changed","deleted","deletedUri","changedUri","newDocument","allChangedUris","shouldRelink","rebuildDocuments","Linked","changedUris","isAffected","prepareBuild","runCancelable","IndexedContent","updateContent","scopeComputation","ScopeComputation","updateReferences","toBeValidated","shouldValidate","targetState","filtered","notifyBuildPhase","onBuildPhase","waitUntil","uriOrToken","buildDisposable","cancelDisposable","listeners","getBuildOptions","validator","validationSetting","DefaultIndexManager","symbolIndex","symbolByTypeIndex","referenceIndex","astNodePath","targetDocUri","docRefs","refDescr","nodeType","uris","documentUris","getFileDescriptions","indexData","ReferenceDescriptionProvider","DefaultWorkspaceManager","initialBuildOptions","documentBuilder","mutex","WorkspaceLock","folders","workspaceFolders","_params","write","initializeWorkspace","performStartup","collector","loadAdditionalDocuments","wf","getRootFolder","traverseFolder","_folders","_collector","workspaceFolder","folderPath","readDirectory","includeEntry","isDirectory","isFile","_workspaceFolder","DefaultLexer","toTokenTypeDictionary","lexerTokens","isTokenTypeDictionary","chevrotainLexer","ChevrotainLexer","chevrotainResult","isIMultiModeLexerDefinition","res","isTokenTypeArray","parseJSDoc","opts","currentLine","currentCharacter","lines","lastCharacter","skipWhitespace","tagRegex","tagMatch","fullMatch","inlineTagMatches","matchAll","inlineTagRegex","buildInlineTokens","getLines","normalizeOptions","startPosition","JSDocCommentImpl","parseJSDocElement","parseJSDocComment","lineIndex","characterIndex","matchIndex","startContent","tagName","endContent","nonWhitespaceRegex","whitespaceEndRegex","parseJSDocTag","parseJSDocText","JSDocLineImpl","inlines","appendEmptyLine","firstToken","lastToken","parseJSDocInline","JSDocTextImpl","parseJSDocLine","inline","tagToken","docLine","JSDocTagImpl","normalizeOption","escaped","getTag","getAllTags","getTags","fillNewlines","toMarkdown","renderTag","toMarkdownDefault","rendered","tag","display","displayStart","renderedLink","renderLink","renderLinkDefault","renderInlineTag","marker","JSDocDocumentationProvider","getDocumentation","normalizedOptions","firstRegex","lastRegex","isJSDoc","documentationLinkRenderer","documentationTagRenderer","findNameInPrecomputedScopes","findNameInGlobalScope","_node","_tag","DefaultCommentProvider","grammarConfig","GrammarConfig","isAstNodeWithComment","multilineCommentRules","DefaultAsyncParser","syncParser","DefaultWorkspaceLock","previousTokenSource","CancellationTokenSource","writeQueue","readQueue","cancelWrite","tokenSource","enqueue","read","queue","deferred","performNextOperation","shift","DefaultHydrator","grammarElementIdMap","tokenTypeIdMap","dehydrate","dehydrateAstNode","createDehyrationContext","astNodes","cstNodes","dehydrateCstNode","arr","dehydrateReference","getGrammarElementId","hydrate","createHydrationContext","hydrateCstNode","hydrateAstNode","hydrateCstLeafNode","setParent","hydrateReference","num","cstNodeObj","getGrammarElement","hydrated","getTokenType","createGrammarElementIdMap","id","DocumentationProvider","nameRegexp","createGrammarConfig","CompletionParser","createCompletionParser","References","serializer","Hydrator","JsonSerializer","WorkspaceManager","ConfigurationProvider","module1","module2","module3","module4","module5","module6","module7","module8","module9","_inject","_merge","merge","m1","m2","isProxy","module","injector","proxy","Proxy","deleteProperty","_resolve","ownKeys","Reflect","__requested__","cause","value2","value1","EmptyFileSystemProvider","minimalGrammarModule","minimalSharedGrammarModule","json","createMinimalGrammarServices","isSymbol","customizer","castPath","toKey","objValue","isIndex","paths","baseGet","baseSet","baseClone","objectProto","sources","keysIn","propsIndex","propsLength","eq","findIndexFunc","iterable","createFind","baseFindIndex","baseMap","baseExtremum","baseLt","reWhitespace","reTrimStart","trimmedEndIndex","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","valueOf","baseTrim","isBinary","INFINITY","toNumber","toFinite","remainder"],"sourceRoot":""}