{"version":3,"file":"static/js/62.b2f525cd.chunk.js","mappings":"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","sources":["../node_modules/lodash-es/uniqueId.js","../node_modules/lodash-es/_baseRange.js","../node_modules/lodash-es/range.js","../node_modules/lodash-es/_createRange.js","../node_modules/dagre-d3-es/src/dagre/data/list.js","../node_modules/dagre-d3-es/src/dagre/greedy-fas.js","../node_modules/dagre-d3-es/src/dagre/acyclic.js","../node_modules/lodash-es/_basePick.js","../node_modules/lodash-es/pick.js","../node_modules/lodash-es/_flatRest.js","../node_modules/lodash-es/_baseGt.js","../node_modules/lodash-es/max.js","../node_modules/lodash-es/mapValues.js","../node_modules/lodash-es/now.js","../node_modules/dagre-d3-es/src/dagre/util.js","../node_modules/dagre-d3-es/src/dagre/add-border-segments.js","../node_modules/dagre-d3-es/src/dagre/coordinate-system.js","../node_modules/dagre-d3-es/src/dagre/normalize.js","../node_modules/lodash-es/minBy.js","../node_modules/dagre-d3-es/src/dagre/rank/util.js","../node_modules/dagre-d3-es/src/dagre/rank/feasible-tree.js","../node_modules/dagre-d3-es/src/graphlib/alg/dijkstra.js","../node_modules/dagre-d3-es/src/graphlib/alg/floyd-warshall.js","../node_modules/lodash-es/_asciiSize.js","../node_modules/lodash-es/_hasUnicode.js","../node_modules/lodash-es/_unicodeSize.js","../node_modules/dagre-d3-es/src/graphlib/alg/topsort.js","../node_modules/dagre-d3-es/src/graphlib/alg/dfs.js","../node_modules/dagre-d3-es/src/dagre/rank/network-simplex.js","../node_modules/dagre-d3-es/src/graphlib/alg/postorder.js","../node_modules/dagre-d3-es/src/graphlib/alg/preorder.js","../node_modules/dagre-d3-es/src/dagre/rank/index.js","../node_modules/dagre-d3-es/src/dagre/nesting-graph.js","../node_modules/lodash-es/cloneDeep.js","../node_modules/dagre-d3-es/src/dagre/order/build-layer-graph.js","../node_modules/lodash-es/_baseZipObject.js","../node_modules/lodash-es/zipObject.js","../node_modules/lodash-es/_baseSortBy.js","../node_modules/lodash-es/_compareAscending.js","../node_modules/lodash-es/_compareMultiple.js","../node_modules/lodash-es/_baseOrderBy.js","../node_modules/lodash-es/sortBy.js","../node_modules/dagre-d3-es/src/dagre/order/cross-count.js","../node_modules/dagre-d3-es/src/dagre/order/resolve-conflicts.js","../node_modules/dagre-d3-es/src/dagre/order/sort.js","../node_modules/dagre-d3-es/src/dagre/order/sort-subgraph.js","../node_modules/dagre-d3-es/src/dagre/order/barycenter.js","../node_modules/dagre-d3-es/src/dagre/order/index.js","../node_modules/dagre-d3-es/src/dagre/order/init-order.js","../node_modules/dagre-d3-es/src/dagre/order/add-subgraph-constraints.js","../node_modules/dagre-d3-es/src/dagre/parent-dummy-chains.js","../node_modules/lodash-es/forOwn.js","../node_modules/lodash-es/forIn.js","../node_modules/dagre-d3-es/src/dagre/position/bk.js","../node_modules/dagre-d3-es/src/dagre/position/index.js","../node_modules/dagre-d3-es/src/dagre/layout.js","../node_modules/lodash-es/union.js","../node_modules/dagre-d3-es/src/graphlib/graph.js","../node_modules/lodash-es/_baseExtremum.js","../node_modules/lodash-es/_baseLt.js","../node_modules/lodash-es/_baseMap.js","../node_modules/lodash-es/_baseSet.js","../node_modules/lodash-es/_basePickBy.js","../node_modules/lodash-es/defaults.js","../node_modules/lodash-es/_createFind.js","../node_modules/lodash-es/findIndex.js","../node_modules/lodash-es/find.js","../node_modules/lodash-es/flatten.js","../node_modules/lodash-es/isString.js","../node_modules/lodash-es/last.js","../node_modules/lodash-es/map.js","../node_modules/lodash-es/min.js","../node_modules/lodash-es/_trimmedEndIndex.js","../node_modules/lodash-es/_baseTrim.js","../node_modules/lodash-es/toNumber.js","../node_modules/lodash-es/toFinite.js","../node_modules/lodash-es/toInteger.js"],"sourcesContent":["import toString from './toString.js';\n\n/** Used to generate unique IDs. */\nvar idCounter = 0;\n\n/**\n * Generates a unique ID. If `prefix` is given, the ID is appended to it.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {string} [prefix=''] The value to prefix the ID with.\n * @returns {string} Returns the unique ID.\n * @example\n *\n * _.uniqueId('contact_');\n * // => 'contact_104'\n *\n * _.uniqueId();\n * // => '105'\n */\nfunction uniqueId(prefix) {\n  var id = ++idCounter;\n  return toString(prefix) + id;\n}\n\nexport default uniqueId;\n","/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeCeil = Math.ceil,\n    nativeMax = Math.max;\n\n/**\n * The base implementation of `_.range` and `_.rangeRight` which doesn't\n * coerce arguments.\n *\n * @private\n * @param {number} start The start of the range.\n * @param {number} end The end of the range.\n * @param {number} step The value to increment or decrement by.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Array} Returns the range of numbers.\n */\nfunction baseRange(start, end, step, fromRight) {\n  var index = -1,\n      length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),\n      result = Array(length);\n\n  while (length--) {\n    result[fromRight ? length : ++index] = start;\n    start += step;\n  }\n  return result;\n}\n\nexport default baseRange;\n","import createRange from './_createRange.js';\n\n/**\n * Creates an array of numbers (positive and/or negative) progressing from\n * `start` up to, but not including, `end`. A step of `-1` is used if a negative\n * `start` is specified without an `end` or `step`. If `end` is not specified,\n * it's set to `start` with `start` then set to `0`.\n *\n * **Note:** JavaScript follows the IEEE-754 standard for resolving\n * floating-point values which can produce unexpected results.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {number} [start=0] The start of the range.\n * @param {number} end The end of the range.\n * @param {number} [step=1] The value to increment or decrement by.\n * @returns {Array} Returns the range of numbers.\n * @see _.inRange, _.rangeRight\n * @example\n *\n * _.range(4);\n * // => [0, 1, 2, 3]\n *\n * _.range(-4);\n * // => [0, -1, -2, -3]\n *\n * _.range(1, 5);\n * // => [1, 2, 3, 4]\n *\n * _.range(0, 20, 5);\n * // => [0, 5, 10, 15]\n *\n * _.range(0, -4, -1);\n * // => [0, -1, -2, -3]\n *\n * _.range(1, 4, 0);\n * // => [1, 1, 1]\n *\n * _.range(0);\n * // => []\n */\nvar range = createRange();\n\nexport default range;\n","import baseRange from './_baseRange.js';\nimport isIterateeCall from './_isIterateeCall.js';\nimport toFinite from './toFinite.js';\n\n/**\n * Creates a `_.range` or `_.rangeRight` function.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new range function.\n */\nfunction createRange(fromRight) {\n  return function(start, end, step) {\n    if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {\n      end = step = undefined;\n    }\n    // Ensure the sign of `-0` is preserved.\n    start = toFinite(start);\n    if (end === undefined) {\n      end = start;\n      start = 0;\n    } else {\n      end = toFinite(end);\n    }\n    step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);\n    return baseRange(start, end, step, fromRight);\n  };\n}\n\nexport default createRange;\n","/*\n * Simple doubly linked list implementation derived from Cormen, et al.,\n * \"Introduction to Algorithms\".\n */\n\nexport { List };\n\nclass List {\n  constructor() {\n    var sentinel = {};\n    sentinel._next = sentinel._prev = sentinel;\n    this._sentinel = sentinel;\n  }\n  dequeue() {\n    var sentinel = this._sentinel;\n    var entry = sentinel._prev;\n    if (entry !== sentinel) {\n      unlink(entry);\n      return entry;\n    }\n  }\n  enqueue(entry) {\n    var sentinel = this._sentinel;\n    if (entry._prev && entry._next) {\n      unlink(entry);\n    }\n    entry._next = sentinel._next;\n    sentinel._next._prev = entry;\n    sentinel._next = entry;\n    entry._prev = sentinel;\n  }\n  toString() {\n    var strs = [];\n    var sentinel = this._sentinel;\n    var curr = sentinel._prev;\n    while (curr !== sentinel) {\n      strs.push(JSON.stringify(curr, filterOutLinks));\n      curr = curr._prev;\n    }\n    return '[' + strs.join(', ') + ']';\n  }\n}\n\nfunction unlink(entry) {\n  entry._prev._next = entry._next;\n  entry._next._prev = entry._prev;\n  delete entry._next;\n  delete entry._prev;\n}\n\nfunction filterOutLinks(k, v) {\n  if (k !== '_next' && k !== '_prev') {\n    return v;\n  }\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../graphlib/index.js';\nimport { List } from './data/list.js';\n\n/*\n * A greedy heuristic for finding a feedback arc set for a graph. A feedback\n * arc set is a set of edges that can be removed to make a graph acyclic.\n * The algorithm comes from: P. Eades, X. Lin, and W. F. Smyth, \"A fast and\n * effective heuristic for the feedback arc set problem.\" This implementation\n * adjusts that from the paper to allow for weighted edges.\n */\nexport { greedyFAS };\n\nvar DEFAULT_WEIGHT_FN = _.constant(1);\n\nfunction greedyFAS(g, weightFn) {\n  if (g.nodeCount() <= 1) {\n    return [];\n  }\n  var state = buildState(g, weightFn || DEFAULT_WEIGHT_FN);\n  var results = doGreedyFAS(state.graph, state.buckets, state.zeroIdx);\n\n  // Expand multi-edges\n  return _.flatten(\n    _.map(results, function (e) {\n      return g.outEdges(e.v, e.w);\n    })\n  );\n}\n\nfunction doGreedyFAS(g, buckets, zeroIdx) {\n  var results = [];\n  var sources = buckets[buckets.length - 1];\n  var sinks = buckets[0];\n\n  var entry;\n  while (g.nodeCount()) {\n    while ((entry = sinks.dequeue())) {\n      removeNode(g, buckets, zeroIdx, entry);\n    }\n    while ((entry = sources.dequeue())) {\n      removeNode(g, buckets, zeroIdx, entry);\n    }\n    if (g.nodeCount()) {\n      for (var i = buckets.length - 2; i > 0; --i) {\n        entry = buckets[i].dequeue();\n        if (entry) {\n          results = results.concat(removeNode(g, buckets, zeroIdx, entry, true));\n          break;\n        }\n      }\n    }\n  }\n\n  return results;\n}\n\nfunction removeNode(g, buckets, zeroIdx, entry, collectPredecessors) {\n  var results = collectPredecessors ? [] : undefined;\n\n  _.forEach(g.inEdges(entry.v), function (edge) {\n    var weight = g.edge(edge);\n    var uEntry = g.node(edge.v);\n\n    if (collectPredecessors) {\n      results.push({ v: edge.v, w: edge.w });\n    }\n\n    uEntry.out -= weight;\n    assignBucket(buckets, zeroIdx, uEntry);\n  });\n\n  _.forEach(g.outEdges(entry.v), function (edge) {\n    var weight = g.edge(edge);\n    var w = edge.w;\n    var wEntry = g.node(w);\n    wEntry['in'] -= weight;\n    assignBucket(buckets, zeroIdx, wEntry);\n  });\n\n  g.removeNode(entry.v);\n\n  return results;\n}\n\nfunction buildState(g, weightFn) {\n  var fasGraph = new Graph();\n  var maxIn = 0;\n  var maxOut = 0;\n\n  _.forEach(g.nodes(), function (v) {\n    fasGraph.setNode(v, { v: v, in: 0, out: 0 });\n  });\n\n  // Aggregate weights on nodes, but also sum the weights across multi-edges\n  // into a single edge for the fasGraph.\n  _.forEach(g.edges(), function (e) {\n    var prevWeight = fasGraph.edge(e.v, e.w) || 0;\n    var weight = weightFn(e);\n    var edgeWeight = prevWeight + weight;\n    fasGraph.setEdge(e.v, e.w, edgeWeight);\n    maxOut = Math.max(maxOut, (fasGraph.node(e.v).out += weight));\n    maxIn = Math.max(maxIn, (fasGraph.node(e.w)['in'] += weight));\n  });\n\n  var buckets = _.range(maxOut + maxIn + 3).map(function () {\n    return new List();\n  });\n  var zeroIdx = maxIn + 1;\n\n  _.forEach(fasGraph.nodes(), function (v) {\n    assignBucket(buckets, zeroIdx, fasGraph.node(v));\n  });\n\n  return { graph: fasGraph, buckets: buckets, zeroIdx: zeroIdx };\n}\n\nfunction assignBucket(buckets, zeroIdx, entry) {\n  if (!entry.out) {\n    buckets[0].enqueue(entry);\n  } else if (!entry['in']) {\n    buckets[buckets.length - 1].enqueue(entry);\n  } else {\n    buckets[entry.out - entry['in'] + zeroIdx].enqueue(entry);\n  }\n}\n","import * as _ from 'lodash-es';\nimport { greedyFAS } from './greedy-fas.js';\n\nexport { run, undo };\n\nfunction run(g) {\n  var fas = g.graph().acyclicer === 'greedy' ? greedyFAS(g, weightFn(g)) : dfsFAS(g);\n  _.forEach(fas, function (e) {\n    var label = g.edge(e);\n    g.removeEdge(e);\n    label.forwardName = e.name;\n    label.reversed = true;\n    g.setEdge(e.w, e.v, label, _.uniqueId('rev'));\n  });\n\n  function weightFn(g) {\n    return function (e) {\n      return g.edge(e).weight;\n    };\n  }\n}\n\nfunction dfsFAS(g) {\n  var fas = [];\n  var stack = {};\n  var visited = {};\n\n  function dfs(v) {\n    if (_.has(visited, v)) {\n      return;\n    }\n    visited[v] = true;\n    stack[v] = true;\n    _.forEach(g.outEdges(v), function (e) {\n      if (_.has(stack, e.w)) {\n        fas.push(e);\n      } else {\n        dfs(e.w);\n      }\n    });\n    delete stack[v];\n  }\n\n  _.forEach(g.nodes(), dfs);\n  return fas;\n}\n\nfunction undo(g) {\n  _.forEach(g.edges(), function (e) {\n    var label = g.edge(e);\n    if (label.reversed) {\n      g.removeEdge(e);\n\n      var forwardName = label.forwardName;\n      delete label.reversed;\n      delete label.forwardName;\n      g.setEdge(e.w, e.v, label, forwardName);\n    }\n  });\n}\n","import basePickBy from './_basePickBy.js';\nimport hasIn from './hasIn.js';\n\n/**\n * The base implementation of `_.pick` without support for individual\n * property identifiers.\n *\n * @private\n * @param {Object} object The source object.\n * @param {string[]} paths The property paths to pick.\n * @returns {Object} Returns the new object.\n */\nfunction basePick(object, paths) {\n  return basePickBy(object, paths, function(value, path) {\n    return hasIn(object, path);\n  });\n}\n\nexport default basePick;\n","import basePick from './_basePick.js';\nimport flatRest from './_flatRest.js';\n\n/**\n * Creates an object composed of the picked `object` properties.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The source object.\n * @param {...(string|string[])} [paths] The property paths to pick.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.pick(object, ['a', 'c']);\n * // => { 'a': 1, 'c': 3 }\n */\nvar pick = flatRest(function(object, paths) {\n  return object == null ? {} : basePick(object, paths);\n});\n\nexport default pick;\n","import flatten from './flatten.js';\nimport overRest from './_overRest.js';\nimport setToString from './_setToString.js';\n\n/**\n * A specialized version of `baseRest` which flattens the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @returns {Function} Returns the new function.\n */\nfunction flatRest(func) {\n  return setToString(overRest(func, undefined, flatten), func + '');\n}\n\nexport default flatRest;\n","/**\n * The base implementation of `_.gt` which doesn't coerce arguments.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if `value` is greater than `other`,\n *  else `false`.\n */\nfunction baseGt(value, other) {\n  return value > other;\n}\n\nexport default baseGt;\n","import baseExtremum from './_baseExtremum.js';\nimport baseGt from './_baseGt.js';\nimport identity from './identity.js';\n\n/**\n * Computes the maximum value of `array`. If `array` is empty or falsey,\n * `undefined` is returned.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {*} Returns the maximum value.\n * @example\n *\n * _.max([4, 2, 8, 6]);\n * // => 8\n *\n * _.max([]);\n * // => undefined\n */\nfunction max(array) {\n  return (array && array.length)\n    ? baseExtremum(array, identity, baseGt)\n    : undefined;\n}\n\nexport default max;\n","import baseAssignValue from './_baseAssignValue.js';\nimport baseForOwn from './_baseForOwn.js';\nimport baseIteratee from './_baseIteratee.js';\n\n/**\n * Creates an object with the same keys as `object` and values generated\n * by running each own enumerable string keyed property of `object` thru\n * `iteratee`. The iteratee is invoked with three arguments:\n * (value, key, object).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Object} Returns the new mapped object.\n * @see _.mapKeys\n * @example\n *\n * var users = {\n *   'fred':    { 'user': 'fred',    'age': 40 },\n *   'pebbles': { 'user': 'pebbles', 'age': 1 }\n * };\n *\n * _.mapValues(users, function(o) { return o.age; });\n * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n *\n * // The `_.property` iteratee shorthand.\n * _.mapValues(users, 'age');\n * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n */\nfunction mapValues(object, iteratee) {\n  var result = {};\n  iteratee = baseIteratee(iteratee, 3);\n\n  baseForOwn(object, function(value, key, object) {\n    baseAssignValue(result, key, iteratee(value, key, object));\n  });\n  return result;\n}\n\nexport default mapValues;\n","import root from './_root.js';\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\nexport default now;\n","import * as _ from 'lodash-es';\nimport { Graph } from '../graphlib/index.js';\n\nexport {\n  addDummyNode,\n  simplify,\n  asNonCompoundGraph,\n  successorWeights,\n  predecessorWeights,\n  intersectRect,\n  buildLayerMatrix,\n  normalizeRanks,\n  removeEmptyRanks,\n  addBorderNode,\n  maxRank,\n  partition,\n  time,\n  notime,\n};\n\n/*\n * Adds a dummy node to the graph and return v.\n */\nfunction addDummyNode(g, type, attrs, name) {\n  var v;\n  do {\n    v = _.uniqueId(name);\n  } while (g.hasNode(v));\n\n  attrs.dummy = type;\n  g.setNode(v, attrs);\n  return v;\n}\n\n/*\n * Returns a new graph with only simple edges. Handles aggregation of data\n * associated with multi-edges.\n */\nfunction simplify(g) {\n  var simplified = new Graph().setGraph(g.graph());\n  _.forEach(g.nodes(), function (v) {\n    simplified.setNode(v, g.node(v));\n  });\n  _.forEach(g.edges(), function (e) {\n    var simpleLabel = simplified.edge(e.v, e.w) || { weight: 0, minlen: 1 };\n    var label = g.edge(e);\n    simplified.setEdge(e.v, e.w, {\n      weight: simpleLabel.weight + label.weight,\n      minlen: Math.max(simpleLabel.minlen, label.minlen),\n    });\n  });\n  return simplified;\n}\n\nfunction asNonCompoundGraph(g) {\n  var simplified = new Graph({ multigraph: g.isMultigraph() }).setGraph(g.graph());\n  _.forEach(g.nodes(), function (v) {\n    if (!g.children(v).length) {\n      simplified.setNode(v, g.node(v));\n    }\n  });\n  _.forEach(g.edges(), function (e) {\n    simplified.setEdge(e, g.edge(e));\n  });\n  return simplified;\n}\n\nfunction successorWeights(g) {\n  var weightMap = _.map(g.nodes(), function (v) {\n    var sucs = {};\n    _.forEach(g.outEdges(v), function (e) {\n      sucs[e.w] = (sucs[e.w] || 0) + g.edge(e).weight;\n    });\n    return sucs;\n  });\n  return _.zipObject(g.nodes(), weightMap);\n}\n\nfunction predecessorWeights(g) {\n  var weightMap = _.map(g.nodes(), function (v) {\n    var preds = {};\n    _.forEach(g.inEdges(v), function (e) {\n      preds[e.v] = (preds[e.v] || 0) + g.edge(e).weight;\n    });\n    return preds;\n  });\n  return _.zipObject(g.nodes(), weightMap);\n}\n\n/*\n * Finds where a line starting at point ({x, y}) would intersect a rectangle\n * ({x, y, width, height}) if it were pointing at the rectangle's center.\n */\nfunction intersectRect(rect, point) {\n  var x = rect.x;\n  var y = rect.y;\n\n  // Rectangle intersection algorithm from:\n  // http://math.stackexchange.com/questions/108113/find-edge-between-two-boxes\n  var dx = point.x - x;\n  var dy = point.y - y;\n  var w = rect.width / 2;\n  var h = rect.height / 2;\n\n  if (!dx && !dy) {\n    throw new Error('Not possible to find intersection inside of the rectangle');\n  }\n\n  var sx, sy;\n  if (Math.abs(dy) * w > Math.abs(dx) * h) {\n    // Intersection is top or bottom of rect.\n    if (dy < 0) {\n      h = -h;\n    }\n    sx = (h * dx) / dy;\n    sy = h;\n  } else {\n    // Intersection is left or right of rect.\n    if (dx < 0) {\n      w = -w;\n    }\n    sx = w;\n    sy = (w * dy) / dx;\n  }\n\n  return { x: x + sx, y: y + sy };\n}\n\n/*\n * Given a DAG with each node assigned \"rank\" and \"order\" properties, this\n * function will produce a matrix with the ids of each node.\n */\nfunction buildLayerMatrix(g) {\n  var layering = _.map(_.range(maxRank(g) + 1), function () {\n    return [];\n  });\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    var rank = node.rank;\n    if (!_.isUndefined(rank)) {\n      layering[rank][node.order] = v;\n    }\n  });\n  return layering;\n}\n\n/*\n * Adjusts the ranks for all nodes in the graph such that all nodes v have\n * rank(v) >= 0 and at least one node w has rank(w) = 0.\n */\nfunction normalizeRanks(g) {\n  var min = _.min(\n    _.map(g.nodes(), function (v) {\n      return g.node(v).rank;\n    })\n  );\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    if (_.has(node, 'rank')) {\n      node.rank -= min;\n    }\n  });\n}\n\nfunction removeEmptyRanks(g) {\n  // Ranks may not start at 0, so we need to offset them\n  var offset = _.min(\n    _.map(g.nodes(), function (v) {\n      return g.node(v).rank;\n    })\n  );\n\n  var layers = [];\n  _.forEach(g.nodes(), function (v) {\n    var rank = g.node(v).rank - offset;\n    if (!layers[rank]) {\n      layers[rank] = [];\n    }\n    layers[rank].push(v);\n  });\n\n  var delta = 0;\n  var nodeRankFactor = g.graph().nodeRankFactor;\n  _.forEach(layers, function (vs, i) {\n    if (_.isUndefined(vs) && i % nodeRankFactor !== 0) {\n      --delta;\n    } else if (delta) {\n      _.forEach(vs, function (v) {\n        g.node(v).rank += delta;\n      });\n    }\n  });\n}\n\nfunction addBorderNode(g, prefix, rank, order) {\n  var node = {\n    width: 0,\n    height: 0,\n  };\n  if (arguments.length >= 4) {\n    node.rank = rank;\n    node.order = order;\n  }\n  return addDummyNode(g, 'border', node, prefix);\n}\n\nfunction maxRank(g) {\n  return _.max(\n    _.map(g.nodes(), function (v) {\n      var rank = g.node(v).rank;\n      if (!_.isUndefined(rank)) {\n        return rank;\n      }\n    })\n  );\n}\n\n/*\n * Partition a collection into two groups: `lhs` and `rhs`. If the supplied\n * function returns true for an entry it goes into `lhs`. Otherwise it goes\n * into `rhs.\n */\nfunction partition(collection, fn) {\n  var result = { lhs: [], rhs: [] };\n  _.forEach(collection, function (value) {\n    if (fn(value)) {\n      result.lhs.push(value);\n    } else {\n      result.rhs.push(value);\n    }\n  });\n  return result;\n}\n\n/*\n * Returns a new function that wraps `fn` with a timer. The wrapper logs the\n * time it takes to execute the function.\n */\nfunction time(name, fn) {\n  var start = _.now();\n  try {\n    return fn();\n  } finally {\n    console.log(name + ' time: ' + (_.now() - start) + 'ms');\n  }\n}\n\nfunction notime(name, fn) {\n  return fn();\n}\n","import * as _ from 'lodash-es';\nimport * as util from './util.js';\n\nexport { addBorderSegments };\n\nfunction addBorderSegments(g) {\n  function dfs(v) {\n    var children = g.children(v);\n    var node = g.node(v);\n    if (children.length) {\n      _.forEach(children, dfs);\n    }\n\n    if (_.has(node, 'minRank')) {\n      node.borderLeft = [];\n      node.borderRight = [];\n      for (var rank = node.minRank, maxRank = node.maxRank + 1; rank < maxRank; ++rank) {\n        addBorderNode(g, 'borderLeft', '_bl', v, node, rank);\n        addBorderNode(g, 'borderRight', '_br', v, node, rank);\n      }\n    }\n  }\n\n  _.forEach(g.children(), dfs);\n}\n\nfunction addBorderNode(g, prop, prefix, sg, sgNode, rank) {\n  var label = { width: 0, height: 0, rank: rank, borderType: prop };\n  var prev = sgNode[prop][rank - 1];\n  var curr = util.addDummyNode(g, 'border', label, prefix);\n  sgNode[prop][rank] = curr;\n  g.setParent(curr, sg);\n  if (prev) {\n    g.setEdge(prev, curr, { weight: 1 });\n  }\n}\n","import * as _ from 'lodash-es';\n\nexport { adjust, undo };\n\nfunction adjust(g) {\n  var rankDir = g.graph().rankdir.toLowerCase();\n  if (rankDir === 'lr' || rankDir === 'rl') {\n    swapWidthHeight(g);\n  }\n}\n\nfunction undo(g) {\n  var rankDir = g.graph().rankdir.toLowerCase();\n  if (rankDir === 'bt' || rankDir === 'rl') {\n    reverseY(g);\n  }\n\n  if (rankDir === 'lr' || rankDir === 'rl') {\n    swapXY(g);\n    swapWidthHeight(g);\n  }\n}\n\nfunction swapWidthHeight(g) {\n  _.forEach(g.nodes(), function (v) {\n    swapWidthHeightOne(g.node(v));\n  });\n  _.forEach(g.edges(), function (e) {\n    swapWidthHeightOne(g.edge(e));\n  });\n}\n\nfunction swapWidthHeightOne(attrs) {\n  var w = attrs.width;\n  attrs.width = attrs.height;\n  attrs.height = w;\n}\n\nfunction reverseY(g) {\n  _.forEach(g.nodes(), function (v) {\n    reverseYOne(g.node(v));\n  });\n\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    _.forEach(edge.points, reverseYOne);\n    if (_.has(edge, 'y')) {\n      reverseYOne(edge);\n    }\n  });\n}\n\nfunction reverseYOne(attrs) {\n  attrs.y = -attrs.y;\n}\n\nfunction swapXY(g) {\n  _.forEach(g.nodes(), function (v) {\n    swapXYOne(g.node(v));\n  });\n\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    _.forEach(edge.points, swapXYOne);\n    if (_.has(edge, 'x')) {\n      swapXYOne(edge);\n    }\n  });\n}\n\nfunction swapXYOne(attrs) {\n  var x = attrs.x;\n  attrs.x = attrs.y;\n  attrs.y = x;\n}\n","import * as _ from 'lodash-es';\nimport * as util from './util.js';\n\nexport { run, undo };\n\n/*\n * Breaks any long edges in the graph into short segments that span 1 layer\n * each. This operation is undoable with the denormalize function.\n *\n * Pre-conditions:\n *\n *    1. The input graph is a DAG.\n *    2. Each node in the graph has a \"rank\" property.\n *\n * Post-condition:\n *\n *    1. All edges in the graph have a length of 1.\n *    2. Dummy nodes are added where edges have been split into segments.\n *    3. The graph is augmented with a \"dummyChains\" attribute which contains\n *       the first dummy in each chain of dummy nodes produced.\n */\nfunction run(g) {\n  g.graph().dummyChains = [];\n  _.forEach(g.edges(), function (edge) {\n    normalizeEdge(g, edge);\n  });\n}\n\nfunction normalizeEdge(g, e) {\n  var v = e.v;\n  var vRank = g.node(v).rank;\n  var w = e.w;\n  var wRank = g.node(w).rank;\n  var name = e.name;\n  var edgeLabel = g.edge(e);\n  var labelRank = edgeLabel.labelRank;\n\n  if (wRank === vRank + 1) return;\n\n  g.removeEdge(e);\n\n  var dummy, attrs, i;\n  for (i = 0, ++vRank; vRank < wRank; ++i, ++vRank) {\n    edgeLabel.points = [];\n    attrs = {\n      width: 0,\n      height: 0,\n      edgeLabel: edgeLabel,\n      edgeObj: e,\n      rank: vRank,\n    };\n    dummy = util.addDummyNode(g, 'edge', attrs, '_d');\n    if (vRank === labelRank) {\n      attrs.width = edgeLabel.width;\n      attrs.height = edgeLabel.height;\n      // @ts-expect-error\n      attrs.dummy = 'edge-label';\n      // @ts-expect-error\n      attrs.labelpos = edgeLabel.labelpos;\n    }\n    g.setEdge(v, dummy, { weight: edgeLabel.weight }, name);\n    if (i === 0) {\n      g.graph().dummyChains.push(dummy);\n    }\n    v = dummy;\n  }\n\n  g.setEdge(v, w, { weight: edgeLabel.weight }, name);\n}\n\nfunction undo(g) {\n  _.forEach(g.graph().dummyChains, function (v) {\n    var node = g.node(v);\n    var origLabel = node.edgeLabel;\n    var w;\n    g.setEdge(node.edgeObj, origLabel);\n    while (node.dummy) {\n      w = g.successors(v)[0];\n      g.removeNode(v);\n      origLabel.points.push({ x: node.x, y: node.y });\n      if (node.dummy === 'edge-label') {\n        origLabel.x = node.x;\n        origLabel.y = node.y;\n        origLabel.width = node.width;\n        origLabel.height = node.height;\n      }\n      v = w;\n      node = g.node(v);\n    }\n  });\n}\n","import baseExtremum from './_baseExtremum.js';\nimport baseIteratee from './_baseIteratee.js';\nimport baseLt from './_baseLt.js';\n\n/**\n * This method is like `_.min` except that it accepts `iteratee` which is\n * invoked for each element in `array` to generate the criterion by which\n * the value is ranked. The iteratee is invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Math\n * @param {Array} array The array to iterate over.\n * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n * @returns {*} Returns the minimum value.\n * @example\n *\n * var objects = [{ 'n': 1 }, { 'n': 2 }];\n *\n * _.minBy(objects, function(o) { return o.n; });\n * // => { 'n': 1 }\n *\n * // The `_.property` iteratee shorthand.\n * _.minBy(objects, 'n');\n * // => { 'n': 1 }\n */\nfunction minBy(array, iteratee) {\n  return (array && array.length)\n    ? baseExtremum(array, baseIteratee(iteratee, 2), baseLt)\n    : undefined;\n}\n\nexport default minBy;\n","import * as _ from 'lodash-es';\n\nexport { longestPath, slack };\n\n/*\n * Initializes ranks for the input graph using the longest path algorithm. This\n * algorithm scales well and is fast in practice, it yields rather poor\n * solutions. Nodes are pushed to the lowest layer possible, leaving the bottom\n * ranks wide and leaving edges longer than necessary. However, due to its\n * speed, this algorithm is good for getting an initial ranking that can be fed\n * into other algorithms.\n *\n * This algorithm does not normalize layers because it will be used by other\n * algorithms in most cases. If using this algorithm directly, be sure to\n * run normalize at the end.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG.\n *    2. Input graph node labels can be assigned properties.\n *\n * Post-conditions:\n *\n *    1. Each node will be assign an (unnormalized) \"rank\" property.\n */\nfunction longestPath(g) {\n  var visited = {};\n\n  function dfs(v) {\n    var label = g.node(v);\n    if (_.has(visited, v)) {\n      return label.rank;\n    }\n    visited[v] = true;\n\n    var rank = _.min(\n      _.map(g.outEdges(v), function (e) {\n        return dfs(e.w) - g.edge(e).minlen;\n      })\n    );\n\n    if (\n      rank === Number.POSITIVE_INFINITY || // return value of _.map([]) for Lodash 3\n      rank === undefined || // return value of _.map([]) for Lodash 4\n      rank === null\n    ) {\n      // return value of _.map([null])\n      rank = 0;\n    }\n\n    return (label.rank = rank);\n  }\n\n  _.forEach(g.sources(), dfs);\n}\n\n/*\n * Returns the amount of slack for the given edge. The slack is defined as the\n * difference between the length of the edge and its minimum length.\n */\nfunction slack(g, e) {\n  return g.node(e.w).rank - g.node(e.v).rank - g.edge(e).minlen;\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\nimport { slack } from './util.js';\n\nexport { feasibleTree };\n\n/*\n * Constructs a spanning tree with tight edges and adjusted the input node's\n * ranks to achieve this. A tight edge is one that is has a length that matches\n * its \"minlen\" attribute.\n *\n * The basic structure for this function is derived from Gansner, et al., \"A\n * Technique for Drawing Directed Graphs.\"\n *\n * Pre-conditions:\n *\n *    1. Graph must be a DAG.\n *    2. Graph must be connected.\n *    3. Graph must have at least one node.\n *    5. Graph nodes must have been previously assigned a \"rank\" property that\n *       respects the \"minlen\" property of incident edges.\n *    6. Graph edges must have a \"minlen\" property.\n *\n * Post-conditions:\n *\n *    - Graph nodes will have their rank adjusted to ensure that all edges are\n *      tight.\n *\n * Returns a tree (undirected graph) that is constructed using only \"tight\"\n * edges.\n */\nfunction feasibleTree(g) {\n  var t = new Graph({ directed: false });\n\n  // Choose arbitrary node from which to start our tree\n  var start = g.nodes()[0];\n  var size = g.nodeCount();\n  t.setNode(start, {});\n\n  var edge, delta;\n  while (tightTree(t, g) < size) {\n    edge = findMinSlackEdge(t, g);\n    delta = t.hasNode(edge.v) ? slack(g, edge) : -slack(g, edge);\n    shiftRanks(t, g, delta);\n  }\n\n  return t;\n}\n\n/*\n * Finds a maximal tree of tight edges and returns the number of nodes in the\n * tree.\n */\nfunction tightTree(t, g) {\n  function dfs(v) {\n    _.forEach(g.nodeEdges(v), function (e) {\n      var edgeV = e.v,\n        w = v === edgeV ? e.w : edgeV;\n      if (!t.hasNode(w) && !slack(g, e)) {\n        t.setNode(w, {});\n        t.setEdge(v, w, {});\n        dfs(w);\n      }\n    });\n  }\n\n  _.forEach(t.nodes(), dfs);\n  return t.nodeCount();\n}\n\n/*\n * Finds the edge with the smallest slack that is incident on tree and returns\n * it.\n */\nfunction findMinSlackEdge(t, g) {\n  return _.minBy(g.edges(), function (e) {\n    if (t.hasNode(e.v) !== t.hasNode(e.w)) {\n      return slack(g, e);\n    }\n  });\n}\n\nfunction shiftRanks(t, g, delta) {\n  _.forEach(t.nodes(), function (v) {\n    g.node(v).rank += delta;\n  });\n}\n","import * as _ from 'lodash-es';\nimport { PriorityQueue } from '../data/priority-queue.js';\n\nexport { dijkstra };\n\nvar DEFAULT_WEIGHT_FUNC = _.constant(1);\n\nfunction dijkstra(g, source, weightFn, edgeFn) {\n  return runDijkstra(\n    g,\n    String(source),\n    weightFn || DEFAULT_WEIGHT_FUNC,\n    edgeFn ||\n      function (v) {\n        return g.outEdges(v);\n      }\n  );\n}\n\nfunction runDijkstra(g, source, weightFn, edgeFn) {\n  var results = {};\n  var pq = new PriorityQueue();\n  var v, vEntry;\n\n  var updateNeighbors = function (edge) {\n    var w = edge.v !== v ? edge.v : edge.w;\n    var wEntry = results[w];\n    var weight = weightFn(edge);\n    var distance = vEntry.distance + weight;\n\n    if (weight < 0) {\n      throw new Error(\n        'dijkstra does not allow negative edge weights. ' +\n          'Bad edge: ' +\n          edge +\n          ' Weight: ' +\n          weight\n      );\n    }\n\n    if (distance < wEntry.distance) {\n      wEntry.distance = distance;\n      wEntry.predecessor = v;\n      pq.decrease(w, distance);\n    }\n  };\n\n  g.nodes().forEach(function (v) {\n    var distance = v === source ? 0 : Number.POSITIVE_INFINITY;\n    results[v] = { distance: distance };\n    pq.add(v, distance);\n  });\n\n  while (pq.size() > 0) {\n    v = pq.removeMin();\n    vEntry = results[v];\n    if (vEntry.distance === Number.POSITIVE_INFINITY) {\n      break;\n    }\n\n    edgeFn(v).forEach(updateNeighbors);\n  }\n\n  return results;\n}\n","import * as _ from 'lodash-es';\n\nexport { floydWarshall };\n\nvar DEFAULT_WEIGHT_FUNC = _.constant(1);\n\nfunction floydWarshall(g, weightFn, edgeFn) {\n  return runFloydWarshall(\n    g,\n    weightFn || DEFAULT_WEIGHT_FUNC,\n    edgeFn ||\n      function (v) {\n        return g.outEdges(v);\n      }\n  );\n}\n\nfunction runFloydWarshall(g, weightFn, edgeFn) {\n  var results = {};\n  var nodes = g.nodes();\n\n  nodes.forEach(function (v) {\n    results[v] = {};\n    results[v][v] = { distance: 0 };\n    nodes.forEach(function (w) {\n      if (v !== w) {\n        results[v][w] = { distance: Number.POSITIVE_INFINITY };\n      }\n    });\n    edgeFn(v).forEach(function (edge) {\n      var w = edge.v === v ? edge.w : edge.v;\n      var d = weightFn(edge);\n      results[v][w] = { distance: d, predecessor: v };\n    });\n  });\n\n  nodes.forEach(function (k) {\n    var rowK = results[k];\n    nodes.forEach(function (i) {\n      var rowI = results[i];\n      nodes.forEach(function (j) {\n        var ik = rowI[k];\n        var kj = rowK[j];\n        var ij = rowI[j];\n        var altDistance = ik.distance + kj.distance;\n        if (altDistance < ij.distance) {\n          ij.distance = altDistance;\n          ij.predecessor = kj.predecessor;\n        }\n      });\n    });\n  });\n\n  return results;\n}\n","import baseProperty from './_baseProperty.js';\n\n/**\n * Gets the size of an ASCII `string`.\n *\n * @private\n * @param {string} string The string inspect.\n * @returns {number} Returns the string size.\n */\nvar asciiSize = baseProperty('length');\n\nexport default asciiSize;\n","/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsZWJ = '\\\\u200d';\n\n/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\nvar reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');\n\n/**\n * Checks if `string` contains Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n */\nfunction hasUnicode(string) {\n  return reHasUnicode.test(string);\n}\n\nexport default hasUnicode;\n","/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsAstral = '[' + rsAstralRange + ']',\n    rsCombo = '[' + rsComboRange + ']',\n    rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n    rsNonAstral = '[^' + rsAstralRange + ']',\n    rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n    rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n    rsZWJ = '\\\\u200d';\n\n/** Used to compose unicode regexes. */\nvar reOptMod = rsModifier + '?',\n    rsOptVar = '[' + rsVarRange + ']?',\n    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n    rsSeq = rsOptVar + reOptMod + rsOptJoin,\n    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\n/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\nvar reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\n/**\n * Gets the size of a Unicode `string`.\n *\n * @private\n * @param {string} string The string inspect.\n * @returns {number} Returns the string size.\n */\nfunction unicodeSize(string) {\n  var result = reUnicode.lastIndex = 0;\n  while (reUnicode.test(string)) {\n    ++result;\n  }\n  return result;\n}\n\nexport default unicodeSize;\n","import * as _ from 'lodash-es';\n\nexport { topsort, CycleException };\n\ntopsort.CycleException = CycleException;\n\nfunction topsort(g) {\n  var visited = {};\n  var stack = {};\n  var results = [];\n\n  function visit(node) {\n    if (_.has(stack, node)) {\n      throw new CycleException();\n    }\n\n    if (!_.has(visited, node)) {\n      stack[node] = true;\n      visited[node] = true;\n      _.each(g.predecessors(node), visit);\n      delete stack[node];\n      results.push(node);\n    }\n  }\n\n  _.each(g.sinks(), visit);\n\n  if (_.size(visited) !== g.nodeCount()) {\n    throw new CycleException();\n  }\n\n  return results;\n}\n\nfunction CycleException() {}\nCycleException.prototype = new Error(); // must be an instance of Error to pass testing\n","import * as _ from 'lodash-es';\n\nexport { dfs };\n\n/*\n * A helper that preforms a pre- or post-order traversal on the input graph\n * and returns the nodes in the order they were visited. If the graph is\n * undirected then this algorithm will navigate using neighbors. If the graph\n * is directed then this algorithm will navigate using successors.\n *\n * Order must be one of \"pre\" or \"post\".\n */\nfunction dfs(g, vs, order) {\n  if (!_.isArray(vs)) {\n    vs = [vs];\n  }\n\n  var navigation = (g.isDirected() ? g.successors : g.neighbors).bind(g);\n\n  var acc = [];\n  var visited = {};\n  _.each(vs, function (v) {\n    if (!g.hasNode(v)) {\n      throw new Error('Graph does not have node: ' + v);\n    }\n\n    doDfs(g, v, order === 'post', visited, navigation, acc);\n  });\n  return acc;\n}\n\nfunction doDfs(g, v, postorder, visited, navigation, acc) {\n  if (!_.has(visited, v)) {\n    visited[v] = true;\n\n    if (!postorder) {\n      acc.push(v);\n    }\n    _.each(navigation(v), function (w) {\n      doDfs(g, w, postorder, visited, navigation, acc);\n    });\n    if (postorder) {\n      acc.push(v);\n    }\n  }\n}\n","import * as _ from 'lodash-es';\nimport * as alg from '../../graphlib/alg/index.js';\nimport { simplify } from '../util.js';\nimport { feasibleTree } from './feasible-tree.js';\nimport { longestPath, slack } from './util.js';\n\nexport { networkSimplex };\n\n// Expose some internals for testing purposes\nnetworkSimplex.initLowLimValues = initLowLimValues;\nnetworkSimplex.initCutValues = initCutValues;\nnetworkSimplex.calcCutValue = calcCutValue;\nnetworkSimplex.leaveEdge = leaveEdge;\nnetworkSimplex.enterEdge = enterEdge;\nnetworkSimplex.exchangeEdges = exchangeEdges;\n\n/*\n * The network simplex algorithm assigns ranks to each node in the input graph\n * and iteratively improves the ranking to reduce the length of edges.\n *\n * Preconditions:\n *\n *    1. The input graph must be a DAG.\n *    2. All nodes in the graph must have an object value.\n *    3. All edges in the graph must have \"minlen\" and \"weight\" attributes.\n *\n * Postconditions:\n *\n *    1. All nodes in the graph will have an assigned \"rank\" attribute that has\n *       been optimized by the network simplex algorithm. Ranks start at 0.\n *\n *\n * A rough sketch of the algorithm is as follows:\n *\n *    1. Assign initial ranks to each node. We use the longest path algorithm,\n *       which assigns ranks to the lowest position possible. In general this\n *       leads to very wide bottom ranks and unnecessarily long edges.\n *    2. Construct a feasible tight tree. A tight tree is one such that all\n *       edges in the tree have no slack (difference between length of edge\n *       and minlen for the edge). This by itself greatly improves the assigned\n *       rankings by shorting edges.\n *    3. Iteratively find edges that have negative cut values. Generally a\n *       negative cut value indicates that the edge could be removed and a new\n *       tree edge could be added to produce a more compact graph.\n *\n * Much of the algorithms here are derived from Gansner, et al., \"A Technique\n * for Drawing Directed Graphs.\" The structure of the file roughly follows the\n * structure of the overall algorithm.\n */\nfunction networkSimplex(g) {\n  g = simplify(g);\n  longestPath(g);\n  var t = feasibleTree(g);\n  initLowLimValues(t);\n  initCutValues(t, g);\n\n  var e, f;\n  while ((e = leaveEdge(t))) {\n    f = enterEdge(t, g, e);\n    exchangeEdges(t, g, e, f);\n  }\n}\n\n/*\n * Initializes cut values for all edges in the tree.\n */\nfunction initCutValues(t, g) {\n  var vs = alg.postorder(t, t.nodes());\n  vs = vs.slice(0, vs.length - 1);\n  _.forEach(vs, function (v) {\n    assignCutValue(t, g, v);\n  });\n}\n\nfunction assignCutValue(t, g, child) {\n  var childLab = t.node(child);\n  var parent = childLab.parent;\n  t.edge(child, parent).cutvalue = calcCutValue(t, g, child);\n}\n\n/*\n * Given the tight tree, its graph, and a child in the graph calculate and\n * return the cut value for the edge between the child and its parent.\n */\nfunction calcCutValue(t, g, child) {\n  var childLab = t.node(child);\n  var parent = childLab.parent;\n  // True if the child is on the tail end of the edge in the directed graph\n  var childIsTail = true;\n  // The graph's view of the tree edge we're inspecting\n  var graphEdge = g.edge(child, parent);\n  // The accumulated cut value for the edge between this node and its parent\n  var cutValue = 0;\n\n  if (!graphEdge) {\n    childIsTail = false;\n    graphEdge = g.edge(parent, child);\n  }\n\n  cutValue = graphEdge.weight;\n\n  _.forEach(g.nodeEdges(child), function (e) {\n    var isOutEdge = e.v === child,\n      other = isOutEdge ? e.w : e.v;\n\n    if (other !== parent) {\n      var pointsToHead = isOutEdge === childIsTail,\n        otherWeight = g.edge(e).weight;\n\n      cutValue += pointsToHead ? otherWeight : -otherWeight;\n      if (isTreeEdge(t, child, other)) {\n        var otherCutValue = t.edge(child, other).cutvalue;\n        cutValue += pointsToHead ? -otherCutValue : otherCutValue;\n      }\n    }\n  });\n\n  return cutValue;\n}\n\nfunction initLowLimValues(tree, root) {\n  if (arguments.length < 2) {\n    root = tree.nodes()[0];\n  }\n  dfsAssignLowLim(tree, {}, 1, root);\n}\n\nfunction dfsAssignLowLim(tree, visited, nextLim, v, parent) {\n  var low = nextLim;\n  var label = tree.node(v);\n\n  visited[v] = true;\n  _.forEach(tree.neighbors(v), function (w) {\n    if (!_.has(visited, w)) {\n      nextLim = dfsAssignLowLim(tree, visited, nextLim, w, v);\n    }\n  });\n\n  label.low = low;\n  label.lim = nextLim++;\n  if (parent) {\n    label.parent = parent;\n  } else {\n    // TODO should be able to remove this when we incrementally update low lim\n    delete label.parent;\n  }\n\n  return nextLim;\n}\n\nfunction leaveEdge(tree) {\n  return _.find(tree.edges(), function (e) {\n    return tree.edge(e).cutvalue < 0;\n  });\n}\n\nfunction enterEdge(t, g, edge) {\n  var v = edge.v;\n  var w = edge.w;\n\n  // For the rest of this function we assume that v is the tail and w is the\n  // head, so if we don't have this edge in the graph we should flip it to\n  // match the correct orientation.\n  if (!g.hasEdge(v, w)) {\n    v = edge.w;\n    w = edge.v;\n  }\n\n  var vLabel = t.node(v);\n  var wLabel = t.node(w);\n  var tailLabel = vLabel;\n  var flip = false;\n\n  // If the root is in the tail of the edge then we need to flip the logic that\n  // checks for the head and tail nodes in the candidates function below.\n  if (vLabel.lim > wLabel.lim) {\n    tailLabel = wLabel;\n    flip = true;\n  }\n\n  var candidates = _.filter(g.edges(), function (edge) {\n    return (\n      flip === isDescendant(t, t.node(edge.v), tailLabel) &&\n      flip !== isDescendant(t, t.node(edge.w), tailLabel)\n    );\n  });\n\n  return _.minBy(candidates, function (edge) {\n    return slack(g, edge);\n  });\n}\n\nfunction exchangeEdges(t, g, e, f) {\n  var v = e.v;\n  var w = e.w;\n  t.removeEdge(v, w);\n  t.setEdge(f.v, f.w, {});\n  initLowLimValues(t);\n  initCutValues(t, g);\n  updateRanks(t, g);\n}\n\nfunction updateRanks(t, g) {\n  var root = _.find(t.nodes(), function (v) {\n    return !g.node(v).parent;\n  });\n  var vs = alg.preorder(t, root);\n  vs = vs.slice(1);\n  _.forEach(vs, function (v) {\n    var parent = t.node(v).parent,\n      edge = g.edge(v, parent),\n      flipped = false;\n\n    if (!edge) {\n      edge = g.edge(parent, v);\n      flipped = true;\n    }\n\n    g.node(v).rank = g.node(parent).rank + (flipped ? edge.minlen : -edge.minlen);\n  });\n}\n\n/*\n * Returns true if the edge is in the tree.\n */\nfunction isTreeEdge(tree, u, v) {\n  return tree.hasEdge(u, v);\n}\n\n/*\n * Returns true if the specified node is descendant of the root node per the\n * assigned low and lim attributes in the tree.\n */\nfunction isDescendant(tree, vLabel, rootLabel) {\n  return rootLabel.low <= vLabel.lim && vLabel.lim <= rootLabel.lim;\n}\n","import { dfs } from './dfs.js';\n\nexport { postorder };\n\nfunction postorder(g, vs) {\n  return dfs(g, vs, 'post');\n}\n","import { dfs } from './dfs.js';\n\nexport { preorder };\n\nfunction preorder(g, vs) {\n  return dfs(g, vs, 'pre');\n}\n","import { feasibleTree } from './feasible-tree.js';\nimport { networkSimplex } from './network-simplex.js';\nimport { longestPath } from './util.js';\n\nexport { rank };\n\n/*\n * Assigns a rank to each node in the input graph that respects the \"minlen\"\n * constraint specified on edges between nodes.\n *\n * This basic structure is derived from Gansner, et al., \"A Technique for\n * Drawing Directed Graphs.\"\n *\n * Pre-conditions:\n *\n *    1. Graph must be a connected DAG\n *    2. Graph nodes must be objects\n *    3. Graph edges must have \"weight\" and \"minlen\" attributes\n *\n * Post-conditions:\n *\n *    1. Graph nodes will have a \"rank\" attribute based on the results of the\n *       algorithm. Ranks can start at any index (including negative), we'll\n *       fix them up later.\n */\nfunction rank(g) {\n  switch (g.graph().ranker) {\n    case 'network-simplex':\n      networkSimplexRanker(g);\n      break;\n    case 'tight-tree':\n      tightTreeRanker(g);\n      break;\n    case 'longest-path':\n      longestPathRanker(g);\n      break;\n    default:\n      networkSimplexRanker(g);\n  }\n}\n\n// A fast and simple ranker, but results are far from optimal.\nvar longestPathRanker = longestPath;\n\nfunction tightTreeRanker(g) {\n  longestPath(g);\n  feasibleTree(g);\n}\n\nfunction networkSimplexRanker(g) {\n  networkSimplex(g);\n}\n","import * as _ from 'lodash-es';\nimport * as util from './util.js';\n\nexport { run, cleanup };\n\n/*\n * A nesting graph creates dummy nodes for the tops and bottoms of subgraphs,\n * adds appropriate edges to ensure that all cluster nodes are placed between\n * these boundries, and ensures that the graph is connected.\n *\n * In addition we ensure, through the use of the minlen property, that nodes\n * and subgraph border nodes to not end up on the same rank.\n *\n * Preconditions:\n *\n *    1. Input graph is a DAG\n *    2. Nodes in the input graph has a minlen attribute\n *\n * Postconditions:\n *\n *    1. Input graph is connected.\n *    2. Dummy nodes are added for the tops and bottoms of subgraphs.\n *    3. The minlen attribute for nodes is adjusted to ensure nodes do not\n *       get placed on the same rank as subgraph border nodes.\n *\n * The nesting graph idea comes from Sander, \"Layout of Compound Directed\n * Graphs.\"\n */\nfunction run(g) {\n  var root = util.addDummyNode(g, 'root', {}, '_root');\n  var depths = treeDepths(g);\n  var height = _.max(_.values(depths)) - 1; // Note: depths is an Object not an array\n  var nodeSep = 2 * height + 1;\n\n  g.graph().nestingRoot = root;\n\n  // Multiply minlen by nodeSep to align nodes on non-border ranks.\n  _.forEach(g.edges(), function (e) {\n    g.edge(e).minlen *= nodeSep;\n  });\n\n  // Calculate a weight that is sufficient to keep subgraphs vertically compact\n  var weight = sumWeights(g) + 1;\n\n  // Create border nodes and link them up\n  _.forEach(g.children(), function (child) {\n    dfs(g, root, nodeSep, weight, height, depths, child);\n  });\n\n  // Save the multiplier for node layers for later removal of empty border\n  // layers.\n  g.graph().nodeRankFactor = nodeSep;\n}\n\nfunction dfs(g, root, nodeSep, weight, height, depths, v) {\n  var children = g.children(v);\n  if (!children.length) {\n    if (v !== root) {\n      g.setEdge(root, v, { weight: 0, minlen: nodeSep });\n    }\n    return;\n  }\n\n  var top = util.addBorderNode(g, '_bt');\n  var bottom = util.addBorderNode(g, '_bb');\n  var label = g.node(v);\n\n  g.setParent(top, v);\n  label.borderTop = top;\n  g.setParent(bottom, v);\n  label.borderBottom = bottom;\n\n  _.forEach(children, function (child) {\n    dfs(g, root, nodeSep, weight, height, depths, child);\n\n    var childNode = g.node(child);\n    var childTop = childNode.borderTop ? childNode.borderTop : child;\n    var childBottom = childNode.borderBottom ? childNode.borderBottom : child;\n    var thisWeight = childNode.borderTop ? weight : 2 * weight;\n    var minlen = childTop !== childBottom ? 1 : height - depths[v] + 1;\n\n    g.setEdge(top, childTop, {\n      weight: thisWeight,\n      minlen: minlen,\n      nestingEdge: true,\n    });\n\n    g.setEdge(childBottom, bottom, {\n      weight: thisWeight,\n      minlen: minlen,\n      nestingEdge: true,\n    });\n  });\n\n  if (!g.parent(v)) {\n    g.setEdge(root, top, { weight: 0, minlen: height + depths[v] });\n  }\n}\n\nfunction treeDepths(g) {\n  var depths = {};\n  function dfs(v, depth) {\n    var children = g.children(v);\n    if (children && children.length) {\n      _.forEach(children, function (child) {\n        dfs(child, depth + 1);\n      });\n    }\n    depths[v] = depth;\n  }\n  _.forEach(g.children(), function (v) {\n    dfs(v, 1);\n  });\n  return depths;\n}\n\nfunction sumWeights(g) {\n  return _.reduce(\n    g.edges(),\n    function (acc, e) {\n      return acc + g.edge(e).weight;\n    },\n    0\n  );\n}\n\nfunction cleanup(g) {\n  var graphLabel = g.graph();\n  g.removeNode(graphLabel.nestingRoot);\n  delete graphLabel.nestingRoot;\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (edge.nestingEdge) {\n      g.removeEdge(e);\n    }\n  });\n}\n","import baseClone from './_baseClone.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);\n}\n\nexport default cloneDeep;\n","import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\n\nexport { buildLayerGraph };\n\n/*\n * Constructs a graph that can be used to sort a layer of nodes. The graph will\n * contain all base and subgraph nodes from the request layer in their original\n * hierarchy and any edges that are incident on these nodes and are of the type\n * requested by the \"relationship\" parameter.\n *\n * Nodes from the requested rank that do not have parents are assigned a root\n * node in the output graph, which is set in the root graph attribute. This\n * makes it easy to walk the hierarchy of movable nodes during ordering.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG\n *    2. Base nodes in the input graph have a rank attribute\n *    3. Subgraph nodes in the input graph has minRank and maxRank attributes\n *    4. Edges have an assigned weight\n *\n * Post-conditions:\n *\n *    1. Output graph has all nodes in the movable rank with preserved\n *       hierarchy.\n *    2. Root nodes in the movable layer are made children of the node\n *       indicated by the root attribute of the graph.\n *    3. Non-movable nodes incident on movable nodes, selected by the\n *       relationship parameter, are included in the graph (without hierarchy).\n *    4. Edges incident on movable nodes, selected by the relationship\n *       parameter, are added to the output graph.\n *    5. The weights for copied edges are aggregated as need, since the output\n *       graph is not a multi-graph.\n */\nfunction buildLayerGraph(g, rank, relationship) {\n  var root = createRootNode(g),\n    result = new Graph({ compound: true })\n      .setGraph({ root: root })\n      .setDefaultNodeLabel(function (v) {\n        return g.node(v);\n      });\n\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v),\n      parent = g.parent(v);\n\n    if (node.rank === rank || (node.minRank <= rank && rank <= node.maxRank)) {\n      result.setNode(v);\n      result.setParent(v, parent || root);\n\n      // This assumes we have only short edges!\n      _.forEach(g[relationship](v), function (e) {\n        var u = e.v === v ? e.w : e.v,\n          edge = result.edge(u, v),\n          weight = !_.isUndefined(edge) ? edge.weight : 0;\n        result.setEdge(u, v, { weight: g.edge(e).weight + weight });\n      });\n\n      if (_.has(node, 'minRank')) {\n        result.setNode(v, {\n          borderLeft: node.borderLeft[rank],\n          borderRight: node.borderRight[rank],\n        });\n      }\n    }\n  });\n\n  return result;\n}\n\nfunction createRootNode(g) {\n  var v;\n  while (g.hasNode((v = _.uniqueId('_root'))));\n  return v;\n}\n","/**\n * This base implementation of `_.zipObject` which assigns values using `assignFunc`.\n *\n * @private\n * @param {Array} props The property identifiers.\n * @param {Array} values The property values.\n * @param {Function} assignFunc The function to assign values.\n * @returns {Object} Returns the new object.\n */\nfunction baseZipObject(props, values, assignFunc) {\n  var index = -1,\n      length = props.length,\n      valsLength = values.length,\n      result = {};\n\n  while (++index < length) {\n    var value = index < valsLength ? values[index] : undefined;\n    assignFunc(result, props[index], value);\n  }\n  return result;\n}\n\nexport default baseZipObject;\n","import assignValue from './_assignValue.js';\nimport baseZipObject from './_baseZipObject.js';\n\n/**\n * This method is like `_.fromPairs` except that it accepts two arrays,\n * one of property identifiers and one of corresponding values.\n *\n * @static\n * @memberOf _\n * @since 0.4.0\n * @category Array\n * @param {Array} [props=[]] The property identifiers.\n * @param {Array} [values=[]] The property values.\n * @returns {Object} Returns the new object.\n * @example\n *\n * _.zipObject(['a', 'b'], [1, 2]);\n * // => { 'a': 1, 'b': 2 }\n */\nfunction zipObject(props, values) {\n  return baseZipObject(props || [], values || [], assignValue);\n}\n\nexport default zipObject;\n","/**\n * The base implementation of `_.sortBy` which uses `comparer` to define the\n * sort order of `array` and replaces criteria objects with their corresponding\n * values.\n *\n * @private\n * @param {Array} array The array to sort.\n * @param {Function} comparer The function to define sort order.\n * @returns {Array} Returns `array`.\n */\nfunction baseSortBy(array, comparer) {\n  var length = array.length;\n\n  array.sort(comparer);\n  while (length--) {\n    array[length] = array[length].value;\n  }\n  return array;\n}\n\nexport default baseSortBy;\n","import isSymbol from './isSymbol.js';\n\n/**\n * Compares values to sort them in ascending order.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {number} Returns the sort order indicator for `value`.\n */\nfunction compareAscending(value, other) {\n  if (value !== other) {\n    var valIsDefined = value !== undefined,\n        valIsNull = value === null,\n        valIsReflexive = value === value,\n        valIsSymbol = isSymbol(value);\n\n    var othIsDefined = other !== undefined,\n        othIsNull = other === null,\n        othIsReflexive = other === other,\n        othIsSymbol = isSymbol(other);\n\n    if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||\n        (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||\n        (valIsNull && othIsDefined && othIsReflexive) ||\n        (!valIsDefined && othIsReflexive) ||\n        !valIsReflexive) {\n      return 1;\n    }\n    if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||\n        (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||\n        (othIsNull && valIsDefined && valIsReflexive) ||\n        (!othIsDefined && valIsReflexive) ||\n        !othIsReflexive) {\n      return -1;\n    }\n  }\n  return 0;\n}\n\nexport default compareAscending;\n","import compareAscending from './_compareAscending.js';\n\n/**\n * Used by `_.orderBy` to compare multiple properties of a value to another\n * and stable sort them.\n *\n * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n * of corresponding values.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {boolean[]|string[]} orders The order to sort by for each property.\n * @returns {number} Returns the sort order indicator for `object`.\n */\nfunction compareMultiple(object, other, orders) {\n  var index = -1,\n      objCriteria = object.criteria,\n      othCriteria = other.criteria,\n      length = objCriteria.length,\n      ordersLength = orders.length;\n\n  while (++index < length) {\n    var result = compareAscending(objCriteria[index], othCriteria[index]);\n    if (result) {\n      if (index >= ordersLength) {\n        return result;\n      }\n      var order = orders[index];\n      return result * (order == 'desc' ? -1 : 1);\n    }\n  }\n  // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n  // that causes it, under certain circumstances, to provide the same value for\n  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n  // for more details.\n  //\n  // This also ensures a stable sort in V8 and other engines.\n  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n  return object.index - other.index;\n}\n\nexport default compareMultiple;\n","import arrayMap from './_arrayMap.js';\nimport baseGet from './_baseGet.js';\nimport baseIteratee from './_baseIteratee.js';\nimport baseMap from './_baseMap.js';\nimport baseSortBy from './_baseSortBy.js';\nimport baseUnary from './_baseUnary.js';\nimport compareMultiple from './_compareMultiple.js';\nimport identity from './identity.js';\nimport isArray from './isArray.js';\n\n/**\n * The base implementation of `_.orderBy` without param guards.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n * @param {string[]} orders The sort orders of `iteratees`.\n * @returns {Array} Returns the new sorted array.\n */\nfunction baseOrderBy(collection, iteratees, orders) {\n  if (iteratees.length) {\n    iteratees = arrayMap(iteratees, function(iteratee) {\n      if (isArray(iteratee)) {\n        return function(value) {\n          return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);\n        }\n      }\n      return iteratee;\n    });\n  } else {\n    iteratees = [identity];\n  }\n\n  var index = -1;\n  iteratees = arrayMap(iteratees, baseUnary(baseIteratee));\n\n  var result = baseMap(collection, function(value, key, collection) {\n    var criteria = arrayMap(iteratees, function(iteratee) {\n      return iteratee(value);\n    });\n    return { 'criteria': criteria, 'index': ++index, 'value': value };\n  });\n\n  return baseSortBy(result, function(object, other) {\n    return compareMultiple(object, other, orders);\n  });\n}\n\nexport default baseOrderBy;\n","import baseFlatten from './_baseFlatten.js';\nimport baseOrderBy from './_baseOrderBy.js';\nimport baseRest from './_baseRest.js';\nimport isIterateeCall from './_isIterateeCall.js';\n\n/**\n * Creates an array of elements, sorted in ascending order by the results of\n * running each element in a collection thru each iteratee. This method\n * performs a stable sort, that is, it preserves the original sort order of\n * equal elements. The iteratees are invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {...(Function|Function[])} [iteratees=[_.identity]]\n *  The iteratees to sort by.\n * @returns {Array} Returns the new sorted array.\n * @example\n *\n * var users = [\n *   { 'user': 'fred',   'age': 48 },\n *   { 'user': 'barney', 'age': 36 },\n *   { 'user': 'fred',   'age': 30 },\n *   { 'user': 'barney', 'age': 34 }\n * ];\n *\n * _.sortBy(users, [function(o) { return o.user; }]);\n * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]\n *\n * _.sortBy(users, ['user', 'age']);\n * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]\n */\nvar sortBy = baseRest(function(collection, iteratees) {\n  if (collection == null) {\n    return [];\n  }\n  var length = iteratees.length;\n  if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {\n    iteratees = [];\n  } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {\n    iteratees = [iteratees[0]];\n  }\n  return baseOrderBy(collection, baseFlatten(iteratees, 1), []);\n});\n\nexport default sortBy;\n","import * as _ from 'lodash-es';\n\nexport { crossCount };\n\n/*\n * A function that takes a layering (an array of layers, each with an array of\n * ordererd nodes) and a graph and returns a weighted crossing count.\n *\n * Pre-conditions:\n *\n *    1. Input graph must be simple (not a multigraph), directed, and include\n *       only simple edges.\n *    2. Edges in the input graph must have assigned weights.\n *\n * Post-conditions:\n *\n *    1. The graph and layering matrix are left unchanged.\n *\n * This algorithm is derived from Barth, et al., \"Bilayer Cross Counting.\"\n */\nfunction crossCount(g, layering) {\n  var cc = 0;\n  for (var i = 1; i < layering.length; ++i) {\n    cc += twoLayerCrossCount(g, layering[i - 1], layering[i]);\n  }\n  return cc;\n}\n\nfunction twoLayerCrossCount(g, northLayer, southLayer) {\n  // Sort all of the edges between the north and south layers by their position\n  // in the north layer and then the south. Map these edges to the position of\n  // their head in the south layer.\n  var southPos = _.zipObject(\n    southLayer,\n    _.map(southLayer, function (v, i) {\n      return i;\n    })\n  );\n  var southEntries = _.flatten(\n    _.map(northLayer, function (v) {\n      return _.sortBy(\n        _.map(g.outEdges(v), function (e) {\n          return { pos: southPos[e.w], weight: g.edge(e).weight };\n        }),\n        'pos'\n      );\n    })\n  );\n\n  // Build the accumulator tree\n  var firstIndex = 1;\n  while (firstIndex < southLayer.length) firstIndex <<= 1;\n  var treeSize = 2 * firstIndex - 1;\n  firstIndex -= 1;\n  var tree = _.map(new Array(treeSize), function () {\n    return 0;\n  });\n\n  // Calculate the weighted crossings\n  var cc = 0;\n  _.forEach(\n    // @ts-expect-error\n    southEntries.forEach(function (entry) {\n      var index = entry.pos + firstIndex;\n      tree[index] += entry.weight;\n      var weightSum = 0;\n      // @ts-expect-error\n      while (index > 0) {\n        // @ts-expect-error\n        if (index % 2) {\n          weightSum += tree[index + 1];\n        }\n        // @ts-expect-error\n        index = (index - 1) >> 1;\n        tree[index] += entry.weight;\n      }\n      cc += entry.weight * weightSum;\n    })\n  );\n\n  return cc;\n}\n","import * as _ from 'lodash-es';\n\nexport { resolveConflicts };\n\n/*\n * Given a list of entries of the form {v, barycenter, weight} and a\n * constraint graph this function will resolve any conflicts between the\n * constraint graph and the barycenters for the entries. If the barycenters for\n * an entry would violate a constraint in the constraint graph then we coalesce\n * the nodes in the conflict into a new node that respects the contraint and\n * aggregates barycenter and weight information.\n *\n * This implementation is based on the description in Forster, \"A Fast and\n * Simple Hueristic for Constrained Two-Level Crossing Reduction,\" thought it\n * differs in some specific details.\n *\n * Pre-conditions:\n *\n *    1. Each entry has the form {v, barycenter, weight}, or if the node has\n *       no barycenter, then {v}.\n *\n * Returns:\n *\n *    A new list of entries of the form {vs, i, barycenter, weight}. The list\n *    `vs` may either be a singleton or it may be an aggregation of nodes\n *    ordered such that they do not violate constraints from the constraint\n *    graph. The property `i` is the lowest original index of any of the\n *    elements in `vs`.\n */\nfunction resolveConflicts(entries, cg) {\n  var mappedEntries = {};\n  _.forEach(entries, function (entry, i) {\n    var tmp = (mappedEntries[entry.v] = {\n      indegree: 0,\n      in: [],\n      out: [],\n      vs: [entry.v],\n      i: i,\n    });\n    if (!_.isUndefined(entry.barycenter)) {\n      // @ts-expect-error\n      tmp.barycenter = entry.barycenter;\n      // @ts-expect-error\n      tmp.weight = entry.weight;\n    }\n  });\n\n  _.forEach(cg.edges(), function (e) {\n    var entryV = mappedEntries[e.v];\n    var entryW = mappedEntries[e.w];\n    if (!_.isUndefined(entryV) && !_.isUndefined(entryW)) {\n      entryW.indegree++;\n      entryV.out.push(mappedEntries[e.w]);\n    }\n  });\n\n  var sourceSet = _.filter(mappedEntries, function (entry) {\n    // @ts-expect-error\n    return !entry.indegree;\n  });\n\n  return doResolveConflicts(sourceSet);\n}\n\nfunction doResolveConflicts(sourceSet) {\n  var entries = [];\n\n  function handleIn(vEntry) {\n    return function (uEntry) {\n      if (uEntry.merged) {\n        return;\n      }\n      if (\n        _.isUndefined(uEntry.barycenter) ||\n        _.isUndefined(vEntry.barycenter) ||\n        uEntry.barycenter >= vEntry.barycenter\n      ) {\n        mergeEntries(vEntry, uEntry);\n      }\n    };\n  }\n\n  function handleOut(vEntry) {\n    return function (wEntry) {\n      wEntry['in'].push(vEntry);\n      if (--wEntry.indegree === 0) {\n        sourceSet.push(wEntry);\n      }\n    };\n  }\n\n  while (sourceSet.length) {\n    var entry = sourceSet.pop();\n    entries.push(entry);\n    _.forEach(entry['in'].reverse(), handleIn(entry));\n    _.forEach(entry.out, handleOut(entry));\n  }\n\n  return _.map(\n    _.filter(entries, function (entry) {\n      return !entry.merged;\n    }),\n    function (entry) {\n      return _.pick(entry, ['vs', 'i', 'barycenter', 'weight']);\n    }\n  );\n}\n\nfunction mergeEntries(target, source) {\n  var sum = 0;\n  var weight = 0;\n\n  if (target.weight) {\n    sum += target.barycenter * target.weight;\n    weight += target.weight;\n  }\n\n  if (source.weight) {\n    sum += source.barycenter * source.weight;\n    weight += source.weight;\n  }\n\n  target.vs = source.vs.concat(target.vs);\n  target.barycenter = sum / weight;\n  target.weight = weight;\n  target.i = Math.min(source.i, target.i);\n  source.merged = true;\n}\n","import * as _ from 'lodash-es';\nimport * as util from '../util.js';\n\nexport { sort };\n\nfunction sort(entries, biasRight) {\n  var parts = util.partition(entries, function (entry) {\n    return _.has(entry, 'barycenter');\n  });\n  var sortable = parts.lhs,\n    unsortable = _.sortBy(parts.rhs, function (entry) {\n      return -entry.i;\n    }),\n    vs = [],\n    sum = 0,\n    weight = 0,\n    vsIndex = 0;\n\n  sortable.sort(compareWithBias(!!biasRight));\n\n  vsIndex = consumeUnsortable(vs, unsortable, vsIndex);\n\n  _.forEach(sortable, function (entry) {\n    vsIndex += entry.vs.length;\n    vs.push(entry.vs);\n    sum += entry.barycenter * entry.weight;\n    weight += entry.weight;\n    vsIndex = consumeUnsortable(vs, unsortable, vsIndex);\n  });\n\n  var result = { vs: _.flatten(vs) };\n  if (weight) {\n    result.barycenter = sum / weight;\n    result.weight = weight;\n  }\n  return result;\n}\n\nfunction consumeUnsortable(vs, unsortable, index) {\n  var last;\n  while (unsortable.length && (last = _.last(unsortable)).i <= index) {\n    unsortable.pop();\n    vs.push(last.vs);\n    index++;\n  }\n  return index;\n}\n\nfunction compareWithBias(bias) {\n  return function (entryV, entryW) {\n    if (entryV.barycenter < entryW.barycenter) {\n      return -1;\n    } else if (entryV.barycenter > entryW.barycenter) {\n      return 1;\n    }\n\n    return !bias ? entryV.i - entryW.i : entryW.i - entryV.i;\n  };\n}\n","import * as _ from 'lodash-es';\nimport { barycenter } from './barycenter.js';\nimport { resolveConflicts } from './resolve-conflicts.js';\nimport { sort } from './sort.js';\n\nexport { sortSubgraph };\n\nfunction sortSubgraph(g, v, cg, biasRight) {\n  var movable = g.children(v);\n  var node = g.node(v);\n  var bl = node ? node.borderLeft : undefined;\n  var br = node ? node.borderRight : undefined;\n  var subgraphs = {};\n\n  if (bl) {\n    movable = _.filter(movable, function (w) {\n      return w !== bl && w !== br;\n    });\n  }\n\n  var barycenters = barycenter(g, movable);\n  _.forEach(barycenters, function (entry) {\n    if (g.children(entry.v).length) {\n      var subgraphResult = sortSubgraph(g, entry.v, cg, biasRight);\n      subgraphs[entry.v] = subgraphResult;\n      if (_.has(subgraphResult, 'barycenter')) {\n        mergeBarycenters(entry, subgraphResult);\n      }\n    }\n  });\n\n  var entries = resolveConflicts(barycenters, cg);\n  expandSubgraphs(entries, subgraphs);\n\n  var result = sort(entries, biasRight);\n\n  if (bl) {\n    result.vs = _.flatten([bl, result.vs, br]);\n    if (g.predecessors(bl).length) {\n      var blPred = g.node(g.predecessors(bl)[0]),\n        brPred = g.node(g.predecessors(br)[0]);\n      if (!_.has(result, 'barycenter')) {\n        result.barycenter = 0;\n        result.weight = 0;\n      }\n      result.barycenter =\n        (result.barycenter * result.weight + blPred.order + brPred.order) / (result.weight + 2);\n      result.weight += 2;\n    }\n  }\n\n  return result;\n}\n\nfunction expandSubgraphs(entries, subgraphs) {\n  _.forEach(entries, function (entry) {\n    entry.vs = _.flatten(\n      entry.vs.map(function (v) {\n        if (subgraphs[v]) {\n          return subgraphs[v].vs;\n        }\n        return v;\n      })\n    );\n  });\n}\n\nfunction mergeBarycenters(target, other) {\n  if (!_.isUndefined(target.barycenter)) {\n    target.barycenter =\n      (target.barycenter * target.weight + other.barycenter * other.weight) /\n      (target.weight + other.weight);\n    target.weight += other.weight;\n  } else {\n    target.barycenter = other.barycenter;\n    target.weight = other.weight;\n  }\n}\n","import * as _ from 'lodash-es';\n\nexport { barycenter };\n\nfunction barycenter(g, movable) {\n  return _.map(movable, function (v) {\n    var inV = g.inEdges(v);\n    if (!inV.length) {\n      return { v: v };\n    } else {\n      var result = _.reduce(\n        inV,\n        function (acc, e) {\n          var edge = g.edge(e),\n            nodeU = g.node(e.v);\n          return {\n            sum: acc.sum + edge.weight * nodeU.order,\n            weight: acc.weight + edge.weight,\n          };\n        },\n        { sum: 0, weight: 0 }\n      );\n\n      return {\n        v: v,\n        barycenter: result.sum / result.weight,\n        weight: result.weight,\n      };\n    }\n  });\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\nimport * as util from '../util.js';\nimport { addSubgraphConstraints } from './add-subgraph-constraints.js';\nimport { buildLayerGraph } from './build-layer-graph.js';\nimport { crossCount } from './cross-count.js';\nimport { initOrder } from './init-order.js';\nimport { sortSubgraph } from './sort-subgraph.js';\n\nexport { order };\n\n/*\n * Applies heuristics to minimize edge crossings in the graph and sets the best\n * order solution as an order attribute on each node.\n *\n * Pre-conditions:\n *\n *    1. Graph must be DAG\n *    2. Graph nodes must be objects with a \"rank\" attribute\n *    3. Graph edges must have the \"weight\" attribute\n *\n * Post-conditions:\n *\n *    1. Graph nodes will have an \"order\" attribute based on the results of the\n *       algorithm.\n */\nfunction order(g) {\n  var maxRank = util.maxRank(g),\n    downLayerGraphs = buildLayerGraphs(g, _.range(1, maxRank + 1), 'inEdges'),\n    upLayerGraphs = buildLayerGraphs(g, _.range(maxRank - 1, -1, -1), 'outEdges');\n\n  var layering = initOrder(g);\n  assignOrder(g, layering);\n\n  var bestCC = Number.POSITIVE_INFINITY,\n    best;\n\n  for (var i = 0, lastBest = 0; lastBest < 4; ++i, ++lastBest) {\n    sweepLayerGraphs(i % 2 ? downLayerGraphs : upLayerGraphs, i % 4 >= 2);\n\n    layering = util.buildLayerMatrix(g);\n    var cc = crossCount(g, layering);\n    if (cc < bestCC) {\n      lastBest = 0;\n      best = _.cloneDeep(layering);\n      bestCC = cc;\n    }\n  }\n\n  assignOrder(g, best);\n}\n\nfunction buildLayerGraphs(g, ranks, relationship) {\n  return _.map(ranks, function (rank) {\n    return buildLayerGraph(g, rank, relationship);\n  });\n}\n\nfunction sweepLayerGraphs(layerGraphs, biasRight) {\n  var cg = new Graph();\n  _.forEach(layerGraphs, function (lg) {\n    var root = lg.graph().root;\n    var sorted = sortSubgraph(lg, root, cg, biasRight);\n    _.forEach(sorted.vs, function (v, i) {\n      lg.node(v).order = i;\n    });\n    addSubgraphConstraints(lg, cg, sorted.vs);\n  });\n}\n\nfunction assignOrder(g, layering) {\n  _.forEach(layering, function (layer) {\n    _.forEach(layer, function (v, i) {\n      g.node(v).order = i;\n    });\n  });\n}\n","import * as _ from 'lodash-es';\n\nexport { initOrder };\n\n/*\n * Assigns an initial order value for each node by performing a DFS search\n * starting from nodes in the first rank. Nodes are assigned an order in their\n * rank as they are first visited.\n *\n * This approach comes from Gansner, et al., \"A Technique for Drawing Directed\n * Graphs.\"\n *\n * Returns a layering matrix with an array per layer and each layer sorted by\n * the order of its nodes.\n */\nfunction initOrder(g) {\n  var visited = {};\n  var simpleNodes = _.filter(g.nodes(), function (v) {\n    return !g.children(v).length;\n  });\n  var maxRank = _.max(\n    _.map(simpleNodes, function (v) {\n      return g.node(v).rank;\n    })\n  );\n  var layers = _.map(_.range(maxRank + 1), function () {\n    return [];\n  });\n\n  function dfs(v) {\n    if (_.has(visited, v)) return;\n    visited[v] = true;\n    var node = g.node(v);\n    layers[node.rank].push(v);\n    _.forEach(g.successors(v), dfs);\n  }\n\n  var orderedVs = _.sortBy(simpleNodes, function (v) {\n    return g.node(v).rank;\n  });\n  _.forEach(orderedVs, dfs);\n\n  return layers;\n}\n","import * as _ from 'lodash-es';\n\nexport { addSubgraphConstraints };\n\nfunction addSubgraphConstraints(g, cg, vs) {\n  var prev = {},\n    rootPrev;\n\n  _.forEach(vs, function (v) {\n    var child = g.parent(v),\n      parent,\n      prevChild;\n    while (child) {\n      parent = g.parent(child);\n      if (parent) {\n        prevChild = prev[parent];\n        prev[parent] = child;\n      } else {\n        prevChild = rootPrev;\n        rootPrev = child;\n      }\n      if (prevChild && prevChild !== child) {\n        cg.setEdge(prevChild, child);\n        return;\n      }\n      child = parent;\n    }\n  });\n\n  /*\n  function dfs(v) {\n    var children = v ? g.children(v) : g.children();\n    if (children.length) {\n      var min = Number.POSITIVE_INFINITY,\n          subgraphs = [];\n      _.each(children, function(child) {\n        var childMin = dfs(child);\n        if (g.children(child).length) {\n          subgraphs.push({ v: child, order: childMin });\n        }\n        min = Math.min(min, childMin);\n      });\n      _.reduce(_.sortBy(subgraphs, \"order\"), function(prev, curr) {\n        cg.setEdge(prev.v, curr.v);\n        return curr;\n      });\n      return min;\n    }\n    return g.node(v).order;\n  }\n  dfs(undefined);\n  */\n}\n","import * as _ from 'lodash-es';\n\nexport { parentDummyChains };\n\nfunction parentDummyChains(g) {\n  var postorderNums = postorder(g);\n\n  _.forEach(g.graph().dummyChains, function (v) {\n    var node = g.node(v);\n    var edgeObj = node.edgeObj;\n    var pathData = findPath(g, postorderNums, edgeObj.v, edgeObj.w);\n    var path = pathData.path;\n    var lca = pathData.lca;\n    var pathIdx = 0;\n    var pathV = path[pathIdx];\n    var ascending = true;\n\n    while (v !== edgeObj.w) {\n      node = g.node(v);\n\n      if (ascending) {\n        while ((pathV = path[pathIdx]) !== lca && g.node(pathV).maxRank < node.rank) {\n          pathIdx++;\n        }\n\n        if (pathV === lca) {\n          ascending = false;\n        }\n      }\n\n      if (!ascending) {\n        while (\n          pathIdx < path.length - 1 &&\n          g.node((pathV = path[pathIdx + 1])).minRank <= node.rank\n        ) {\n          pathIdx++;\n        }\n        pathV = path[pathIdx];\n      }\n\n      g.setParent(v, pathV);\n      v = g.successors(v)[0];\n    }\n  });\n}\n\n// Find a path from v to w through the lowest common ancestor (LCA). Return the\n// full path and the LCA.\nfunction findPath(g, postorderNums, v, w) {\n  var vPath = [];\n  var wPath = [];\n  var low = Math.min(postorderNums[v].low, postorderNums[w].low);\n  var lim = Math.max(postorderNums[v].lim, postorderNums[w].lim);\n  var parent;\n  var lca;\n\n  // Traverse up from v to find the LCA\n  parent = v;\n  do {\n    parent = g.parent(parent);\n    vPath.push(parent);\n  } while (parent && (postorderNums[parent].low > low || lim > postorderNums[parent].lim));\n  lca = parent;\n\n  // Traverse from w to LCA\n  parent = w;\n  while ((parent = g.parent(parent)) !== lca) {\n    wPath.push(parent);\n  }\n\n  return { path: vPath.concat(wPath.reverse()), lca: lca };\n}\n\nfunction postorder(g) {\n  var result = {};\n  var lim = 0;\n\n  function dfs(v) {\n    var low = lim;\n    _.forEach(g.children(v), dfs);\n    result[v] = { low: low, lim: lim++ };\n  }\n  _.forEach(g.children(), dfs);\n\n  return result;\n}\n","import baseForOwn from './_baseForOwn.js';\nimport castFunction from './_castFunction.js';\n\n/**\n * Iterates over own enumerable string keyed properties of an object and\n * invokes `iteratee` for each property. The iteratee is invoked with three\n * arguments: (value, key, object). Iteratee functions may exit iteration\n * early by explicitly returning `false`.\n *\n * @static\n * @memberOf _\n * @since 0.3.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Object} Returns `object`.\n * @see _.forOwnRight\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.forOwn(new Foo, function(value, key) {\n *   console.log(key);\n * });\n * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n */\nfunction forOwn(object, iteratee) {\n  return object && baseForOwn(object, castFunction(iteratee));\n}\n\nexport default forOwn;\n","import baseFor from './_baseFor.js';\nimport castFunction from './_castFunction.js';\nimport keysIn from './keysIn.js';\n\n/**\n * Iterates over own and inherited enumerable string keyed properties of an\n * object and invokes `iteratee` for each property. The iteratee is invoked\n * with three arguments: (value, key, object). Iteratee functions may exit\n * iteration early by explicitly returning `false`.\n *\n * @static\n * @memberOf _\n * @since 0.3.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Object} Returns `object`.\n * @see _.forInRight\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.forIn(new Foo, function(value, key) {\n *   console.log(key);\n * });\n * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).\n */\nfunction forIn(object, iteratee) {\n  return object == null\n    ? object\n    : baseFor(object, castFunction(iteratee), keysIn);\n}\n\nexport default forIn;\n","import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\nimport * as util from '../util.js';\n\n/*\n * This module provides coordinate assignment based on Brandes and Köpf, \"Fast\n * and Simple Horizontal Coordinate Assignment.\"\n */\n\nexport {\n  positionX,\n  findType1Conflicts,\n  findType2Conflicts,\n  addConflict,\n  hasConflict,\n  verticalAlignment,\n  horizontalCompaction,\n  alignCoordinates,\n  findSmallestWidthAlignment,\n  balance,\n};\n\n/*\n * Marks all edges in the graph with a type-1 conflict with the \"type1Conflict\"\n * property. A type-1 conflict is one where a non-inner segment crosses an\n * inner segment. An inner segment is an edge with both incident nodes marked\n * with the \"dummy\" property.\n *\n * This algorithm scans layer by layer, starting with the second, for type-1\n * conflicts between the current layer and the previous layer. For each layer\n * it scans the nodes from left to right until it reaches one that is incident\n * on an inner segment. It then scans predecessors to determine if they have\n * edges that cross that inner segment. At the end a final scan is done for all\n * nodes on the current rank to see if they cross the last visited inner\n * segment.\n *\n * This algorithm (safely) assumes that a dummy node will only be incident on a\n * single node in the layers being scanned.\n */\nfunction findType1Conflicts(g, layering) {\n  var conflicts = {};\n\n  function visitLayer(prevLayer, layer) {\n    var // last visited node in the previous layer that is incident on an inner\n      // segment.\n      k0 = 0,\n      // Tracks the last node in this layer scanned for crossings with a type-1\n      // segment.\n      scanPos = 0,\n      prevLayerLength = prevLayer.length,\n      lastNode = _.last(layer);\n\n    _.forEach(layer, function (v, i) {\n      var w = findOtherInnerSegmentNode(g, v),\n        k1 = w ? g.node(w).order : prevLayerLength;\n\n      if (w || v === lastNode) {\n        _.forEach(layer.slice(scanPos, i + 1), function (scanNode) {\n          _.forEach(g.predecessors(scanNode), function (u) {\n            var uLabel = g.node(u),\n              uPos = uLabel.order;\n            if ((uPos < k0 || k1 < uPos) && !(uLabel.dummy && g.node(scanNode).dummy)) {\n              addConflict(conflicts, u, scanNode);\n            }\n          });\n        });\n        // @ts-expect-error\n        scanPos = i + 1;\n        k0 = k1;\n      }\n    });\n\n    return layer;\n  }\n\n  _.reduce(layering, visitLayer);\n  return conflicts;\n}\n\nfunction findType2Conflicts(g, layering) {\n  var conflicts = {};\n\n  function scan(south, southPos, southEnd, prevNorthBorder, nextNorthBorder) {\n    var v;\n    _.forEach(_.range(southPos, southEnd), function (i) {\n      v = south[i];\n      if (g.node(v).dummy) {\n        _.forEach(g.predecessors(v), function (u) {\n          var uNode = g.node(u);\n          if (uNode.dummy && (uNode.order < prevNorthBorder || uNode.order > nextNorthBorder)) {\n            addConflict(conflicts, u, v);\n          }\n        });\n      }\n    });\n  }\n\n  function visitLayer(north, south) {\n    var prevNorthPos = -1,\n      nextNorthPos,\n      southPos = 0;\n\n    _.forEach(south, function (v, southLookahead) {\n      if (g.node(v).dummy === 'border') {\n        var predecessors = g.predecessors(v);\n        if (predecessors.length) {\n          nextNorthPos = g.node(predecessors[0]).order;\n          scan(south, southPos, southLookahead, prevNorthPos, nextNorthPos);\n          // @ts-expect-error\n          southPos = southLookahead;\n          prevNorthPos = nextNorthPos;\n        }\n      }\n      scan(south, southPos, south.length, nextNorthPos, north.length);\n    });\n\n    return south;\n  }\n\n  _.reduce(layering, visitLayer);\n  return conflicts;\n}\n\nfunction findOtherInnerSegmentNode(g, v) {\n  if (g.node(v).dummy) {\n    return _.find(g.predecessors(v), function (u) {\n      return g.node(u).dummy;\n    });\n  }\n}\n\nfunction addConflict(conflicts, v, w) {\n  if (v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n\n  var conflictsV = conflicts[v];\n  if (!conflictsV) {\n    conflicts[v] = conflictsV = {};\n  }\n  conflictsV[w] = true;\n}\n\nfunction hasConflict(conflicts, v, w) {\n  if (v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n  return _.has(conflicts[v], w);\n}\n\n/*\n * Try to align nodes into vertical \"blocks\" where possible. This algorithm\n * attempts to align a node with one of its median neighbors. If the edge\n * connecting a neighbor is a type-1 conflict then we ignore that possibility.\n * If a previous node has already formed a block with a node after the node\n * we're trying to form a block with, we also ignore that possibility - our\n * blocks would be split in that scenario.\n */\nfunction verticalAlignment(g, layering, conflicts, neighborFn) {\n  var root = {},\n    align = {},\n    pos = {};\n\n  // We cache the position here based on the layering because the graph and\n  // layering may be out of sync. The layering matrix is manipulated to\n  // generate different extreme alignments.\n  _.forEach(layering, function (layer) {\n    _.forEach(layer, function (v, order) {\n      root[v] = v;\n      align[v] = v;\n      pos[v] = order;\n    });\n  });\n\n  _.forEach(layering, function (layer) {\n    var prevIdx = -1;\n    _.forEach(layer, function (v) {\n      var ws = neighborFn(v);\n      if (ws.length) {\n        ws = _.sortBy(ws, function (w) {\n          return pos[w];\n        });\n        var mp = (ws.length - 1) / 2;\n        for (var i = Math.floor(mp), il = Math.ceil(mp); i <= il; ++i) {\n          var w = ws[i];\n          if (align[v] === v && prevIdx < pos[w] && !hasConflict(conflicts, v, w)) {\n            align[w] = v;\n            align[v] = root[v] = root[w];\n            prevIdx = pos[w];\n          }\n        }\n      }\n    });\n  });\n\n  return { root: root, align: align };\n}\n\nfunction horizontalCompaction(g, layering, root, align, reverseSep) {\n  // This portion of the algorithm differs from BK due to a number of problems.\n  // Instead of their algorithm we construct a new block graph and do two\n  // sweeps. The first sweep places blocks with the smallest possible\n  // coordinates. The second sweep removes unused space by moving blocks to the\n  // greatest coordinates without violating separation.\n  var xs = {},\n    blockG = buildBlockGraph(g, layering, root, reverseSep),\n    borderType = reverseSep ? 'borderLeft' : 'borderRight';\n\n  function iterate(setXsFunc, nextNodesFunc) {\n    var stack = blockG.nodes();\n    var elem = stack.pop();\n    var visited = {};\n    while (elem) {\n      if (visited[elem]) {\n        setXsFunc(elem);\n      } else {\n        visited[elem] = true;\n        stack.push(elem);\n        stack = stack.concat(nextNodesFunc(elem));\n      }\n\n      elem = stack.pop();\n    }\n  }\n\n  // First pass, assign smallest coordinates\n  function pass1(elem) {\n    xs[elem] = blockG.inEdges(elem).reduce(function (acc, e) {\n      return Math.max(acc, xs[e.v] + blockG.edge(e));\n    }, 0);\n  }\n\n  // Second pass, assign greatest coordinates\n  function pass2(elem) {\n    var min = blockG.outEdges(elem).reduce(function (acc, e) {\n      return Math.min(acc, xs[e.w] - blockG.edge(e));\n    }, Number.POSITIVE_INFINITY);\n\n    var node = g.node(elem);\n    if (min !== Number.POSITIVE_INFINITY && node.borderType !== borderType) {\n      xs[elem] = Math.max(xs[elem], min);\n    }\n  }\n\n  iterate(pass1, blockG.predecessors.bind(blockG));\n  iterate(pass2, blockG.successors.bind(blockG));\n\n  // Assign x coordinates to all nodes\n  _.forEach(align, function (v) {\n    xs[v] = xs[root[v]];\n  });\n\n  return xs;\n}\n\nfunction buildBlockGraph(g, layering, root, reverseSep) {\n  var blockGraph = new Graph(),\n    graphLabel = g.graph(),\n    sepFn = sep(graphLabel.nodesep, graphLabel.edgesep, reverseSep);\n\n  _.forEach(layering, function (layer) {\n    var u;\n    _.forEach(layer, function (v) {\n      var vRoot = root[v];\n      blockGraph.setNode(vRoot);\n      if (u) {\n        var uRoot = root[u],\n          prevMax = blockGraph.edge(uRoot, vRoot);\n        blockGraph.setEdge(uRoot, vRoot, Math.max(sepFn(g, v, u), prevMax || 0));\n      }\n      u = v;\n    });\n  });\n\n  return blockGraph;\n}\n\n/*\n * Returns the alignment that has the smallest width of the given alignments.\n */\nfunction findSmallestWidthAlignment(g, xss) {\n  return _.minBy(_.values(xss), function (xs) {\n    var max = Number.NEGATIVE_INFINITY;\n    var min = Number.POSITIVE_INFINITY;\n\n    _.forIn(xs, function (x, v) {\n      var halfWidth = width(g, v) / 2;\n\n      max = Math.max(x + halfWidth, max);\n      min = Math.min(x - halfWidth, min);\n    });\n\n    return max - min;\n  });\n}\n\n/*\n * Align the coordinates of each of the layout alignments such that\n * left-biased alignments have their minimum coordinate at the same point as\n * the minimum coordinate of the smallest width alignment and right-biased\n * alignments have their maximum coordinate at the same point as the maximum\n * coordinate of the smallest width alignment.\n */\nfunction alignCoordinates(xss, alignTo) {\n  var alignToVals = _.values(alignTo),\n    alignToMin = _.min(alignToVals),\n    alignToMax = _.max(alignToVals);\n\n  _.forEach(['u', 'd'], function (vert) {\n    _.forEach(['l', 'r'], function (horiz) {\n      var alignment = vert + horiz,\n        xs = xss[alignment],\n        delta;\n      if (xs === alignTo) return;\n\n      var xsVals = _.values(xs);\n      delta = horiz === 'l' ? alignToMin - _.min(xsVals) : alignToMax - _.max(xsVals);\n\n      if (delta) {\n        xss[alignment] = _.mapValues(xs, function (x) {\n          return x + delta;\n        });\n      }\n    });\n  });\n}\n\nfunction balance(xss, align) {\n  return _.mapValues(xss.ul, function (ignore, v) {\n    if (align) {\n      return xss[align.toLowerCase()][v];\n    } else {\n      var xs = _.sortBy(_.map(xss, v));\n      return (xs[1] + xs[2]) / 2;\n    }\n  });\n}\n\nfunction positionX(g) {\n  var layering = util.buildLayerMatrix(g);\n  var conflicts = _.merge(findType1Conflicts(g, layering), findType2Conflicts(g, layering));\n\n  var xss = {};\n  var adjustedLayering;\n  _.forEach(['u', 'd'], function (vert) {\n    adjustedLayering = vert === 'u' ? layering : _.values(layering).reverse();\n    _.forEach(['l', 'r'], function (horiz) {\n      if (horiz === 'r') {\n        adjustedLayering = _.map(adjustedLayering, function (inner) {\n          return _.values(inner).reverse();\n        });\n      }\n\n      var neighborFn = (vert === 'u' ? g.predecessors : g.successors).bind(g);\n      var align = verticalAlignment(g, adjustedLayering, conflicts, neighborFn);\n      var xs = horizontalCompaction(g, adjustedLayering, align.root, align.align, horiz === 'r');\n      if (horiz === 'r') {\n        xs = _.mapValues(xs, function (x) {\n          return -x;\n        });\n      }\n      xss[vert + horiz] = xs;\n    });\n  });\n\n  var smallestWidth = findSmallestWidthAlignment(g, xss);\n  alignCoordinates(xss, smallestWidth);\n  return balance(xss, g.graph().align);\n}\n\nfunction sep(nodeSep, edgeSep, reverseSep) {\n  return function (g, v, w) {\n    var vLabel = g.node(v);\n    var wLabel = g.node(w);\n    var sum = 0;\n    var delta;\n\n    sum += vLabel.width / 2;\n    if (_.has(vLabel, 'labelpos')) {\n      switch (vLabel.labelpos.toLowerCase()) {\n        case 'l':\n          delta = -vLabel.width / 2;\n          break;\n        case 'r':\n          delta = vLabel.width / 2;\n          break;\n      }\n    }\n    if (delta) {\n      sum += reverseSep ? delta : -delta;\n    }\n    delta = 0;\n\n    sum += (vLabel.dummy ? edgeSep : nodeSep) / 2;\n    sum += (wLabel.dummy ? edgeSep : nodeSep) / 2;\n\n    sum += wLabel.width / 2;\n    if (_.has(wLabel, 'labelpos')) {\n      switch (wLabel.labelpos.toLowerCase()) {\n        case 'l':\n          delta = wLabel.width / 2;\n          break;\n        case 'r':\n          delta = -wLabel.width / 2;\n          break;\n      }\n    }\n    if (delta) {\n      sum += reverseSep ? delta : -delta;\n    }\n    delta = 0;\n\n    return sum;\n  };\n}\n\nfunction width(g, v) {\n  return g.node(v).width;\n}\n","import * as _ from 'lodash-es';\nimport * as util from '../util.js';\nimport { positionX } from './bk.js';\n\nexport { position };\n\nfunction position(g) {\n  g = util.asNonCompoundGraph(g);\n\n  positionY(g);\n  _.forOwn(positionX(g), function (x, v) {\n    g.node(v).x = x;\n  });\n}\n\nfunction positionY(g) {\n  var layering = util.buildLayerMatrix(g);\n  var rankSep = g.graph().ranksep;\n  var prevY = 0;\n  _.forEach(layering, function (layer) {\n    var maxHeight = _.max(\n      _.map(layer, function (v) {\n        return g.node(v).height;\n      })\n    );\n    _.forEach(layer, function (v) {\n      g.node(v).y = prevY + maxHeight / 2;\n    });\n    prevY += maxHeight + rankSep;\n  });\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../graphlib/index.js';\nimport { addBorderSegments } from './add-border-segments.js';\nimport * as coordinateSystem from './coordinate-system.js';\nimport * as acyclic from './acyclic.js';\nimport * as normalize from './normalize.js';\nimport { rank } from './rank/index.js';\nimport * as nestingGraph from './nesting-graph.js';\nimport { order } from './order/index.js';\nimport { parentDummyChains } from './parent-dummy-chains.js';\nimport { position } from './position/index.js';\nimport * as util from './util.js';\n\nexport { layout };\n\nfunction layout(g, opts) {\n  var time = opts && opts.debugTiming ? util.time : util.notime;\n  time('layout', function () {\n    var layoutGraph = time('  buildLayoutGraph', function () {\n      return buildLayoutGraph(g);\n    });\n    time('  runLayout', function () {\n      runLayout(layoutGraph, time);\n    });\n    time('  updateInputGraph', function () {\n      updateInputGraph(g, layoutGraph);\n    });\n  });\n}\n\nfunction runLayout(g, time) {\n  time('    makeSpaceForEdgeLabels', function () {\n    makeSpaceForEdgeLabels(g);\n  });\n  time('    removeSelfEdges', function () {\n    removeSelfEdges(g);\n  });\n  time('    acyclic', function () {\n    acyclic.run(g);\n  });\n  time('    nestingGraph.run', function () {\n    nestingGraph.run(g);\n  });\n  time('    rank', function () {\n    rank(util.asNonCompoundGraph(g));\n  });\n  time('    injectEdgeLabelProxies', function () {\n    injectEdgeLabelProxies(g);\n  });\n  time('    removeEmptyRanks', function () {\n    util.removeEmptyRanks(g);\n  });\n  time('    nestingGraph.cleanup', function () {\n    nestingGraph.cleanup(g);\n  });\n  time('    normalizeRanks', function () {\n    util.normalizeRanks(g);\n  });\n  time('    assignRankMinMax', function () {\n    assignRankMinMax(g);\n  });\n  time('    removeEdgeLabelProxies', function () {\n    removeEdgeLabelProxies(g);\n  });\n  time('    normalize.run', function () {\n    normalize.run(g);\n  });\n  time('    parentDummyChains', function () {\n    parentDummyChains(g);\n  });\n  time('    addBorderSegments', function () {\n    addBorderSegments(g);\n  });\n  time('    order', function () {\n    order(g);\n  });\n  time('    insertSelfEdges', function () {\n    insertSelfEdges(g);\n  });\n  time('    adjustCoordinateSystem', function () {\n    coordinateSystem.adjust(g);\n  });\n  time('    position', function () {\n    position(g);\n  });\n  time('    positionSelfEdges', function () {\n    positionSelfEdges(g);\n  });\n  time('    removeBorderNodes', function () {\n    removeBorderNodes(g);\n  });\n  time('    normalize.undo', function () {\n    normalize.undo(g);\n  });\n  time('    fixupEdgeLabelCoords', function () {\n    fixupEdgeLabelCoords(g);\n  });\n  time('    undoCoordinateSystem', function () {\n    coordinateSystem.undo(g);\n  });\n  time('    translateGraph', function () {\n    translateGraph(g);\n  });\n  time('    assignNodeIntersects', function () {\n    assignNodeIntersects(g);\n  });\n  time('    reversePoints', function () {\n    reversePointsForReversedEdges(g);\n  });\n  time('    acyclic.undo', function () {\n    acyclic.undo(g);\n  });\n}\n\n/*\n * Copies final layout information from the layout graph back to the input\n * graph. This process only copies whitelisted attributes from the layout graph\n * to the input graph, so it serves as a good place to determine what\n * attributes can influence layout.\n */\nfunction updateInputGraph(inputGraph, layoutGraph) {\n  _.forEach(inputGraph.nodes(), function (v) {\n    var inputLabel = inputGraph.node(v);\n    var layoutLabel = layoutGraph.node(v);\n\n    if (inputLabel) {\n      inputLabel.x = layoutLabel.x;\n      inputLabel.y = layoutLabel.y;\n\n      if (layoutGraph.children(v).length) {\n        inputLabel.width = layoutLabel.width;\n        inputLabel.height = layoutLabel.height;\n      }\n    }\n  });\n\n  _.forEach(inputGraph.edges(), function (e) {\n    var inputLabel = inputGraph.edge(e);\n    var layoutLabel = layoutGraph.edge(e);\n\n    inputLabel.points = layoutLabel.points;\n    if (_.has(layoutLabel, 'x')) {\n      inputLabel.x = layoutLabel.x;\n      inputLabel.y = layoutLabel.y;\n    }\n  });\n\n  inputGraph.graph().width = layoutGraph.graph().width;\n  inputGraph.graph().height = layoutGraph.graph().height;\n}\n\nvar graphNumAttrs = ['nodesep', 'edgesep', 'ranksep', 'marginx', 'marginy'];\nvar graphDefaults = { ranksep: 50, edgesep: 20, nodesep: 50, rankdir: 'tb' };\nvar graphAttrs = ['acyclicer', 'ranker', 'rankdir', 'align'];\nvar nodeNumAttrs = ['width', 'height'];\nvar nodeDefaults = { width: 0, height: 0 };\nvar edgeNumAttrs = ['minlen', 'weight', 'width', 'height', 'labeloffset'];\nvar edgeDefaults = {\n  minlen: 1,\n  weight: 1,\n  width: 0,\n  height: 0,\n  labeloffset: 10,\n  labelpos: 'r',\n};\nvar edgeAttrs = ['labelpos'];\n\n/*\n * Constructs a new graph from the input graph, which can be used for layout.\n * This process copies only whitelisted attributes from the input graph to the\n * layout graph. Thus this function serves as a good place to determine what\n * attributes can influence layout.\n */\nfunction buildLayoutGraph(inputGraph) {\n  var g = new Graph({ multigraph: true, compound: true });\n  var graph = canonicalize(inputGraph.graph());\n\n  g.setGraph(\n    _.merge({}, graphDefaults, selectNumberAttrs(graph, graphNumAttrs), _.pick(graph, graphAttrs))\n  );\n\n  _.forEach(inputGraph.nodes(), function (v) {\n    var node = canonicalize(inputGraph.node(v));\n    g.setNode(v, _.defaults(selectNumberAttrs(node, nodeNumAttrs), nodeDefaults));\n    g.setParent(v, inputGraph.parent(v));\n  });\n\n  _.forEach(inputGraph.edges(), function (e) {\n    var edge = canonicalize(inputGraph.edge(e));\n    g.setEdge(\n      e,\n      _.merge({}, edgeDefaults, selectNumberAttrs(edge, edgeNumAttrs), _.pick(edge, edgeAttrs))\n    );\n  });\n\n  return g;\n}\n\n/*\n * This idea comes from the Gansner paper: to account for edge labels in our\n * layout we split each rank in half by doubling minlen and halving ranksep.\n * Then we can place labels at these mid-points between nodes.\n *\n * We also add some minimal padding to the width to push the label for the edge\n * away from the edge itself a bit.\n */\nfunction makeSpaceForEdgeLabels(g) {\n  var graph = g.graph();\n  graph.ranksep /= 2;\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    edge.minlen *= 2;\n    if (edge.labelpos.toLowerCase() !== 'c') {\n      if (graph.rankdir === 'TB' || graph.rankdir === 'BT') {\n        edge.width += edge.labeloffset;\n      } else {\n        edge.height += edge.labeloffset;\n      }\n    }\n  });\n}\n\n/*\n * Creates temporary dummy nodes that capture the rank in which each edge's\n * label is going to, if it has one of non-zero width and height. We do this\n * so that we can safely remove empty ranks while preserving balance for the\n * label's position.\n */\nfunction injectEdgeLabelProxies(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (edge.width && edge.height) {\n      var v = g.node(e.v);\n      var w = g.node(e.w);\n      var label = { rank: (w.rank - v.rank) / 2 + v.rank, e: e };\n      util.addDummyNode(g, 'edge-proxy', label, '_ep');\n    }\n  });\n}\n\nfunction assignRankMinMax(g) {\n  var maxRank = 0;\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    if (node.borderTop) {\n      node.minRank = g.node(node.borderTop).rank;\n      node.maxRank = g.node(node.borderBottom).rank;\n      // @ts-expect-error\n      maxRank = _.max(maxRank, node.maxRank);\n    }\n  });\n  g.graph().maxRank = maxRank;\n}\n\nfunction removeEdgeLabelProxies(g) {\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    if (node.dummy === 'edge-proxy') {\n      g.edge(node.e).labelRank = node.rank;\n      g.removeNode(v);\n    }\n  });\n}\n\nfunction translateGraph(g) {\n  var minX = Number.POSITIVE_INFINITY;\n  var maxX = 0;\n  var minY = Number.POSITIVE_INFINITY;\n  var maxY = 0;\n  var graphLabel = g.graph();\n  var marginX = graphLabel.marginx || 0;\n  var marginY = graphLabel.marginy || 0;\n\n  function getExtremes(attrs) {\n    var x = attrs.x;\n    var y = attrs.y;\n    var w = attrs.width;\n    var h = attrs.height;\n    minX = Math.min(minX, x - w / 2);\n    maxX = Math.max(maxX, x + w / 2);\n    minY = Math.min(minY, y - h / 2);\n    maxY = Math.max(maxY, y + h / 2);\n  }\n\n  _.forEach(g.nodes(), function (v) {\n    getExtremes(g.node(v));\n  });\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (_.has(edge, 'x')) {\n      getExtremes(edge);\n    }\n  });\n\n  minX -= marginX;\n  minY -= marginY;\n\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    node.x -= minX;\n    node.y -= minY;\n  });\n\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    _.forEach(edge.points, function (p) {\n      p.x -= minX;\n      p.y -= minY;\n    });\n    if (_.has(edge, 'x')) {\n      edge.x -= minX;\n    }\n    if (_.has(edge, 'y')) {\n      edge.y -= minY;\n    }\n  });\n\n  graphLabel.width = maxX - minX + marginX;\n  graphLabel.height = maxY - minY + marginY;\n}\n\nfunction assignNodeIntersects(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    var nodeV = g.node(e.v);\n    var nodeW = g.node(e.w);\n    var p1, p2;\n    if (!edge.points) {\n      edge.points = [];\n      p1 = nodeW;\n      p2 = nodeV;\n    } else {\n      p1 = edge.points[0];\n      p2 = edge.points[edge.points.length - 1];\n    }\n    edge.points.unshift(util.intersectRect(nodeV, p1));\n    edge.points.push(util.intersectRect(nodeW, p2));\n  });\n}\n\nfunction fixupEdgeLabelCoords(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (_.has(edge, 'x')) {\n      if (edge.labelpos === 'l' || edge.labelpos === 'r') {\n        edge.width -= edge.labeloffset;\n      }\n      switch (edge.labelpos) {\n        case 'l':\n          edge.x -= edge.width / 2 + edge.labeloffset;\n          break;\n        case 'r':\n          edge.x += edge.width / 2 + edge.labeloffset;\n          break;\n      }\n    }\n  });\n}\n\nfunction reversePointsForReversedEdges(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (edge.reversed) {\n      edge.points.reverse();\n    }\n  });\n}\n\nfunction removeBorderNodes(g) {\n  _.forEach(g.nodes(), function (v) {\n    if (g.children(v).length) {\n      var node = g.node(v);\n      var t = g.node(node.borderTop);\n      var b = g.node(node.borderBottom);\n      var l = g.node(_.last(node.borderLeft));\n      var r = g.node(_.last(node.borderRight));\n\n      node.width = Math.abs(r.x - l.x);\n      node.height = Math.abs(b.y - t.y);\n      node.x = l.x + node.width / 2;\n      node.y = t.y + node.height / 2;\n    }\n  });\n\n  _.forEach(g.nodes(), function (v) {\n    if (g.node(v).dummy === 'border') {\n      g.removeNode(v);\n    }\n  });\n}\n\nfunction removeSelfEdges(g) {\n  _.forEach(g.edges(), function (e) {\n    if (e.v === e.w) {\n      var node = g.node(e.v);\n      if (!node.selfEdges) {\n        node.selfEdges = [];\n      }\n      node.selfEdges.push({ e: e, label: g.edge(e) });\n      g.removeEdge(e);\n    }\n  });\n}\n\nfunction insertSelfEdges(g) {\n  var layers = util.buildLayerMatrix(g);\n  _.forEach(layers, function (layer) {\n    var orderShift = 0;\n    _.forEach(layer, function (v, i) {\n      var node = g.node(v);\n      node.order = i + orderShift;\n      _.forEach(node.selfEdges, function (selfEdge) {\n        util.addDummyNode(\n          g,\n          'selfedge',\n          {\n            width: selfEdge.label.width,\n            height: selfEdge.label.height,\n            rank: node.rank,\n            order: i + ++orderShift,\n            e: selfEdge.e,\n            label: selfEdge.label,\n          },\n          '_se'\n        );\n      });\n      delete node.selfEdges;\n    });\n  });\n}\n\nfunction positionSelfEdges(g) {\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    if (node.dummy === 'selfedge') {\n      var selfNode = g.node(node.e.v);\n      var x = selfNode.x + selfNode.width / 2;\n      var y = selfNode.y;\n      var dx = node.x - x;\n      var dy = selfNode.height / 2;\n      g.setEdge(node.e, node.label);\n      g.removeNode(v);\n      node.label.points = [\n        { x: x + (2 * dx) / 3, y: y - dy },\n        { x: x + (5 * dx) / 6, y: y - dy },\n        { x: x + dx, y: y },\n        { x: x + (5 * dx) / 6, y: y + dy },\n        { x: x + (2 * dx) / 3, y: y + dy },\n      ];\n      node.label.x = node.x;\n      node.label.y = node.y;\n    }\n  });\n}\n\nfunction selectNumberAttrs(obj, attrs) {\n  return _.mapValues(_.pick(obj, attrs), Number);\n}\n\nfunction canonicalize(attrs) {\n  var newAttrs = {};\n  _.forEach(attrs, function (v, k) {\n    newAttrs[k.toLowerCase()] = v;\n  });\n  return newAttrs;\n}\n","import baseFlatten from './_baseFlatten.js';\nimport baseRest from './_baseRest.js';\nimport baseUniq from './_baseUniq.js';\nimport isArrayLikeObject from './isArrayLikeObject.js';\n\n/**\n * Creates an array of unique values, in order, from all given arrays using\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {...Array} [arrays] The arrays to inspect.\n * @returns {Array} Returns the new array of combined values.\n * @example\n *\n * _.union([2], [1, 2]);\n * // => [2, 1]\n */\nvar union = baseRest(function(arrays) {\n  return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));\n});\n\nexport default union;\n","import * as _ from 'lodash-es';\n\nvar DEFAULT_EDGE_NAME = '\\x00';\nvar GRAPH_NODE = '\\x00';\nvar EDGE_KEY_DELIM = '\\x01';\n\n// Implementation notes:\n//\n//  * Node id query functions should return string ids for the nodes\n//  * Edge id query functions should return an \"edgeObj\", edge object, that is\n//    composed of enough information to uniquely identify an edge: {v, w, name}.\n//  * Internally we use an \"edgeId\", a stringified form of the edgeObj, to\n//    reference edges. This is because we need a performant way to look these\n//    edges up and, object properties, which have string keys, are the closest\n//    we're going to get to a performant hashtable in JavaScript.\n\n// Implementation notes:\n//\n//  * Node id query functions should return string ids for the nodes\n//  * Edge id query functions should return an \"edgeObj\", edge object, that is\n//    composed of enough information to uniquely identify an edge: {v, w, name}.\n//  * Internally we use an \"edgeId\", a stringified form of the edgeObj, to\n//    reference edges. This is because we need a performant way to look these\n//    edges up and, object properties, which have string keys, are the closest\n//    we're going to get to a performant hashtable in JavaScript.\nexport class Graph {\n  constructor(opts = {}) {\n    this._isDirected = _.has(opts, 'directed') ? opts.directed : true;\n    this._isMultigraph = _.has(opts, 'multigraph') ? opts.multigraph : false;\n    this._isCompound = _.has(opts, 'compound') ? opts.compound : false;\n\n    // Label for the graph itself\n    this._label = undefined;\n\n    // Defaults to be set when creating a new node\n    this._defaultNodeLabelFn = _.constant(undefined);\n\n    // Defaults to be set when creating a new edge\n    this._defaultEdgeLabelFn = _.constant(undefined);\n\n    // v -> label\n    this._nodes = {};\n\n    if (this._isCompound) {\n      // v -> parent\n      this._parent = {};\n\n      // v -> children\n      this._children = {};\n      this._children[GRAPH_NODE] = {};\n    }\n\n    // v -> edgeObj\n    this._in = {};\n\n    // u -> v -> Number\n    this._preds = {};\n\n    // v -> edgeObj\n    this._out = {};\n\n    // v -> w -> Number\n    this._sucs = {};\n\n    // e -> edgeObj\n    this._edgeObjs = {};\n\n    // e -> label\n    this._edgeLabels = {};\n  }\n  /* === Graph functions ========= */\n  isDirected() {\n    return this._isDirected;\n  }\n  isMultigraph() {\n    return this._isMultigraph;\n  }\n  isCompound() {\n    return this._isCompound;\n  }\n  setGraph(label) {\n    this._label = label;\n    return this;\n  }\n  graph() {\n    return this._label;\n  }\n  /* === Node functions ========== */\n  setDefaultNodeLabel(newDefault) {\n    if (!_.isFunction(newDefault)) {\n      newDefault = _.constant(newDefault);\n    }\n    this._defaultNodeLabelFn = newDefault;\n    return this;\n  }\n  nodeCount() {\n    return this._nodeCount;\n  }\n  nodes() {\n    return _.keys(this._nodes);\n  }\n  sources() {\n    var self = this;\n    return _.filter(this.nodes(), function (v) {\n      return _.isEmpty(self._in[v]);\n    });\n  }\n  sinks() {\n    var self = this;\n    return _.filter(this.nodes(), function (v) {\n      return _.isEmpty(self._out[v]);\n    });\n  }\n  setNodes(vs, value) {\n    var args = arguments;\n    var self = this;\n    _.each(vs, function (v) {\n      if (args.length > 1) {\n        self.setNode(v, value);\n      } else {\n        self.setNode(v);\n      }\n    });\n    return this;\n  }\n  setNode(v, value) {\n    if (_.has(this._nodes, v)) {\n      if (arguments.length > 1) {\n        this._nodes[v] = value;\n      }\n      return this;\n    }\n\n    // @ts-expect-error\n    this._nodes[v] = arguments.length > 1 ? value : this._defaultNodeLabelFn(v);\n    if (this._isCompound) {\n      this._parent[v] = GRAPH_NODE;\n      this._children[v] = {};\n      this._children[GRAPH_NODE][v] = true;\n    }\n    this._in[v] = {};\n    this._preds[v] = {};\n    this._out[v] = {};\n    this._sucs[v] = {};\n    ++this._nodeCount;\n    return this;\n  }\n  node(v) {\n    return this._nodes[v];\n  }\n  hasNode(v) {\n    return _.has(this._nodes, v);\n  }\n  removeNode(v) {\n    var self = this;\n    if (_.has(this._nodes, v)) {\n      var removeEdge = function (e) {\n        self.removeEdge(self._edgeObjs[e]);\n      };\n      delete this._nodes[v];\n      if (this._isCompound) {\n        this._removeFromParentsChildList(v);\n        delete this._parent[v];\n        _.each(this.children(v), function (child) {\n          self.setParent(child);\n        });\n        delete this._children[v];\n      }\n      _.each(_.keys(this._in[v]), removeEdge);\n      delete this._in[v];\n      delete this._preds[v];\n      _.each(_.keys(this._out[v]), removeEdge);\n      delete this._out[v];\n      delete this._sucs[v];\n      --this._nodeCount;\n    }\n    return this;\n  }\n  setParent(v, parent) {\n    if (!this._isCompound) {\n      throw new Error('Cannot set parent in a non-compound graph');\n    }\n\n    if (_.isUndefined(parent)) {\n      parent = GRAPH_NODE;\n    } else {\n      // Coerce parent to string\n      parent += '';\n      for (var ancestor = parent; !_.isUndefined(ancestor); ancestor = this.parent(ancestor)) {\n        if (ancestor === v) {\n          throw new Error('Setting ' + parent + ' as parent of ' + v + ' would create a cycle');\n        }\n      }\n\n      this.setNode(parent);\n    }\n\n    this.setNode(v);\n    this._removeFromParentsChildList(v);\n    this._parent[v] = parent;\n    this._children[parent][v] = true;\n    return this;\n  }\n  _removeFromParentsChildList(v) {\n    delete this._children[this._parent[v]][v];\n  }\n  parent(v) {\n    if (this._isCompound) {\n      var parent = this._parent[v];\n      if (parent !== GRAPH_NODE) {\n        return parent;\n      }\n    }\n  }\n  children(v) {\n    if (_.isUndefined(v)) {\n      v = GRAPH_NODE;\n    }\n\n    if (this._isCompound) {\n      var children = this._children[v];\n      if (children) {\n        return _.keys(children);\n      }\n    } else if (v === GRAPH_NODE) {\n      return this.nodes();\n    } else if (this.hasNode(v)) {\n      return [];\n    }\n  }\n  predecessors(v) {\n    var predsV = this._preds[v];\n    if (predsV) {\n      return _.keys(predsV);\n    }\n  }\n  successors(v) {\n    var sucsV = this._sucs[v];\n    if (sucsV) {\n      return _.keys(sucsV);\n    }\n  }\n  neighbors(v) {\n    var preds = this.predecessors(v);\n    if (preds) {\n      return _.union(preds, this.successors(v));\n    }\n  }\n  isLeaf(v) {\n    var neighbors;\n    if (this.isDirected()) {\n      neighbors = this.successors(v);\n    } else {\n      neighbors = this.neighbors(v);\n    }\n    return neighbors.length === 0;\n  }\n  filterNodes(filter) {\n    // @ts-expect-error\n    var copy = new this.constructor({\n      directed: this._isDirected,\n      multigraph: this._isMultigraph,\n      compound: this._isCompound,\n    });\n\n    copy.setGraph(this.graph());\n\n    var self = this;\n    _.each(this._nodes, function (value, v) {\n      if (filter(v)) {\n        copy.setNode(v, value);\n      }\n    });\n\n    _.each(this._edgeObjs, function (e) {\n      // @ts-expect-error\n      if (copy.hasNode(e.v) && copy.hasNode(e.w)) {\n        copy.setEdge(e, self.edge(e));\n      }\n    });\n\n    var parents = {};\n    function findParent(v) {\n      var parent = self.parent(v);\n      if (parent === undefined || copy.hasNode(parent)) {\n        parents[v] = parent;\n        return parent;\n      } else if (parent in parents) {\n        return parents[parent];\n      } else {\n        return findParent(parent);\n      }\n    }\n\n    if (this._isCompound) {\n      _.each(copy.nodes(), function (v) {\n        copy.setParent(v, findParent(v));\n      });\n    }\n\n    return copy;\n  }\n  /* === Edge functions ========== */\n  setDefaultEdgeLabel(newDefault) {\n    if (!_.isFunction(newDefault)) {\n      newDefault = _.constant(newDefault);\n    }\n    this._defaultEdgeLabelFn = newDefault;\n    return this;\n  }\n  edgeCount() {\n    return this._edgeCount;\n  }\n  edges() {\n    return _.values(this._edgeObjs);\n  }\n  setPath(vs, value) {\n    var self = this;\n    var args = arguments;\n    _.reduce(vs, function (v, w) {\n      if (args.length > 1) {\n        self.setEdge(v, w, value);\n      } else {\n        self.setEdge(v, w);\n      }\n      return w;\n    });\n    return this;\n  }\n  /*\n   * setEdge(v, w, [value, [name]])\n   * setEdge({ v, w, [name] }, [value])\n   */\n  setEdge() {\n    var v, w, name, value;\n    var valueSpecified = false;\n    var arg0 = arguments[0];\n\n    if (typeof arg0 === 'object' && arg0 !== null && 'v' in arg0) {\n      v = arg0.v;\n      w = arg0.w;\n      name = arg0.name;\n      if (arguments.length === 2) {\n        value = arguments[1];\n        valueSpecified = true;\n      }\n    } else {\n      v = arg0;\n      w = arguments[1];\n      name = arguments[3];\n      if (arguments.length > 2) {\n        value = arguments[2];\n        valueSpecified = true;\n      }\n    }\n\n    v = '' + v;\n    w = '' + w;\n    if (!_.isUndefined(name)) {\n      name = '' + name;\n    }\n\n    var e = edgeArgsToId(this._isDirected, v, w, name);\n    if (_.has(this._edgeLabels, e)) {\n      if (valueSpecified) {\n        this._edgeLabels[e] = value;\n      }\n      return this;\n    }\n\n    if (!_.isUndefined(name) && !this._isMultigraph) {\n      throw new Error('Cannot set a named edge when isMultigraph = false');\n    }\n\n    // It didn't exist, so we need to create it.\n    // First ensure the nodes exist.\n    this.setNode(v);\n    this.setNode(w);\n\n    // @ts-expect-error\n    this._edgeLabels[e] = valueSpecified ? value : this._defaultEdgeLabelFn(v, w, name);\n\n    var edgeObj = edgeArgsToObj(this._isDirected, v, w, name);\n    // Ensure we add undirected edges in a consistent way.\n    v = edgeObj.v;\n    w = edgeObj.w;\n\n    Object.freeze(edgeObj);\n    this._edgeObjs[e] = edgeObj;\n    incrementOrInitEntry(this._preds[w], v);\n    incrementOrInitEntry(this._sucs[v], w);\n    this._in[w][e] = edgeObj;\n    this._out[v][e] = edgeObj;\n    this._edgeCount++;\n    return this;\n  }\n  edge(v, w, name) {\n    var e =\n      arguments.length === 1\n        ? edgeObjToId(this._isDirected, arguments[0])\n        : edgeArgsToId(this._isDirected, v, w, name);\n    return this._edgeLabels[e];\n  }\n  hasEdge(v, w, name) {\n    var e =\n      arguments.length === 1\n        ? edgeObjToId(this._isDirected, arguments[0])\n        : edgeArgsToId(this._isDirected, v, w, name);\n    return _.has(this._edgeLabels, e);\n  }\n  removeEdge(v, w, name) {\n    var e =\n      arguments.length === 1\n        ? edgeObjToId(this._isDirected, arguments[0])\n        : edgeArgsToId(this._isDirected, v, w, name);\n    var edge = this._edgeObjs[e];\n    if (edge) {\n      v = edge.v;\n      w = edge.w;\n      delete this._edgeLabels[e];\n      delete this._edgeObjs[e];\n      decrementOrRemoveEntry(this._preds[w], v);\n      decrementOrRemoveEntry(this._sucs[v], w);\n      delete this._in[w][e];\n      delete this._out[v][e];\n      this._edgeCount--;\n    }\n    return this;\n  }\n  inEdges(v, u) {\n    var inV = this._in[v];\n    if (inV) {\n      var edges = _.values(inV);\n      if (!u) {\n        return edges;\n      }\n      return _.filter(edges, function (edge) {\n        return edge.v === u;\n      });\n    }\n  }\n  outEdges(v, w) {\n    var outV = this._out[v];\n    if (outV) {\n      var edges = _.values(outV);\n      if (!w) {\n        return edges;\n      }\n      return _.filter(edges, function (edge) {\n        return edge.w === w;\n      });\n    }\n  }\n  nodeEdges(v, w) {\n    var inEdges = this.inEdges(v, w);\n    if (inEdges) {\n      return inEdges.concat(this.outEdges(v, w));\n    }\n  }\n}\n\n/* Number of nodes in the graph. Should only be changed by the implementation. */\nGraph.prototype._nodeCount = 0;\n\n/* Number of edges in the graph. Should only be changed by the implementation. */\nGraph.prototype._edgeCount = 0;\n\nfunction incrementOrInitEntry(map, k) {\n  if (map[k]) {\n    map[k]++;\n  } else {\n    map[k] = 1;\n  }\n}\n\nfunction decrementOrRemoveEntry(map, k) {\n  if (!--map[k]) {\n    delete map[k];\n  }\n}\n\nfunction edgeArgsToId(isDirected, v_, w_, name) {\n  var v = '' + v_;\n  var w = '' + w_;\n  if (!isDirected && v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n  return v + EDGE_KEY_DELIM + w + EDGE_KEY_DELIM + (_.isUndefined(name) ? DEFAULT_EDGE_NAME : name);\n}\n\nfunction edgeArgsToObj(isDirected, v_, w_, name) {\n  var v = '' + v_;\n  var w = '' + w_;\n  if (!isDirected && v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n  var edgeObj = { v: v, w: w };\n  if (name) {\n    edgeObj.name = name;\n  }\n  return edgeObj;\n}\n\nfunction edgeObjToId(isDirected, edgeObj) {\n  return edgeArgsToId(isDirected, edgeObj.v, edgeObj.w, edgeObj.name);\n}\n","import isSymbol from './isSymbol.js';\n\n/**\n * The base implementation of methods like `_.max` and `_.min` which accepts a\n * `comparator` to determine the extremum value.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The iteratee invoked per iteration.\n * @param {Function} comparator The comparator used to compare values.\n * @returns {*} Returns the extremum value.\n */\nfunction baseExtremum(array, iteratee, comparator) {\n  var index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    var value = array[index],\n        current = iteratee(value);\n\n    if (current != null && (computed === undefined\n          ? (current === current && !isSymbol(current))\n          : comparator(current, computed)\n        )) {\n      var computed = current,\n          result = value;\n    }\n  }\n  return result;\n}\n\nexport default baseExtremum;\n","/**\n * The base implementation of `_.lt` which doesn't coerce arguments.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if `value` is less than `other`,\n *  else `false`.\n */\nfunction baseLt(value, other) {\n  return value < other;\n}\n\nexport default baseLt;\n","import baseEach from './_baseEach.js';\nimport isArrayLike from './isArrayLike.js';\n\n/**\n * The base implementation of `_.map` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction baseMap(collection, iteratee) {\n  var index = -1,\n      result = isArrayLike(collection) ? Array(collection.length) : [];\n\n  baseEach(collection, function(value, key, collection) {\n    result[++index] = iteratee(value, key, collection);\n  });\n  return result;\n}\n\nexport default baseMap;\n","import assignValue from './_assignValue.js';\nimport castPath from './_castPath.js';\nimport isIndex from './_isIndex.js';\nimport isObject from './isObject.js';\nimport toKey from './_toKey.js';\n\n/**\n * The base implementation of `_.set`.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to set.\n * @param {*} value The value to set.\n * @param {Function} [customizer] The function to customize path creation.\n * @returns {Object} Returns `object`.\n */\nfunction baseSet(object, path, value, customizer) {\n  if (!isObject(object)) {\n    return object;\n  }\n  path = castPath(path, object);\n\n  var index = -1,\n      length = path.length,\n      lastIndex = length - 1,\n      nested = object;\n\n  while (nested != null && ++index < length) {\n    var key = toKey(path[index]),\n        newValue = value;\n\n    if (key === '__proto__' || key === 'constructor' || key === 'prototype') {\n      return object;\n    }\n\n    if (index != lastIndex) {\n      var objValue = nested[key];\n      newValue = customizer ? customizer(objValue, key, nested) : undefined;\n      if (newValue === undefined) {\n        newValue = isObject(objValue)\n          ? objValue\n          : (isIndex(path[index + 1]) ? [] : {});\n      }\n    }\n    assignValue(nested, key, newValue);\n    nested = nested[key];\n  }\n  return object;\n}\n\nexport default baseSet;\n","import baseGet from './_baseGet.js';\nimport baseSet from './_baseSet.js';\nimport castPath from './_castPath.js';\n\n/**\n * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The source object.\n * @param {string[]} paths The property paths to pick.\n * @param {Function} predicate The function invoked per property.\n * @returns {Object} Returns the new object.\n */\nfunction basePickBy(object, paths, predicate) {\n  var index = -1,\n      length = paths.length,\n      result = {};\n\n  while (++index < length) {\n    var path = paths[index],\n        value = baseGet(object, path);\n\n    if (predicate(value, path)) {\n      baseSet(result, castPath(path, object), value);\n    }\n  }\n  return result;\n}\n\nexport default basePickBy;\n","import baseRest from './_baseRest.js';\nimport eq from './eq.js';\nimport isIterateeCall from './_isIterateeCall.js';\nimport keysIn from './keysIn.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns own and inherited enumerable string keyed properties of source\n * objects to the destination object for all destination properties that\n * resolve to `undefined`. Source objects are applied from left to right.\n * Once a property is set, additional values of the same property are ignored.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @see _.defaultsDeep\n * @example\n *\n * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n * // => { 'a': 1, 'b': 2 }\n */\nvar defaults = baseRest(function(object, sources) {\n  object = Object(object);\n\n  var index = -1;\n  var length = sources.length;\n  var guard = length > 2 ? sources[2] : undefined;\n\n  if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n    length = 1;\n  }\n\n  while (++index < length) {\n    var source = sources[index];\n    var props = keysIn(source);\n    var propsIndex = -1;\n    var propsLength = props.length;\n\n    while (++propsIndex < propsLength) {\n      var key = props[propsIndex];\n      var value = object[key];\n\n      if (value === undefined ||\n          (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n        object[key] = source[key];\n      }\n    }\n  }\n\n  return object;\n});\n\nexport default defaults;\n","import baseIteratee from './_baseIteratee.js';\nimport isArrayLike from './isArrayLike.js';\nimport keys from './keys.js';\n\n/**\n * Creates a `_.find` or `_.findLast` function.\n *\n * @private\n * @param {Function} findIndexFunc The function to find the collection index.\n * @returns {Function} Returns the new find function.\n */\nfunction createFind(findIndexFunc) {\n  return function(collection, predicate, fromIndex) {\n    var iterable = Object(collection);\n    if (!isArrayLike(collection)) {\n      var iteratee = baseIteratee(predicate, 3);\n      collection = keys(collection);\n      predicate = function(key) { return iteratee(iterable[key], key, iterable); };\n    }\n    var index = findIndexFunc(collection, predicate, fromIndex);\n    return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;\n  };\n}\n\nexport default createFind;\n","import baseFindIndex from './_baseFindIndex.js';\nimport baseIteratee from './_baseIteratee.js';\nimport toInteger from './toInteger.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * This method is like `_.find` except that it returns the index of the first\n * element `predicate` returns truthy for instead of the element itself.\n *\n * @static\n * @memberOf _\n * @since 1.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {number} Returns the index of the found element, else `-1`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'active': false },\n *   { 'user': 'fred',    'active': false },\n *   { 'user': 'pebbles', 'active': true }\n * ];\n *\n * _.findIndex(users, function(o) { return o.user == 'barney'; });\n * // => 0\n *\n * // The `_.matches` iteratee shorthand.\n * _.findIndex(users, { 'user': 'fred', 'active': false });\n * // => 1\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.findIndex(users, ['active', false]);\n * // => 0\n *\n * // The `_.property` iteratee shorthand.\n * _.findIndex(users, 'active');\n * // => 2\n */\nfunction findIndex(array, predicate, fromIndex) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return -1;\n  }\n  var index = fromIndex == null ? 0 : toInteger(fromIndex);\n  if (index < 0) {\n    index = nativeMax(length + index, 0);\n  }\n  return baseFindIndex(array, baseIteratee(predicate, 3), index);\n}\n\nexport default findIndex;\n","import createFind from './_createFind.js';\nimport findIndex from './findIndex.js';\n\n/**\n * Iterates over elements of `collection`, returning the first element\n * `predicate` returns truthy for. The predicate is invoked with three\n * arguments: (value, index|key, collection).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to inspect.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {*} Returns the matched element, else `undefined`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'age': 36, 'active': true },\n *   { 'user': 'fred',    'age': 40, 'active': false },\n *   { 'user': 'pebbles', 'age': 1,  'active': true }\n * ];\n *\n * _.find(users, function(o) { return o.age < 40; });\n * // => object for 'barney'\n *\n * // The `_.matches` iteratee shorthand.\n * _.find(users, { 'age': 1, 'active': true });\n * // => object for 'pebbles'\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.find(users, ['active', false]);\n * // => object for 'fred'\n *\n * // The `_.property` iteratee shorthand.\n * _.find(users, 'active');\n * // => object for 'barney'\n */\nvar find = createFind(findIndex);\n\nexport default find;\n","import baseFlatten from './_baseFlatten.js';\n\n/**\n * Flattens `array` a single level deep.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to flatten.\n * @returns {Array} Returns the new flattened array.\n * @example\n *\n * _.flatten([1, [2, [3, [4]], 5]]);\n * // => [1, 2, [3, [4]], 5]\n */\nfunction flatten(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? baseFlatten(array, 1) : [];\n}\n\nexport default flatten;\n","import baseGetTag from './_baseGetTag.js';\nimport isArray from './isArray.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar stringTag = '[object String]';\n\n/**\n * Checks if `value` is classified as a `String` primitive or object.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a string, else `false`.\n * @example\n *\n * _.isString('abc');\n * // => true\n *\n * _.isString(1);\n * // => false\n */\nfunction isString(value) {\n  return typeof value == 'string' ||\n    (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);\n}\n\nexport default isString;\n","/**\n * Gets the last element of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to query.\n * @returns {*} Returns the last element of `array`.\n * @example\n *\n * _.last([1, 2, 3]);\n * // => 3\n */\nfunction last(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? array[length - 1] : undefined;\n}\n\nexport default last;\n","import arrayMap from './_arrayMap.js';\nimport baseIteratee from './_baseIteratee.js';\nimport baseMap from './_baseMap.js';\nimport isArray from './isArray.js';\n\n/**\n * Creates an array of values by running each element in `collection` thru\n * `iteratee`. The iteratee is invoked with three arguments:\n * (value, index|key, collection).\n *\n * Many lodash methods are guarded to work as iteratees for methods like\n * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n *\n * The guarded methods are:\n * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n * `template`, `trim`, `trimEnd`, `trimStart`, and `words`\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n * @example\n *\n * function square(n) {\n *   return n * n;\n * }\n *\n * _.map([4, 8], square);\n * // => [16, 64]\n *\n * _.map({ 'a': 4, 'b': 8 }, square);\n * // => [16, 64] (iteration order is not guaranteed)\n *\n * var users = [\n *   { 'user': 'barney' },\n *   { 'user': 'fred' }\n * ];\n *\n * // The `_.property` iteratee shorthand.\n * _.map(users, 'user');\n * // => ['barney', 'fred']\n */\nfunction map(collection, iteratee) {\n  var func = isArray(collection) ? arrayMap : baseMap;\n  return func(collection, baseIteratee(iteratee, 3));\n}\n\nexport default map;\n","import baseExtremum from './_baseExtremum.js';\nimport baseLt from './_baseLt.js';\nimport identity from './identity.js';\n\n/**\n * Computes the minimum value of `array`. If `array` is empty or falsey,\n * `undefined` is returned.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {*} Returns the minimum value.\n * @example\n *\n * _.min([4, 2, 8, 6]);\n * // => 2\n *\n * _.min([]);\n * // => undefined\n */\nfunction min(array) {\n  return (array && array.length)\n    ? baseExtremum(array, identity, baseLt)\n    : undefined;\n}\n\nexport default min;\n","/** Used to match a single whitespace character. */\nvar reWhitespace = /\\s/;\n\n/**\n * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace\n * character of `string`.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {number} Returns the index of the last non-whitespace character.\n */\nfunction trimmedEndIndex(string) {\n  var index = string.length;\n\n  while (index-- && reWhitespace.test(string.charAt(index))) {}\n  return index;\n}\n\nexport default trimmedEndIndex;\n","import trimmedEndIndex from './_trimmedEndIndex.js';\n\n/** Used to match leading whitespace. */\nvar reTrimStart = /^\\s+/;\n\n/**\n * The base implementation of `_.trim`.\n *\n * @private\n * @param {string} string The string to trim.\n * @returns {string} Returns the trimmed string.\n */\nfunction baseTrim(string) {\n  return string\n    ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')\n    : string;\n}\n\nexport default baseTrim;\n","import baseTrim from './_baseTrim.js';\nimport isObject from './isObject.js';\nimport isSymbol from './isSymbol.js';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = baseTrim(value);\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nexport default toNumber;\n","import toNumber from './toNumber.js';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_INTEGER = 1.7976931348623157e+308;\n\n/**\n * Converts `value` to a finite number.\n *\n * @static\n * @memberOf _\n * @since 4.12.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted number.\n * @example\n *\n * _.toFinite(3.2);\n * // => 3.2\n *\n * _.toFinite(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toFinite(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toFinite('3.2');\n * // => 3.2\n */\nfunction toFinite(value) {\n  if (!value) {\n    return value === 0 ? value : 0;\n  }\n  value = toNumber(value);\n  if (value === INFINITY || value === -INFINITY) {\n    var sign = (value < 0 ? -1 : 1);\n    return sign * MAX_INTEGER;\n  }\n  return value === value ? value : 0;\n}\n\nexport default toFinite;\n","import toFinite from './toFinite.js';\n\n/**\n * Converts `value` to an integer.\n *\n * **Note:** This method is loosely based on\n * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toInteger(3.2);\n * // => 3\n *\n * _.toInteger(Number.MIN_VALUE);\n * // => 0\n *\n * _.toInteger(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toInteger('3.2');\n * // => 3\n */\nfunction toInteger(value) {\n  var result = toFinite(value),\n      remainder = result % 1;\n\n  return result === result ? (remainder ? result - remainder : result) : 0;\n}\n\nexport default toInteger;\n"],"names":["idCounter","prefix","id","toString","nativeCeil","Math","ceil","nativeMax","max","start","end","step","fromRight","index","length","result","Array","isIterateeCall","undefined","toFinite","baseRange","createRange","List","constructor","sentinel","_next","_prev","this","_sentinel","dequeue","entry","unlink","enqueue","strs","curr","push","JSON","stringify","filterOutLinks","join","k","v","DEFAULT_WEIGHT_FN","_","greedyFAS","g","weightFn","nodeCount","state","fasGraph","Graph","maxIn","maxOut","nodes","setNode","in","out","edges","e","prevWeight","edge","w","weight","edgeWeight","setEdge","node","buckets","map","zeroIdx","assignBucket","graph","buildState","results","sources","sinks","removeNode","i","concat","doGreedyFAS","outEdges","collectPredecessors","inEdges","uEntry","wEntry","run","fas","acyclicer","stack","visited","dfs","dfsFAS","label","removeEdge","forwardName","name","reversed","object","paths","basePickBy","value","path","hasIn","func","setToString","overRest","flatten","flatRest","basePick","other","array","baseExtremum","identity","baseGt","iteratee","baseIteratee","baseForOwn","key","baseAssignValue","root","Date","now","addDummyNode","type","attrs","hasNode","dummy","asNonCompoundGraph","simplified","multigraph","isMultigraph","setGraph","children","intersectRect","rect","point","sx","sy","x","y","dx","dy","width","h","height","Error","abs","buildLayerMatrix","layering","maxRank","rank","order","addBorderNode","arguments","time","fn","console","log","notime","prop","sg","sgNode","borderType","prev","util","setParent","undo","rankDir","rankdir","toLowerCase","reverseYOne","points","reverseY","swapXYOne","swapXY","swapWidthHeight","swapWidthHeightOne","dummyChains","vRank","wRank","edgeLabel","labelRank","edgeObj","labelpos","normalizeEdge","baseLt","longestPath","minlen","Number","POSITIVE_INFINITY","slack","feasibleTree","delta","t","directed","size","tightTree","findMinSlackEdge","shiftRanks","nodeEdges","edgeV","baseProperty","RegExp","rsAstralRange","rsAstral","rsCombo","rsFitz","rsNonAstral","rsRegional","rsSurrPair","reOptMod","rsOptVar","rsSeq","rsSymbol","CycleException","prototype","vs","navigation","isDirected","successors","neighbors","bind","acc","doDfs","postorder","networkSimplex","simpleLabel","simplify","initLowLimValues","initCutValues","leaveEdge","exchangeEdges","enterEdge","alg","slice","child","childLab","parent","cutvalue","calcCutValue","assignCutValue","childIsTail","graphEdge","cutValue","u","isOutEdge","pointsToHead","otherWeight","hasEdge","otherCutValue","tree","dfsAssignLowLim","nextLim","low","lim","vLabel","wLabel","tailLabel","flip","candidates","isDescendant","f","flipped","updateRanks","rootLabel","ranker","networkSimplexRanker","tightTreeRanker","longestPathRanker","depths","depth","treeDepths","nodeSep","nestingRoot","sumWeights","nodeRankFactor","top","bottom","borderTop","borderBottom","childNode","childTop","childBottom","thisWeight","nestingEdge","baseClone","CLONE_DEEP_FLAG","buildLayerGraph","relationship","createRootNode","compound","setDefaultNodeLabel","minRank","borderLeft","borderRight","props","values","assignFunc","valsLength","baseZipObject","assignValue","comparer","sort","valIsDefined","valIsNull","valIsReflexive","valIsSymbol","isSymbol","othIsDefined","othIsNull","othIsReflexive","othIsSymbol","orders","objCriteria","criteria","othCriteria","ordersLength","compareAscending","collection","iteratees","arrayMap","isArray","baseGet","baseUnary","baseMap","baseSortBy","compareMultiple","baseRest","baseOrderBy","baseFlatten","crossCount","cc","twoLayerCrossCount","northLayer","southLayer","southPos","southEntries","pos","firstIndex","treeSize","forEach","weightSum","resolveConflicts","entries","cg","mappedEntries","tmp","indegree","barycenter","entryV","entryW","sourceSet","handleIn","vEntry","merged","target","source","sum","min","mergeEntries","handleOut","pop","reverse","doResolveConflicts","biasRight","bias","parts","lhs","rhs","sortable","unsortable","vsIndex","consumeUnsortable","last","sortSubgraph","movable","bl","br","subgraphs","barycenters","inV","nodeU","subgraphResult","expandSubgraphs","predecessors","blPred","brPred","downLayerGraphs","buildLayerGraphs","upLayerGraphs","simpleNodes","layers","orderedVs","initOrder","assignOrder","best","bestCC","lastBest","sweepLayerGraphs","ranks","layerGraphs","lg","sorted","rootPrev","prevChild","addSubgraphConstraints","layer","parentDummyChains","postorderNums","pathData","lca","vPath","wPath","findPath","pathIdx","pathV","ascending","castFunction","baseFor","keysIn","findType1Conflicts","conflicts","prevLayer","k0","scanPos","prevLayerLength","lastNode","findOtherInnerSegmentNode","k1","scanNode","uLabel","uPos","addConflict","conflictsV","hasConflict","horizontalCompaction","align","reverseSep","xs","blockG","blockGraph","graphLabel","sepFn","edgeSep","sep","nodesep","edgesep","vRoot","uRoot","prevMax","buildBlockGraph","iterate","setXsFunc","nextNodesFunc","elem","reduce","positionX","adjustedLayering","scan","south","southEnd","prevNorthBorder","nextNorthBorder","uNode","north","nextNorthPos","prevNorthPos","southLookahead","findType2Conflicts","xss","vert","horiz","inner","neighborFn","prevIdx","ws","mp","floor","il","verticalAlignment","smallestWidth","NEGATIVE_INFINITY","halfWidth","findSmallestWidthAlignment","alignTo","alignToVals","alignToMin","alignToMax","alignment","xsVals","alignCoordinates","ul","ignore","balance","position","rankSep","ranksep","prevY","maxHeight","positionY","layout","opts","debugTiming","layoutGraph","inputGraph","canonicalize","graphDefaults","selectNumberAttrs","graphNumAttrs","graphAttrs","nodeNumAttrs","nodeDefaults","edgeDefaults","edgeNumAttrs","edgeAttrs","buildLayoutGraph","labeloffset","makeSpaceForEdgeLabels","selfEdges","removeSelfEdges","acyclic","nestingGraph","injectEdgeLabelProxies","offset","assignRankMinMax","removeEdgeLabelProxies","normalize","addBorderSegments","orderShift","selfEdge","insertSelfEdges","coordinateSystem","selfNode","positionSelfEdges","b","l","r","removeBorderNodes","origLabel","fixupEdgeLabelCoords","minX","maxX","minY","maxY","marginX","marginx","marginY","marginy","getExtremes","p","translateGraph","p1","p2","nodeV","nodeW","unshift","assignNodeIntersects","reversePointsForReversedEdges","runLayout","inputLabel","layoutLabel","updateInputGraph","obj","newAttrs","arrays","baseUniq","isArrayLikeObject","DEFAULT_EDGE_NAME","GRAPH_NODE","EDGE_KEY_DELIM","_isDirected","_isMultigraph","_isCompound","_label","_defaultNodeLabelFn","_defaultEdgeLabelFn","_nodes","_parent","_children","_in","_preds","_out","_sucs","_edgeObjs","_edgeLabels","isCompound","newDefault","_nodeCount","self","setNodes","args","_removeFromParentsChildList","ancestor","predsV","sucsV","preds","isLeaf","filterNodes","filter","copy","parents","findParent","setDefaultEdgeLabel","edgeCount","_edgeCount","setPath","valueSpecified","arg0","edgeArgsToId","v_","w_","edgeArgsToObj","Object","freeze","incrementOrInitEntry","edgeObjToId","decrementOrRemoveEntry","outV","comparator","current","computed","isArrayLike","baseEach","customizer","isObject","castPath","lastIndex","nested","toKey","newValue","objValue","isIndex","predicate","baseSet","objectProto","hasOwnProperty","guard","propsIndex","propsLength","eq","call","findIndexFunc","fromIndex","iterable","keys","createFind","toInteger","baseFindIndex","isObjectLike","baseGetTag","reWhitespace","string","test","charAt","reTrimStart","trimmedEndIndex","replace","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","parseInt","valueOf","baseTrim","isBinary","INFINITY","toNumber","remainder"],"sourceRoot":""}